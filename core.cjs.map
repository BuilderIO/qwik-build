{"version":3,"file":"core.cjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/testing/html.js","../../../dist-dev/tsc-out/packages/qwik/src/core/assert/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/host.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/operations.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/virtual-element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-watch.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/q-object.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-ref.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js"],"sourcesContent":["// minification can replace the `globalThis.qDev` with `false`\n// which will remove all dev code within from the build\nexport const qDev = globalThis.qDev === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOERBQThEO0FBQzlELHVEQUF1RDtBQUN2RCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUksVUFBa0IsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBSSxVQUFrQixDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUM7QUFDbkUsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUksVUFBa0IsQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLLENBQUM7QUFDL0UsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFJLFVBQWtCLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztBQUV4RCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUMvQixJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbEI7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtaW5pZmljYXRpb24gY2FuIHJlcGxhY2UgdGhlIGBnbG9iYWxUaGlzLnFEZXZgIHdpdGggYGZhbHNlYFxuLy8gd2hpY2ggd2lsbCByZW1vdmUgYWxsIGRldiBjb2RlIHdpdGhpbiBmcm9tIHRoZSBidWlsZFxuZXhwb3J0IGNvbnN0IHFEZXYgPSAoZ2xvYmFsVGhpcyBhcyBhbnkpLnFEZXYgPT09IHRydWU7XG5leHBvcnQgY29uc3QgcVNlcmlhbGl6ZSA9IChnbG9iYWxUaGlzIGFzIGFueSkucVNlcmlhbGl6ZSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcUR5bmFtaWNQbGF0Zm9ybSA9IChnbG9iYWxUaGlzIGFzIGFueSkucUR5bmFtaWNQbGF0Zm9ybSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSAoZ2xvYmFsVGhpcyBhcyBhbnkpLnFUZXN0ID09PSB0cnVlO1xuXG5leHBvcnQgY29uc3Qgc2VhbCA9IChvYmo6IGFueSkgPT4ge1xuICBpZiAocURldikge1xuICAgIE9iamVjdC5zZWFsKG9iaik7XG4gIH1cbn07XG4iXX0=","import { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n    Error.stackTraceLimit = 9999;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRTVCLElBQUksSUFBSSxFQUFFO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA5OTk5O1xufVxuIl19","export function isTemplate(node) {\n    const tagName = (node && node.tagName) || '';\n    return tagName.toUpperCase() == 'TEMPLATE';\n}\nexport function prettyHtml(element, prefix = '') {\n    const lines = [];\n    lines.push(prefix, '<', element.localName);\n    const attrs = element.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n        const attr = attrs[i];\n        lines.push('\\n', prefix, '    ', attr.name, '=\"', attr.value, '\"');\n    }\n    lines.push('>');\n    let child = isTemplate(element) ? element.content.firstChild : element.firstChild;\n    while (child) {\n        if (isElement(child)) {\n            lines.push('\\n', prettyHtml(child, prefix + '  '));\n        }\n        else {\n            lines.push('\\n', prefix, child.textContent);\n        }\n        child = child.nextSibling;\n    }\n    lines.push('\\n', prefix, '</', element.localName, '>');\n    return lines.join('');\n}\nexport function isElement(value) {\n    return isNode(value) && value.nodeType === 1;\n}\nexport function isNode(value) {\n    return value && typeof value.nodeType === 'number';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvdGVzdGluZy9odG1sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBNkI7SUFDdEQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUssSUFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUQsT0FBTyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksVUFBVSxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQW9CLEVBQUUsU0FBaUIsRUFBRTtJQUNsRSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDcEU7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEYsT0FBTyxLQUFLLEVBQUU7UUFDWixJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7S0FDM0I7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQVU7SUFDbEMsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsS0FBVTtJQUMvQixPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNUZW1wbGF0ZShub2RlOiBOb2RlIHwgbnVsbCB8IHVuZGVmaW5lZCk6IG5vZGUgaXMgSFRNTFRlbXBsYXRlRWxlbWVudCB7XG4gIGNvbnN0IHRhZ05hbWUgPSAobm9kZSAmJiAobm9kZSBhcyBFbGVtZW50KS50YWdOYW1lKSB8fCAnJztcbiAgcmV0dXJuIHRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSAnVEVNUExBVEUnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldHR5SHRtbChlbGVtZW50OiBIVE1MRWxlbWVudCwgcHJlZml4OiBzdHJpbmcgPSAnJyk6IGFueSB7XG4gIGNvbnN0IGxpbmVzID0gW107XG4gIGxpbmVzLnB1c2gocHJlZml4LCAnPCcsIGVsZW1lbnQubG9jYWxOYW1lKTtcbiAgY29uc3QgYXR0cnMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhdHRyID0gYXR0cnNbaV07XG4gICAgbGluZXMucHVzaCgnXFxuJywgcHJlZml4LCAnICAgICcsIGF0dHIubmFtZSwgJz1cIicsIGF0dHIudmFsdWUsICdcIicpO1xuICB9XG4gIGxpbmVzLnB1c2goJz4nKTtcbiAgbGV0IGNoaWxkID0gaXNUZW1wbGF0ZShlbGVtZW50KSA/IGVsZW1lbnQuY29udGVudC5maXJzdENoaWxkIDogZWxlbWVudC5maXJzdENoaWxkO1xuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoaXNFbGVtZW50KGNoaWxkKSkge1xuICAgICAgbGluZXMucHVzaCgnXFxuJywgcHJldHR5SHRtbChjaGlsZCwgcHJlZml4ICsgJyAgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lcy5wdXNoKCdcXG4nLCBwcmVmaXgsIGNoaWxkLnRleHRDb250ZW50KTtcbiAgICB9XG4gICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgfVxuICBsaW5lcy5wdXNoKCdcXG4nLCBwcmVmaXgsICc8LycsIGVsZW1lbnQubG9jYWxOYW1lLCAnPicpO1xuICByZXR1cm4gbGluZXMuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEhUTUxFbGVtZW50IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09PSAnbnVtYmVyJztcbn1cbiJdfQ==","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Fzc2VydC9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxhQUFhLENBQzNCLEtBQVEsRUFDUixJQUFZLEVBQ1osR0FBRyxLQUFZO0lBRWYsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLEtBQUssSUFBSSxJQUFJO1lBQUUsT0FBTztRQUMxQixNQUFNLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUN6QixNQUFXLEVBQ1gsTUFBVyxFQUNYLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRTtRQUNSLElBQUksTUFBTSxLQUFLLE1BQU07WUFBRSxPQUFPO1FBQzlCLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDbkUsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLE1BQU0sS0FBSyxJQUFJO1lBQUUsT0FBTztRQUM1QixNQUFNLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dFcnJvckFuZFN0b3AgfSBmcm9tICcuLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydERlZmluZWQ8VD4oXG4gIHZhbHVlOiBULFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZSBpcyBOb25OdWxsYWJsZTxUPiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFcXVhbChcbiAgdmFsdWUxOiBhbnksXG4gIHZhbHVlMjogYW55LFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZTEgaXMgdHlwZW9mIHZhbHVlMiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHJ1ZSh2YWx1ZTE6IGFueSwgdGV4dDogc3RyaW5nLCAuLi5wYXJ0czogYW55W10pOiBhc3NlcnRzIHZhbHVlMSBpcyB0cnVlIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUxID09PSB0cnVlKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuIl19","/**\n * @private\n */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO0lBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBWSxFQUFFO0lBQzNDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFNLEVBQWMsRUFBRTtJQUM1QyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBTSxFQUFlLEVBQUU7SUFDOUMsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBTSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGlzSHRtbEVsZW1lbnQgPSAobm9kZTogYW55KTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSAxIDogZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTZXJpYWxpemFibGVPYmplY3QgPSAodjogYW55KSA9PiB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHYpO1xuICByZXR1cm4gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodjogYW55KTogdiBpcyBhbnkgPT4ge1xuICByZXR1cm4gdiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9ICh2OiBhbnkpOiB2IGlzIGFueVtdID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAodjogYW55KTogdiBpcyBzdHJpbmcgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodjogYW55KTogdiBpcyBGdW5jdGlvbiA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSB2YWx1ZSB3aGljaCBpcyBlaXRoZXIgcmVzb2x2ZSBvciBhIHByb21pc2UuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFZhbHVlT3JQcm9taXNlPFQ+ID0gVCB8IFByb21pc2U8VD47XG4iXX0=","/**\n * State factory of the component.\n */\nexport const OnRenderProp = 'q:renderFn';\n/**\n * Component style host prefix\n */\nexport const ComponentStylesPrefixHost = '💎';\n/**\n * Component style content prefix\n */\nexport const ComponentStylesPrefixContent = '⭐️';\n/**\n * Prefix used to identify on listeners.\n */\nexport const EventPrefix = 'on:';\n/**\n * Attribute used to mark that an event listener is attached.\n */\nexport const EventAny = 'on:.';\n/**\n * `<some-element q:slot=\"...\">`\n */\nexport const QSlot = 'q:slot';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const RenderEvent = 'qRender';\n/**\n * `<q:slot name=\"...\">`\n */\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const ELEMENT_ID_Q_PROPS_PREFIX = '&';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUVoQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDO0FBRTVDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO0FBRXBELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDckM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUNyQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uUmVuZGVyUHJvcCA9ICdxOnJlbmRlckZuJztcblxuLyoqXG4gKiBDb21wb25lbnQgc3R5bGUgaG9zdCBwcmVmaXhcbiAqL1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudFN0eWxlc1ByZWZpeEhvc3QgPSAn8J+Sjic7XG5cbi8qKlxuICogQ29tcG9uZW50IHN0eWxlIGNvbnRlbnQgcHJlZml4XG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ID0gJ+KtkO+4jyc7XG5cbi8qKlxuICogUHJlZml4IHVzZWQgdG8gaWRlbnRpZnkgb24gbGlzdGVuZXJzLlxuICovXG5leHBvcnQgY29uc3QgRXZlbnRQcmVmaXggPSAnb246JztcblxuLyoqXG4gKiBBdHRyaWJ1dGUgdXNlZCB0byBtYXJrIHRoYXQgYW4gZXZlbnQgbGlzdGVuZXIgaXMgYXR0YWNoZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBFdmVudEFueSA9ICdvbjouJztcbi8qKlxuICogYDxzb21lLWVsZW1lbnQgcTpzbG90PVwiLi4uXCI+YFxuICovXG5leHBvcnQgY29uc3QgUVNsb3QgPSAncTpzbG90JztcbmV4cG9ydCBjb25zdCBRU2xvdFJlZiA9ICdxOnNyZWYnO1xuZXhwb3J0IGNvbnN0IFFTbG90UyA9ICdxOnMnO1xuZXhwb3J0IGNvbnN0IFFTdHlsZSA9ICdxOnN0eWxlJztcbmV4cG9ydCBjb25zdCBRU2NvcGVkU3R5bGUgPSAncTpzc3R5bGUnO1xuZXhwb3J0IGNvbnN0IFFDdHhBdHRyID0gJ3E6Y3R4JztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJBdHRyID0gJ3E6Y29udGFpbmVyJztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJTZWxlY3RvciA9ICdbcVxcXFw6Y29udGFpbmVyXSc7XG5cbmV4cG9ydCBjb25zdCBSZW5kZXJFdmVudCA9ICdxUmVuZGVyJztcbi8qKlxuICogYDxxOnNsb3QgbmFtZT1cIi4uLlwiPmBcbiAqL1xuZXhwb3J0IGNvbnN0IFFTbG90SW5lcnROYW1lID0gJ1xcdTAwMDAnO1xuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRCA9ICdxOmlkJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1NFTEVDVE9SID0gJ1txXFxcXDppZF0nO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUFJFRklYID0gJyMnO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUV9QUk9QU19QUkVGSVggPSAnJic7XG4iXX0=","import { assertDefined } from '../assert/assert';\nexport const getDocument = (node) => {\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdqRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUE0QixFQUFZLEVBQUU7SUFDcEUsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLEVBQUU7UUFDbkMsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFDRCxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sSUFBdUIsQ0FBQztLQUNoQztJQUNELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDL0IsYUFBYSxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0lBQzFDLE9BQU8sR0FBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcblxuZXhwb3J0IGNvbnN0IGdldERvY3VtZW50ID0gKG5vZGU6IFF3aWtFbGVtZW50IHwgRG9jdW1lbnQpOiBEb2N1bWVudCA9PiB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5vZGUgYXMgYW55IGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MsICdkb2MgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIHJldHVybiBkb2MhO1xufTtcbiJdfQ==","import { isArray } from '../util/types';\nimport { assertDefined } from '../assert/assert';\nimport { QContainerSelector, RenderEvent } from '../util/markers';\nimport { getDocument } from '../util/dom';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nimport { seal } from '../util/qdev';\nlet _context;\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = getInvokeContext();\n    if (ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$waitOn$, `invoke: $waitOn$ must be defined`, ctx);\n    assertDefined(ctx.$renderCtx$, `invoke: $renderCtx$ must be defined`, ctx);\n    assertDefined(ctx.$doc$, `invoke: $doc$ must be defined`, ctx);\n    assertDefined(ctx.$subscriber$, `invoke: $subscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport const useBindInvokeContext = (callback) => {\n    if (callback == null) {\n        return callback;\n    }\n    const ctx = getInvokeContext();\n    return ((...args) => {\n        return invoke(ctx, callback.bind(undefined, ...args));\n    });\n};\nexport const invoke = (context, fn, ...args) => {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(null, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n};\nexport const waitAndRun = (ctx, callback) => {\n    const previousWait = ctx.$waitOn$.slice();\n    ctx.$waitOn$.push(Promise.allSettled(previousWait).then(callback));\n};\nexport const newInvokeContextFromTuple = (context) => {\n    const element = context[0];\n    return newInvokeContext(getDocument(element), undefined, element, context[1], context[2]);\n};\nexport const newInvokeContext = (doc, hostElement, element, event, url) => {\n    const ctx = {\n        $seq$: 0,\n        $doc$: doc,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $url$: url,\n        $qrl$: undefined,\n        $props$: undefined,\n        $renderCtx$: undefined,\n        $subscriber$: undefined,\n        $waitOn$: undefined,\n    };\n    seal(ctx);\n    return ctx;\n};\nexport const getWrappingContainer = (el) => {\n    return el.closest(QContainerSelector);\n};\n//# sourceMappingURL=data:application/json;base64,","import { qDev } from './qdev';\nexport const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value && value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isQwikElement = (value) => {\n    return isNode(value) && (value.nodeType === 1 || value.nodeType === 111);\n};\nexport const isVirtualElement = (value) => {\n    return value.nodeType === 111;\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 9;\n};\nexport function assertQwikElement(el) {\n    if (qDev) {\n        if (!isQwikElement(el)) {\n            throw new Error('Not a Qwik Element');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFVLEVBQXFCLEVBQUU7SUFDMUQsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBNEIsRUFBb0IsRUFBRTtJQUMxRSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQVUsRUFBd0IsRUFBRTtJQUNoRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUE0QixFQUEyQixFQUFFO0lBQ3hGLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVyxFQUFpQixFQUFFO0lBQ25ELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVyxFQUFvQixFQUFFO0lBQ3pELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU87SUFDdkMsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQsIFZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBpc05vZGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09PSAnbnVtYmVyJztcbn07XG5leHBvcnQgY29uc3QgaXNEb2N1bWVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgRG9jdW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubm9kZVR5cGUgPT09IDk7XG59O1xuZXhwb3J0IGNvbnN0IGlzRWxlbWVudCA9ICh2YWx1ZTogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogdmFsdWUgaXMgRWxlbWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1F3aWtFbGVtZW50ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBRd2lrRWxlbWVudCA9PiB7XG4gIHJldHVybiBpc05vZGUodmFsdWUpICYmICh2YWx1ZS5ub2RlVHlwZSA9PT0gMSB8fCB2YWx1ZS5ub2RlVHlwZSA9PT0gMTExKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1ZpcnR1YWxFbGVtZW50ID0gKHZhbHVlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiB2YWx1ZSBpcyBWaXJ0dWFsRWxlbWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTExO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVGV4dCA9ICh2YWx1ZTogTm9kZSk6IHZhbHVlIGlzIFRleHQgPT4ge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgPT09IDM7XG59O1xuZXhwb3J0IGNvbnN0IGlzQ29tbWVudCA9ICh2YWx1ZTogTm9kZSk6IHZhbHVlIGlzIENvbW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgPT09IDk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UXdpa0VsZW1lbnQoZWw6IGFueSk6IGFzc2VydHMgZWwgaXMgUXdpa0VsZW1lbnQge1xuICBpZiAocURldikge1xuICAgIGlmICghaXNRd2lrRWxlbWVudChlbCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgUXdpayBFbGVtZW50Jyk7XG4gICAgfVxuICB9XG59XG4iXX0=","export const isPromise = (value) => {\n    return value instanceof Promise;\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const promise = call();\n        if (isPromise(promise)) {\n            return promise.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(promise);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const then = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsT0FBTyxLQUFLLFlBQVksT0FBTyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixJQUE2QixFQUM3QixNQUE4QyxFQUM5QyxRQUE0QixFQUNMLEVBQUU7SUFDekIsSUFBSTtRQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDOUM7YUFBTTtZQUNMLE9BQU8sTUFBTSxDQUFDLE9BQWMsQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQ2xCLE9BQTBCLEVBQzFCLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFjLENBQUMsQ0FBQztBQUNuRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsUUFBVyxFQUNrRCxFQUFFO0lBQy9ELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBSSxDQUFJLEVBQXVCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBQcm9taXNlVHJlZTxUPiA9IFQgfCBQcm9taXNlPFQ+IHwgUHJvbWlzZTxUW10+IHwgQXJyYXk8UHJvbWlzZVRyZWU8VD4+O1xuXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlPGFueT4gPT4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhZmVDYWxsID0gPFQsIEIsIEM+KFxuICBjYWxsOiAoKSA9PiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPixcbiAgcmVqZWN0Rm46IChyZWFzb246IGFueSkgPT4gQ1xuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9taXNlID0gY2FsbCgpO1xuICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVqZWN0Rm4oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0aGVuID0gPFQsIEI+KFxuICBwcm9taXNlOiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPlxuKTogVmFsdWVPclByb21pc2U8Qj4gPT4ge1xuICByZXR1cm4gaXNQcm9taXNlKHByb21pc2UpID8gcHJvbWlzZS50aGVuKHRoZW5GbiBhcyBhbnkpIDogdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlQWxsID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogQXdhaXRlZDxUW1BdPiB9PiA9PiB7XG4gIGNvbnN0IGhhc1Byb21pc2UgPSBwcm9taXNlcy5zb21lKGlzUHJvbWlzZSk7XG4gIGlmIChoYXNQcm9taXNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzTm90TnVsbGFibGUgPSA8VD4odjogVCk6IHYgaXMgTm9uTnVsbGFibGU8VD4gPT4ge1xuICByZXR1cm4gdiAhPSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gKHRpbWVvdXQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICB9KTtcbn07XG4iXX0=","import { getDocument } from '../util/dom';\nimport { qDynamicPlatform } from '../util/qdev';\nimport { isObject } from '../util/types';\nexport const createPlatform = (doc) => {\n    const moduleCache = new Map();\n    return {\n        isServer: false,\n        importSymbol(containerEl, url, symbolName) {\n            const urlDoc = toUrl(doc, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            const mod = moduleCache.get(importURL);\n            if (mod) {\n                return mod[symbolName];\n            }\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                mod = findModule(mod);\n                moduleCache.set(importURL, mod);\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol() {\n            return undefined;\n        },\n    };\n};\nconst findModule = (module) => {\n    return Object.values(module).find(isModule) || module;\n};\nconst isModule = (module) => {\n    return isObject(module) && module[Symbol.toStringTag] === 'Module';\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *    - `Element` use `base.ownerDocument.baseURI`\n *    - `Document` use `base.baseURI`\n *    - `string` use `base` as is\n *    - `QConfig` use `base.baseURI`\n * @param url - relative URL\n * @returns fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @alpha\n */\n// </docs>\nexport const setPlatform = (doc, plt) => (doc[DocumentPlatform] = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings\n * from symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but\n * is specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform`\n * is associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @alpha\n */\n// </docs>\nexport const getPlatform = (docOrNode) => {\n    const doc = getDocument(docOrNode);\n    return doc[DocumentPlatform] || (doc[DocumentPlatform] = createPlatform(doc));\n};\nexport const isServer = (ctx) => {\n    if (qDynamicPlatform) {\n        return (ctx.$renderCtx$?.$static$.$containerState$.$platform$.isServer ??\n            getPlatform(ctx.$doc$).isServer);\n    }\n    return false;\n};\nconst DocumentPlatform = ':platform:';\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which\n * ends in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `onRender($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - a function that should have its first argument automatically `$`.\n * @alpha\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUU5QyxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaFxuICogZW5kcyBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGVzZSBmdW5jdGlvbiBjYWxscyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAtIGBjb21wb25lbnQkKCgpID0+IHsuLi59KWAgaXMgc2FtZSBhcyBgb25SZW5kZXIoJCgoKSA9PiB7Li4ufSkpYFxuICpcbiAqIGBgYHRzeFxuICogZXhwb3J0IGZ1bmN0aW9uIG15QXBpKGNhbGxiYWNrOiBRUkw8KCkgPT4gdm9pZD4pOiB2b2lkIHtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKlxuICogZXhwb3J0IGNvbnN0IG15QXBpJCA9IGltcGxpY2l0JEZpcnN0QXJnKG15QXBpKTtcbiAqIC8vIHR5cGUgb2YgbXlBcGkkOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkXG4gKlxuICogLy8gY2FuIGJlIHVzZWQgYXM6XG4gKiBteUFwaSQoKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIHdpbGwgYmUgdHJhbnNwaWxlZCB0bzpcbiAqIC8vIEZJTEU6IDxjdXJyZW50IGZpbGU+XG4gKiBteUFwaShxcmwoJy4vY2h1bmstYWJjLmpzJywgJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIEZJTEU6IGNodW5rLWFiYy5qc1xuICogZXhwb3J0IGNvbnN0IGNhbGxiYWNrID0gKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZm4gLSBhIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGhhdmUgaXRzIGZpcnN0IGFyZ3VtZW50IGF1dG9tYXRpY2FsbHkgYCRgLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCRGaXJzdEFyZyA9IDxGSVJTVCwgUkVTVCBleHRlbmRzIGFueVtdLCBSRVQ+KFxuICBmbjogKGZpcnN0OiBRUkw8RklSU1Q+LCAuLi5yZXN0OiBSRVNUKSA9PiBSRVRcbik6ICgoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKSA9PiBSRVQpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmaXJzdDogRklSU1QsIC4uLnJlc3Q6IFJFU1QpOiBSRVQge1xuICAgIHJldHVybiBmbi5jYWxsKG51bGwsICQoZmlyc3QpLCAuLi5yZXN0KTtcbiAgfTtcbn07XG4iXX0=","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDakYsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4vZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RTZXRBdHRyaWJ1dGUgPSAoZWw6IFF3aWtFbGVtZW50LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGVsLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGlyZWN0R2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7XG59O1xuIl19","import { parseQRL } from '../import/qrl';\nimport { isQrl } from '../import/qrl-class';\nimport { inflateQrl, normalizeOnProp } from './props';\nimport { $ } from '../import/qrl.public';\nimport { QScopedStyle } from '../util/markers';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { isArray } from '../util/types';\nimport { assertTrue } from '../assert/assert';\nconst ON_PROP_REGEX = /^(on|window:|document:)/;\nexport const isOnProp = (prop) => {\n    return ON_PROP_REGEX.test(prop);\n};\nexport const addQRLListener = (ctx, prop, input) => {\n    if (!ctx.li) {\n        ctx.li = new Map();\n    }\n    let existingListeners = ctx.li.get(prop);\n    if (!existingListeners) {\n        ctx.li.set(prop, (existingListeners = []));\n    }\n    for (const qrl of input) {\n        const hash = qrl.$hash$;\n        let replaced = false;\n        for (let i = 0; i < existingListeners.length; i++) {\n            const existing = existingListeners[i];\n            if (existing.$hash$ === hash) {\n                existingListeners.splice(i, 1, qrl);\n                replaced = true;\n                break;\n            }\n        }\n        if (!replaced) {\n            existingListeners.push(qrl);\n        }\n    }\n    return false;\n};\nexport const setEvent = (ctx, prop, input) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    const qrls = isArray(input) ? input.map(ensureQrl) : [ensureQrl(input)];\n    prop = normalizeOnProp(prop.slice(0, -1));\n    addQRLListener(ctx, prop, qrls);\n    return prop;\n};\nconst ensureQrl = (value) => {\n    return isQrl(value) ? value : $(value);\n};\nexport const getDomListeners = (ctx, containerEl) => {\n    const attributes = ctx.$element$.attributes;\n    const listeners = new Map();\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            let array = listeners.get(name);\n            if (!array) {\n                listeners.set(name, (array = []));\n            }\n            const urls = value.split('\\n');\n            for (const url of urls) {\n                const qrl = parseQRL(url, containerEl);\n                if (qrl.$capture$) {\n                    inflateQrl(qrl, ctx);\n                }\n                array.push(qrl);\n            }\n        }\n    }\n    return listeners;\n};\nexport const getScopeIds = (el) => {\n    const scoped = directGetAttribute(el, QScopedStyle);\n    if (scoped) {\n        return scoped.split(' ');\n    }\n    return [];\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHMtb24uanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcHJvcHMvcHJvcHMtb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFlLE1BQU0scUJBQXFCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQVksTUFBTSxTQUFTLENBQUM7QUFDaEUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU5QyxNQUFNLGFBQWEsR0FBRyx5QkFBeUIsQ0FBQztBQUVoRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxJQUFZLEVBQVcsRUFBRTtJQUNoRCxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsR0FBYSxFQUFFLElBQVksRUFBRSxLQUFvQixFQUFXLEVBQUU7SUFDM0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7UUFDWCxHQUFHLENBQUMsRUFBRSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7S0FDcEI7SUFDRCxJQUFJLGlCQUFpQixHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtRQUN0QixHQUFHLENBQUMsRUFBRSxD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QyxJQUFJLENBQUMsQ0FBQztZQUMvQixLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtnQkFDdEIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFO29CQUNqQixVQUFVLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUN0QjtnQkFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEVBQVcsRUFBWSxFQUFFO0lBQ25ELE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxJQUFJLE1BQU0sRUFBRTtRQUNWLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMxQjtJQUNELE9BQU8sRUFBRSxDQUFDO0FBQ1osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VRUkwgfSBmcm9tICcuLi9pbXBvcnQvcXJsJztcbmltcG9ydCB7IGlzUXJsLCBRUkxJbnRlcm5hbCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuaW1wb3J0IHsgaW5mbGF0ZVFybCwgbm9ybWFsaXplT25Qcm9wLCBRQ29udGV4dCB9IGZyb20gJy4vcHJvcHMnO1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcbmltcG9ydCB7IFFTY29wZWRTdHlsZSB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBkaXJlY3RHZXRBdHRyaWJ1dGUgfSBmcm9tICcuLi9yZW5kZXIvZmFzdC1jYWxscyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBhc3NlcnRUcnVlIH0gZnJvbSAnLi4vYXNzZXJ0L2Fzc2VydCc7XG5cbmNvbnN0IE9OX1BST1BfUkVHRVggPSAvXihvbnx3aW5kb3c6fGRvY3VtZW50OikvO1xuXG5leHBvcnQgY29uc3QgaXNPblByb3AgPSAocHJvcDogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBPTl9QUk9QX1JFR0VYLnRlc3QocHJvcCk7XG59O1xuXG5leHBvcnQgY29uc3QgYWRkUVJMTGlzdGVuZXIgPSAoY3R4OiBRQ29udGV4dCwgcHJvcDogc3RyaW5nLCBpbnB1dDogUVJMSW50ZXJuYWxbXSk6IGJvb2xlYW4gPT4ge1xuICBpZiAoIWN0eC5saSkge1xuICAgIGN0eC5saSA9IG5ldyBNYXAoKTtcbiAgfVxuICBsZXQgZXhpc3RpbmdMaXN0ZW5lcnMgPSBjdHgubGkuZ2V0KHByb3ApO1xuICBpZiAoIWV4aXN0aW5nTGlzdGVuZXJzKSB7XG4gICAgY3R4LmxpLnNldChwcm9wLCAoZXhpc3RpbmdMaXN0ZW5lcnMgPSBbXSkpO1xuICB9XG4gIGZvciAoY29uc3QgcXJsIG9mIGlucHV0KSB7XG4gICAgY29uc3QgaGFzaCA9IHFybC4kaGFzaCQ7XG4gICAgbGV0IHJlcGxhY2VkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBleGlzdGluZ0xpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZXhpc3RpbmcgPSBleGlzdGluZ0xpc3RlbmVyc1tpXTtcbiAgICAgIGlmIChleGlzdGluZy4kaGFzaCQgPT09IGhhc2gpIHtcbiAgICAgICAgZXhpc3RpbmdMaXN0ZW5lcnMuc3BsaWNlKGksIDEsIHFybCk7XG4gICAgICAgIHJlcGxhY2VkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcmVwbGFjZWQpIHtcbiAgICAgIGV4aXN0aW5nTGlzdGVuZXJzLnB1c2gocXJsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldEV2ZW50ID0gKGN0eDogUUNvbnRleHQsIHByb3A6IHN0cmluZywgaW5wdXQ6IGFueSkgPT4ge1xuICBhc3NlcnRUcnVlKHByb3AuZW5kc1dpdGgoJyQnKSwgJ3JlbmRlcjogZXZlbnQgcHJvcGVydHkgZG9lcyBub3QgZW5kIHdpdGggJCcsIHByb3ApO1xuICBjb25zdCBxcmxzID0gaXNBcnJheShpbnB1dCkgPyBpbnB1dC5tYXAoZW5zdXJlUXJsKSA6IFtlbnN1cmVRcmwoaW5wdXQpXTtcbiAgcHJvcCA9IG5vcm1hbGl6ZU9uUHJvcChwcm9wLnNsaWNlKDAsIC0xKSk7XG4gIGFkZFFSTExpc3RlbmVyKGN0eCwgcHJvcCwgcXJscyk7XG4gIHJldHVybiBwcm9wO1xufTtcblxuY29uc3QgZW5zdXJlUXJsID0gKHZhbHVlOiBhbnkpID0+IHtcbiAgcmV0dXJuIGlzUXJsKHZhbHVlKSA/IHZhbHVlIDogKCQodmFsdWUpIGFzIFFSTEludGVybmFsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREb21MaXN0ZW5lcnMgPSAoXG4gIGN0eDogUUNvbnRleHQsXG4gIGNvbnRhaW5lckVsOiBFbGVtZW50XG4pOiBNYXA8c3RyaW5nLCBRUkxJbnRlcm5hbFtdPiA9PiB7XG4gIGNvbnN0IGF0dHJpYnV0ZXMgPSAoY3R4LiRlbGVtZW50JCBhcyBFbGVtZW50KS5hdHRyaWJ1dGVzO1xuICBjb25zdCBsaXN0ZW5lcnM6IE1hcDxzdHJpbmcsIFFSTEludGVybmFsW10+ID0gbmV3IE1hcCgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBhdHRyaWJ1dGVzLml0ZW0oaSkhO1xuICAgIGlmIChcbiAgICAgIG5hbWUuc3RhcnRzV2l0aCgnb246JykgfHxcbiAgICAgIG5hbWUuc3RhcnRzV2l0aCgnb24td2luZG93OicpIHx8XG4gICAgICBuYW1lLnN0YXJ0c1dpdGgoJ29uLWRvY3VtZW50OicpXG4gICAgKSB7XG4gICAgICBsZXQgYXJyYXkgPSBsaXN0ZW5lcnMuZ2V0KG5hbWUpO1xuICAgICAgaWYgKCFhcnJheSkge1xuICAgICAgICBsaXN0ZW5lcnMuc2V0KG5hbWUsIChhcnJheSA9IFtdKSk7XG4gICAgICB9XG4gICAgICBjb25zdCB1cmxzID0gdmFsdWUuc3BsaXQoJ1xcbicpO1xuICAgICAgZm9yIChjb25zdCB1cmwgb2YgdXJscykge1xuICAgICAgICBjb25zdCBxcmwgPSBwYXJzZVFSTCh1cmwsIGNvbnRhaW5lckVsKTtcbiAgICAgICAgaWYgKHFybC4kY2FwdHVyZSQpIHtcbiAgICAgICAgICBpbmZsYXRlUXJsKHFybCwgY3R4KTtcbiAgICAgICAgfVxuICAgICAgICBhcnJheS5wdXNoKHFybCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBsaXN0ZW5lcnM7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2NvcGVJZHMgPSAoZWw6IEVsZW1lbnQpOiBzdHJpbmdbXSA9PiB7XG4gIGNvbnN0IHNjb3BlZCA9IGRpcmVjdEdldEF0dHJpYnV0ZShlbCwgUVNjb3BlZFN0eWxlKTtcbiAgaWYgKHNjb3BlZCkge1xuICAgIHJldHVybiBzY29wZWQuc3BsaXQoJyAnKTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuIl19","import { verifySerializable } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { qDev } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\nexport const useSequentialScope = () => {\n    const ctx = useInvokeContext();\n    const i = ctx.$seq$;\n    const hostElement = ctx.$hostElement$;\n    const elementCtx = getContext(hostElement);\n    ctx.$seq$++;\n    const set = (value) => {\n        if (qDev) {\n            verifySerializable(value);\n        }\n        return (elementCtx.$seq$[i] = value);\n    };\n    return {\n        get: elementCtx.$seq$[i],\n        set,\n        i,\n        ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBdUIsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFTbkUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDcEIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUN0QyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ1osTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFRLEVBQUUsRUFBRTtRQUN2QixJQUFJLElBQUksRUFBRTtZQUNSLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0lBQ0YsT0FBTztRQUNMLEdBQUcsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4QixHQUFHO1FBQ0gsQ0FBQztRQUNELEdBQUc7S0FDSixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyaWZ5U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vb2JqZWN0L3Etb2JqZWN0JztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IFJlbmRlckludm9rZUNvbnRleHQsIHVzZUludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW50aWFsU2NvcGU8VD4ge1xuICByZWFkb25seSBnZXQ6IFQgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHNldDogKHY6IFQpID0+IFQ7XG4gIHJlYWRvbmx5IGk6IG51bWJlcjtcbiAgcmVhZG9ubHkgY3R4OiBSZW5kZXJJbnZva2VDb250ZXh0O1xufVxuXG5leHBvcnQgY29uc3QgdXNlU2VxdWVudGlhbFNjb3BlID0gPFQ+KCk6IFNlcXVlbnRpYWxTY29wZTxUPiA9PiB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgY29uc3QgaSA9IGN0eC4kc2VxJDtcbiAgY29uc3QgaG9zdEVsZW1lbnQgPSBjdHguJGhvc3RFbGVtZW50JDtcbiAgY29uc3QgZWxlbWVudEN0eCA9IGdldENvbnRleHQoaG9zdEVsZW1lbnQpO1xuICBjdHguJHNlcSQrKztcbiAgY29uc3Qgc2V0ID0gKHZhbHVlOiBUKSA9PiB7XG4gICAgaWYgKHFEZXYpIHtcbiAgICAgIHZlcmlmeVNlcmlhbGl6YWJsZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiAoZWxlbWVudEN0eC4kc2VxJFtpXSA9IHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGVsZW1lbnRDdHguJHNlcSRbaV0sXG4gICAgc2V0LFxuICAgIGksXG4gICAgY3R4LFxuICB9O1xufTtcbiJdfQ==","import { assertQrl } from '../import/qrl-class';\nimport { getContext, normalizeOnProp } from '../props/props';\nimport { addQRLListener } from '../props/props-on';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { Watch, WatchFlagsIsCleanup } from './use-watch';\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * It can be used to release resources, abort network requests, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resources, abort network requests, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanupQrl = (unmountFn) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (!get) {\n        assertQrl(unmountFn);\n        const el = ctx.$hostElement$;\n        const watch = new Watch(WatchFlagsIsCleanup, i, el, unmountFn, undefined);\n        set(true);\n        getContext(el).$watches$.push(watch);\n    }\n};\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * It can be used to release resources, abort network requests, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resources, abort network requests, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanup$ = /*#__PURE__*/ implicit$FirstArg(useCleanupQrl);\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * @alpha\n */\n// </docs>\nexport const useOn = (event, eventQrl) => _useOn(`on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => _useOn(`document:on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => _useOn(`window:on-${event}`, eventQrl);\nconst _useOn = (eventName, eventQrl) => {\n    const invokeCtx = useInvokeContext();\n    const ctx = getContext(invokeCtx.$hostElement$);\n    assertQrl(eventQrl);\n    addQRLListener(ctx, normalizeOnProp(eventName), [eventQrl]);\n};\n//# sourceMappingURL=data:application/json;base64,","export const emitEvent = (el, eventName, detail, bubbles) => {\n    if (el && typeof CustomEvent === 'function') {\n        el.dispatchEvent(new CustomEvent(eventName, {\n            detail,\n            bubbles: bubbles,\n            composed: bubbles,\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLEVBQUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLEVBQUU7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsTUFBTTtZQUNOLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1pdEV2ZW50ID0gKFxuICBlbDogRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGRldGFpbDogYW55LFxuICBidWJibGVzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKGVsICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbCxcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgY29tcG9zZWQ6IGJ1YmJsZXMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0=","import { qDev, seal } from '../../util/qdev';\nimport { logWarn } from '../../util/log';\nimport { isFunction, isObject, isString } from '../../util/types';\nimport { qError, QError_invalidJsxNodeType } from '../../error/error';\n/**\n * @public\n */\nexport const jsx = (type, props, key) => {\n    if (qDev) {\n        if (!isString(type) && !isFunction(type)) {\n            throw qError(QError_invalidJsxNodeType, type);\n        }\n    }\n    return new JSXNodeImpl(type, props, key);\n};\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, key = null) {\n        this.type = type;\n        this.props = props;\n        this.key = key;\n        seal(this);\n    }\n}\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\n/**\n * @public\n */\nexport const Fragment = (props) => props.children;\nexport { jsx as jsxs, jsx as jsxDEV };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4LXJ1bnRpbWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9qc3gtcnVudGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsTUFBTSxFQUFFLHlCQUF5QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FDakIsSUFBTyxFQUNQLEtBQVksRUFDWixHQUE0QixFQUNoQixFQUFFO0lBQ2QsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sTUFBTSxDQUFDLHlCQUF5QixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQy9DO0tBQ0Y7SUFDRCxPQUFPLElBQUksV0FBVyxDQUFJLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDOUMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDO0FBRTlDLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQ1MsSUFBTyxFQUNQLEtBQTBCLEVBQzFCLE1BQThCLElBQUk7UUFGbEMsU0FBSSxHQUFKLElBQUksQ0FBRztRQUNQLFVBQUssR0FBTCxLQUFLLENBQXFCO1FBQzFCLFFBQUcsR0FBSCxHQUFHLENBQStCO1FBRXpDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNiLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQU0sRUFBeUIsRUFBRTtJQUN6RCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxZQUFZLFdBQVcsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDNUQsT0FBTyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7WUFDeEQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE9BQU8sQ0FBQyxZQUFZLFdBQVcsQ0FBQztLQUNqQztBQUNILENBQUMsQ0FBQztBQUNGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUEwQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQWUsQ0FBQztBQUloRyxPQUFPLEVBQUUsR0FBRyxJQUFJLElBQUksRUFBRSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgdHlwZSB7IFF3aWtKU1ggfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrJztcbmltcG9ydCB7IHFEZXYsIHNlYWwgfSBmcm9tICcuLi8uLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgbG9nV2FybiB9IGZyb20gJy4uLy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgcUVycm9yLCBRRXJyb3JfaW52YWxpZEpzeE5vZGVUeXBlIH0gZnJvbSAnLi4vLi4vZXJyb3IvZXJyb3InO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGpzeCA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8UFJPUFM+LCBQUk9QUz4oXG4gIHR5cGU6IFQsXG4gIHByb3BzOiBQUk9QUyxcbiAga2V5Pzogc3RyaW5nIHwgbnVtYmVyIHwgbnVsbFxuKTogSlNYTm9kZTxUPiA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCFpc1N0cmluZyh0eXBlKSAmJiAhaXNGdW5jdGlvbih0eXBlKSkge1xuICAgICAgdGhyb3cgcUVycm9yKFFFcnJvcl9pbnZhbGlkSnN4Tm9kZVR5cGUsIHR5cGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEpTWE5vZGVJbXBsPFQ+KHR5cGUsIHByb3BzLCBrZXkpO1xufTtcblxuZXhwb3J0IGNvbnN0IFNLSVBfUkVOREVSX1RZUEUgPSAnOnNraXBSZW5kZXInO1xuXG5leHBvcnQgY2xhc3MgSlNYTm9kZUltcGw8VD4gaW1wbGVtZW50cyBKU1hOb2RlPFQ+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHR5cGU6IFQsXG4gICAgcHVibGljIHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIHB1YmxpYyBrZXk6IHN0cmluZyB8IG51bWJlciB8IG51bGwgPSBudWxsXG4gICkge1xuICAgIHNlYWwodGhpcyk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzSlNYTm9kZSA9IChuOiBhbnkpOiBuIGlzIEpTWE5vZGU8dW5rbm93bj4gPT4ge1xuICBpZiAocURldikge1xuICAgIGlmIChuIGluc3RhbmNlb2YgSlNYTm9kZUltcGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QobikgJiYgJ2tleScgaW4gbiAmJiAncHJvcHMnIGluIG4gJiYgJ3R5cGUnIGluIG4pIHtcbiAgICAgIGxvZ1dhcm4oYER1cGxpY2F0ZSBpbXBsZW1lbnRhdGlvbnMgb2YgXCJKU1hOb2RlXCIgZm91bmRgKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG4gaW5zdGFuY2VvZiBKU1hOb2RlSW1wbDtcbiAgfVxufTtcbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRnJhZ21lbnQ6IEZ1bmN0aW9uQ29tcG9uZW50PHsgY2hpbGRyZW4/OiBhbnkgfT4gPSAocHJvcHMpID0+IHByb3BzLmNoaWxkcmVuIGFzIGFueTtcblxuZXhwb3J0IHR5cGUgeyBRd2lrSlNYIGFzIEpTWCB9O1xuXG5leHBvcnQgeyBqc3ggYXMganN4cywganN4IGFzIGpzeERFViB9O1xuIl19","import { jsx } from '../jsx/jsx-runtime';\n/**\n * @alpha\n */\nexport const SkipRerender = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRComment = (() => null);\n/**\n * @alpha\n */\nexport const Virtual = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: 'qkssr-pu' }),\n        props.children,\n        jsx(SSRComment, { data: 'qkssr-po' }),\n    ];\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9ob3N0LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHekM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQTBCLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQVEsQ0FBQztBQUUzRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBd0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQVEsQ0FBQztBQUVuRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBMkMsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQzdFLEtBQUssQ0FBQyxRQUFRLENBQVEsQ0FBQztBQUV6Qjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBMEMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUM3RSxPQUFPO1FBQ0wsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztRQUNyQyxLQUFLLENBQUMsUUFBUTtRQUNkLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUM7S0FDL0IsQ0FBQztBQUNYLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCB9IGZyb20gJy4uL2pzeC9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBTa2lwUmVyZW5kZXI6IEZ1bmN0aW9uQ29tcG9uZW50PHt9PiA9ICgocHJvcHM6IGFueSkgPT4gcHJvcHMuY2hpbGRyZW4pIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNTUkNvbW1lbnQ6IEZ1bmN0aW9uQ29tcG9uZW50PHsgZGF0YTogc3RyaW5nIH0+ID0gKCgpID0+IG51bGwpIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFZpcnR1YWw6IEZ1bmN0aW9uQ29tcG9uZW50PFJlY29yZDxzdHJpbmcsIGFueT4+ID0gKChwcm9wczogYW55KSA9PlxuICBwcm9wcy5jaGlsZHJlbikgYXMgYW55O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgU1NSU3RyZWFtQmxvY2s6IEZ1bmN0aW9uQ29tcG9uZW50PHsgY2hpbGRyZW4/OiBhbnkgfT4gPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIFtcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiAncWtzc3ItcHUnIH0pLFxuICAgIHByb3BzLmNoaWxkcmVuLFxuICAgIGpzeChTU1JDb21tZW50LCB7IGRhdGE6ICdxa3Nzci1wbycgfSksXG4gIF0gYXMgYW55O1xufTtcbiJdfQ==","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmcm9tQ2FtZWxUb0tlYmFiQ2FzZSA9ICh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC8oW0EtWl0pL2csICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufTtcbiJdfQ==","import { assertDefined } from '../assert/assert';\nimport { ELEMENT_ID, OnRenderProp, QSlot, RenderEvent } from '../util/markers';\nimport { promiseAll, safeCall, then } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { logError } from '../util/log';\nimport { isArray, isFunction, isObject, isString } from '../util/types';\nimport { tryGetContext } from '../props/props';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { intToStr } from '../object/store';\nimport { qSerialize, seal } from '../util/qdev';\nexport const executeComponent = (rctx, elCtx) => {\n    elCtx.$dirty$ = false;\n    elCtx.$mounted$ = true;\n    elCtx.$slots$ = [];\n    const hostElement = elCtx.$element$;\n    const onRenderQRL = elCtx.$renderQrl$;\n    const staticCtx = rctx.$static$;\n    const containerState = staticCtx.$containerState$;\n    const props = elCtx.$props$;\n    const newCtx = pushRenderContext(rctx, elCtx);\n    const invocatinContext = newInvokeContext(staticCtx.$doc$, hostElement, undefined, RenderEvent);\n    const waitOn = (invocatinContext.$waitOn$ = []);\n    assertDefined(onRenderQRL, `render: host element to render must has a $renderQrl$:`, elCtx);\n    assertDefined(props, `render: host element to render must has defined props`, elCtx);\n    // Set component context\n    newCtx.$cmpCtx$ = elCtx;\n    // Invoke render hook\n    invocatinContext.$subscriber$ = hostElement;\n    invocatinContext.$renderCtx$ = rctx;\n    // Component is not dirty any more\n    containerState.$hostsStaging$.delete(hostElement);\n    // Clean current subscription before render\n    containerState.$subsManager$.$clearSub$(hostElement);\n    // Resolve render function\n    const onRenderFn = onRenderQRL.getFn(invocatinContext);\n    return safeCall(() => onRenderFn(props), (jsxNode) => {\n        staticCtx.$hostElements$.add(hostElement);\n        const waitOnPromise = promiseAll(waitOn);\n        return then(waitOnPromise, () => {\n            if (isFunction(jsxNode)) {\n                elCtx.$dirty$ = false;\n                jsxNode = jsxNode();\n            }\n            else if (elCtx.$dirty$) {\n                return executeComponent(rctx, elCtx);\n            }\n            elCtx.$attachedListeners$ = false;\n            return {\n                node: jsxNode,\n                rctx: newCtx,\n            };\n        });\n    }, (err) => {\n        logError(err);\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $static$: {\n            $doc$: doc,\n            $containerState$: containerState,\n            $containerEl$: containerState.$containerEl$,\n            $hostElements$: new Set(),\n            $operations$: [],\n            $postOperations$: [],\n            $roots$: [],\n            $addSlots$: [],\n            $rmSlots$: [],\n        },\n        $cmpCtx$: undefined,\n        $localStack$: [],\n    };\n    seal(ctx);\n    seal(ctx.$static$);\n    return ctx;\n};\nexport const pushRenderContext = (ctx, elCtx) => {\n    const newCtx = {\n        $static$: ctx.$static$,\n        $cmpCtx$: ctx.$cmpCtx$,\n        $localStack$: ctx.$localStack$.concat(elCtx),\n    };\n    return newCtx;\n};\nexport const joinClasses = (...input) => {\n    const set = new Set();\n    input.forEach((value) => {\n        parseClassAny(value).forEach((v) => set.add(v));\n    });\n    return Array.from(set).join(' ');\n};\nexport const parseClassAny = (obj) => {\n    if (isString(obj)) {\n        return parseClassList(obj);\n    }\n    else if (isObject(obj)) {\n        if (isArray(obj)) {\n            return obj;\n        }\n        else {\n            const output = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        output.push(key);\n                    }\n                }\n            }\n            return output;\n        }\n    }\n    return [];\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => !value ? [] : value.split(parseClassListRegex);\nexport const stringifyStyle = (obj) => {\n    if (obj == null)\n        return '';\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        chunks.push(fromCamelToKebabCase(key) + ':' + value);\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$static$.$containerState$.$elementIndex$++);\n};\nexport const getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nexport const setQId = (rctx, ctx) => {\n    const id = getNextIndex(rctx);\n    ctx.$id$ = id;\n    if (qSerialize) {\n        ctx.$element$.setAttribute(ELEMENT_ID, id);\n    }\n};\nexport const hasStyle = (containerState, styleId) => {\n    return containerState.$styleIds$.has(styleId);\n};\nexport const ALLOWS_PROPS = [QSlot];\nexport const SKIPS_PROPS = [QSlot, OnRenderProp, 'children'];\n//# sourceMappingURL=data:application/json;base64,","export const hashCode = (text, hash = 0) => {\n    if (text.length === 0)\n        return hash;\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzaENvZGUgPSAodGV4dDogc3RyaW5nLCBoYXNoOiBudW1iZXIgPSAwKSA9PiB7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNociA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cbiAgcmV0dXJuIE51bWJlcihNYXRoLmFicyhoYXNoKSkudG9TdHJpbmcoMzYpO1xufTtcbiJdfQ==","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nimport { assertQrl } from '../import/qrl-class';\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join(' ');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9jb21wb25lbnQvcXJsLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQW9CLEVBQUUsS0FBYSxFQUFVLEVBQUU7SUFDdEUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25CLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ2hELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ25ELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ3RELE9BQU8sNEJBQTRCLEdBQUcsT0FBTyxDQUFDO0FBQ2hELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtJQUNwRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVLZXkgPSAocVN0eWxlczogUVJMPHN0cmluZz4sIGluZGV4OiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBhc3NlcnRRcmwocVN0eWxlcyk7XG4gIHJldHVybiBgJHtoYXNoQ29kZShxU3R5bGVzLiRoYXNoJCl9LSR7aW5kZXh9YDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUhvc3QgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0eWxlSWQ7XG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGVDb250ZW50ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ICsgc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVTU3R5bGUgPSAoc2NvcGVJZHM6IHN0cmluZ1tdKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gc2NvcGVJZHMuam9pbignICcpO1xuICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdfQ==","import { assertDefined } from '../../assert/assert';\nimport { codeToText, QError_setProperty } from '../../error/error';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { QSlot, QSlotRef, QStyle } from '../../util/markers';\nimport { qDev } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { cleanupTree, directAppendChild, directInsertBefore, directRemoveChild, getChildren, isSlotTemplate, SVG_NS, } from './visitor';\nexport const setAttribute = (ctx, el, prop, value) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setAttribute,\n            $args$: [el, prop, value],\n        });\n    }\n    else {\n        _setAttribute(el, prop, value);\n    }\n};\nconst _setAttribute = (el, prop, value) => {\n    if (value == null || value === false) {\n        el.removeAttribute(prop);\n    }\n    else {\n        const str = value === true ? '' : String(value);\n        directSetAttribute(el, prop, str);\n    }\n};\nexport const setProperty = (ctx, node, key, value) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setProperty,\n            $args$: [node, key, value],\n        });\n    }\n    else {\n        _setProperty(node, key, value);\n    }\n};\nconst _setProperty = (node, key, value) => {\n    try {\n        node[key] = value;\n    }\n    catch (err) {\n        logError(codeToText(QError_setProperty), { node, key, value }, err);\n    }\n};\nexport const createElement = (doc, expectTag, isSvg) => {\n    const el = isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);\n    return el;\n};\nexport const insertBefore = (ctx, parent, newChild, refChild) => {\n    ctx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const appendChild = (ctx, parent, newChild) => {\n    ctx.$operations$.push({\n        $operation$: directAppendChild,\n        $args$: [parent, newChild],\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (ctx, styleTask) => {\n    ctx.$containerState$.$styleIds$.add(styleTask.styleId);\n    ctx.$postOperations$.push({\n        $operation$: _appendHeadStyle,\n        $args$: [ctx.$doc$, ctx.$containerEl$, styleTask],\n    });\n};\nexport const setClasslist = (ctx, elm, toRemove, toAdd) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setClasslist,\n            $args$: [elm, toRemove, toAdd],\n        });\n    }\n    else {\n        _setClasslist(elm, toRemove, toAdd);\n    }\n};\nexport const _setClasslist = (elm, toRemove, toAdd) => {\n    const classList = elm.classList;\n    classList.remove(...toRemove);\n    classList.add(...toAdd);\n};\nexport const _appendHeadStyle = (doc, containerEl, styleTask) => {\n    const isDoc = doc.documentElement === containerEl;\n    const headEl = doc.head;\n    const style = doc.createElement('style');\n    if (isDoc && !headEl) {\n        logWarn('document.head is undefined');\n    }\n    directSetAttribute(style, QStyle, styleTask.styleId);\n    style.textContent = styleTask.content;\n    if (isDoc && headEl) {\n        directAppendChild(headEl, style);\n    }\n    else {\n        directInsertBefore(containerEl, style, containerEl.firstChild);\n    }\n};\nexport const prepend = (ctx, parent, newChild) => {\n    ctx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, parent.firstChild],\n    });\n};\nexport const removeNode = (ctx, el) => {\n    ctx.$operations$.push({\n        $operation$: _removeNode,\n        $args$: [el, ctx],\n    });\n};\nconst _removeNode = (el, staticCtx) => {\n    const parent = el.parentElement;\n    if (parent) {\n        if (el.nodeType === 1 || el.nodeType === 111) {\n            const subsManager = staticCtx.$containerState$.$subsManager$;\n            cleanupTree(el, staticCtx, subsManager);\n        }\n        directRemoveChild(parent, el);\n    }\n    else if (qDev) {\n        logWarn('Trying to remove component already removed', el);\n    }\n};\nexport const createTemplate = (doc, slotName) => {\n    const template = createElement(doc, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nexport const executeDOMRender = (ctx) => {\n    for (const op of ctx.$operations$) {\n        op.$operation$.apply(undefined, op.$args$);\n    }\n    resolveSlotProjection(ctx);\n};\nexport const getKey = (el) => {\n    return directGetAttribute(el, 'q:key');\n};\nexport const setKey = (el, key) => {\n    if (key !== null) {\n        directSetAttribute(el, 'q:key', key);\n    }\n};\nexport const resolveSlotProjection = (ctx) => {\n    // Slots removed\n    ctx.$rmSlots$.forEach((slotEl) => {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const slotChildren = getChildren(slotEl, 'root');\n        if (slotChildren.length > 0) {\n            const sref = slotEl.getAttribute(QSlotRef);\n            const hostCtx = ctx.$roots$.find((r) => r.$id$ === sref);\n            if (hostCtx) {\n                const template = createTemplate(ctx.$doc$, key);\n                const hostElm = hostCtx.$element$;\n                for (const child of slotChildren) {\n                    directAppendChild(template, child);\n                }\n                directInsertBefore(hostElm, template, hostElm.firstChild);\n            }\n        }\n    });\n    // Slots added\n    ctx.$addSlots$.forEach(([slotEl, hostElm]) => {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const template = Array.from(hostElm.childNodes).find((node) => {\n            return isSlotTemplate(node) && node.getAttribute(QSlot) === key;\n        });\n        if (template) {\n            const children = getChildren(template, 'root');\n            children.forEach((child) => {\n                directAppendChild(slotEl, child);\n            });\n            template.remove();\n        }\n    });\n};\nexport const createTextNode = (doc, text) => {\n    return doc.createTextNode(text);\n};\nexport const printRenderStats = (ctx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of ctx.$operations$) {\n                byOp[op.$operation$.name] = (byOp[op.$operation$.name] ?? 0) + 1;\n            }\n            const stats = {\n                byOp,\n                roots: ctx.$roots$.map((ctx) => ctx.$element$),\n                hostElements: Array.from(ctx.$hostElements$),\n                operations: ctx.$operations$.map((v) => [v.$operation$.name, ...v.$args$]),\n            };\n            const noOps = ctx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertTrue } from '../../assert/assert';\nimport { isElement, isQwikElement, isVirtualElement } from '../../util/element';\nimport { qSerialize, seal } from '../../util/qdev';\nimport { directGetAttribute } from '../fast-calls';\nimport { createElement } from './operations';\nimport { getChildren } from './visitor';\nconst VIRTUAL_SYMBOL = '__virtual';\nexport const newVirtualElement = (doc) => {\n    const open = doc.createComment('qv ');\n    const close = doc.createComment('/qv');\n    return new VirtualElementImpl(open, close);\n};\nexport const parseVirtualAttributes = (str) => {\n    if (!str) {\n        return new Map();\n    }\n    const attributes = str.split(' ');\n    return new Map(attributes.map((attr) => {\n        const index = attr.indexOf('=');\n        if (index >= 0) {\n            return [attr.slice(0, index), unescape(attr.slice(index + 1))];\n        }\n        else {\n            return [attr, ''];\n        }\n    }));\n};\nexport const serializeVirtualAttributes = (map) => {\n    const attributes = [];\n    map.forEach((value, key) => {\n        if (!value) {\n            attributes.push(`${key}`);\n        }\n        else {\n            attributes.push(`${key}=${escape(value)}`);\n        }\n    });\n    return attributes.join(' ');\n};\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nexport const walkerVirtualByAttribute = (el, prop, value) => {\n    return el.ownerDocument.createTreeWalker(el, SHOW_COMMENT, {\n        acceptNode(c) {\n            const virtual = getVirtualElement(c);\n            if (virtual) {\n                return directGetAttribute(virtual, prop) === value ? FILTER_ACCEPT : FILTER_REJECT;\n            }\n            return FILTER_REJECT;\n        },\n    });\n};\nexport const queryVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const open = walker.firstChild();\n    if (open) {\n        return getVirtualElement(open);\n    }\n    return null;\n};\nexport const queryAllVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(getVirtualElement(currentNode));\n    }\n    return pars;\n};\nexport const escape = (s) => {\n    return s.replace(/ /g, '+');\n};\nexport const unescape = (s) => {\n    return s.replace(/\\+/g, ' ');\n};\nexport const VIRTUAL = ':virtual';\nexport class VirtualElementImpl {\n    constructor(open, close) {\n        this.open = open;\n        this.close = close;\n        this._qc_ = null;\n        this.nodeType = 111;\n        this.localName = VIRTUAL;\n        this.nodeName = VIRTUAL;\n        const doc = (this.ownerDocument = open.ownerDocument);\n        this.template = createElement(doc, 'template', false);\n        this.attributes = parseVirtualAttributes(open.data.slice(3));\n        assertTrue(open.data.startsWith('qv '), 'comment is not a qv');\n        open[VIRTUAL_SYMBOL] = this;\n        seal(this);\n    }\n    insertBefore(node, ref) {\n        const parent = this.parentElement;\n        if (parent) {\n            const ref2 = ref ? ref : this.close;\n            parent.insertBefore(node, ref2);\n        }\n        else {\n            this.template.insertBefore(node, ref);\n        }\n        return node;\n    }\n    remove() {\n        const parent = this.parentElement;\n        if (parent) {\n            const ch = Array.from(this.childNodes);\n            assertEqual(this.template.childElementCount, 0, 'children should be empty');\n            parent.removeChild(this.open);\n            this.template.append(...ch);\n            parent.removeChild(this.close);\n        }\n    }\n    appendChild(node) {\n        return this.insertBefore(node, null);\n    }\n    insertBeforeTo(newParent, child) {\n        const ch = Array.from(this.childNodes);\n        if (this.parentElement) {\n            console.warn('already attached');\n        }\n        newParent.insertBefore(this.open, child);\n        for (const c of ch) {\n            newParent.insertBefore(c, child);\n        }\n        newParent.insertBefore(this.close, child);\n        assertEqual(this.template.childElementCount, 0, 'children should be empty');\n    }\n    appendTo(newParent) {\n        this.insertBeforeTo(newParent, null);\n    }\n    removeChild(child) {\n        if (this.parentElement) {\n            this.parentElement.removeChild(child);\n        }\n        else {\n            this.template.removeChild(child);\n        }\n    }\n    getAttribute(prop) {\n        return this.attributes.get(prop) ?? null;\n    }\n    hasAttribute(prop) {\n        return this.attributes.has(prop);\n    }\n    setAttribute(prop, value) {\n        this.attributes.set(prop, value);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    removeAttribute(prop) {\n        this.attributes.delete(prop);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    matches(_) {\n        return false;\n    }\n    compareDocumentPosition(other) {\n        return this.open.compareDocumentPosition(other);\n    }\n    closest(query) {\n        const parent = this.parentElement;\n        if (parent) {\n            return parent.closest(query);\n        }\n        return null;\n    }\n    querySelectorAll(query) {\n        const result = [];\n        const ch = getChildren(this, 'elements');\n        ch.forEach((el) => {\n            if (isQwikElement(el)) {\n                if (el.matches(query)) {\n                    result.push(el);\n                }\n                result.concat(Array.from(el.querySelectorAll(query)));\n            }\n        });\n        return result;\n    }\n    querySelector(query) {\n        for (const el of this.childNodes) {\n            if (isElement(el)) {\n                if (el.matches(query)) {\n                    return el;\n                }\n                const v = el.querySelector(query);\n                if (v !== null) {\n                    return v;\n                }\n            }\n        }\n        return null;\n    }\n    get firstChild() {\n        if (this.parentElement) {\n            const first = this.open.nextSibling;\n            if (first === this.close) {\n                return null;\n            }\n            return first;\n        }\n        else {\n            return this.template.firstChild;\n        }\n    }\n    get nextSibling() {\n        return this.close.nextSibling;\n    }\n    get previousSibling() {\n        return this.open.previousSibling;\n    }\n    get childNodes() {\n        if (!this.parentElement) {\n            return this.template.childNodes;\n        }\n        const nodes = [];\n        let node = this.open;\n        while ((node = node.nextSibling)) {\n            if (node !== this.close) {\n                nodes.push(node);\n            }\n            else {\n                break;\n            }\n        }\n        return nodes;\n    }\n    get isConnected() {\n        return this.open.isConnected;\n    }\n    get parentElement() {\n        return this.open.parentElement;\n    }\n}\nconst updateComment = (attributes) => {\n    return `qv ${serializeVirtualAttributes(attributes)}`;\n};\nexport const processVirtualNodes = (node) => {\n    if (node == null) {\n        return null;\n    }\n    if (isComment(node)) {\n        const virtual = getVirtualElement(node);\n        if (virtual) {\n            return virtual;\n        }\n    }\n    return node;\n};\nexport const getVirtualElement = (open) => {\n    const virtual = open[VIRTUAL_SYMBOL];\n    if (virtual) {\n        return virtual;\n    }\n    if (open.data.startsWith('qv ')) {\n        const close = findClose(open);\n        return new VirtualElementImpl(open, close);\n    }\n    return null;\n};\nconst findClose = (open) => {\n    let node = open.nextSibling;\n    let stack = 1;\n    while (node) {\n        if (isComment(node)) {\n            if (node.data.startsWith('qv ')) {\n                stack++;\n            }\n            else if (node.data === '/qv') {\n                stack--;\n                if (stack === 0) {\n                    return node;\n                }\n            }\n        }\n        node = node.nextSibling;\n    }\n    throw new Error('close not found');\n};\nexport const isComment = (node) => {\n    return node.nodeType === 8;\n};\nexport const getRootNode = (node) => {\n    if (node == null) {\n        return null; // TODO\n    }\n    if (isVirtualElement(node)) {\n        return node.open;\n    }\n    else {\n        return node;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { QScopedStyle } from '../../util/markers';\nimport { isNotNullable, isPromise, promiseAll, then } from '../../util/promises';\nimport { qDev, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { SkipRerender, Virtual } from '../jsx/host.public';\nimport { isJSXNode, SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { executeComponent } from '../execute-component';\nimport { serializeSStyle } from '../../component/qrl-styles';\nimport { VIRTUAL } from './virtual-element';\nimport { appendHeadStyle } from './operations';\nexport const renderComponent = (rctx, ctx, flags) => {\n    const justMounted = !ctx.$mounted$;\n    // TODO, serialize scopeIds\n    return then(executeComponent(rctx, ctx), (res) => {\n        if (res) {\n            const hostElement = ctx.$element$;\n            const newCtx = res.rctx;\n            const invocatinContext = newInvokeContext(rctx.$static$.$doc$, hostElement);\n            invocatinContext.$subscriber$ = hostElement;\n            invocatinContext.$renderCtx$ = newCtx;\n            if (justMounted) {\n                if (ctx.$appendStyles$) {\n                    for (const style of ctx.$appendStyles$) {\n                        appendHeadStyle(rctx.$static$, style);\n                    }\n                }\n                if (ctx.$scopeIds$) {\n                    const value = serializeSStyle(ctx.$scopeIds$);\n                    if (value) {\n                        hostElement.setAttribute(QScopedStyle, value);\n                    }\n                }\n            }\n            const processedJSXNode = processData(res.node, invocatinContext);\n            return then(processedJSXNode, (processedJSXNode) => {\n                const newVdom = wrapJSX(hostElement, processedJSXNode);\n                const oldVdom = getVdom(ctx);\n                ctx.$vdom$ = newVdom;\n                return visitJsxNode(newCtx, oldVdom, newVdom, flags);\n            });\n        }\n    });\n};\nexport const getVdom = (ctx) => {\n    if (!ctx.$vdom$) {\n        ctx.$vdom$ = domToVnode(ctx.$element$);\n    }\n    return ctx.$vdom$;\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $children$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$children$ = $children$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n        seal(this);\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const key = node.key != null ? String(node.key) : null;\n    const nodeType = node.type;\n    const props = node.props;\n    const originalChildren = props.children;\n    let textType = '';\n    if (isString(nodeType)) {\n        textType = nodeType;\n    }\n    else if (nodeType === Virtual) {\n        textType = VIRTUAL;\n    }\n    else if (nodeType === SkipRerender) {\n        textType = SKIP_RENDER_TYPE;\n    }\n    else if (isFunction(nodeType)) {\n        const res = invocationContext\n            ? invoke(invocationContext, () => nodeType(props, node.key))\n            : nodeType(props, node.key);\n        return processData(res, invocationContext);\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, nodeType);\n    }\n    let children = EMPTY_ARRAY;\n    if (originalChildren != null) {\n        return then(processData(originalChildren, invocationContext), (result) => {\n            if (result !== undefined) {\n                children = isArray(result) ? result : [result];\n            }\n            return new ProcessedJSXNodeImpl(textType, props, children, key);\n        });\n    }\n    else {\n        return new ProcessedJSXNodeImpl(textType, props, children, key);\n    }\n};\nexport const wrapJSX = (element, input) => {\n    const children = input === undefined ? EMPTY_ARRAY : isArray(input) ? input : [input];\n    const node = new ProcessedJSXNodeImpl(':virtual', {}, children, null);\n    node.$elm$ = element;\n    return node;\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isString(node) || typeof node === 'number') {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return then(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { ELEMENT_ID, OnRenderProp, QSlot, QSlotRef, QSlotS } from '../../util/markers';\nimport { cleanupContext, getContext, getPropsMutator, tryGetContext, } from '../../props/props';\nimport { addQRLListener, isOnProp, setEvent } from '../../props/props-on';\nimport { isPromise, promiseAll, then } from '../../util/promises';\nimport { assertDefined, assertEqual, assertTrue } from '../../assert/assert';\nimport { logWarn } from '../../util/log';\nimport { qDev, qSerialize } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { assertQrl, isQrl } from '../../import/qrl-class';\nimport { assertQwikElement, isQwikElement, isText, isVirtualElement } from '../../util/element';\nimport { getVdom, ProcessedJSXNodeImpl, renderComponent } from './render-dom';\nimport { parseClassAny, pushRenderContext, setQId, SKIPS_PROPS, stringifyStyle, } from '../execute-component';\nimport { getRootNode, newVirtualElement, processVirtualNodes, queryAllVirtualByAttribute, VIRTUAL, } from './virtual-element';\nimport { appendChild, createElement, createTemplate, createTextNode, executeDOMRender, getKey, insertBefore, prepend, removeNode, setAttribute, setClasslist, setKey, setProperty, } from './operations';\nimport { serializeQRLs } from '../../import/qrl';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const IS_SVG = 1 << 0;\nexport const IS_HEAD = 1 << 1;\nconst CHILDREN_PLACEHOLDER = [];\nexport const visitJsxNode = (ctx, oldVnode, newVnode, flags) => {\n    return smartUpdateChildren(ctx, oldVnode, newVnode, 'root', flags);\n};\nexport const smartUpdateChildren = (ctx, oldVnode, newVnode, mode, flags) => {\n    assertQwikElement(oldVnode.$elm$);\n    let ch = newVnode.$children$;\n    const elm = oldVnode.$elm$;\n    const needsDOMRead = oldVnode.$children$ === CHILDREN_PLACEHOLDER;\n    if (needsDOMRead) {\n        if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n            if (elm.firstChild !== null) {\n                return;\n            }\n            ch = ch[0].$children$;\n        }\n        const isHead = elm.nodeName === 'HEAD';\n        if (isHead) {\n            mode = 'head';\n            flags |= IS_HEAD;\n        }\n    }\n    const oldCh = getVnodeChildren(oldVnode, mode);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return updateChildren(ctx, elm, oldCh, ch, flags);\n    }\n    else if (ch.length > 0) {\n        return addVnodes(ctx, elm, null, ch, 0, ch.length - 1, flags);\n    }\n    else if (oldCh.length > 0) {\n        return removeVnodes(ctx.$static$, oldCh, 0, oldCh.length - 1);\n    }\n};\nexport const getVnodeChildren = (vnode, mode) => {\n    const oldCh = vnode.$children$;\n    const elm = vnode.$elm$;\n    if (oldCh === CHILDREN_PLACEHOLDER) {\n        return (vnode.$children$ = getChildrenVnodes(elm, mode));\n    }\n    return oldCh;\n};\nexport const updateChildren = (ctx, parentElm, oldCh, newCh, flags) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    const staticCtx = ctx.$static$;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newStartVnode)) {\n            results.push(patchVnode(ctx, oldStartVnode, newStartVnode, flags));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (sameVnode(oldEndVnode, newEndVnode)) {\n            results.push(patchVnode(ctx, oldEndVnode, newEndVnode, flags));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newEndVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved right\n            results.push(patchVnode(ctx, oldStartVnode, newEndVnode, flags));\n            insertBefore(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldEndVnode, newStartVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved left\n            results.push(patchVnode(ctx, oldEndVnode, newStartVnode, flags));\n            insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, flags);\n                results.push(then(newElm, (newElm) => {\n                    insertBefore(staticCtx, parentElm, newElm, oldStartVnode.$elm$);\n                }));\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (!isTagName(elmToMove, newStartVnode.$type$)) {\n                    const newElm = createElm(ctx, newStartVnode, flags);\n                    results.push(then(newElm, (newElm) => {\n                        insertBefore(staticCtx, parentElm, newElm, oldStartVnode.$elm$);\n                    }));\n                }\n                else {\n                    results.push(patchVnode(ctx, elmToMove, newStartVnode, flags));\n                    oldCh[idxInOld] = undefined;\n                    assertDefined(elmToMove.$elm$, 'elmToMove $elm$ must be defined');\n                    insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = then(wait, () => {\n            removeVnodes(staticCtx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nconst getCh = (elm, filter) => {\n    const end = isVirtualElement(elm) ? elm.close : null;\n    const nodes = [];\n    let node = elm.firstChild;\n    while ((node = processVirtualNodes(node))) {\n        if (filter(node)) {\n            nodes.push(node);\n        }\n        node = node.nextSibling;\n        if (node === end) {\n            break;\n        }\n    }\n    return nodes;\n};\nexport const getChildren = (elm, mode) => {\n    // console.warn('DOM READ: getChildren()', elm);\n    switch (mode) {\n        case 'root':\n            return getCh(elm, isChildComponent);\n        case 'head':\n            return getCh(elm, isHeadChildren);\n        case 'elements':\n            return getCh(elm, isQwikElement);\n    }\n};\nexport const getChildrenVnodes = (elm, mode) => {\n    return getChildren(elm, mode).map(domToVnode);\n};\nexport const domToVnode = (node) => {\n    if (isQwikElement(node)) {\n        const t = new ProcessedJSXNodeImpl(node.localName, {}, CHILDREN_PLACEHOLDER, getKey(node));\n        t.$elm$ = node;\n        return t;\n    }\n    else if (isText(node)) {\n        const t = new ProcessedJSXNodeImpl(node.nodeName, {}, CHILDREN_PLACEHOLDER, null);\n        t.$text$ = node.data;\n        t.$elm$ = node;\n        return t;\n    }\n    throw new Error('invalid node');\n};\nexport const isNode = (elm) => {\n    const type = elm.nodeType;\n    return type === 1 || type === 3 || type === 111;\n};\nconst isHeadChildren = (node) => {\n    const type = node.nodeType;\n    if (type === 1) {\n        return node.hasAttribute('q:head');\n    }\n    return type === 111;\n};\nexport const isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nconst isChildComponent = (node) => {\n    const type = node.nodeType;\n    if (type === 3 || type === 111) {\n        return true;\n    }\n    if (type !== 1) {\n        return false;\n    }\n    const nodeName = node.nodeName;\n    if (nodeName === 'Q:TEMPLATE') {\n        return false;\n    }\n    if (nodeName === 'HEAD') {\n        return node.hasAttribute('q:head');\n    }\n    return true;\n};\nexport const splitChildren = (input) => {\n    const output = {};\n    for (const item of input) {\n        const key = getSlotName(item);\n        const node = output[key] ??\n            (output[key] = new ProcessedJSXNodeImpl(VIRTUAL, {\n                [QSlotS]: '',\n            }, [], key));\n        node.$children$.push(item);\n    }\n    return output;\n};\nexport const patchVnode = (rctx, oldVnode, newVnode, flags) => {\n    assertEqual(oldVnode.$type$, newVnode.$type$, 'old and new vnodes type must be the same');\n    const elm = oldVnode.$elm$;\n    const tag = newVnode.$type$;\n    const staticCtx = rctx.$static$;\n    const isVirtual = tag === VIRTUAL;\n    newVnode.$elm$ = elm;\n    // Render text nodes\n    if (tag === '#text') {\n        if (oldVnode.$text$ !== newVnode.$text$) {\n            setProperty(staticCtx, elm, 'data', newVnode.$text$);\n        }\n        return;\n    }\n    // Early exit for a skip render node\n    if (tag === SKIP_RENDER_TYPE) {\n        return;\n    }\n    // Track SVG state\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const props = newVnode.$props$;\n    const ctx = getContext(elm);\n    const isComponent = isVirtual && OnRenderProp in props;\n    if (!isComponent) {\n        updateProperties(ctx, rctx, oldVnode.$props$, props, isSvg);\n        if (isSvg && newVnode.$type$ === 'foreignObject') {\n            flags &= ~IS_SVG;\n            isSvg = false;\n        }\n        const isSlot = isVirtual && QSlotS in props;\n        if (isSlot) {\n            const currentComponent = rctx.$cmpCtx$;\n            assertDefined(currentComponent, 'slots can not be rendered outside a component');\n            assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n            currentComponent.$slots$.push(newVnode);\n            return;\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && newVnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return;\n        }\n        return smartUpdateChildren(rctx, oldVnode, newVnode, 'root', flags);\n    }\n    let needsRender = updateComponentProperties(ctx, rctx, props);\n    // TODO: review this corner case\n    if (!needsRender && !ctx.$renderQrl$ && !ctx.$element$.hasAttribute(ELEMENT_ID)) {\n        setQId(rctx, ctx);\n        ctx.$renderQrl$ = props[OnRenderProp];\n        assertQrl(ctx.$renderQrl$);\n        needsRender = true;\n    }\n    // Rendering of children of component is more complicated,\n    // since the children must be projected into the rendered slots\n    // In addition, nested childen might need rerendering, if that's the case\n    // we need to render the nested component, and wait before projecting the content\n    // since otherwise we don't know where the slots\n    if (needsRender) {\n        return then(renderComponent(rctx, ctx, flags), () => renderContentProjection(rctx, ctx, newVnode, flags));\n    }\n    return renderContentProjection(rctx, ctx, newVnode, flags);\n};\nconst renderContentProjection = (rctx, hostCtx, vnode, flags) => {\n    const newChildren = vnode.$children$;\n    const staticCtx = rctx.$static$;\n    const splittedNewChidren = splitChildren(newChildren);\n    const slotRctx = pushRenderContext(rctx, hostCtx);\n    const slotMaps = getSlotMap(hostCtx);\n    // Remove content from empty slots\n    Object.entries(slotMaps.slots).forEach(([key, slotEl]) => {\n        if (!splittedNewChidren[key]) {\n            const oldCh = getChildrenVnodes(slotEl, 'root');\n            if (oldCh.length > 0) {\n                const slotCtx = tryGetContext(slotEl);\n                if (slotCtx && slotCtx.$vdom$) {\n                    slotCtx.$vdom$.$children$ = [];\n                }\n                removeVnodes(staticCtx, oldCh, 0, oldCh.length - 1);\n            }\n        }\n    });\n    // Remove empty templates\n    Object.entries(slotMaps.templates).forEach(([key, templateEl]) => {\n        if (templateEl) {\n            if (!splittedNewChidren[key] || slotMaps.slots[key]) {\n                removeNode(staticCtx, templateEl);\n                slotMaps.templates[key] = undefined;\n            }\n        }\n    });\n    // Render into slots\n    return promiseAll(Object.entries(splittedNewChidren).map(([key, newVdom]) => {\n        const slotElm = getSlotElement(staticCtx, slotMaps, hostCtx.$element$, key);\n        const slotCtx = getContext(slotElm);\n        const oldVdom = getVdom(slotCtx);\n        slotCtx.$vdom$ = newVdom;\n        newVdom.$elm$ = slotElm;\n        return smartUpdateChildren(slotRctx, oldVdom, newVdom, 'root', flags);\n    }));\n};\nconst addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {\n    const promises = [];\n    let hasPromise = false;\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        const elm = createElm(ctx, ch, flags);\n        promises.push(elm);\n        if (isPromise(elm)) {\n            hasPromise = true;\n        }\n    }\n    if (hasPromise) {\n        return Promise.all(promises).then((children) => insertChildren(ctx.$static$, parentElm, children, before));\n    }\n    else {\n        insertChildren(ctx.$static$, parentElm, promises, before);\n    }\n};\nconst insertChildren = (ctx, parentElm, children, before) => {\n    for (const child of children) {\n        insertBefore(ctx, parentElm, child, before);\n    }\n};\nconst removeVnodes = (ctx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            assertDefined(ch.$elm$, 'vnode elm must be defined');\n            removeNode(ctx, ch.$elm$);\n        }\n    }\n};\nconst getSlotElement = (ctx, slotMaps, parentEl, slotName) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return slotEl;\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return templateEl;\n    }\n    const template = createTemplate(ctx.$doc$, slotName);\n    prepend(ctx, parentEl, template);\n    slotMaps.templates[slotName] = template;\n    return template;\n};\nconst getSlotName = (node) => {\n    return node.$props$[QSlot] ?? '';\n};\nconst createElm = (rctx, vnode, flags) => {\n    const tag = vnode.$type$;\n    const doc = rctx.$static$.$doc$;\n    if (tag === '#text') {\n        return (vnode.$elm$ = createTextNode(doc, vnode.$text$));\n    }\n    let elm;\n    let isHead = !!(flags & IS_HEAD);\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const isVirtual = tag === VIRTUAL;\n    if (isVirtual) {\n        elm = newVirtualElement(doc);\n    }\n    else if (tag === 'head') {\n        elm = doc.head;\n        flags |= IS_HEAD;\n        isHead = true;\n    }\n    else {\n        elm = createElement(doc, tag, isSvg);\n        flags &= ~IS_HEAD;\n    }\n    vnode.$elm$ = elm;\n    const props = vnode.$props$;\n    const isComponent = OnRenderProp in props;\n    const staticCtx = rctx.$static$;\n    if (isSvg && tag === 'foreignObject') {\n        isSvg = false;\n        flags &= ~IS_SVG;\n    }\n    if (isComponent) {\n        setKey(elm, vnode.$key$);\n        assertTrue(isVirtual, 'component must be a virtual element');\n        const elCtx = getContext(elm);\n        updateComponentProperties(elCtx, rctx, props);\n        setQId(rctx, elCtx);\n        // Run mount hook\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        elCtx.$renderQrl$ = renderQRL;\n        return then(renderComponent(rctx, elCtx, flags), () => {\n            let children = vnode.$children$;\n            if (children.length === 0) {\n                return elm;\n            }\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotRctx = pushRenderContext(rctx, elCtx);\n            const slotMap = getSlotMap(elCtx);\n            const elements = children.map((ch) => createElm(slotRctx, ch, flags));\n            return then(promiseAll(elements), () => {\n                for (const node of children) {\n                    assertDefined(node.$elm$, 'vnode elm must be defined');\n                    appendChild(staticCtx, getSlotElement(staticCtx, slotMap, elm, getSlotName(node)), node.$elm$);\n                }\n                return elm;\n            });\n        });\n    }\n    const currentComponent = rctx.$cmpCtx$;\n    const isSlot = isVirtual && QSlotS in props;\n    const hasRef = !isVirtual && 'ref' in props;\n    if (currentComponent && !isVirtual) {\n        const scopedIds = currentComponent.$scopeIds$;\n        if (scopedIds) {\n            scopedIds.forEach((styleId) => {\n                elm.classList.add(styleId);\n            });\n        }\n        if (!currentComponent.$attachedListeners$ && currentComponent.li) {\n            const elCtx = getContext(elm);\n            currentComponent.$attachedListeners$ = true;\n            currentComponent.li.forEach((qrls, eventName) => {\n                addQRLListener(elCtx, eventName, qrls);\n            });\n        }\n    }\n    if (isSlot) {\n        assertDefined(currentComponent, 'slot can only be used inside component');\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        setKey(elm, vnode.$key$);\n        directSetAttribute(elm, QSlotRef, currentComponent.$id$);\n        currentComponent.$slots$.push(vnode);\n        staticCtx.$addSlots$.push([elm, currentComponent.$element$]);\n    }\n    else if (qSerialize) {\n        setKey(elm, vnode.$key$);\n    }\n    setProperties(staticCtx, elm, props, isSvg);\n    if (qSerialize) {\n        const elCtx = getContext(elm);\n        const listeners = elCtx.li;\n        if (isHead && !isVirtual) {\n            directSetAttribute(elm, 'q:head', '');\n        }\n        if (listeners || hasRef) {\n            setQId(rctx, elCtx);\n        }\n        if (listeners) {\n            listeners.forEach((qrl, key) => {\n                setAttribute(staticCtx, elm, key, serializeQRLs(qrl, elCtx));\n            });\n        }\n    }\n    const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n    if (setsInnerHTML) {\n        if (qDev && vnode.$children$.length > 0) {\n            logWarn('Node can not have children when innerHTML is set');\n        }\n        return elm;\n    }\n    let children = vnode.$children$;\n    if (children.length === 0) {\n        return elm;\n    }\n    if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n        children = children[0].$children$;\n    }\n    const promises = children.map((ch) => createElm(rctx, ch, flags));\n    return then(promiseAll(promises), () => {\n        for (const node of children) {\n            assertDefined(node.$elm$, 'vnode elm must be defined');\n            appendChild(rctx.$static$, elm, node.$elm$);\n        }\n        return elm;\n    });\n};\nconst getSlots = (ctx) => {\n    const slots = ctx.$slots$;\n    if (!slots) {\n        const parent = ctx.$element$.parentElement;\n        assertDefined(parent, 'component should be already attached to the dom');\n        return (ctx.$slots$ = readDOMSlots(ctx));\n    }\n    return slots;\n};\nconst getSlotMap = (ctx) => {\n    const slotsArray = getSlots(ctx);\n    const slots = {};\n    const templates = {};\n    const t = Array.from(ctx.$element$.childNodes).filter(isSlotTemplate);\n    // Map virtual slots\n    for (const vnode of slotsArray) {\n        assertQwikElement(vnode.$elm$);\n        slots[vnode.$key$ ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst readDOMSlots = (ctx) => {\n    const parent = ctx.$element$.parentElement;\n    assertDefined(parent, 'component should be already attached to the dom');\n    return queryAllVirtualByAttribute(parent, QSlotRef, ctx.$id$).map(domToVnode);\n};\nconst handleStyle = (ctx, elm, _, newValue) => {\n    setProperty(ctx, elm.style, 'cssText', stringifyStyle(newValue));\n    return true;\n};\nconst handleClass = (ctx, elm, _, newValue, oldValue) => {\n    const oldClasses = parseClassAny(oldValue);\n    const newClasses = parseClassAny(newValue);\n    setClasslist(ctx, elm, oldClasses.filter((c) => c && !newClasses.includes(c)), newClasses.filter((c) => c && !oldClasses.includes(c)));\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, prop, newValue) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            setProperty(ctx, elm, prop, newValue);\n        }\n    }\n    return true;\n};\nconst dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\nconst setInnerHTML = (ctx, elm, _, newValue) => {\n    if (dangerouslySetInnerHTML in elm) {\n        setProperty(ctx, elm, dangerouslySetInnerHTML, newValue);\n    }\n    else if ('innerHTML' in elm) {\n        setProperty(ctx, elm, 'innerHTML', newValue);\n    }\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    className: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n    innerHTML: noop,\n};\nexport const updateProperties = (elCtx, rctx, oldProps, newProps, isSvg) => {\n    const keys = Object.keys(newProps);\n    if (keys.length === 0) {\n        return false;\n    }\n    let renderListeners = false;\n    const staticCtx = rctx.$static$;\n    const elm = elCtx.$element$;\n    for (const key of keys) {\n        if (key === 'children') {\n            continue;\n        }\n        const newValue = newProps[key];\n        const oldValue = oldProps[key];\n        if (oldValue === newValue) {\n            continue;\n        }\n        if (key === 'ref') {\n            newValue.current = elm;\n            continue;\n        }\n        if (isOnProp(key)) {\n            if (areExactQRLs(newValue, oldValue)) {\n                continue;\n            }\n            addGlobalListener(staticCtx, elm, setEvent(elCtx, key, newValue));\n            renderListeners = true;\n            continue;\n        }\n        // Check if its an exception\n        const exception = PROP_HANDLER_MAP[key];\n        if (exception) {\n            if (exception(staticCtx, elm, key, newValue, oldValue)) {\n                continue;\n            }\n        }\n        // Check if property in prototype\n        if (!isSvg && key in elm) {\n            setProperty(staticCtx, elm, key, newValue);\n            continue;\n        }\n        // Fallback to render attribute\n        setAttribute(staticCtx, elm, key, newValue);\n    }\n    const cmp = rctx.$cmpCtx$;\n    if (cmp && !cmp.$attachedListeners$) {\n        cmp.$attachedListeners$ = true;\n        cmp.li?.forEach((qrls, eventName) => {\n            addQRLListener(elCtx, eventName, qrls);\n            addGlobalListener(staticCtx, elm, eventName);\n            renderListeners = true;\n        });\n    }\n    if (qSerialize && renderListeners) {\n        elCtx.li?.forEach((value, key) => {\n            setAttribute(staticCtx, elm, key, serializeQRLs(value, elCtx));\n        });\n    }\n    return false;\n};\nconst addGlobalListener = (staticCtx, elm, prop) => {\n    if (!qSerialize && prop.includes(':')) {\n        setAttribute(staticCtx, elm, prop, '');\n    }\n};\nexport const areExactQRLs = (oldValue, newValue) => {\n    if (!isQrl(oldValue) || !isQrl(newValue) || oldValue.$hash$ !== newValue.$hash$) {\n        return false;\n    }\n    const cA = oldValue.$captureRef$;\n    const cB = newValue.$captureRef$;\n    if (cA && cB) {\n        return sameArrays(cA, cB);\n    }\n    return false;\n};\nexport const sameArrays = (a1, a2) => {\n    const len = a1.length;\n    if (len !== a2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const setProperties = (rctx, elm, newProps, isSvg) => {\n    const keys = Object.keys(newProps);\n    if (keys.length === 0) {\n        return false;\n    }\n    for (const key of keys) {\n        if (key === 'children') {\n            continue;\n        }\n        const newValue = newProps[key];\n        if (key === 'ref') {\n            newValue.current = elm;\n            continue;\n        }\n        if (isOnProp(key)) {\n            addGlobalListener(rctx, elm, setEvent(getContext(elm), key, newValue));\n            continue;\n        }\n        // Check if its an exception\n        const exception = PROP_HANDLER_MAP[key];\n        if (exception) {\n            if (exception(rctx, elm, key, newValue, undefined)) {\n                continue;\n            }\n        }\n        // Check if property in prototype\n        if (!isSvg && key in elm) {\n            setProperty(rctx, elm, key, newValue);\n            continue;\n        }\n        // Fallback to render attribute\n        setAttribute(rctx, elm, key, newValue);\n    }\n    return false;\n};\nexport const updateComponentProperties = (ctx, rctx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    if (keys.length === 0) {\n        return false;\n    }\n    const qwikProps = getPropsMutator(ctx, rctx.$static$.$containerState$);\n    for (const key of keys) {\n        if (SKIPS_PROPS.includes(key)) {\n            continue;\n        }\n        qwikProps.set(key, expectProps[key]);\n    }\n    return ctx.$dirty$;\n};\nexport const cleanupTree = (parent, rctx, subsManager) => {\n    if (parent.hasAttribute(QSlotS)) {\n        rctx.$rmSlots$.push(parent);\n        return;\n    }\n    cleanupElement(parent, subsManager);\n    const ch = getChildren(parent, 'elements');\n    for (const child of ch) {\n        cleanupTree(child, rctx, subsManager);\n    }\n};\nconst cleanupElement = (el, subsManager) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        cleanupContext(ctx, subsManager);\n    }\n};\nexport const executeContextWithSlots = ({ $static$: ctx }) => {\n    executeDOMRender(ctx);\n};\nexport const directAppendChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.appendTo(parent);\n    }\n    else {\n        parent.appendChild(child);\n    }\n};\nexport const directRemoveChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.remove();\n    }\n    else {\n        parent.removeChild(child);\n    }\n};\nexport const directInsertBefore = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, getRootNode(ref));\n    }\n    else {\n        parent.insertBefore(child, getRootNode(ref));\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        const key = child.$key$;\n        if (key != null) {\n            map[key] = i;\n        }\n    }\n    return map;\n};\nconst sameVnode = (vnode1, vnode2) => {\n    if (vnode1.$type$ !== vnode2.$type$) {\n        return false;\n    }\n    return vnode1.$key$ === vnode2.$key$;\n};\nconst isTagName = (elm, tagName) => {\n    return elm.$type$ === tagName;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL3Zpc2l0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RixPQUFPLEVBQ0wsY0FBYyxFQUNkLFVBQVUsRUFDVixlQUFlLEVBRWYsYUFBYSxHQUNkLE1BQU0sbUJBQW1CLENBQUM7QUFDM0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFMUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0UsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRyxPQUFPLEVBQUUsT0FBTyxFQUFvQixvQkFBb0IsRUFBRSxlQUFlLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFaEcsT0FBTyxFQUNMLGFBQWEsRUFDYixpQkFBaUIs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QU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUM7QUFDaEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRUxFTUVOVF9JRCwgT25SZW5kZXJQcm9wLCBRU2xvdCwgUVNsb3RSZWYsIFFTbG90UyB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQge1xuICBjbGVhbnVwQ29udGV4dCxcbiAgZ2V0Q29udGV4dCxcbiAgZ2V0UHJvcHNNdXRhdG9yLFxuICBRQ29udGV4dCxcbiAgdHJ5R2V0Q29udGV4dCxcbn0gZnJvbSAnLi4vLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgYWRkUVJMTGlzdGVuZXIsIGlzT25Qcm9wLCBzZXRFdmVudCB9IGZyb20gJy4uLy4uL3Byb3BzL3Byb3BzLW9uJztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi8uLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IGlzUHJvbWlzZSwgcHJvbWlzZUFsbCwgdGhlbiB9IGZyb20gJy4uLy4uL3V0aWwvcHJvbWlzZXMnO1xuaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0RXF1YWwsIGFzc2VydFRydWUgfSBmcm9tICcuLi8uLi9hc3NlcnQvYXNzZXJ0JztcbmltcG9ydCB7IGxvZ1dhcm4gfSBmcm9tICcuLi8uLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBxRGV2LCBxU2VyaWFsaXplIH0gZnJvbSAnLi4vLi4vdXRpbC9xZGV2JztcbmltcG9ydCB0eXBlIHsgT25SZW5kZXJGbiB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC9jb21wb25lbnQucHVibGljJztcbmltcG9ydCB7IGRpcmVjdEdldEF0dHJpYnV0ZSwgZGlyZWN0U2V0QXR0cmlidXRlIH0gZnJvbSAnLi4vZmFzdC1jYWxscyc7XG5pbXBvcnQgeyBTS0lQX1JFTkRFUl9UWVBFIH0gZnJvbSAnLi4vanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB7IGFzc2VydFFybCwgaXNRcmwgfSBmcm9tICcuLi8uLi9pbXBvcnQvcXJsLWNsYXNzJztcbmltcG9ydCB7IGFzc2VydFF3aWtFbGVtZW50LCBpc1F3aWtFbGVtZW50LCBpc1RleHQsIGlzVmlydHVhbEVsZW1lbnQgfSBmcm9tICcuLi8uLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgZ2V0VmRvbSwgUHJvY2Vzc2VkSlNYTm9kZSwgUHJvY2Vzc2VkSlNYTm9kZUltcGwsIHJlbmRlckNvbXBvbmVudCB9IGZyb20gJy4vcmVuZGVyLWRvbSc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlckNvbnRleHQsIFJlbmRlclN0YXRpY0NvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge1xuICBwYXJzZUNsYXNzQW55LFxuICBwdXNoUmVuZGVyQ29udGV4dCxcbiAgc2V0UUlkLFxuICBTS0lQU19QUk9QUyxcbiAgc3RyaW5naWZ5U3R5bGUsXG59IGZyb20gJy4uL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB0eXBlIHsgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4uL2NvbnRhaW5lcic7XG5pbXBvcnQgdHlwZSB7IFJlZiB9IGZyb20gJy4uLy4uL3VzZS91c2UtcmVmJztcbmltcG9ydCB7XG4gIGdldFJvb3ROb2RlLFxuICBuZXdWaXJ0dWFsRWxlbWVudCxcbiAgcHJvY2Vzc1ZpcnR1YWxOb2RlcyxcbiAgcXVlcnlBbGxWaXJ0dWFsQnlBdHRyaWJ1dGUsXG4gIFF3aWtFbGVtZW50LFxuICBWSVJUVUFMLFxuICBWaXJ0dWFsRWxlbWVudCxcbn0gZnJvbSAnLi92aXJ0dWFsLWVsZW1lbnQnO1xuXG5pbXBvcnQge1xuICBhcHBlbmRDaGlsZCxcbiAgY3JlYXRlRWxlbWVudCxcbiAgY3JlYXRlVGVtcGxhdGUsXG4gIGNyZWF0ZVRleHROb2RlLFxuICBleGVjdXRlRE9NUmVuZGVyLFxuICBnZXRLZXksXG4gIGluc2VydEJlZm9yZSxcbiAgcHJlcGVuZCxcbiAgcmVtb3ZlTm9kZSxcbiAgc2V0QXR0cmlidXRlLFxuICBzZXRDbGFzc2xpc3QsXG4gIHNldEtleSxcbiAgc2V0UHJvcGVydHksXG59IGZyb20gJy4vb3BlcmF0aW9ucyc7XG5pbXBvcnQgeyBzZXJpYWxpemVRUkxzIH0gZnJvbSAnLi4vLi4vaW1wb3J0L3FybCc7XG5cbmV4cG9ydCBjb25zdCBTVkdfTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG5leHBvcnQgY29uc3QgSVNfU1ZHID0gMSA8PCAwO1xuZXhwb3J0IGNvbnN0IElTX0hFQUQgPSAxIDw8IDE7XG5cbnR5cGUgS2V5VG9JbmRleE1hcCA9IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG5cbmNvbnN0IENISUxEUkVOX1BMQUNFSE9MREVSOiBQcm9jZXNzZWRKU1hOb2RlW10gPSBbXTtcbnR5cGUgUHJvcEhhbmRsZXIgPSAoXG4gIGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCB8IHVuZGVmaW5lZCxcbiAgZWw6IEhUTUxFbGVtZW50LFxuICBrZXk6IHN0cmluZyxcbiAgbmV3VmFsdWU6IGFueSxcbiAgb2xkVmFsdWU6IGFueVxuKSA9PiBib29sZWFuO1xuXG5leHBvcnQgdHlwZSBDaGlsZHJlbk1vZGUgPSAncm9vdCcgfCAnaGVhZCcgfCAnZWxlbWVudHMnO1xuXG5leHBvcnQgY29uc3QgdmlzaXRKc3hOb2RlID0gKFxuICBjdHg6IFJlbmRlckNvbnRleHQsXG4gIG9sZFZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBuZXdWbm9kZTogUHJvY2Vzc2VkSlNYTm9kZSxcbiAgZmxhZ3M6IG51bWJlclxuKTogVmFsdWVPclByb21pc2U8dm9pZD4gPT4ge1xuICByZXR1cm4gc21hcnRVcGRhdGVDaGlsZHJlbihjdHgsIG9sZFZub2RlLCBuZXdWbm9kZSwgJ3Jvb3QnLCBmbGFncyk7XG59O1xuXG5leHBvcnQgY29uc3Qgc21hcnRVcGRhdGVDaGlsZHJlbiA9IChcbiAgY3R4OiBSZW5kZXJDb250ZXh0LFxuICBvbGRWbm9kZTogUHJvY2Vzc2VkSlNYTm9kZSxcbiAgbmV3Vm5vZGU6IFByb2Nlc3NlZEpTWE5vZGUsXG4gIG1vZGU6IENoaWxkcmVuTW9kZSxcbiAgZmxhZ3M6IG51bWJlclxuKSA9PiB7XG4gIGFzc2VydFF3aWtFbGVtZW50KG9sZFZub2RlLiRlbG0kKTtcblxuICBsZXQgY2ggPSBuZXdWbm9kZS4kY2hpbGRyZW4kO1xuICBjb25zdCBlbG0gPSBvbGRWbm9kZS4kZWxtJDtcbiAgY29uc3QgbmVlZHNET01SZWFkID0gb2xkVm5vZGUuJGNoaWxkcmVuJCA9PT0gQ0hJTERSRU5fUExBQ0VIT0xERVI7XG4gIGlmIChuZWVkc0RPTVJlYWQpIHtcbiAgICBpZiAoY2gubGVuZ3RoID09PSAxICYmIGNoWzBdLiR0eXBlJCA9PT0gU0tJUF9SRU5ERVJfVFlQRSkge1xuICAgICAgaWYgKGVsbS5maXJzdENoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNoID0gY2hbMF0uJGNoaWxkcmVuJDtcbiAgICB9XG4gICAgY29uc3QgaXNIZWFkID0gZWxtLm5vZGVOYW1lID09PSAnSEVBRCc7XG4gICAgaWYgKGlzSGVhZCkge1xuICAgICAgbW9kZSA9ICdoZWFkJztcbiAgICAgIGZsYWdzIHw9IElTX0hFQUQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb2xkQ2ggPSBnZXRWbm9kZUNoaWxkcmVuKG9sZFZub2RlLCBtb2RlKTtcbiAgaWYgKG9sZENoLmxlbmd0aCA+IDAgJiYgY2gubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB1cGRhdGVDaGlsZHJlbihjdHgsIGVsbSwgb2xkQ2gsIGNoLCBmbGFncyk7XG4gIH0gZWxzZSBpZiAoY2gubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBhZGRWbm9kZXMoY3R4LCBlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBmbGFncyk7XG4gIH0gZWxzZSBpZiAob2xkQ2gubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiByZW1vdmVWbm9kZXMoY3R4LiRzdGF0aWMkLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWbm9kZUNoaWxkcmVuID0gKHZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLCBtb2RlOiBDaGlsZHJlbk1vZGUpID0+IHtcbiAgY29uc3Qgb2xkQ2ggPSB2bm9kZS4kY2hpbGRyZW4kO1xuICBjb25zdCBlbG0gPSB2bm9kZS4kZWxtJCBhcyBFbGVtZW50O1xuICBpZiAob2xkQ2ggPT09IENISUxEUkVOX1BMQUNFSE9MREVSKSB7XG4gICAgcmV0dXJuICh2bm9kZS4kY2hpbGRyZW4kID0gZ2V0Q2hpbGRyZW5Wbm9kZXMoZWxtLCBtb2RlKSk7XG4gIH1cbiAgcmV0dXJuIG9sZENoO1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUNoaWxkcmVuID0gKFxuICBjdHg6IFJlbmRlckNvbnRleHQsXG4gIHBhcmVudEVsbTogUXdpa0VsZW1lbnQsXG4gIG9sZENoOiBQcm9jZXNzZWRKU1hOb2RlW10sXG4gIG5ld0NoOiBQcm9jZXNzZWRKU1hOb2RlW10sXG4gIGZsYWdzOiBudW1iZXJcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgbGV0IG9sZFN0YXJ0SWR4ID0gMDtcbiAgbGV0IG5ld1N0YXJ0SWR4ID0gMDtcbiAgbGV0IG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gIGxldCBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gIGxldCBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gIGxldCBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICBsZXQgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICBsZXQgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICBsZXQgb2xkS2V5VG9JZHg6IEtleVRvSW5kZXhNYXAgfCB1bmRlZmluZWQ7XG4gIGxldCBpZHhJbk9sZDogbnVtYmVyO1xuICBsZXQgZWxtVG9Nb3ZlOiBQcm9jZXNzZWRKU1hOb2RlO1xuICBjb25zdCByZXN1bHRzID0gW107XG4gIGNvbnN0IHN0YXRpY0N0eCA9IGN0eC4kc3RhdGljJDtcblxuICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgIGlmIChvbGRTdGFydFZub2RlID09IG51bGwpIHtcbiAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgbWlnaHQgaGF2ZSBiZWVuIG1vdmVkIGxlZnRcbiAgICB9IGVsc2UgaWYgKG9sZEVuZFZub2RlID09IG51bGwpIHtcbiAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRWbm9kZSA9PSBudWxsKSB7XG4gICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgfSBlbHNlIGlmIChuZXdFbmRWbm9kZSA9PSBudWxsKSB7XG4gICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgcmVzdWx0cy5wdXNoKHBhdGNoVm5vZGUoY3R4LCBvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBmbGFncykpO1xuICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgIHJlc3VsdHMucHVzaChwYXRjaFZub2RlKGN0eCwgb2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBmbGFncykpO1xuICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgIGFzc2VydERlZmluZWQob2xkU3RhcnRWbm9kZS4kZWxtJCwgJ29sZFN0YXJ0Vm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICBhc3NlcnREZWZpbmVkKG9sZEVuZFZub2RlLiRlbG0kLCAnb2xkRW5kVm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG5cbiAgICAgIC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICByZXN1bHRzLnB1c2gocGF0Y2hWbm9kZShjdHgsIG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBmbGFncykpO1xuICAgICAgaW5zZXJ0QmVmb3JlKHN0YXRpY0N0eCwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLiRlbG0kLCBvbGRFbmRWbm9kZS4kZWxtJC5uZXh0U2libGluZyk7XG4gICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgIGFzc2VydERlZmluZWQob2xkU3RhcnRWbm9kZS4kZWxtJCwgJ29sZFN0YXJ0Vm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICBhc3NlcnREZWZpbmVkKG9sZEVuZFZub2RlLiRlbG0kLCAnb2xkRW5kVm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG5cbiAgICAgIC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgIHJlc3VsdHMucHVzaChwYXRjaFZub2RlKGN0eCwgb2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGZsYWdzKSk7XG4gICAgICBpbnNlcnRCZWZvcmUoc3RhdGljQ3R4LCBwYXJlbnRFbG0sIG9sZEVuZFZub2RlLiRlbG0kLCBvbGRTdGFydFZub2RlLiRlbG0kKTtcbiAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob2xkS2V5VG9JZHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgIH1cbiAgICAgIGlkeEluT2xkID0gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS4ka2V5JCBhcyBzdHJpbmddO1xuICAgICAgaWYgKGlkeEluT2xkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgY29uc3QgbmV3RWxtID0gY3JlYXRlRWxtKGN0eCwgbmV3U3RhcnRWbm9kZSwgZmxhZ3MpO1xuICAgICAgICByZXN1bHRzLnB1c2goXG4gICAgICAgICAgdGhlbihuZXdFbG0sIChuZXdFbG0pID0+IHtcbiAgICAgICAgICAgIGluc2VydEJlZm9yZShzdGF0aWNDdHgsIHBhcmVudEVsbSwgbmV3RWxtLCBvbGRTdGFydFZub2RlLiRlbG0kKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxtVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICBpZiAoIWlzVGFnTmFtZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUuJHR5cGUkKSkge1xuICAgICAgICAgIGNvbnN0IG5ld0VsbSA9IGNyZWF0ZUVsbShjdHgsIG5ld1N0YXJ0Vm5vZGUsIGZsYWdzKTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goXG4gICAgICAgICAgICB0aGVuKG5ld0VsbSwgKG5ld0VsbSkgPT4ge1xuICAgICAgICAgICAgICBpbnNlcnRCZWZvcmUoc3RhdGljQ3R4LCBwYXJlbnRFbG0sIG5ld0VsbSwgb2xkU3RhcnRWbm9kZS4kZWxtJCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHBhdGNoVm5vZGUoY3R4LCBlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGZsYWdzKSk7XG4gICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkIGFzIGFueTtcbiAgICAgICAgICBhc3NlcnREZWZpbmVkKGVsbVRvTW92ZS4kZWxtJCwgJ2VsbVRvTW92ZSAkZWxtJCBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICAgICAgICBpbnNlcnRCZWZvcmUoc3RhdGljQ3R4LCBwYXJlbnRFbG0sIGVsbVRvTW92ZS4kZWxtJCwgb2xkU3RhcnRWbm9kZS4kZWxtJCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICB9XG4gIH1cblxuICBpZiAobmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgY29uc3QgYmVmb3JlID0gbmV3Q2hbbmV3RW5kSWR4ICsgMV0gPT0gbnVsbCA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS4kZWxtJDtcbiAgICByZXN1bHRzLnB1c2goYWRkVm5vZGVzKGN0eCwgcGFyZW50RWxtLCBiZWZvcmUsIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBmbGFncykpO1xuICB9XG5cbiAgbGV0IHdhaXQgPSBwcm9taXNlQWxsKHJlc3VsdHMpIGFzIGFueTtcbiAgaWYgKG9sZFN0YXJ0SWR4IDw9IG9sZEVuZElkeCkge1xuICAgIHdhaXQgPSB0aGVuKHdhaXQsICgpID0+IHtcbiAgICAgIHJlbW92ZVZub2RlcyhzdGF0aWNDdHgsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gd2FpdDtcbn07XG5cbmNvbnN0IGdldENoID0gKGVsbTogUXdpa0VsZW1lbnQsIGZpbHRlcjogKGVsOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpID0+IGJvb2xlYW4pID0+IHtcbiAgY29uc3QgZW5kID0gaXNWaXJ0dWFsRWxlbWVudChlbG0pID8gZWxtLmNsb3NlIDogbnVsbDtcblxuICBjb25zdCBub2RlczogKE5vZGUgfCBWaXJ0dWFsRWxlbWVudClbXSA9IFtdO1xuICBsZXQgbm9kZTogTm9kZSB8IG51bGwgfCBWaXJ0dWFsRWxlbWVudCA9IGVsbS5maXJzdENoaWxkO1xuICB3aGlsZSAoKG5vZGUgPSBwcm9jZXNzVmlydHVhbE5vZGVzKG5vZGUpKSkge1xuICAgIGlmIChmaWx0ZXIobm9kZSkpIHtcbiAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgIGlmIChub2RlID09PSBlbmQpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZXM7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hpbGRyZW4gPSAoZWxtOiBRd2lrRWxlbWVudCwgbW9kZTogQ2hpbGRyZW5Nb2RlKTogKE5vZGUgfCBWaXJ0dWFsRWxlbWVudClbXSA9PiB7XG4gIC8vIGNvbnNvbGUud2FybignRE9NIFJFQUQ6IGdldENoaWxkcmVuKCknLCBlbG0pO1xuICBzd2l0Y2ggKG1vZGUpIHtcbiAgICBjYXNlICdyb290JzpcbiAgICAgIHJldHVybiBnZXRDaChlbG0sIGlzQ2hpbGRDb21wb25lbnQpO1xuICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgcmV0dXJuIGdldENoKGVsbSwgaXNIZWFkQ2hpbGRyZW4pO1xuICAgIGNhc2UgJ2VsZW1lbnRzJzpcbiAgICAgIHJldHVybiBnZXRDaChlbG0sIGlzUXdpa0VsZW1lbnQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q2hpbGRyZW5Wbm9kZXMgPSAoZWxtOiBRd2lrRWxlbWVudCwgbW9kZTogQ2hpbGRyZW5Nb2RlKSA9PiB7XG4gIHJldHVybiBnZXRDaGlsZHJlbihlbG0sIG1vZGUpLm1hcChkb21Ub1Zub2RlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkb21Ub1Zub2RlID0gKG5vZGU6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCk6IFByb2Nlc3NlZEpTWE5vZGUgPT4ge1xuICBpZiAoaXNRd2lrRWxlbWVudChub2RlKSkge1xuICAgIGNvbnN0IHQgPSBuZXcgUHJvY2Vzc2VkSlNYTm9kZUltcGwobm9kZS5sb2NhbE5hbWUsIHt9LCBDSElMRFJFTl9QTEFDRUhPTERFUiwgZ2V0S2V5KG5vZGUpKTtcbiAgICB0LiRlbG0kID0gbm9kZTtcbiAgICByZXR1cm4gdDtcbiAgfSBlbHNlIGlmIChpc1RleHQobm9kZSkpIHtcbiAgICBjb25zdCB0ID0gbmV3IFByb2Nlc3NlZEpTWE5vZGVJbXBsKG5vZGUubm9kZU5hbWUsIHt9LCBDSElMRFJFTl9QTEFDRUhPTERFUiwgbnVsbCk7XG4gICAgdC4kdGV4dCQgPSBub2RlLmRhdGE7XG4gICAgdC4kZWxtJCA9IG5vZGU7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG5vZGUnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc05vZGUgPSAoZWxtOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiBib29sZWFuID0+IHtcbiAgY29uc3QgdHlwZSA9IGVsbS5ub2RlVHlwZTtcbiAgcmV0dXJuIHR5cGUgPT09IDEgfHwgdHlwZSA9PT0gMyB8fCB0eXBlID09PSAxMTE7XG59O1xuXG5jb25zdCBpc0hlYWRDaGlsZHJlbiA9IChub2RlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiBib29sZWFuID0+IHtcbiAgY29uc3QgdHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gIGlmICh0eXBlID09PSAxKSB7XG4gICAgcmV0dXJuIChub2RlIGFzIEVsZW1lbnQpLmhhc0F0dHJpYnV0ZSgncTpoZWFkJyk7XG4gIH1cbiAgcmV0dXJuIHR5cGUgPT09IDExMTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1Nsb3RUZW1wbGF0ZSA9IChub2RlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiBub2RlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gbm9kZS5ub2RlTmFtZSA9PT0gJ1E6VEVNUExBVEUnO1xufTtcblxuY29uc3QgaXNDaGlsZENvbXBvbmVudCA9IChub2RlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiBib29sZWFuID0+IHtcbiAgY29uc3QgdHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gIGlmICh0eXBlID09PSAzIHx8IHR5cGUgPT09IDExMSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh0eXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG5vZGVOYW1lID0gbm9kZS5ub2RlTmFtZTtcbiAgaWYgKG5vZGVOYW1lID09PSAnUTpURU1QTEFURScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKG5vZGVOYW1lID09PSAnSEVBRCcpIHtcbiAgICByZXR1cm4gKG5vZGUgYXMgRWxlbWVudCkuaGFzQXR0cmlidXRlKCdxOmhlYWQnKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBzcGxpdENoaWxkcmVuID0gKGlucHV0OiBQcm9jZXNzZWRKU1hOb2RlW10pOiBSZWNvcmQ8c3RyaW5nLCBQcm9jZXNzZWRKU1hOb2RlPiA9PiB7XG4gIGNvbnN0IG91dHB1dDogUmVjb3JkPHN0cmluZywgUHJvY2Vzc2VkSlNYTm9kZT4gPSB7fTtcbiAgZm9yIChjb25zdCBpdGVtIG9mIGlucHV0KSB7XG4gICAgY29uc3Qga2V5ID0gZ2V0U2xvdE5hbWUoaXRlbSk7XG4gICAgY29uc3Qgbm9kZSA9XG4gICAgICBvdXRwdXRba2V5XSA/P1xuICAgICAgKG91dHB1dFtrZXldID0gbmV3IFByb2Nlc3NlZEpTWE5vZGVJbXBsKFxuICAgICAgICBWSVJUVUFMLFxuICAgICAgICB7XG4gICAgICAgICAgW1FTbG90U106ICcnLFxuICAgICAgICB9LFxuICAgICAgICBbXSxcbiAgICAgICAga2V5XG4gICAgICApKTtcbiAgICBub2RlLiRjaGlsZHJlbiQucHVzaChpdGVtKTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuZXhwb3J0IGNvbnN0IHBhdGNoVm5vZGUgPSAoXG4gIHJjdHg6IFJlbmRlckNvbnRleHQsXG4gIG9sZFZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBuZXdWbm9kZTogUHJvY2Vzc2VkSlNYTm9kZSxcbiAgZmxhZ3M6IG51bWJlclxuKTogVmFsdWVPclByb21pc2U8dm9pZD4gPT4ge1xuICBhc3NlcnRFcXVhbChvbGRWbm9kZS4kdHlwZSQsIG5ld1Zub2RlLiR0eXBlJCwgJ29sZCBhbmQgbmV3IHZub2RlcyB0eXBlIG11c3QgYmUgdGhlIHNhbWUnKTtcblxuICBjb25zdCBlbG0gPSBvbGRWbm9kZS4kZWxtJDtcbiAgY29uc3QgdGFnID0gbmV3Vm5vZGUuJHR5cGUkO1xuICBjb25zdCBzdGF0aWNDdHggPSByY3R4LiRzdGF0aWMkO1xuICBjb25zdCBpc1ZpcnR1YWwgPSB0YWcgPT09IFZJUlRVQUw7XG4gIG5ld1Zub2RlLiRlbG0kID0gZWxtO1xuXG4gIC8vIFJlbmRlciB0ZXh0IG5vZGVzXG4gIGlmICh0YWcgPT09ICcjdGV4dCcpIHtcbiAgICBpZiAob2xkVm5vZGUuJHRleHQkICE9PSBuZXdWbm9kZS4kdGV4dCQpIHtcbiAgICAgIHNldFByb3BlcnR5KHN0YXRpY0N0eCwgZWxtLCAnZGF0YScsIG5ld1Zub2RlLiR0ZXh0JCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEVhcmx5IGV4aXQgZm9yIGEgc2tpcCByZW5kZXIgbm9kZVxuICBpZiAodGFnID09PSBTS0lQX1JFTkRFUl9UWVBFKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gVHJhY2sgU1ZHIHN0YXRlXG4gIGxldCBpc1N2ZyA9ICEhKGZsYWdzICYgSVNfU1ZHKTtcbiAgaWYgKCFpc1N2ZyAmJiB0YWcgPT09ICdzdmcnKSB7XG4gICAgZmxhZ3MgfD0gSVNfU1ZHO1xuICAgIGlzU3ZnID0gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHByb3BzID0gbmV3Vm5vZGUuJHByb3BzJDtcbiAgY29uc3QgY3R4ID0gZ2V0Q29udGV4dChlbG0gYXMgRWxlbWVudCk7XG4gIGNvbnN0IGlzQ29tcG9uZW50ID0gaXNWaXJ0dWFsICYmIE9uUmVuZGVyUHJvcCBpbiBwcm9wcztcbiAgaWYgKCFpc0NvbXBvbmVudCkge1xuICAgIHVwZGF0ZVByb3BlcnRpZXMoY3R4LCByY3R4LCBvbGRWbm9kZS4kcHJvcHMkLCBwcm9wcywgaXNTdmcpO1xuXG4gICAgaWYgKGlzU3ZnICYmIG5ld1Zub2RlLiR0eXBlJCA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgICBmbGFncyAmPSB+SVNfU1ZHO1xuICAgICAgaXNTdmcgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgaXNTbG90ID0gaXNWaXJ0dWFsICYmIFFTbG90UyBpbiBwcm9wcztcbiAgICBpZiAoaXNTbG90KSB7XG4gICAgICBjb25zdCBjdXJyZW50Q29tcG9uZW50ID0gcmN0eC4kY21wQ3R4JDtcbiAgICAgIGFzc2VydERlZmluZWQoY3VycmVudENvbXBvbmVudCwgJ3Nsb3RzIGNhbiBub3QgYmUgcmVuZGVyZWQgb3V0c2lkZSBhIGNvbXBvbmVudCcpO1xuICAgICAgYXNzZXJ0RGVmaW5lZChjdXJyZW50Q29tcG9uZW50LiRzbG90cyQsICdjdXJyZW50IGNvbXBvbmVudCBzbG90cyBtdXN0IGJlIGEgZGVmaW5lZCBhcnJheScpO1xuICAgICAgY3VycmVudENvbXBvbmVudC4kc2xvdHMkLnB1c2gobmV3Vm5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzZXRzSW5uZXJIVE1MID0gcHJvcHNbZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxdICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKHNldHNJbm5lckhUTUwpIHtcbiAgICAgIGlmIChxRGV2ICYmIG5ld1Zub2RlLiRjaGlsZHJlbiQubGVuZ3RoID4gMCkge1xuICAgICAgICBsb2dXYXJuKCdOb2RlIGNhbiBub3QgaGF2ZSBjaGlsZHJlbiB3aGVuIGlubmVySFRNTCBpcyBzZXQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHNtYXJ0VXBkYXRlQ2hpbGRyZW4ocmN0eCwgb2xkVm5vZGUsIG5ld1Zub2RlLCAncm9vdCcsIGZsYWdzKTtcbiAgfVxuXG4gIGxldCBuZWVkc1JlbmRlciA9IHVwZGF0ZUNvbXBvbmVudFByb3BlcnRpZXMoY3R4LCByY3R4LCBwcm9wcyk7XG5cbiAgLy8gVE9ETzogcmV2aWV3IHRoaXMgY29ybmVyIGNhc2VcbiAgaWYgKCFuZWVkc1JlbmRlciAmJiAhY3R4LiRyZW5kZXJRcmwkICYmICFjdHguJGVsZW1lbnQkLmhhc0F0dHJpYnV0ZShFTEVNRU5UX0lEKSkge1xuICAgIHNldFFJZChyY3R4LCBjdHgpO1xuICAgIGN0eC4kcmVuZGVyUXJsJCA9IHByb3BzW09uUmVuZGVyUHJvcF07XG4gICAgYXNzZXJ0UXJsKGN0eC4kcmVuZGVyUXJsJCBhcyBhbnkpO1xuICAgIG5lZWRzUmVuZGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFJlbmRlcmluZyBvZiBjaGlsZHJlbiBvZiBjb21wb25lbnQgaXMgbW9yZSBjb21wbGljYXRlZCxcbiAgLy8gc2luY2UgdGhlIGNoaWxkcmVuIG11c3QgYmUgcHJvamVjdGVkIGludG8gdGhlIHJlbmRlcmVkIHNsb3RzXG4gIC8vIEluIGFkZGl0aW9uLCBuZXN0ZWQgY2hpbGRlbiBtaWdodCBuZWVkIHJlcmVuZGVyaW5nLCBpZiB0aGF0J3MgdGhlIGNhc2VcbiAgLy8gd2UgbmVlZCB0byByZW5kZXIgdGhlIG5lc3RlZCBjb21wb25lbnQsIGFuZCB3YWl0IGJlZm9yZSBwcm9qZWN0aW5nIHRoZSBjb250ZW50XG4gIC8vIHNpbmNlIG90aGVyd2lzZSB3ZSBkb24ndCBrbm93IHdoZXJlIHRoZSBzbG90c1xuICBpZiAobmVlZHNSZW5kZXIpIHtcbiAgICByZXR1cm4gdGhlbihyZW5kZXJDb21wb25lbnQocmN0eCwgY3R4LCBmbGFncyksICgpID0+XG4gICAgICByZW5kZXJDb250ZW50UHJvamVjdGlvbihyY3R4LCBjdHgsIG5ld1Zub2RlLCBmbGFncylcbiAgICApO1xuICB9XG4gIHJldHVybiByZW5kZXJDb250ZW50UHJvamVjdGlvbihyY3R4LCBjdHgsIG5ld1Zub2RlLCBmbGFncyk7XG59O1xuXG5jb25zdCByZW5kZXJDb250ZW50UHJvamVjdGlvbiA9IChcbiAgcmN0eDogUmVuZGVyQ29udGV4dCxcbiAgaG9zdEN0eDogUUNvbnRleHQsXG4gIHZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBmbGFnczogbnVtYmVyXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IG5ld0NoaWxkcmVuID0gdm5vZGUuJGNoaWxkcmVuJDtcbiAgY29uc3Qgc3RhdGljQ3R4ID0gcmN0eC4kc3RhdGljJDtcbiAgY29uc3Qgc3BsaXR0ZWROZXdDaGlkcmVuID0gc3BsaXRDaGlsZHJlbihuZXdDaGlsZHJlbik7XG4gIGNvbnN0IHNsb3RSY3R4ID0gcHVzaFJlbmRlckNvbnRleHQocmN0eCwgaG9zdEN0eCk7XG4gIGNvbnN0IHNsb3RNYXBzID0gZ2V0U2xvdE1hcChob3N0Q3R4KTtcblxuICAvLyBSZW1vdmUgY29udGVudCBmcm9tIGVtcHR5IHNsb3RzXG4gIE9iamVjdC5lbnRyaWVzKHNsb3RNYXBzLnNsb3RzKS5mb3JFYWNoKChba2V5LCBzbG90RWxdKSA9PiB7XG4gICAgaWYgKCFzcGxpdHRlZE5ld0NoaWRyZW5ba2V5XSkge1xuICAgICAgY29uc3Qgb2xkQ2ggPSBnZXRDaGlsZHJlblZub2RlcyhzbG90RWwsICdyb290Jyk7XG4gICAgICBpZiAob2xkQ2gubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBzbG90Q3R4ID0gdHJ5R2V0Q29udGV4dChzbG90RWwpO1xuICAgICAgICBpZiAoc2xvdEN0eCAmJiBzbG90Q3R4LiR2ZG9tJCkge1xuICAgICAgICAgIHNsb3RDdHguJHZkb20kLiRjaGlsZHJlbiQgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZW1vdmVWbm9kZXMoc3RhdGljQ3R4LCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBSZW1vdmUgZW1wdHkgdGVtcGxhdGVzXG4gIE9iamVjdC5lbnRyaWVzKHNsb3RNYXBzLnRlbXBsYXRlcykuZm9yRWFjaCgoW2tleSwgdGVtcGxhdGVFbF0pID0+IHtcbiAgICBpZiAodGVtcGxhdGVFbCkge1xuICAgICAgaWYgKCFzcGxpdHRlZE5ld0NoaWRyZW5ba2V5XSB8fCBzbG90TWFwcy5zbG90c1trZXldKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoc3RhdGljQ3R4LCB0ZW1wbGF0ZUVsKTtcbiAgICAgICAgc2xvdE1hcHMudGVtcGxhdGVzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBSZW5kZXIgaW50byBzbG90c1xuICByZXR1cm4gcHJvbWlzZUFsbChcbiAgICBPYmplY3QuZW50cmllcyhzcGxpdHRlZE5ld0NoaWRyZW4pLm1hcCgoW2tleSwgbmV3VmRvbV0pID0+IHtcbiAgICAgIGNvbnN0IHNsb3RFbG0gPSBnZXRTbG90RWxlbWVudChzdGF0aWNDdHgsIHNsb3RNYXBzLCBob3N0Q3R4LiRlbGVtZW50JCwga2V5KTtcbiAgICAgIGNvbnN0IHNsb3RDdHggPSBnZXRDb250ZXh0KHNsb3RFbG0pO1xuICAgICAgY29uc3Qgb2xkVmRvbSA9IGdldFZkb20oc2xvdEN0eCk7XG4gICAgICBzbG90Q3R4LiR2ZG9tJCA9IG5ld1Zkb207XG4gICAgICBuZXdWZG9tLiRlbG0kID0gc2xvdEVsbTtcbiAgICAgIHJldHVybiBzbWFydFVwZGF0ZUNoaWxkcmVuKHNsb3RSY3R4LCBvbGRWZG9tLCBuZXdWZG9tLCAncm9vdCcsIGZsYWdzKTtcbiAgICB9KVxuICApIGFzIGFueTtcbn07XG5cbmNvbnN0IGFkZFZub2RlcyA9IChcbiAgY3R4OiBSZW5kZXJDb250ZXh0LFxuICBwYXJlbnRFbG06IFF3aWtFbGVtZW50LFxuICBiZWZvcmU6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCB8IG51bGwsXG4gIHZub2RlczogUHJvY2Vzc2VkSlNYTm9kZVtdLFxuICBzdGFydElkeDogbnVtYmVyLFxuICBlbmRJZHg6IG51bWJlcixcbiAgZmxhZ3M6IG51bWJlclxuKTogVmFsdWVPclByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBwcm9taXNlcyA9IFtdO1xuICBsZXQgaGFzUHJvbWlzZSA9IGZhbHNlO1xuICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgY29uc3QgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgIGFzc2VydERlZmluZWQoY2gsICdyZW5kZXI6IG5vZGUgbXVzdCBiZSBkZWZpbmVkIGF0IGluZGV4Jywgc3RhcnRJZHgsIHZub2Rlcyk7XG4gICAgY29uc3QgZWxtID0gY3JlYXRlRWxtKGN0eCwgY2gsIGZsYWdzKTtcbiAgICBwcm9taXNlcy5wdXNoKGVsbSk7XG4gICAgaWYgKGlzUHJvbWlzZShlbG0pKSB7XG4gICAgICBoYXNQcm9taXNlID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKGhhc1Byb21pc2UpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKGNoaWxkcmVuKSA9PlxuICAgICAgaW5zZXJ0Q2hpbGRyZW4oY3R4LiRzdGF0aWMkLCBwYXJlbnRFbG0sIGNoaWxkcmVuLCBiZWZvcmUpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBpbnNlcnRDaGlsZHJlbihjdHguJHN0YXRpYyQsIHBhcmVudEVsbSwgcHJvbWlzZXMgYXMgTm9kZVtdLCBiZWZvcmUpO1xuICB9XG59O1xuXG5jb25zdCBpbnNlcnRDaGlsZHJlbiA9IChcbiAgY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBwYXJlbnRFbG06IFF3aWtFbGVtZW50LFxuICBjaGlsZHJlbjogKE5vZGUgfCBWaXJ0dWFsRWxlbWVudClbXSxcbiAgYmVmb3JlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQgfCBudWxsXG4pID0+IHtcbiAgZm9yIChjb25zdCBjaGlsZCBvZiBjaGlsZHJlbikge1xuICAgIGluc2VydEJlZm9yZShjdHgsIHBhcmVudEVsbSwgY2hpbGQsIGJlZm9yZSk7XG4gIH1cbn07XG5cbmNvbnN0IHJlbW92ZVZub2RlcyA9IChcbiAgY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBub2RlczogUHJvY2Vzc2VkSlNYTm9kZVtdLFxuICBzdGFydElkeDogbnVtYmVyLFxuICBlbmRJZHg6IG51bWJlclxuKTogdm9pZCA9PiB7XG4gIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICBjb25zdCBjaCA9IG5vZGVzW3N0YXJ0SWR4XTtcbiAgICBpZiAoY2gpIHtcbiAgICAgIGFzc2VydERlZmluZWQoY2guJGVsbSQsICd2bm9kZSBlbG0gbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICByZW1vdmVOb2RlKGN0eCwgY2guJGVsbSQpO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgZ2V0U2xvdEVsZW1lbnQgPSAoXG4gIGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCxcbiAgc2xvdE1hcHM6IFNsb3RNYXBzLFxuICBwYXJlbnRFbDogUXdpa0VsZW1lbnQsXG4gIHNsb3ROYW1lOiBzdHJpbmdcbik6IFF3aWtFbGVtZW50ID0+IHtcbiAgY29uc3Qgc2xvdEVsID0gc2xvdE1hcHMuc2xvdHNbc2xvdE5hbWVdO1xuICBpZiAoc2xvdEVsKSB7XG4gICAgcmV0dXJuIHNsb3RFbDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZUVsID0gc2xvdE1hcHMudGVtcGxhdGVzW3Nsb3ROYW1lXTtcbiAgaWYgKHRlbXBsYXRlRWwpIHtcbiAgICByZXR1cm4gdGVtcGxhdGVFbDtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZSA9IGNyZWF0ZVRlbXBsYXRlKGN0eC4kZG9jJCwgc2xvdE5hbWUpO1xuICBwcmVwZW5kKGN0eCwgcGFyZW50RWwsIHRlbXBsYXRlKTtcbiAgc2xvdE1hcHMudGVtcGxhdGVzW3Nsb3ROYW1lXSA9IHRlbXBsYXRlO1xuICByZXR1cm4gdGVtcGxhdGU7XG59O1xuXG5jb25zdCBnZXRTbG90TmFtZSA9IChub2RlOiBQcm9jZXNzZWRKU1hOb2RlKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIG5vZGUuJHByb3BzJFtRU2xvdF0gPz8gJyc7XG59O1xuXG5jb25zdCBjcmVhdGVFbG0gPSAoXG4gIHJjdHg6IFJlbmRlckNvbnRleHQsXG4gIHZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBmbGFnczogbnVtYmVyXG4pOiBWYWx1ZU9yUHJvbWlzZTxOb2RlIHwgVmlydHVhbEVsZW1lbnQ+ID0+IHtcbiAgY29uc3QgdGFnID0gdm5vZGUuJHR5cGUkO1xuICBjb25zdCBkb2MgPSByY3R4LiRzdGF0aWMkLiRkb2MkO1xuICBpZiAodGFnID09PSAnI3RleHQnKSB7XG4gICAgcmV0dXJuICh2bm9kZS4kZWxtJCA9IGNyZWF0ZVRleHROb2RlKGRvYywgdm5vZGUuJHRleHQkISkpO1xuICB9XG5cbiAgbGV0IGVsbTogUXdpa0VsZW1lbnQ7XG4gIGxldCBpc0hlYWQgPSAhIShmbGFncyAmIElTX0hFQUQpO1xuICBsZXQgaXNTdmcgPSAhIShmbGFncyAmIElTX1NWRyk7XG4gIGlmICghaXNTdmcgJiYgdGFnID09PSAnc3ZnJykge1xuICAgIGZsYWdzIHw9IElTX1NWRztcbiAgICBpc1N2ZyA9IHRydWU7XG4gIH1cbiAgY29uc3QgaXNWaXJ0dWFsID0gdGFnID09PSBWSVJUVUFMO1xuICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgZWxtID0gbmV3VmlydHVhbEVsZW1lbnQoZG9jKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdoZWFkJykge1xuICAgIGVsbSA9IGRvYy5oZWFkO1xuICAgIGZsYWdzIHw9IElTX0hFQUQ7XG4gICAgaXNIZWFkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBlbG0gPSBjcmVhdGVFbGVtZW50KGRvYywgdGFnLCBpc1N2Zyk7XG4gICAgZmxhZ3MgJj0gfklTX0hFQUQ7XG4gIH1cblxuICB2bm9kZS4kZWxtJCA9IGVsbTtcbiAgY29uc3QgcHJvcHMgPSB2bm9kZS4kcHJvcHMkO1xuICBjb25zdCBpc0NvbXBvbmVudCA9IE9uUmVuZGVyUHJvcCBpbiBwcm9wcztcbiAgY29uc3Qgc3RhdGljQ3R4ID0gcmN0eC4kc3RhdGljJDtcblxuICBpZiAoaXNTdmcgJiYgdGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICBpc1N2ZyA9IGZhbHNlO1xuICAgIGZsYWdzICY9IH5JU19TVkc7XG4gIH1cblxuICBpZiAoaXNDb21wb25lbnQpIHtcbiAgICBzZXRLZXkoZWxtLCB2bm9kZS4ka2V5JCk7XG4gICAgYXNzZXJ0VHJ1ZShpc1ZpcnR1YWwsICdjb21wb25lbnQgbXVzdCBiZSBhIHZpcnR1YWwgZWxlbWVudCcpO1xuICAgIGNvbnN0IGVsQ3R4ID0gZ2V0Q29udGV4dChlbG0pO1xuICAgIHVwZGF0ZUNvbXBvbmVudFByb3BlcnRpZXMoZWxDdHgsIHJjdHgsIHByb3BzKTtcbiAgICBzZXRRSWQocmN0eCwgZWxDdHgpO1xuXG4gICAgLy8gUnVuIG1vdW50IGhvb2tcbiAgICBjb25zdCByZW5kZXJRUkwgPSBwcm9wcyFbT25SZW5kZXJQcm9wXTtcbiAgICBhc3NlcnRRcmw8T25SZW5kZXJGbjxhbnk+PihyZW5kZXJRUkwpO1xuICAgIGVsQ3R4LiRyZW5kZXJRcmwkID0gcmVuZGVyUVJMO1xuXG4gICAgcmV0dXJuIHRoZW4ocmVuZGVyQ29tcG9uZW50KHJjdHgsIGVsQ3R4LCBmbGFncyksICgpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IHZub2RlLiRjaGlsZHJlbiQ7XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbG07XG4gICAgICB9XG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGNoaWxkcmVuWzBdLiR0eXBlJCA9PT0gU0tJUF9SRU5ERVJfVFlQRSkge1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdLiRjaGlsZHJlbiQ7XG4gICAgICB9XG4gICAgICBjb25zdCBzbG90UmN0eCA9IHB1c2hSZW5kZXJDb250ZXh0KHJjdHgsIGVsQ3R4KTtcbiAgICAgIGNvbnN0IHNsb3RNYXAgPSBnZXRTbG90TWFwKGVsQ3R4KTtcbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gY2hpbGRyZW4ubWFwKChjaCkgPT4gY3JlYXRlRWxtKHNsb3RSY3R4LCBjaCwgZmxhZ3MpKTtcbiAgICAgIHJldHVybiB0aGVuKHByb21pc2VBbGwoZWxlbWVudHMpLCAoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjaGlsZHJlbikge1xuICAgICAgICAgIGFzc2VydERlZmluZWQobm9kZS4kZWxtJCwgJ3Zub2RlIGVsbSBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICAgICAgICBhcHBlbmRDaGlsZChcbiAgICAgICAgICAgIHN0YXRpY0N0eCxcbiAgICAgICAgICAgIGdldFNsb3RFbGVtZW50KHN0YXRpY0N0eCwgc2xvdE1hcCwgZWxtLCBnZXRTbG90TmFtZShub2RlKSksXG4gICAgICAgICAgICBub2RlLiRlbG0kXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxtO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBjdXJyZW50Q29tcG9uZW50ID0gcmN0eC4kY21wQ3R4JDtcbiAgY29uc3QgaXNTbG90ID0gaXNWaXJ0dWFsICYmIFFTbG90UyBpbiBwcm9wcztcbiAgY29uc3QgaGFzUmVmID0gIWlzVmlydHVhbCAmJiAncmVmJyBpbiBwcm9wcztcbiAgaWYgKGN1cnJlbnRDb21wb25lbnQgJiYgIWlzVmlydHVhbCkge1xuICAgIGNvbnN0IHNjb3BlZElkcyA9IGN1cnJlbnRDb21wb25lbnQuJHNjb3BlSWRzJDtcbiAgICBpZiAoc2NvcGVkSWRzKSB7XG4gICAgICBzY29wZWRJZHMuZm9yRWFjaCgoc3R5bGVJZCkgPT4ge1xuICAgICAgICAoZWxtIGFzIEVsZW1lbnQpLmNsYXNzTGlzdC5hZGQoc3R5bGVJZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKCFjdXJyZW50Q29tcG9uZW50LiRhdHRhY2hlZExpc3RlbmVycyQgJiYgY3VycmVudENvbXBvbmVudC5saSkge1xuICAgICAgY29uc3QgZWxDdHggPSBnZXRDb250ZXh0KGVsbSk7XG4gICAgICBjdXJyZW50Q29tcG9uZW50LiRhdHRhY2hlZExpc3RlbmVycyQgPSB0cnVlO1xuICAgICAgY3VycmVudENvbXBvbmVudC5saS5mb3JFYWNoKChxcmxzLCBldmVudE5hbWUpID0+IHtcbiAgICAgICAgYWRkUVJMTGlzdGVuZXIoZWxDdHgsIGV2ZW50TmFtZSwgcXJscyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNTbG90KSB7XG4gICAgYXNzZXJ0RGVmaW5lZChjdXJyZW50Q29tcG9uZW50LCAnc2xvdCBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBjb21wb25lbnQnKTtcbiAgICBhc3NlcnREZWZpbmVkKGN1cnJlbnRDb21wb25lbnQuJHNsb3RzJCwgJ2N1cnJlbnQgY29tcG9uZW50IHNsb3RzIG11c3QgYmUgYSBkZWZpbmVkIGFycmF5Jyk7XG4gICAgc2V0S2V5KGVsbSwgdm5vZGUuJGtleSQpO1xuXG4gICAgZGlyZWN0U2V0QXR0cmlidXRlKGVsbSwgUVNsb3RSZWYsIGN1cnJlbnRDb21wb25lbnQuJGlkJCk7XG4gICAgY3VycmVudENvbXBvbmVudC4kc2xvdHMkLnB1c2godm5vZGUpO1xuICAgIHN0YXRpY0N0eC4kYWRkU2xvdHMkLnB1c2goW2VsbSwgY3VycmVudENvbXBvbmVudC4kZWxlbWVudCRdKTtcbiAgfSBlbHNlIGlmIChxU2VyaWFsaXplKSB7XG4gICAgc2V0S2V5KGVsbSwgdm5vZGUuJGtleSQpO1xuICB9XG5cbiAgc2V0UHJvcGVydGllcyhzdGF0aWNDdHgsIGVsbSwgcHJvcHMsIGlzU3ZnKTtcblxuICBpZiAocVNlcmlhbGl6ZSkge1xuICAgIGNvbnN0IGVsQ3R4ID0gZ2V0Q29udGV4dChlbG0pO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IGVsQ3R4LmxpO1xuICAgIGlmIChpc0hlYWQgJiYgIWlzVmlydHVhbCkge1xuICAgICAgZGlyZWN0U2V0QXR0cmlidXRlKGVsbSBhcyBFbGVtZW50LCAncTpoZWFkJywgJycpO1xuICAgIH1cbiAgICBpZiAobGlzdGVuZXJzIHx8IGhhc1JlZikge1xuICAgICAgc2V0UUlkKHJjdHgsIGVsQ3R4KTtcbiAgICB9XG4gICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgbGlzdGVuZXJzLmZvckVhY2goKHFybCwga2V5KSA9PiB7XG4gICAgICAgIHNldEF0dHJpYnV0ZShzdGF0aWNDdHgsIGVsbSwga2V5LCBzZXJpYWxpemVRUkxzKHFybCwgZWxDdHgpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHNldHNJbm5lckhUTUwgPSBwcm9wc1tkYW5nZXJvdXNseVNldElubmVySFRNTF0gIT09IHVuZGVmaW5lZDtcbiAgaWYgKHNldHNJbm5lckhUTUwpIHtcbiAgICBpZiAocURldiAmJiB2bm9kZS4kY2hpbGRyZW4kLmxlbmd0aCA+IDApIHtcbiAgICAgIGxvZ1dhcm4oJ05vZGUgY2FuIG5vdCBoYXZlIGNoaWxkcmVuIHdoZW4gaW5uZXJIVE1MIGlzIHNldCcpO1xuICAgIH1cbiAgICByZXR1cm4gZWxtO1xuICB9XG4gIGxldCBjaGlsZHJlbiA9IHZub2RlLiRjaGlsZHJlbiQ7XG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZWxtO1xuICB9XG4gIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgY2hpbGRyZW5bMF0uJHR5cGUkID09PSBTS0lQX1JFTkRFUl9UWVBFKSB7XG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXS4kY2hpbGRyZW4kO1xuICB9XG4gIGNvbnN0IHByb21pc2VzID0gY2hpbGRyZW4ubWFwKChjaCkgPT4gY3JlYXRlRWxtKHJjdHgsIGNoLCBmbGFncykpO1xuICByZXR1cm4gdGhlbihwcm9taXNlQWxsKHByb21pc2VzKSwgKCkgPT4ge1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBjaGlsZHJlbikge1xuICAgICAgYXNzZXJ0RGVmaW5lZChub2RlLiRlbG0kLCAndm5vZGUgZWxtIG11c3QgYmUgZGVmaW5lZCcpO1xuICAgICAgYXBwZW5kQ2hpbGQocmN0eC4kc3RhdGljJCwgZWxtLCBub2RlLiRlbG0kKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsbTtcbiAgfSk7XG59O1xuXG5pbnRlcmZhY2UgU2xvdE1hcHMge1xuICBzbG90czogUmVjb3JkPHN0cmluZywgUXdpa0VsZW1lbnQ+O1xuICB0ZW1wbGF0ZXM6IFJlY29yZDxzdHJpbmcsIEVsZW1lbnQgfCB1bmRlZmluZWQ+O1xufVxuXG5jb25zdCBnZXRTbG90cyA9IChjdHg6IFFDb250ZXh0KTogUHJvY2Vzc2VkSlNYTm9kZVtdID0+IHtcbiAgY29uc3Qgc2xvdHMgPSBjdHguJHNsb3RzJDtcbiAgaWYgKCFzbG90cykge1xuICAgIGNvbnN0IHBhcmVudCA9IGN0eC4kZWxlbWVudCQucGFyZW50RWxlbWVudDtcbiAgICBhc3NlcnREZWZpbmVkKHBhcmVudCwgJ2NvbXBvbmVudCBzaG91bGQgYmUgYWxyZWFkeSBhdHRhY2hlZCB0byB0aGUgZG9tJyk7XG4gICAgcmV0dXJuIChjdHguJHNsb3RzJCA9IHJlYWRET01TbG90cyhjdHgpKTtcbiAgfVxuICByZXR1cm4gc2xvdHM7XG59O1xuXG5jb25zdCBnZXRTbG90TWFwID0gKGN0eDogUUNvbnRleHQpID0+IHtcbiAgY29uc3Qgc2xvdHNBcnJheSA9IGdldFNsb3RzKGN0eCk7XG4gIGNvbnN0IHNsb3RzOiBSZWNvcmQ8c3RyaW5nLCBRd2lrRWxlbWVudD4gPSB7fTtcbiAgY29uc3QgdGVtcGxhdGVzOiBSZWNvcmQ8c3RyaW5nLCBFbGVtZW50IHwgdW5kZWZpbmVkPiA9IHt9O1xuICBjb25zdCB0ID0gQXJyYXkuZnJvbShjdHguJGVsZW1lbnQkLmNoaWxkTm9kZXMpLmZpbHRlcihpc1Nsb3RUZW1wbGF0ZSk7XG5cbiAgLy8gTWFwIHZpcnR1YWwgc2xvdHNcbiAgZm9yIChjb25zdCB2bm9kZSBvZiBzbG90c0FycmF5KSB7XG4gICAgYXNzZXJ0UXdpa0VsZW1lbnQodm5vZGUuJGVsbSQpO1xuICAgIHNsb3RzW3Zub2RlLiRrZXkkID8/ICcnXSA9IHZub2RlLiRlbG0kO1xuICB9XG4gIC8vIE1hcCB0ZW1wbGF0ZXNcbiAgZm9yIChjb25zdCBlbG0gb2YgdCkge1xuICAgIHRlbXBsYXRlc1tkaXJlY3RHZXRBdHRyaWJ1dGUoZWxtLCBRU2xvdCkgPz8gJyddID0gZWxtO1xuICB9XG4gIHJldHVybiB7IHNsb3RzLCB0ZW1wbGF0ZXMgfTtcbn07XG5cbmNvbnN0IHJlYWRET01TbG90cyA9IChjdHg6IFFDb250ZXh0KTogUHJvY2Vzc2VkSlNYTm9kZVtdID0+IHtcbiAgY29uc3QgcGFyZW50ID0gY3R4LiRlbGVtZW50JC5wYXJlbnRFbGVtZW50O1xuICBhc3NlcnREZWZpbmVkKHBhcmVudCwgJ2NvbXBvbmVudCBzaG91bGQgYmUgYWxyZWFkeSBhdHRhY2hlZCB0byB0aGUgZG9tJyk7XG4gIHJldHVybiBxdWVyeUFsbFZpcnR1YWxCeUF0dHJpYnV0ZShwYXJlbnQsIFFTbG90UmVmLCBjdHguJGlkJCkubWFwKGRvbVRvVm5vZGUpO1xufTtcblxuY29uc3QgaGFuZGxlU3R5bGU6IFByb3BIYW5kbGVyID0gKGN0eCwgZWxtLCBfLCBuZXdWYWx1ZSkgPT4ge1xuICBzZXRQcm9wZXJ0eShjdHgsIGVsbS5zdHlsZSwgJ2Nzc1RleHQnLCBzdHJpbmdpZnlTdHlsZShuZXdWYWx1ZSkpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbnN0IGhhbmRsZUNsYXNzOiBQcm9wSGFuZGxlciA9IChjdHgsIGVsbSwgXywgbmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gIGNvbnN0IG9sZENsYXNzZXMgPSBwYXJzZUNsYXNzQW55KG9sZFZhbHVlKTtcbiAgY29uc3QgbmV3Q2xhc3NlcyA9IHBhcnNlQ2xhc3NBbnkobmV3VmFsdWUpO1xuICBzZXRDbGFzc2xpc3QoXG4gICAgY3R4LFxuICAgIGVsbSxcbiAgICBvbGRDbGFzc2VzLmZpbHRlcigoYykgPT4gYyAmJiAhbmV3Q2xhc3Nlcy5pbmNsdWRlcyhjKSksXG4gICAgbmV3Q2xhc3Nlcy5maWx0ZXIoKGMpID0+IGMgJiYgIW9sZENsYXNzZXMuaW5jbHVkZXMoYykpXG4gICk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgY2hlY2tCZWZvcmVBc3NpZ246IFByb3BIYW5kbGVyID0gKGN0eCwgZWxtLCBwcm9wLCBuZXdWYWx1ZSkgPT4ge1xuICBpZiAocHJvcCBpbiBlbG0pIHtcbiAgICBpZiAoKGVsbSBhcyBhbnkpW3Byb3BdICE9PSBuZXdWYWx1ZSkge1xuICAgICAgc2V0UHJvcGVydHkoY3R4LCBlbG0sIHByb3AsIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBkYW5nZXJvdXNseVNldElubmVySFRNTCA9ICdkYW5nZXJvdXNseVNldElubmVySFRNTCc7XG5jb25zdCBzZXRJbm5lckhUTUw6IFByb3BIYW5kbGVyID0gKGN0eCwgZWxtLCBfLCBuZXdWYWx1ZSkgPT4ge1xuICBpZiAoZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgaW4gZWxtKSB7XG4gICAgc2V0UHJvcGVydHkoY3R4LCBlbG0sIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCBuZXdWYWx1ZSk7XG4gIH0gZWxzZSBpZiAoJ2lubmVySFRNTCcgaW4gZWxtKSB7XG4gICAgc2V0UHJvcGVydHkoY3R4LCBlbG0sICdpbm5lckhUTUwnLCBuZXdWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBub29wOiBQcm9wSGFuZGxlciA9ICgpID0+IHtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnQgY29uc3QgUFJPUF9IQU5ETEVSX01BUDogUmVjb3JkPHN0cmluZywgUHJvcEhhbmRsZXIgfCB1bmRlZmluZWQ+ID0ge1xuICBzdHlsZTogaGFuZGxlU3R5bGUsXG4gIGNsYXNzOiBoYW5kbGVDbGFzcyxcbiAgY2xhc3NOYW1lOiBoYW5kbGVDbGFzcyxcbiAgdmFsdWU6IGNoZWNrQmVmb3JlQXNzaWduLFxuICBjaGVja2VkOiBjaGVja0JlZm9yZUFzc2lnbixcbiAgW2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MXTogc2V0SW5uZXJIVE1MLFxuICBpbm5lckhUTUw6IG5vb3AsXG59O1xuXG5leHBvcnQgY29uc3QgdXBkYXRlUHJvcGVydGllcyA9IChcbiAgZWxDdHg6IFFDb250ZXh0LFxuICByY3R4OiBSZW5kZXJDb250ZXh0LFxuICBvbGRQcm9wczogUmVjb3JkPHN0cmluZywgYW55PixcbiAgbmV3UHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIGlzU3ZnOiBib29sZWFuXG4pID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG5ld1Byb3BzKTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCByZW5kZXJMaXN0ZW5lcnMgPSBmYWxzZTtcbiAgY29uc3Qgc3RhdGljQ3R4ID0gcmN0eC4kc3RhdGljJDtcbiAgY29uc3QgZWxtID0gZWxDdHguJGVsZW1lbnQkO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgaWYgKGtleSA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3UHJvcHNba2V5XTtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZFByb3BzW2tleV07XG4gICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3JlZicpIHtcbiAgICAgIChuZXdWYWx1ZSBhcyBSZWY8RWxlbWVudD4pLmN1cnJlbnQgPSBlbG0gYXMgRWxlbWVudDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChpc09uUHJvcChrZXkpKSB7XG4gICAgICBpZiAoYXJlRXhhY3RRUkxzKG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBhZGRHbG9iYWxMaXN0ZW5lcihzdGF0aWNDdHgsIGVsbSwgc2V0RXZlbnQoZWxDdHgsIGtleSwgbmV3VmFsdWUpKTtcbiAgICAgIHJlbmRlckxpc3RlbmVycyA9IHRydWU7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBpdHMgYW4gZXhjZXB0aW9uXG4gICAgY29uc3QgZXhjZXB0aW9uID0gUFJPUF9IQU5ETEVSX01BUFtrZXldO1xuICAgIGlmIChleGNlcHRpb24pIHtcbiAgICAgIGlmIChleGNlcHRpb24oc3RhdGljQ3R4LCBlbG0gYXMgSFRNTEVsZW1lbnQsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBwcm9wZXJ0eSBpbiBwcm90b3R5cGVcbiAgICBpZiAoIWlzU3ZnICYmIGtleSBpbiBlbG0pIHtcbiAgICAgIHNldFByb3BlcnR5KHN0YXRpY0N0eCwgZWxtLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8vIEZhbGxiYWNrIHRvIHJlbmRlciBhdHRyaWJ1dGVcbiAgICBzZXRBdHRyaWJ1dGUoc3RhdGljQ3R4LCBlbG0sIGtleSwgbmV3VmFsdWUpO1xuICB9XG4gIGNvbnN0IGNtcCA9IHJjdHguJGNtcEN0eCQ7XG4gIGlmIChjbXAgJiYgIWNtcC4kYXR0YWNoZWRMaXN0ZW5lcnMkKSB7XG4gICAgY21wLiRhdHRhY2hlZExpc3RlbmVycyQgPSB0cnVlO1xuICAgIGNtcC5saT8uZm9yRWFjaCgocXJscywgZXZlbnROYW1lKSA9PiB7XG4gICAgICBhZGRRUkxMaXN0ZW5lcihlbEN0eCwgZXZlbnROYW1lLCBxcmxzKTtcbiAgICAgIGFkZEdsb2JhbExpc3RlbmVyKHN0YXRpY0N0eCwgZWxtLCBldmVudE5hbWUpO1xuICAgICAgcmVuZGVyTGlzdGVuZXJzID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICBpZiAocVNlcmlhbGl6ZSAmJiByZW5kZXJMaXN0ZW5lcnMpIHtcbiAgICBlbEN0eC5saT8uZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgc2V0QXR0cmlidXRlKHN0YXRpY0N0eCwgZWxtLCBrZXksIHNlcmlhbGl6ZVFSTHModmFsdWUsIGVsQ3R4KSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuY29uc3QgYWRkR2xvYmFsTGlzdGVuZXIgPSAoc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LCBlbG06IFF3aWtFbGVtZW50LCBwcm9wOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFxU2VyaWFsaXplICYmIHByb3AuaW5jbHVkZXMoJzonKSkge1xuICAgIHNldEF0dHJpYnV0ZShzdGF0aWNDdHgsIGVsbSwgcHJvcCwgJycpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXJlRXhhY3RRUkxzID0gKG9sZFZhbHVlOiBhbnksIG5ld1ZhbHVlOiBhbnkpID0+IHtcbiAgaWYgKCFpc1FybChvbGRWYWx1ZSkgfHwgIWlzUXJsKG5ld1ZhbHVlKSB8fCBvbGRWYWx1ZS4kaGFzaCQgIT09IG5ld1ZhbHVlLiRoYXNoJCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBjQSA9IG9sZFZhbHVlLiRjYXB0dXJlUmVmJDtcbiAgY29uc3QgY0IgPSBuZXdWYWx1ZS4kY2FwdHVyZVJlZiQ7XG4gIGlmIChjQSAmJiBjQikge1xuICAgIHJldHVybiBzYW1lQXJyYXlzKGNBLCBjQik7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhbWVBcnJheXMgPSAoYTE6IGFueVtdLCBhMjogYW55W10pID0+IHtcbiAgY29uc3QgbGVuID0gYTEubGVuZ3RoO1xuICBpZiAobGVuICE9PSBhMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGExW2ldICE9PSBhMltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRQcm9wZXJ0aWVzID0gKFxuICByY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBlbG06IFF3aWtFbGVtZW50LFxuICBuZXdQcm9wczogUmVjb3JkPHN0cmluZywgYW55PixcbiAgaXNTdmc6IGJvb2xlYW5cbikgPT4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmV3UHJvcHMpO1xuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGlmIChrZXkgPT09ICdjaGlsZHJlbicpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBuZXdWYWx1ZSA9IG5ld1Byb3BzW2tleV07XG4gICAgaWYgKGtleSA9PT0gJ3JlZicpIHtcbiAgICAgIChuZXdWYWx1ZSBhcyBSZWY8RWxlbWVudD4pLmN1cnJlbnQgPSBlbG0gYXMgRWxlbWVudDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChpc09uUHJvcChrZXkpKSB7XG4gICAgICBhZGRHbG9iYWxMaXN0ZW5lcihyY3R4LCBlbG0sIHNldEV2ZW50KGdldENvbnRleHQoZWxtKSwga2V5LCBuZXdWYWx1ZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgaXRzIGFuIGV4Y2VwdGlvblxuICAgIGNvbnN0IGV4Y2VwdGlvbiA9IFBST1BfSEFORExFUl9NQVBba2V5XTtcbiAgICBpZiAoZXhjZXB0aW9uKSB7XG4gICAgICBpZiAoZXhjZXB0aW9uKHJjdHgsIGVsbSBhcyBIVE1MRWxlbWVudCwga2V5LCBuZXdWYWx1ZSwgdW5kZWZpbmVkKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiBwcm9wZXJ0eSBpbiBwcm90b3R5cGVcbiAgICBpZiAoIWlzU3ZnICYmIGtleSBpbiBlbG0pIHtcbiAgICAgIHNldFByb3BlcnR5KHJjdHgsIGVsbSwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBGYWxsYmFjayB0byByZW5kZXIgYXR0cmlidXRlXG4gICAgc2V0QXR0cmlidXRlKHJjdHgsIGVsbSwga2V5LCBuZXdWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUNvbXBvbmVudFByb3BlcnRpZXMgPSAoXG4gIGN0eDogUUNvbnRleHQsXG4gIHJjdHg6IFJlbmRlckNvbnRleHQsXG4gIGV4cGVjdFByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4pID0+IHtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGV4cGVjdFByb3BzKTtcbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHF3aWtQcm9wcyA9IGdldFByb3BzTXV0YXRvcihjdHgsIHJjdHguJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJCk7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBpZiAoU0tJUFNfUFJPUFMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHF3aWtQcm9wcy5zZXQoa2V5LCBleHBlY3RQcm9wc1trZXldKTtcbiAgfVxuICByZXR1cm4gY3R4LiRkaXJ0eSQ7XG59O1xuXG5leHBvcnQgY29uc3QgY2xlYW51cFRyZWUgPSAoXG4gIHBhcmVudDogUXdpa0VsZW1lbnQsXG4gIHJjdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIHN1YnNNYW5hZ2VyOiBTdWJzY3JpcHRpb25NYW5hZ2VyXG4pID0+IHtcbiAgaWYgKHBhcmVudC5oYXNBdHRyaWJ1dGUoUVNsb3RTKSkge1xuICAgIHJjdHguJHJtU2xvdHMkLnB1c2gocGFyZW50KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY2xlYW51cEVsZW1lbnQocGFyZW50LCBzdWJzTWFuYWdlcik7XG4gIGNvbnN0IGNoID0gZ2V0Q2hpbGRyZW4ocGFyZW50LCAnZWxlbWVudHMnKTtcbiAgZm9yIChjb25zdCBjaGlsZCBvZiBjaCkge1xuICAgIGNsZWFudXBUcmVlKGNoaWxkIGFzIFF3aWtFbGVtZW50LCByY3R4LCBzdWJzTWFuYWdlcik7XG4gIH1cbn07XG5cbmNvbnN0IGNsZWFudXBFbGVtZW50ID0gKGVsOiBRd2lrRWxlbWVudCwgc3Vic01hbmFnZXI6IFN1YnNjcmlwdGlvbk1hbmFnZXIpID0+IHtcbiAgY29uc3QgY3R4ID0gdHJ5R2V0Q29udGV4dChlbCk7XG4gIGlmIChjdHgpIHtcbiAgICBjbGVhbnVwQ29udGV4dChjdHgsIHN1YnNNYW5hZ2VyKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVDb250ZXh0V2l0aFNsb3RzID0gKHsgJHN0YXRpYyQ6IGN0eCB9OiBSZW5kZXJDb250ZXh0KSA9PiB7XG4gIGV4ZWN1dGVET01SZW5kZXIoY3R4KTtcbn07XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RBcHBlbmRDaGlsZCA9IChwYXJlbnQ6IFF3aWtFbGVtZW50LCBjaGlsZDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KSA9PiB7XG4gIGlmIChpc1ZpcnR1YWxFbGVtZW50KGNoaWxkKSkge1xuICAgIGNoaWxkLmFwcGVuZFRvKHBhcmVudCk7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdFJlbW92ZUNoaWxkID0gKHBhcmVudDogUXdpa0VsZW1lbnQsIGNoaWxkOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpID0+IHtcbiAgaWYgKGlzVmlydHVhbEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgY2hpbGQucmVtb3ZlKCk7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEluc2VydEJlZm9yZSA9IChcbiAgcGFyZW50OiBRd2lrRWxlbWVudCxcbiAgY2hpbGQ6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCxcbiAgcmVmOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQgfCBudWxsXG4pID0+IHtcbiAgaWYgKGlzVmlydHVhbEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgY2hpbGQuaW5zZXJ0QmVmb3JlVG8ocGFyZW50LCBnZXRSb290Tm9kZShyZWYpKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBnZXRSb290Tm9kZShyZWYpKTtcbiAgfVxufTtcblxuY29uc3QgY3JlYXRlS2V5VG9PbGRJZHggPSAoXG4gIGNoaWxkcmVuOiBQcm9jZXNzZWRKU1hOb2RlW10sXG4gIGJlZ2luSWR4OiBudW1iZXIsXG4gIGVuZElkeDogbnVtYmVyXG4pOiBLZXlUb0luZGV4TWFwID0+IHtcbiAgY29uc3QgbWFwOiBLZXlUb0luZGV4TWFwID0ge307XG4gIGZvciAobGV0IGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgY29uc3Qga2V5ID0gY2hpbGQuJGtleSQ7XG4gICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICBtYXBba2V5IGFzIHN0cmluZ10gPSBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWFwO1xufTtcblxuY29uc3Qgc2FtZVZub2RlID0gKHZub2RlMTogUHJvY2Vzc2VkSlNYTm9kZSwgdm5vZGUyOiBQcm9jZXNzZWRKU1hOb2RlKTogYm9vbGVhbiA9PiB7XG4gIGlmICh2bm9kZTEuJHR5cGUkICE9PSB2bm9kZTIuJHR5cGUkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2bm9kZTEuJGtleSQgPT09IHZub2RlMi4ka2V5JDtcbn07XG5cbmNvbnN0IGlzVGFnTmFtZSA9IChlbG06IFByb2Nlc3NlZEpTWE5vZGUsIHRhZ05hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gZWxtLiR0eXBlJCA9PT0gdGFnTmFtZTtcbn07XG4iXX0=","import { assertDefined } from '../assert/assert';\nimport { parseQRL } from '../import/qrl';\nimport { getContext, inflateQrl, resumeIfNeeded } from '../props/props';\nimport { getWrappingContainer, getInvokeContext } from './use-core';\nimport { assertQrl } from '../import/qrl-class';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const container = getWrappingContainer(el);\n        const ctx = getContext(el);\n        assertDefined(container, `invoke: cant find parent q:container of`, el);\n        qrl = parseQRL(decodeURIComponent(String(context.$url$)), container);\n        assertQrl(qrl);\n        resumeIfNeeded(container);\n        inflateQrl(qrl, ctx);\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVoRCxpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQTZCLEVBQUU7SUFDNUQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsMERBQTBELEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkYsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNCLGFBQWEsQ0FBQyxTQUFTLEVBQUUseUNBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDckUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDdEI7U0FBTTtRQUNMLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7S0FDSDtJQUNELE9BQU8sR0FBRyxDQUFDLFlBQW9CLENBQUM7QUFDbEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHsgcGFyc2VRUkwgfSBmcm9tICcuLi9pbXBvcnQvcXJsJztcbmltcG9ydCB7IGdldENvbnRleHQsIGluZmxhdGVRcmwsIHJlc3VtZUlmTmVlZGVkIH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgZ2V0V3JhcHBpbmdDb250YWluZXIsIGdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlIGluc3RlYWQpXG4vKipcbiAqIFVzZWQgYnkgdGhlIFF3aWsgT3B0aW1pemVyIHRvIHJlc3RvcmUgdGhlIGxleGljYWxseSBzY29wZWQgdmFyaWFibGVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgcHJlc2VudCBpbiB0aGUgYXBwbGljYXRpb24gc291cmNlIGNvZGUuXG4gKlxuICogTk9URTogYHVzZUxleGljYWxTY29wZWAgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIHN5bmNocm9ub3VzIHBvcnRpb24gb2YgdGhlIGNhbGxiYWNrXG4gKiAoYmVmb3JlIGFueSBgYXdhaXRgIHN0YXRlbWVudHMuKVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlTGV4aWNhbFNjb3BlID0gPFZBUlMgZXh0ZW5kcyBhbnlbXT4oKTogVkFSUyA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBnZXRJbnZva2VDb250ZXh0KCk7XG4gIGxldCBxcmwgPSBjb250ZXh0LiRxcmwkO1xuICBpZiAoIXFybCkge1xuICAgIGNvbnN0IGVsID0gY29udGV4dC4kZWxlbWVudCQ7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCwgJ2ludm9rZTogZWxlbWVudCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJywgY29udGV4dCk7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0V3JhcHBpbmdDb250YWluZXIoZWwpO1xuICAgIGNvbnN0IGN0eCA9IGdldENvbnRleHQoZWwpO1xuICAgIGFzc2VydERlZmluZWQoY29udGFpbmVyLCBgaW52b2tlOiBjYW50IGZpbmQgcGFyZW50IHE6Y29udGFpbmVyIG9mYCwgZWwpO1xuICAgIHFybCA9IHBhcnNlUVJMKGRlY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGV4dC4kdXJsJCkpLCBjb250YWluZXIpO1xuICAgIGFzc2VydFFybChxcmwpO1xuICAgIHJlc3VtZUlmTmVlZGVkKGNvbnRhaW5lcik7XG4gICAgaW5mbGF0ZVFybChxcmwsIGN0eCk7XG4gIH0gZWxzZSB7XG4gICAgYXNzZXJ0UXJsKHFybCk7XG4gICAgYXNzZXJ0RGVmaW5lZChcbiAgICAgIHFybC4kY2FwdHVyZVJlZiQsXG4gICAgICAnaW52b2tlOiBxcmwgJGNhcHR1cmVSZWYkIG11c3QgYmUgZGVmaW5lZCBpbnNpZGUgdXNlTGV4aWNhbFNjb3BlKCknLFxuICAgICAgcXJsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcXJsLiRjYXB0dXJlUmVmJCBhcyBWQVJTO1xufTtcbiJdfQ==","import { assertDefined } from '../../assert/assert';\nimport { executeContextWithSlots, IS_HEAD, IS_SVG, SVG_NS } from './visitor';\nimport { getContext, resumeIfNeeded } from '../../props/props';\nimport { qDynamicPlatform, qTest } from '../../util/qdev';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { getWrappingContainer } from '../../use/use-core';\nimport { runSubscriber, WatchFlagsIsDirty, WatchFlagsIsEffect, WatchFlagsIsResource, WatchFlagsIsWatch, } from '../../use/use-watch';\nimport { then } from '../../util/promises';\nimport { codeToText, QError_errorWhileRendering } from '../../error/error';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { isQwikElement } from '../../util/element';\nimport { renderComponent } from './render-dom';\nimport { getContainerState } from '../container';\nimport { createRenderContext } from '../execute-component';\nimport { getRootNode } from './virtual-element';\nimport { printRenderStats } from './operations';\nexport const notifyChange = (subscriber, containerState) => {\n    if (isQwikElement(subscriber)) {\n        notifyRender(subscriber, containerState);\n    }\n    else {\n        notifyWatch(subscriber, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time.\n * This method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The\n * default implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n * @public\n */\nconst notifyRender = (hostElement, containerState) => {\n    const isServer = qDynamicPlatform && !qTest && containerState.$platform$.isServer;\n    if (!isServer) {\n        resumeIfNeeded(containerState.$containerEl$);\n    }\n    const ctx = getContext(hostElement);\n    assertDefined(ctx.$renderQrl$, `render: notified host element must have a defined $renderQrl$`, ctx);\n    if (ctx.$dirty$) {\n        return;\n    }\n    ctx.$dirty$ = true;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$hostsStaging$.add(hostElement);\n    }\n    else {\n        if (isServer) {\n            logWarn('Can not rerender in server platform');\n            return undefined;\n        }\n        containerState.$hostsNext$.add(hostElement);\n        scheduleFrame(containerState);\n    }\n};\nexport const notifyWatch = (watch, containerState) => {\n    if (watch.$flags$ & WatchFlagsIsDirty) {\n        return;\n    }\n    watch.$flags$ |= WatchFlagsIsDirty;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$watchStaging$.add(watch);\n    }\n    else {\n        containerState.$watchNext$.add(watch);\n        scheduleFrame(containerState);\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = containerState.$platform$.nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useWatch$()` API. This method\n * is not intended to be used by developers.\n *\n * @internal\n *\n */\nexport const _hW = () => {\n    const [watch] = useLexicalScope();\n    notifyWatch(watch, getContainerState(getWrappingContainer(watch.$el$)));\n};\nconst renderMarked = async (containerState) => {\n    const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n    containerState.$hostsNext$.clear();\n    await executeWatchesBefore(containerState);\n    containerState.$hostsStaging$.forEach((host) => {\n        hostsRendering.add(host);\n    });\n    containerState.$hostsStaging$.clear();\n    const doc = getDocument(containerState.$containerEl$);\n    const platform = containerState.$platform$;\n    const renderingQueue = Array.from(hostsRendering);\n    sortNodes(renderingQueue);\n    const ctx = createRenderContext(doc, containerState);\n    const staticCtx = ctx.$static$;\n    for (const el of renderingQueue) {\n        if (!staticCtx.$hostElements$.has(el)) {\n            const elCtx = getContext(el);\n            staticCtx.$roots$.push(elCtx);\n            try {\n                await renderComponent(ctx, elCtx, getFlags(el.parentElement));\n            }\n            catch (e) {\n                logError(codeToText(QError_errorWhileRendering), e);\n            }\n        }\n    }\n    // Add post operations\n    staticCtx.$operations$.push(...staticCtx.$postOperations$);\n    // Early exist, no dom operations\n    if (staticCtx.$operations$.length === 0) {\n        printRenderStats(staticCtx);\n        postRendering(containerState, staticCtx);\n        return ctx;\n    }\n    return platform.raf(() => {\n        executeContextWithSlots(ctx);\n        printRenderStats(staticCtx);\n        postRendering(containerState, staticCtx);\n        return ctx;\n    });\n};\nconst getFlags = (el) => {\n    let flags = 0;\n    if (el) {\n        if (el.namespaceURI === SVG_NS) {\n            flags |= IS_SVG;\n        }\n        if (el.tagName === 'HEAD') {\n            flags |= IS_HEAD;\n        }\n    }\n    return flags;\n};\nexport const postRendering = async (containerState, ctx) => {\n    await executeWatchesAfter(containerState, (watch, stage) => {\n        if ((watch.$flags$ & WatchFlagsIsEffect) === 0) {\n            return false;\n        }\n        if (stage) {\n            return ctx.$hostElements$.has(watch.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    if (containerState.$hostsNext$.size + containerState.$watchNext$.size > 0) {\n        scheduleFrame(containerState);\n    }\n};\nconst executeWatchesBefore = async (containerState) => {\n    const resourcesPromises = [];\n    const watchPromises = [];\n    const isWatch = (watch) => (watch.$flags$ & WatchFlagsIsWatch) !== 0;\n    const isResourceWatch = (watch) => (watch.$flags$ & WatchFlagsIsResource) !== 0;\n    containerState.$watchNext$.forEach((watch) => {\n        if (isWatch(watch)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n        if (isResourceWatch(watch)) {\n            resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (isWatch(watch)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(), () => watch));\n            }\n            else if (isResourceWatch(watch)) {\n                resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortWatches(resources);\n        resources.forEach((watch) => runSubscriber(watch, containerState));\n    }\n};\nconst executeWatchesAfter = async (containerState, watchPred) => {\n    const watchPromises = [];\n    containerState.$watchNext$.forEach((watch) => {\n        if (watchPred(watch, false)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (watchPred(watch, true)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => (a.compareDocumentPosition(getRootNode(b)) & 2 ? 1 : -1));\n};\nconst sortWatches = (watches) => {\n    watches.sort((a, b) => {\n        if (a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(getRootNode(b.$el$)) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual } from '../assert/assert';\nimport { getProxyTarget } from '../object/q-object';\nimport { getPlatform } from '../platform/platform';\nimport { seal } from '../util/qdev';\nimport { notifyChange } from './dom/notify-render';\nconst CONTAINER_STATE = Symbol('ContainerState');\nexport const getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        containerEl[CONTAINER_STATE] = set = {\n            $containerEl$: containerEl,\n            $proxyMap$: new WeakMap(),\n            $subsManager$: null,\n            $platform$: getPlatform(containerEl),\n            $watchNext$: new Set(),\n            $watchStaging$: new Set(),\n            $hostsNext$: new Set(),\n            $hostsStaging$: new Set(),\n            $renderPromise$: undefined,\n            $hostsRendering$: undefined,\n            $envData$: {},\n            $elementIndex$: 0,\n            $styleIds$: new Set(),\n            $mutableProps$: false,\n        };\n        seal(set);\n        set.$subsManager$ = createSubscriptionManager(set);\n    }\n    return set;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const objToSubs = new Map();\n    const subsToObjs = new Map();\n    const clearSub = (sub) => {\n        const subs = subsToObjs.get(sub);\n        if (subs) {\n            subs.forEach((s) => {\n                s.delete(sub);\n            });\n            subsToObjs.delete(sub);\n            subs.clear();\n        }\n    };\n    const tryGetLocal = (obj) => {\n        assertEqual(getProxyTarget(obj), undefined, 'object can not be be a proxy', obj);\n        return objToSubs.get(obj);\n    };\n    const trackSubToObj = (subscriber, map) => {\n        let set = subsToObjs.get(subscriber);\n        if (!set) {\n            subsToObjs.set(subscriber, (set = new Set()));\n        }\n        set.add(map);\n    };\n    const getLocal = (obj, initialMap) => {\n        let local = tryGetLocal(obj);\n        if (local) {\n            assertEqual(initialMap, undefined, 'subscription map can not be set to an existing object', local);\n        }\n        else {\n            const map = !initialMap ? new Map() : initialMap;\n            map.forEach((_, key) => {\n                trackSubToObj(key, map);\n            });\n            objToSubs.set(obj, (local = {\n                $subs$: map,\n                $addSub$(subscriber, key) {\n                    if (key == null) {\n                        map.set(subscriber, null);\n                    }\n                    else {\n                        let sub = map.get(subscriber);\n                        if (sub === undefined) {\n                            map.set(subscriber, (sub = new Set()));\n                        }\n                        if (sub) {\n                            sub.add(key);\n                        }\n                    }\n                    trackSubToObj(subscriber, map);\n                },\n                $notifySubs$(key) {\n                    map.forEach((value, subscriber) => {\n                        if (value === null || !key || value.has(key)) {\n                            notifyChange(subscriber, containerState);\n                        }\n                    });\n                },\n            }));\n            seal(local);\n        }\n        return local;\n    };\n    const manager = {\n        $tryGetLocal$: tryGetLocal,\n        $getLocal$: getLocal,\n        $clearSub$: clearSub,\n    };\n    seal(manager);\n    return manager;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../assert/assert';\nimport { assertQrl, isQrl } from '../import/qrl-class';\nimport { getContext, tryGetContext } from '../props/props';\nimport { getDocument } from '../util/dom';\nimport { isDocument, isElement, isNode, isQwikElement, isVirtualElement } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QStyle } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { createProxy, getOrCreateProxy, getProxyFlags, getProxyTarget, isConnected, isMutable, mutable, shouldSerialize, } from './q-object';\nimport { destroyWatch, WatchFlagsIsDirty, } from '../use/use-watch';\nimport { emitEvent } from '../util/event';\nimport { qError, QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, } from '../error/error';\nimport { isArray, isObject, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { isResourceReturn } from '../use/use-resource';\nimport { createParser, serializeValue, UNDEFINED_PREFIX } from './serializers';\nimport { getContainerState } from '../render/container';\nimport { getQId } from '../render/execute-component';\nimport { processVirtualNodes } from '../render/dom/virtual-element';\nimport { getDomListeners } from '../props/props-on';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n/**\n * Serialize the current state of the application into DOM\n *\n * @alpha\n */\n// </docs>\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const data = await pauseFromContainer(containerEl);\n    const script = doc.createElement('script');\n    directSetAttribute(script, 'type', 'qwik/json');\n    script.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(script);\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    return data;\n};\nexport const moveStyles = (containerEl, containerState) => {\n    const head = containerEl.ownerDocument.head;\n    containerEl.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n        containerState.$styleIds$.add(directGetAttribute(el, QStyle));\n        head.appendChild(el);\n    });\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping hydration because parent element is not q:container');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (!script) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    script.remove();\n    const containerState = getContainerState(containerEl);\n    moveStyles(containerEl, containerState);\n    const meta = JSON.parse(unescapeText(script.textContent || '{}'));\n    // Collect all elements\n    const elements = new Map();\n    const getObject = (id) => {\n        return getObjectImpl(id, elements, meta.objs, containerState);\n    };\n    let maxId = 0;\n    getNodesInScope(containerEl, hasQId).forEach((el) => {\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const ctx = getContext(el);\n        ctx.$id$ = id;\n        ctx.$mounted$ = true;\n        elements.set(ELEMENT_ID_PREFIX + id, el);\n        maxId = Math.max(maxId, strToInt(id));\n    });\n    containerState.$elementIndex$ = ++maxId;\n    const parser = createParser(getObject, containerState, doc);\n    // Revive proxies with subscriptions into the proxymap\n    reviveValues(meta.objs, meta.subs, getObject, containerState, parser);\n    // Rebuild target objects\n    for (const obj of meta.objs) {\n        reviveNestedObjects(obj, getObject, parser);\n    }\n    Object.entries(meta.ctx).forEach(([elementID, ctxMeta]) => {\n        const el = getObject(elementID);\n        assertDefined(el, `resume: cant find dom node for id`, elementID);\n        const ctx = getContext(el);\n        const qobj = ctxMeta.r;\n        const seq = ctxMeta.s;\n        const host = ctxMeta.h;\n        const contexts = ctxMeta.c;\n        const watches = ctxMeta.w;\n        if (qobj) {\n            assertTrue(isElement(el), 'el must be an actual DOM element');\n            ctx.$refMap$.push(...qobj.split(' ').map(getObject));\n            ctx.li = getDomListeners(ctx, containerEl);\n        }\n        if (seq) {\n            ctx.$seq$ = seq.split(' ').map(getObject);\n        }\n        if (watches) {\n            ctx.$watches$ = watches.split(' ').map(getObject);\n        }\n        if (contexts) {\n            contexts.split(' ').map((part) => {\n                const [key, value] = part.split('=');\n                if (!ctx.$contexts$) {\n                    ctx.$contexts$ = new Map();\n                }\n                ctx.$contexts$.set(key, getObject(value));\n            });\n        }\n        // Restore sequence scoping\n        if (host) {\n            const [props, renderQrl] = host.split(' ');\n            assertDefined(props, `resume: props missing in host metadata`, host);\n            assertDefined(renderQrl, `resume: renderQRL missing in host metadata`, host);\n            ctx.$props$ = getObject(props);\n            ctx.$renderQrl$ = getObject(renderQrl);\n        }\n    });\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nexport const pauseFromContainer = async (containerEl) => {\n    const containerState = getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasQId).map(tryGetContext);\n    return _pauseFromContexts(contexts, containerState);\n};\n/**\n * @internal\n */\nexport const _pauseFromContexts = async (elements, containerState) => {\n    const elementToIndex = new Map();\n    const collector = createCollector(containerState);\n    const listeners = [];\n    for (const ctx of elements) {\n        const el = ctx.$element$;\n        if (ctx.li && isElement(el)) {\n            ctx.li.forEach((qrls, key) => {\n                qrls.forEach((qrl) => {\n                    listeners.push({\n                        key,\n                        qrl,\n                        el,\n                    });\n                });\n            });\n        }\n        for (const watch of ctx.$watches$) {\n            collector.$watches$.push(watch);\n        }\n    }\n    // No listeners implies static page\n    if (listeners.length === 0) {\n        return {\n            state: {\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            listeners: [],\n            pendingContent: [],\n            mode: 'static',\n        };\n    }\n    // Listeners becomes the app roots\n    for (const listener of listeners) {\n        assertQrl(listener.qrl);\n        const captured = listener.qrl.$captureRef$;\n        if (captured) {\n            for (const obj of captured) {\n                await collectValue(obj, collector, true);\n            }\n        }\n        const ctx = tryGetContext(listener.el);\n        for (const obj of ctx.$refMap$) {\n            await collectValue(obj, collector, true);\n        }\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const ctx of elements) {\n            if (isVirtualElement(ctx.$element$)) {\n                await collectProps(ctx.$element$, ctx.$props$, collector);\n            }\n            if (ctx.$contexts$) {\n                for (const item of ctx.$contexts$.values()) {\n                    await collectValue(item, collector, false);\n                }\n            }\n        }\n    }\n    // Convert objSet to array\n    const objs = Array.from(new Set(collector.$objMap$.values()));\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            if (el.isConnected) {\n                id = getQId(el);\n                if (!id) {\n                    console.warn('Missing ID', el);\n                }\n                else {\n                    id = ELEMENT_ID_PREFIX + id;\n                }\n            }\n            else {\n                id = null;\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isMutable(obj)) {\n            obj = obj.v;\n            suffix = '%';\n        }\n        if (isPromise(obj)) {\n            const { value, resolved } = getPromiseValue(obj);\n            obj = value;\n            if (resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            if (!target && isQwikElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return elID + suffix;\n                }\n                return null;\n            }\n        }\n        if (collector.$objMap$.has(obj)) {\n            const value = collector.$objMap$.get(obj);\n            const id = objToId.get(value);\n            assertTrue(typeof id === 'number', 'Can not find ID for object');\n            return intToStr(id) + suffix;\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            throw qError(QError_missingObjectId, obj);\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    objs.forEach((obj) => {\n        const flags = getProxyFlags(containerState.$proxyMap$.get(obj));\n        if (flags === undefined) {\n            return;\n        }\n        const subsObj = [];\n        if (flags > 0) {\n            subsObj.push({\n                subscriber: '$',\n                data: flags,\n            });\n        }\n        const subs = containerState.$subsManager$.$tryGetLocal$(obj)?.$subs$;\n        if (subs) {\n            subs.forEach((set, key) => {\n                if (isNode(key) && isVirtualElement(key)) {\n                    if (!collector.$elements$.includes(key)) {\n                        return;\n                    }\n                }\n                subsObj.push({\n                    subscriber: key,\n                    data: set ? Array.from(set) : null,\n                });\n            });\n        }\n        if (subsObj.length > 0) {\n            subsMap.set(obj, subsObj);\n        }\n    });\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, count);\n        count++;\n    }\n    // Serialize object subscriptions\n    const subs = objs\n        .map((obj) => {\n        const sub = subsMap.get(obj);\n        if (!sub) {\n            return null;\n        }\n        const subsObj = {};\n        sub.forEach(({ subscriber, data }) => {\n            if (subscriber === '$') {\n                subsObj[subscriber] = data;\n            }\n            else {\n                const id = getObjId(subscriber);\n                if (id !== null) {\n                    subsObj[id] = data;\n                }\n            }\n        });\n        return subsObj;\n    })\n        .filter(isNotNullable);\n    // Serialize objects\n    const convertedObjs = objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'string':\n            case 'number':\n            case 'boolean':\n                return obj;\n            default:\n                const value = serializeValue(obj, getObjId, containerState);\n                if (value !== undefined) {\n                    return value;\n                }\n                if (typeObj === 'object') {\n                    if (isArray(obj)) {\n                        return obj.map(mustGetObjId);\n                    }\n                    if (isSerializableObject(obj)) {\n                        const output = {};\n                        Object.entries(obj).forEach(([key, value]) => {\n                            output[key] = mustGetObjId(value);\n                        });\n                        return output;\n                    }\n                }\n                break;\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n    const meta = {};\n    // Write back to the dom\n    elements.forEach((ctx) => {\n        const node = ctx.$element$;\n        assertDefined(ctx, `pause: missing context for dom node`, node);\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const watches = ctx.$watches$;\n        const renderQrl = ctx.$renderQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(node);\n        let add = false;\n        if (ref.length > 0) {\n            const value = ref.map(mustGetObjId).join(' ');\n            if (value) {\n                metaValue.r = value;\n                add = true;\n            }\n        }\n        if (canRender) {\n            if (elementCaptured && props) {\n                const objs = [props];\n                if (renderQrl) {\n                    objs.push(renderQrl);\n                }\n                const value = objs.map(mustGetObjId).join(' ');\n                if (value) {\n                    metaValue.h = value;\n                    add = true;\n                }\n            }\n            if (watches.length > 0) {\n                const value = watches.map(getObjId).filter(isNotNullable).join(' ');\n                if (value) {\n                    metaValue.w = value;\n                    add = true;\n                }\n            }\n            if (elementCaptured && seq.length > 0) {\n                const value = seq.map(mustGetObjId).join(' ');\n                if (value) {\n                    metaValue.s = value;\n                    add = true;\n                }\n            }\n            if (contexts) {\n                const serializedContexts = [];\n                contexts.forEach((value, key) => {\n                    serializedContexts.push(`${key}=${mustGetObjId(value)}`);\n                });\n                const value = serializedContexts.join(' ');\n                if (value) {\n                    metaValue.c = value;\n                    add = true;\n                }\n            }\n        }\n        if (add) {\n            const elementID = getElementID(node);\n            assertDefined(elementID, `pause: can not generate ID for dom node`, node);\n            meta[elementID] = metaValue;\n        }\n    });\n    const pendingContent = [];\n    for (const watch of collector.$watches$) {\n        if (qDev) {\n            if (watch.$flags$ & WatchFlagsIsDirty) {\n                logWarn('Serializing dirty watch. Looks like an internal error.');\n            }\n            if (!isConnected(watch)) {\n                logWarn('Serializing disconneted watch. Looks like an internal error.');\n            }\n        }\n        destroyWatch(watch);\n    }\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.nodeName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        pendingContent,\n        objs,\n        listeners,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const getQwikJSON = (parentElm) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, 'type') === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nconst SHOW_ELEMENT = 1;\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nconst FILTER_SKIP = 3;\nexport const getNodesInScope = (parent, predicate) => {\n    const nodes = [];\n    if (predicate(parent)) {\n        nodes.push(parent);\n    }\n    const walker = parent.ownerDocument.createTreeWalker(parent, SHOW_ELEMENT | SHOW_COMMENT, {\n        acceptNode(node) {\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            return predicate(node) ? FILTER_ACCEPT : FILTER_SKIP;\n        },\n    });\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(processVirtualNodes(currentNode));\n    }\n    return pars;\n};\nconst reviveValues = (objs, subs, getObject, containerState, parser) => {\n    for (let i = 0; i < objs.length; i++) {\n        const value = objs[i];\n        if (isString(value)) {\n            objs[i] = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n    }\n    for (let i = 0; i < subs.length; i++) {\n        const value = objs[i];\n        const sub = subs[i];\n        if (sub) {\n            const converted = new Map();\n            let flags = 0;\n            Object.entries(sub).forEach((entry) => {\n                if (entry[0] === '$') {\n                    flags = entry[1];\n                    return;\n                }\n                const el = getObject(entry[0]);\n                if (!el) {\n                    logWarn('QWIK can not revive subscriptions because of missing element ID', entry, value);\n                    return;\n                }\n                const set = entry[1] === null ? null : new Set(entry[1]);\n                converted.set(el, set);\n            });\n            createProxy(value, containerState, flags, converted);\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                const value = obj[i];\n                if (typeof value == 'string') {\n                    obj[i] = getObject(value);\n                }\n                else {\n                    reviveNestedObjects(value, getObject, parser);\n                }\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (typeof value == 'string') {\n                        obj[key] = getObject(value);\n                    }\n                    else {\n                        reviveNestedObjects(value, getObject, parser);\n                    }\n                }\n            }\n        }\n    }\n};\nconst OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '%': (obj) => {\n        return mutable(obj);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n    _: (obj) => {\n        return Promise.reject(obj);\n    },\n};\nconst getObjectImpl = (id, elements, objs, containerState) => {\n    assertTrue(typeof id === 'string' && id.length > 0, 'resume: id must be an non-empty string, got:', id);\n    if (id.startsWith(ELEMENT_ID_PREFIX)) {\n        assertTrue(elements.has(id), `missing element for id:`, id);\n        return elements.get(id);\n    }\n    const index = strToInt(id);\n    assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n    let obj = objs[index];\n    for (let i = id.length - 1; i >= 0; i--) {\n        const code = id[i];\n        const transform = OBJECT_TRANSFORMS[code];\n        if (!transform) {\n            break;\n        }\n        obj = transform(obj, containerState);\n    }\n    return obj;\n};\nconst collectProps = async (el, props, collector) => {\n    const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(getProxyTarget(props))?.$subs$;\n    if (subs && subs.has(el)) {\n        // The host element read the props\n        await collectElement(el, collector);\n    }\n};\nconst createCollector = (containerState) => {\n    return {\n        $seen$: new Set(),\n        $seenLeaks$: new Set(),\n        $objMap$: new Map(),\n        $elements$: [],\n        $watches$: [],\n        $containerState$: containerState,\n    };\n};\nconst collectElement = async (el, collector) => {\n    if (collector.$elements$.includes(el)) {\n        return;\n    }\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        collector.$elements$.push(el);\n        if (ctx.$props$) {\n            await collectValue(ctx.$props$, collector, false);\n        }\n        if (ctx.$renderQrl$) {\n            await collectValue(ctx.$renderQrl$, collector, false);\n        }\n        for (const obj of ctx.$seq$) {\n            await collectValue(obj, collector, false);\n        }\n        for (const obj of ctx.$watches$) {\n            await collectValue(obj, collector, false);\n        }\n        if (ctx.$contexts$) {\n            for (const obj of ctx.$contexts$.values()) {\n                await collectValue(obj, collector, false);\n            }\n        }\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nconst collectSubscriptions = async (target, collector) => {\n    const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(target)?.$subs$;\n    if (subs) {\n        if (collector.$seen$.has(subs)) {\n            return;\n        }\n        collector.$seen$.add(subs);\n        for (const key of Array.from(subs.keys())) {\n            if (isNode(key) && isVirtualElement(key)) {\n                await collectElement(key, collector);\n            }\n            else {\n                await collectValue(key, collector, true);\n            }\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        const v = {\n            resolved: true,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    }, (value) => {\n        const v = {\n            resolved: false,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    assertTrue(PROMISE_VALUE in promise, 'pause: promise was not resolved previously', promise);\n    return promise[PROMISE_VALUE];\n};\nconst collectValue = async (obj, collector, leaks) => {\n    const input = obj;\n    const seen = leaks ? collector.$seenLeaks$ : collector.$seen$;\n    if (seen.has(obj)) {\n        return;\n    }\n    seen.add(obj);\n    if (!shouldSerialize(obj) || obj === undefined) {\n        collector.$objMap$.set(obj, undefined);\n        return;\n    }\n    if (obj != null) {\n        // Handle QRL\n        if (isQrl(obj)) {\n            collector.$objMap$.set(obj, obj);\n            if (obj.$captureRef$) {\n                for (const item of obj.$captureRef$) {\n                    await collectValue(item, collector, leaks);\n                }\n            }\n            return;\n        }\n        // Handle Objets\n        if (typeof obj === 'object') {\n            // Handle promises\n            if (isPromise(obj)) {\n                const value = await resolvePromise(obj);\n                await collectValue(value, collector, leaks);\n                return;\n            }\n            const target = getProxyTarget(obj);\n            // Handle dom nodes\n            if (!target && isNode(obj)) {\n                if (isDocument(obj)) {\n                    collector.$objMap$.set(obj, obj);\n                }\n                else if (!isQwikElement(obj)) {\n                    throw qError(QError_verifySerializable, obj);\n                }\n                return;\n            }\n            // If proxy collect subscriptions\n            if (target) {\n                if (leaks) {\n                    await collectSubscriptions(target, collector);\n                }\n                obj = target;\n                if (seen.has(obj)) {\n                    return;\n                }\n                seen.add(obj);\n                if (isResourceReturn(obj)) {\n                    collector.$objMap$.set(target, target);\n                    await collectValue(obj.promise, collector, leaks);\n                    await collectValue(obj.resolved, collector, leaks);\n                    return;\n                }\n            }\n            collector.$objMap$.set(obj, obj);\n            if (isArray(obj)) {\n                for (let i = 0; i < obj.length; i++) {\n                    await collectValue(input[i], collector, leaks);\n                }\n            }\n            else {\n                for (const key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        await collectValue(input[key], collector, leaks);\n                    }\n                }\n            }\n            return;\n        }\n    }\n    collector.$objMap$.set(obj, obj);\n};\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nconst hasQId = (el) => {\n    const node = processVirtualNodes(el);\n    if (isQwikElement(node)) {\n        return node.hasAttribute(ELEMENT_ID);\n    }\n    return false;\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\n//# sourceMappingURL=data:application/json;base64,","import { getProxyTarget, noSerialize, unwrapProxy } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { newInvokeContext, invoke, waitAndRun } from './use-core';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { delay, safeCall, then } from '../util/promises';\nimport { getDocument } from '../util/dom';\nimport { isFunction, isObject } from '../util/types';\nimport { isServer } from '../platform/platform';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined, assertEqual } from '../assert/assert';\nimport { assertQrl, createQRL } from '../import/qrl-class';\nimport { codeToText, qError, QError_canNotMountUseServerMount, QError_trackUseStore, } from '../error/error';\nimport { useOn } from './use-on';\nimport { intToStr, strToInt } from '../object/store';\nimport { notifyWatch, _hW } from '../render/dom/notify-render';\nimport { useSequentialScope } from './use-sequential-scope';\nexport const WatchFlagsIsEffect = 1 << 0;\nexport const WatchFlagsIsWatch = 1 << 1;\nexport const WatchFlagsIsDirty = 1 << 2;\nexport const WatchFlagsIsCleanup = 1 << 3;\nexport const WatchFlagsIsResource = 1 << 4;\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatchQrl = (qrl, opts) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(qrl);\n    const el = ctx.$hostElement$;\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsWatch, i, el, qrl, undefined);\n    set(true);\n    qrl.$resolveLazy$();\n    getContext(el).$watches$.push(watch);\n    waitAndRun(ctx, () => runSubscriber(watch, containerState));\n    if (isServer(ctx)) {\n        useRunWatch(watch, opts?.eagerness);\n    }\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatch$ = /*#__PURE__*/ implicit$FirstArg(useWatchQrl);\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffectQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(qrl);\n    const el = ctx.$hostElement$;\n    const watch = new Watch(WatchFlagsIsEffect, i, el, qrl, undefined);\n    const eagerness = opts?.eagerness ?? 'visible';\n    set(true);\n    getContext(el).$watches$.push(watch);\n    useRunWatch(watch, eagerness);\n    if (!isServer(ctx)) {\n        qrl.$resolveLazy$();\n        notifyWatch(watch, ctx.$renderCtx$.$static$.$containerState$);\n    }\n};\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffect$ = /*#__PURE__*/ implicit$FirstArg(useClientEffectQrl);\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <div>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </div>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (isServer(ctx)) {\n        waitAndRun(ctx, mountQrl);\n        set(true);\n    }\n    else {\n        throw qError(QError_canNotMountUseServerMount, ctx.$hostElement$);\n    }\n};\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <div>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </div>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMount$ = /*#__PURE__*/ implicit$FirstArg(useServerMountQrl);\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <div>\n *       <p>The temperature is: ${store.temp}</p>\n *     </div>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(mountQrl);\n    mountQrl.$resolveLazy$();\n    waitAndRun(ctx, mountQrl);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <div>\n *       <p>The temperature is: ${store.temp}</p>\n *     </div>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMount$ = /*#__PURE__*/ implicit$FirstArg(useMountQrl);\nexport const isResourceWatch = (watch) => {\n    return !!watch.$resource$;\n};\nexport const runSubscriber = async (watch, containerState) => {\n    assertEqual(!!(watch.$flags$ & WatchFlagsIsDirty), true, 'Resource is not dirty', watch);\n    if (isResourceWatch(watch)) {\n        await runResource(watch, containerState);\n    }\n    else {\n        await runWatch(watch, containerState);\n    }\n};\nexport const runResource = (watch, containerState, waitOn) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const el = watch.$el$;\n    const doc = getDocument(el);\n    const invokationContext = newInvokeContext(doc, el, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.getFn(invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const cleanups = [];\n    const resource = watch.$resource$;\n    assertDefined(resource, 'useResource: when running a resource, \"watch.r\" must be a defined.', watch);\n    const track = (obj, prop) => {\n        const target = getProxyTarget(obj);\n        if (target) {\n            const manager = subsManager.$getLocal$(target);\n            manager.$addSub$(watch, prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else {\n            return obj;\n        }\n    };\n    const resourceTarget = unwrapProxy(resource);\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n        previous: resourceTarget.resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.state = 'resolved';\n                resource.resolved = value;\n                resource.error = undefined;\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.state = 'rejected';\n                resource.resolved = undefined;\n                resource.error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    // Execute mutation inside empty invokation\n    invoke(invokationContext, () => {\n        resource.state = 'pending';\n        resource.resolved = undefined;\n        resource.promise = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        });\n    });\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const promise = safeCall(() => then(waitOn, () => watchFn(opts)), (value) => {\n        setState(true, value);\n    }, (reason) => {\n        setState(false, reason);\n    });\n    const timeout = resourceTarget.timeout;\n    if (timeout) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, 'timeout')) {\n                    cleanupWatch(watch);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nexport const runWatch = (watch, containerState) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const el = watch.$el$;\n    const doc = getDocument(el);\n    const invokationContext = newInvokeContext(doc, el, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.getFn(invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const track = (obj, prop) => {\n        const target = getProxyTarget(obj);\n        if (target) {\n            const manager = subsManager.$getLocal$(target);\n            manager.$addSub$(watch, prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => watchFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        logError(reason);\n    });\n};\nexport const cleanupWatch = (watch) => {\n    const destroy = watch.$destroy$;\n    if (destroy) {\n        watch.$destroy$ = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyWatch = (watch) => {\n    if (watch.$flags$ & WatchFlagsIsCleanup) {\n        watch.$flags$ &= ~WatchFlagsIsCleanup;\n        const cleanup = watch.$qrl$;\n        cleanup();\n    }\n    else {\n        cleanupWatch(watch);\n    }\n};\nconst useRunWatch = (watch, eagerness) => {\n    if (eagerness === 'load') {\n        useOn('qinit', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'visible') {\n        useOn('qvisible', getWatchHandlerQrl(watch));\n    }\n};\nconst getWatchHandlerQrl = (watch) => {\n    const watchQrl = watch.$qrl$;\n    const watchHandler = createQRL(watchQrl.$chunk$, '_hW', _hW, null, null, [watch], watchQrl.$symbol$);\n    return watchHandler;\n};\nexport const isWatchCleanup = (obj) => {\n    return isSubscriberDescriptor(obj) && !!(obj.$flags$ & WatchFlagsIsCleanup);\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Watch;\n};\nexport const serializeWatch = (watch, getObjId) => {\n    let value = `${intToStr(watch.$flags$)} ${intToStr(watch.$index$)} ${getObjId(watch.$qrl$)} ${getObjId(watch.$el$)}`;\n    if (isResourceWatch(watch)) {\n        value += ` ${getObjId(watch.$resource$)}`;\n    }\n    return value;\n};\nexport const parseWatch = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Watch(strToInt(flags), strToInt(index), el, qrl, resource);\n};\nexport class Watch {\n    constructor($flags$, $index$, $el$, $qrl$, $resource$) {\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$resource$ = $resource$;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { createProxy, getProxyTarget } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { $ } from '../import/qrl.public';\nimport { assertQrl } from '../import/qrl-class';\nimport { runResource, WatchFlagsIsDirty, WatchFlagsIsResource, Watch, } from './use-watch';\nimport { Fragment, jsx } from '../render/jsx/jsx-runtime';\nimport { qDev } from '../util/qdev';\nimport { isServer } from '../platform/platform';\nimport { getInvokeContext, useBindInvokeContext } from './use-core';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n/**\n * @public\n */\nexport const useResourceQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    assertQrl(qrl);\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const resource = createResourceReturn(containerState, opts);\n    const el = ctx.$hostElement$;\n    const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsResource, i, el, qrl, resource);\n    const previousWait = Promise.all(ctx.$waitOn$.slice());\n    runResource(watch, containerState, previousWait);\n    getContext(el).$watches$.push(watch);\n    set(resource);\n    return resource;\n};\n/**\n * @public\n */\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl($(generatorFn), opts);\n};\n/**\n * @public\n */\nexport const Resource = (props) => {\n    const isBrowser = !qDev || !useIsServer();\n    if (isBrowser) {\n        if (props.onRejected) {\n            props.value.promise.catch(() => { });\n            if (props.value.state === 'rejected') {\n                return props.onRejected(props.value.error);\n            }\n        }\n        if (props.onPending) {\n            const state = props.value.state;\n            if (state === 'pending') {\n                return props.onPending();\n            }\n            else if (state === 'resolved') {\n                return props.onResolved(props.value.resolved);\n            }\n        }\n    }\n    const promise = props.value.promise.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    // if (isServer) {\n    //   const onPending = props.onPending;\n    //   if (props.ssrWait && onPending) {\n    //     promise = Promise.race([\n    //       delay(props.ssrWait).then(() => {\n    //         getInternalResource(props.resource).dirty = true;\n    //         return onPending();\n    //       }),\n    //       promise,\n    //     ]);\n    //   }\n    // }\n    // Resource path\n    return jsx(Fragment, {\n        children: promise,\n    });\n};\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        promise: undefined,\n        resolved: undefined,\n        error: undefined,\n        state: 'pending',\n        timeout: opts?.timeout,\n    };\n    return resource;\n};\nexport const createResourceReturn = (containerState, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.promise = initialPromise;\n    const resource = createProxy(result, containerState, 0, undefined);\n    return resource;\n};\nexport const useIsServer = () => {\n    const ctx = getInvokeContext();\n    return isServer(ctx);\n};\nexport const getInternalResource = (resource) => {\n    return getProxyTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && obj.__brand === 'resource';\n};\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource.state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource.resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2 ${getObjId(resource.error)}`;\n    }\n};\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn(undefined);\n    result.promise = Promise.resolve();\n    if (first === '0') {\n        result.state = 'resolved';\n        result.resolved = id;\n    }\n    else if (first === '1') {\n        result.state = 'pending';\n        result.promise = new Promise(() => { });\n    }\n    else if (first === '2') {\n        result.state = 'rejected';\n        result.error = id;\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlc291cmNlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLENBQUMsRUFBTyxNQUFNLHNCQUFzQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBSUwsV0FBVyxFQUNYLGlCQUFpQixFQUNqQixvQkFBb0IsRUFFcEIsS0FBSyxHQUNOLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFMUQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRXBFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFVNUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FDNUIsR0FBdUIsRUFDdkIsSUFBc0IsRUFDSCxFQUFFO0lBQ3JCLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsRUFBcUIsQ0FBQztJQUNyRSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBQ0QsU0FBUyxDQUFDLEdB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Q29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVQcm94eSwgZ2V0UHJveHlUYXJnZXQgfSBmcm9tICcuLi9vYmplY3QvcS1vYmplY3QnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gJy4uL3Byb3BzL3Byb3BzJztcbmltcG9ydCB7ICQsIFFSTCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuaW1wb3J0IHtcbiAgUmVzb3VyY2VSZXR1cm4sXG4gIFJlc291cmNlRGVzY3JpcHRvcixcbiAgUmVzb3VyY2VGbixcbiAgcnVuUmVzb3VyY2UsXG4gIFdhdGNoRmxhZ3NJc0RpcnR5LFxuICBXYXRjaEZsYWdzSXNSZXNvdXJjZSxcbiAgUmVzb3VyY2VSZXR1cm5JbnRlcm5hbCxcbiAgV2F0Y2gsXG59IGZyb20gJy4vdXNlLXdhdGNoJztcbmltcG9ydCB7IEZyYWdtZW50LCBqc3ggfSBmcm9tICcuLi9yZW5kZXIvanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgSlNYTm9kZSB9IGZyb20gJy4uL3JlbmRlci9qc3gvdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IGdldEludm9rZUNvbnRleHQsIHVzZUJpbmRJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IEdldE9iaklEIH0gZnJvbSAnLi4vb2JqZWN0L3N0b3JlJztcbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyU3RhdGUgfSBmcm9tICcuLi9yZW5kZXIvY29udGFpbmVyJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZU9wdGlvbnMge1xuICAvLyBUaW1lb3V0IGluIG1pbGxpc2Vjb25kc1xuICB0aW1lb3V0PzogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZVJlc291cmNlUXJsID0gPFQ+KFxuICBxcmw6IFFSTDxSZXNvdXJjZUZuPFQ+PixcbiAgb3B0cz86IFJlc291cmNlT3B0aW9uc1xuKTogUmVzb3VyY2VSZXR1cm48VD4gPT4ge1xuICBjb25zdCB7IGdldCwgc2V0LCBpLCBjdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxSZXNvdXJjZVJldHVybjxUPj4oKTtcbiAgaWYgKGdldCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGdldDtcbiAgfVxuICBhc3NlcnRRcmwocXJsKTtcblxuICBjb25zdCBjb250YWluZXJTdGF0ZSA9IGN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICBjb25zdCByZXNvdXJjZSA9IGNyZWF0ZVJlc291cmNlUmV0dXJuPFQ+KGNvbnRhaW5lclN0YXRlLCBvcHRzKTtcbiAgY29uc3QgZWwgPSBjdHguJGhvc3RFbGVtZW50JDtcbiAgY29uc3Qgd2F0Y2ggPSBuZXcgV2F0Y2goXG4gICAgV2F0Y2hGbGFnc0lzRGlydHkgfCBXYXRjaEZsYWdzSXNSZXNvdXJjZSxcbiAgICBpLFxuICAgIGVsLFxuICAgIHFybCxcbiAgICByZXNvdXJjZVxuICApIGFzIFJlc291cmNlRGVzY3JpcHRvcjxhbnk+O1xuICBjb25zdCBwcmV2aW91c1dhaXQgPSBQcm9taXNlLmFsbChjdHguJHdhaXRPbiQuc2xpY2UoKSk7XG4gIHJ1blJlc291cmNlKHdhdGNoLCBjb250YWluZXJTdGF0ZSwgcHJldmlvdXNXYWl0KTtcblxuICBnZXRDb250ZXh0KGVsKS4kd2F0Y2hlcyQucHVzaCh3YXRjaCk7XG4gIHNldChyZXNvdXJjZSk7XG5cbiAgcmV0dXJuIHJlc291cmNlO1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VSZXNvdXJjZSQgPSA8VD4oXG4gIGdlbmVyYXRvckZuOiBSZXNvdXJjZUZuPFQ+LFxuICBvcHRzPzogUmVzb3VyY2VPcHRpb25zXG4pOiBSZXNvdXJjZVJldHVybjxUPiA9PiB7XG4gIHJldHVybiB1c2VSZXNvdXJjZVFybDxUPigkKGdlbmVyYXRvckZuKSwgb3B0cyk7XG59O1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVByb3BzPFQ+IHtcbiAgdmFsdWU6IFJlc291cmNlUmV0dXJuPFQ+O1xuICBvblJlc29sdmVkOiAodmFsdWU6IFQpID0+IEpTWE5vZGU7XG4gIG9uUGVuZGluZz86ICgpID0+IEpTWE5vZGU7XG4gIG9uUmVqZWN0ZWQ/OiAocmVhc29uOiBhbnkpID0+IEpTWE5vZGU7XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgUmVzb3VyY2UgPSA8VD4ocHJvcHM6IFJlc291cmNlUHJvcHM8VD4pOiBKU1hOb2RlID0+IHtcbiAgY29uc3QgaXNCcm93c2VyID0gIXFEZXYgfHwgIXVzZUlzU2VydmVyKCk7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICBpZiAocHJvcHMub25SZWplY3RlZCkge1xuICAgICAgcHJvcHMudmFsdWUucHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgICBpZiAocHJvcHMudmFsdWUuc3RhdGUgPT09ICdyZWplY3RlZCcpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLm9uUmVqZWN0ZWQocHJvcHMudmFsdWUuZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMub25QZW5kaW5nKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHByb3BzLnZhbHVlLnN0YXRlO1xuICAgICAgaWYgKHN0YXRlID09PSAncGVuZGluZycpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLm9uUGVuZGluZygpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ3Jlc29sdmVkJykge1xuICAgICAgICByZXR1cm4gcHJvcHMub25SZXNvbHZlZChwcm9wcy52YWx1ZS5yZXNvbHZlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcHJvbWlzZTogYW55ID0gcHJvcHMudmFsdWUucHJvbWlzZS50aGVuKFxuICAgIHVzZUJpbmRJbnZva2VDb250ZXh0KHByb3BzLm9uUmVzb2x2ZWQpLFxuICAgIHVzZUJpbmRJbnZva2VDb250ZXh0KHByb3BzLm9uUmVqZWN0ZWQpXG4gICk7XG4gIC8vIGlmIChpc1NlcnZlcikge1xuICAvLyAgIGNvbnN0IG9uUGVuZGluZyA9IHByb3BzLm9uUGVuZGluZztcbiAgLy8gICBpZiAocHJvcHMuc3NyV2FpdCAmJiBvblBlbmRpbmcpIHtcbiAgLy8gICAgIHByb21pc2UgPSBQcm9taXNlLnJhY2UoW1xuICAvLyAgICAgICBkZWxheShwcm9wcy5zc3JXYWl0KS50aGVuKCgpID0+IHtcbiAgLy8gICAgICAgICBnZXRJbnRlcm5hbFJlc291cmNlKHByb3BzLnJlc291cmNlKS5kaXJ0eSA9IHRydWU7XG4gIC8vICAgICAgICAgcmV0dXJuIG9uUGVuZGluZygpO1xuICAvLyAgICAgICB9KSxcbiAgLy8gICAgICAgcHJvbWlzZSxcbiAgLy8gICAgIF0pO1xuICAvLyAgIH1cbiAgLy8gfVxuXG4gIC8vIFJlc291cmNlIHBhdGhcbiAgcmV0dXJuIGpzeChGcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBwcm9taXNlLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBfY3JlYXRlUmVzb3VyY2VSZXR1cm4gPSA8VD4ob3B0cz86IFJlc291cmNlT3B0aW9ucyk6IFJlc291cmNlUmV0dXJuPFQ+ID0+IHtcbiAgY29uc3QgcmVzb3VyY2U6IFJlc291cmNlUmV0dXJuPFQ+ID0ge1xuICAgIF9fYnJhbmQ6ICdyZXNvdXJjZScsXG4gICAgcHJvbWlzZTogdW5kZWZpbmVkIGFzIG5ldmVyLFxuICAgIHJlc29sdmVkOiB1bmRlZmluZWQgYXMgbmV2ZXIsXG4gICAgZXJyb3I6IHVuZGVmaW5lZCBhcyBuZXZlcixcbiAgICBzdGF0ZTogJ3BlbmRpbmcnLFxuICAgIHRpbWVvdXQ6IG9wdHM/LnRpbWVvdXQsXG4gIH07XG4gIHJldHVybiByZXNvdXJjZTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVSZXNvdXJjZVJldHVybiA9IDxUPihcbiAgY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlLFxuICBvcHRzPzogUmVzb3VyY2VPcHRpb25zLFxuICBpbml0aWFsUHJvbWlzZT86IFByb21pc2U8VD5cbik6IFJlc291cmNlUmV0dXJuPFQ+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gX2NyZWF0ZVJlc291cmNlUmV0dXJuPFQ+KG9wdHMpO1xuICByZXN1bHQucHJvbWlzZSA9IGluaXRpYWxQcm9taXNlIGFzIGFueTtcbiAgY29uc3QgcmVzb3VyY2UgPSBjcmVhdGVQcm94eShyZXN1bHQsIGNvbnRhaW5lclN0YXRlLCAwLCB1bmRlZmluZWQpO1xuICByZXR1cm4gcmVzb3VyY2U7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlSXNTZXJ2ZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGdldEludm9rZUNvbnRleHQoKTtcbiAgcmV0dXJuIGlzU2VydmVyKGN0eCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SW50ZXJuYWxSZXNvdXJjZSA9IDxUPihyZXNvdXJjZTogUmVzb3VyY2VSZXR1cm48VD4pOiBSZXNvdXJjZVJldHVybkludGVybmFsPFQ+ID0+IHtcbiAgcmV0dXJuIGdldFByb3h5VGFyZ2V0KHJlc291cmNlKSBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNSZXNvdXJjZVJldHVybiA9IChvYmo6IGFueSk6IG9iaiBpcyBSZXNvdXJjZVJldHVybjxhbnk+ID0+IHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqLl9fYnJhbmQgPT09ICdyZXNvdXJjZSc7XG59O1xuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplUmVzb3VyY2UgPSAocmVzb3VyY2U6IFJlc291cmNlUmV0dXJuPGFueT4sIGdldE9iaklkOiBHZXRPYmpJRCkgPT4ge1xuICBjb25zdCBzdGF0ZSA9IHJlc291cmNlLnN0YXRlO1xuICBpZiAoc3RhdGUgPT09ICdyZXNvbHZlZCcpIHtcbiAgICByZXR1cm4gYDAgJHtnZXRPYmpJZChyZXNvdXJjZS5yZXNvbHZlZCl9YDtcbiAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XG4gICAgcmV0dXJuIGAxYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYDIgJHtnZXRPYmpJZChyZXNvdXJjZS5lcnJvcil9YDtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlUmVzb3VyY2VSZXR1cm4gPSA8VD4oZGF0YTogc3RyaW5nKTogUmVzb3VyY2VSZXR1cm48VD4gPT4ge1xuICBjb25zdCBbZmlyc3QsIGlkXSA9IGRhdGEuc3BsaXQoJyAnKTtcbiAgY29uc3QgcmVzdWx0ID0gX2NyZWF0ZVJlc291cmNlUmV0dXJuPFQ+KHVuZGVmaW5lZCk7XG4gIHJlc3VsdC5wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkgYXMgYW55O1xuICBpZiAoZmlyc3QgPT09ICcwJykge1xuICAgIHJlc3VsdC5zdGF0ZSA9ICdyZXNvbHZlZCc7XG4gICAgcmVzdWx0LnJlc29sdmVkID0gaWQgYXMgYW55O1xuICB9IGVsc2UgaWYgKGZpcnN0ID09PSAnMScpIHtcbiAgICByZXN1bHQuc3RhdGUgPSAncGVuZGluZyc7XG4gICAgcmVzdWx0LnByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG4gIH0gZWxzZSBpZiAoZmlyc3QgPT09ICcyJykge1xuICAgIHJlc3VsdC5zdGF0ZSA9ICdyZWplY3RlZCc7XG4gICAgcmVzdWx0LmVycm9yID0gaWQgYXMgYW55O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl19","import { componentQrl, isQwikComponent } from '../component/component.public';\nimport { parseQRL, stringifyQRL } from '../import/qrl';\nimport { isQrl } from '../import/qrl-class';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseWatch, serializeWatch, } from '../use/use-watch';\nimport { isDocument } from '../util/element';\n/**\n * 0, 8, 9, A, B, C, D\n\\0: null character (U+0000 NULL) (only if the next character is not a decimal digit; else it’s an octal escape sequence)\n\\b: backspace (U+0008 BACKSPACE)\n\\t: horizontal tab (U+0009 CHARACTER TABULATION)\n\\n: line feed (U+000A LINE FEED)\n\\v: vertical tab (U+000B LINE TABULATION)\n\\f: form feed (U+000C FORM FEED)\n\\r: carriage return (U+000D CARRIAGE RETURN)\n\\\": double quote (U+0022 QUOTATION MARK)\n\\': single quote (U+0027 APOSTROPHE)\n\\\\: backslash (U+005C REVERSE SOLIDUS)\n */\nexport const UNDEFINED_PREFIX = '\\u0001';\nconst QRLSerializer = {\n    prefix: '\\u0002',\n    test: (v) => isQrl(v),\n    serialize: (obj, getObjId, containerState) => {\n        return stringifyQRL(obj, {\n            $platform$: containerState.$platform$,\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    fill: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst WatchSerializer = {\n    prefix: '\\u0003',\n    test: (v) => isSubscriberDescriptor(v),\n    serialize: (obj, getObjId) => serializeWatch(obj, getObjId),\n    prepare: (data) => parseWatch(data),\n    fill: (watch, getObject) => {\n        watch.$el$ = getObject(watch.$el$);\n        watch.$qrl$ = getObject(watch.$qrl$);\n        if (watch.$resource$) {\n            watch.$resource$ = getObject(watch.$resource$);\n        }\n    },\n};\nconst ResourceSerializer = {\n    prefix: '\\u0004',\n    test: (v) => isResourceReturn(v),\n    serialize: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    prepare: (data) => {\n        return parseResourceReturn(data);\n    },\n    fill: (resource, getObject) => {\n        if (resource.state === 'resolved') {\n            resource.resolved = getObject(resource.resolved);\n            resource.promise = Promise.resolve(resource.resolved);\n        }\n        else if (resource.state === 'rejected') {\n            const p = Promise.reject(resource.error);\n            p.catch(() => null);\n            resource.error = getObject(resource.error);\n            resource.promise = p;\n        }\n    },\n};\nconst URLSerializer = {\n    prefix: '\\u0005',\n    test: (v) => v instanceof URL,\n    serialize: (obj) => obj.href,\n    prepare: (data) => new URL(data),\n    fill: undefined,\n};\nconst DateSerializer = {\n    prefix: '\\u0006',\n    test: (v) => v instanceof Date,\n    serialize: (obj) => obj.toISOString(),\n    prepare: (data) => new Date(data),\n    fill: undefined,\n};\nconst RegexSerializer = {\n    prefix: '\\u0007',\n    test: (v) => v instanceof RegExp,\n    serialize: (obj) => `${obj.flags} ${obj.source}`,\n    prepare: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n    fill: undefined,\n};\nconst ErrorSerializer = {\n    prefix: '\\u000E',\n    test: (v) => v instanceof Error,\n    serialize: (obj) => {\n        return obj.message;\n    },\n    prepare: (text) => {\n        const err = new Error(text);\n        err.stack = undefined;\n        return err;\n    },\n    fill: undefined,\n};\nconst DocumentSerializer = {\n    prefix: '\\u000F',\n    test: (v) => isDocument(v),\n    serialize: undefined,\n    prepare: (_, _c, doc) => {\n        return doc;\n    },\n    fill: undefined,\n};\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = {\n    prefix: '\\u0010',\n    test: (obj) => isQwikComponent(obj),\n    serialize: (obj, getObjId, containerState) => {\n        const [qrl] = obj[SERIALIZABLE_STATE];\n        return stringifyQRL(qrl, {\n            $platform$: containerState.$platform$,\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        const optionsIndex = data.indexOf('{');\n        const qrlString = optionsIndex == -1 ? data : data.slice(0, optionsIndex);\n        const qrl = parseQRL(qrlString, containerState.$containerEl$);\n        return componentQrl(qrl);\n    },\n    fill: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst PureFunctionSerializer = {\n    prefix: '\\u0011',\n    test: (obj) => typeof obj === 'function' && obj.__qwik_serializable__ !== undefined,\n    serialize: (obj) => {\n        return obj.toString();\n    },\n    prepare: (data) => {\n        const fn = new Function('return ' + data)();\n        fn.__qwik_serializable__ = true;\n        return fn;\n    },\n    fill: undefined,\n};\nconst serializers = [\n    QRLSerializer,\n    WatchSerializer,\n    ResourceSerializer,\n    URLSerializer,\n    DateSerializer,\n    RegexSerializer,\n    ErrorSerializer,\n    DocumentSerializer,\n    ComponentSerializer,\n    PureFunctionSerializer,\n];\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, containerState) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            let value = s.prefix;\n            if (s.serialize) {\n                value += s.serialize(obj, getObjID, containerState);\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\nexport const createParser = (getObject, containerState, doc) => {\n    const map = new Map();\n    return {\n        prepare(data) {\n            for (const s of serializers) {\n                const prefix = s.prefix;\n                if (data.startsWith(prefix)) {\n                    const value = s.prepare(data.slice(prefix.length), containerState, doc);\n                    if (s.fill) {\n                        map.set(value, s);\n                    }\n                    return value;\n                }\n            }\n            return data;\n        },\n        fill(obj) {\n            const serializer = map.get(obj);\n            if (serializer) {\n                serializer.fill(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertTrue } from '../assert/assert';\nimport { qError, QError_immutableProps, QError_onlyLiteralWrapped, QError_onlyObjectWrapped, QError_verifySerializable, } from '../error/error';\nimport { isQrl } from '../import/qrl-class';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { isDocument, isNode, isQwikElement } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { tryGetContext } from '../props/props';\nimport { RenderEvent } from '../util/markers';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { isPromise } from '../util/promises';\nimport { canSerialize } from './serializers';\nexport const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\n/**\n * Creates a proxy that notifies of any writes.\n */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    return createProxy(target, containerState, flags, undefined);\n};\nexport const createProxy = (target, containerState, flags, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!containerState.$proxyMap$.has(target), 'Proxy was already created', target);\n    if (!isObject(target)) {\n        throw qError(QError_onlyObjectWrapped, target);\n    }\n    if (target.constructor !== Object && !isArray(target)) {\n        throw qError(QError_onlyLiteralWrapped, target);\n    }\n    const manager = containerState.$subsManager$.$getLocal$(target, subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager, flags));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nconst QOjectTargetSymbol = Symbol();\nconst QOjectFlagsSymbol = Symbol();\nclass ReadWriteProxyHandler {\n    constructor($containerState$, $manager$, $flags$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n        this.$flags$ = $flags$;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol)\n                return target;\n            if (prop === QOjectFlagsSymbol)\n                return this.$flags$;\n            return target[prop];\n        }\n        let subscriber;\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        let value = target[prop];\n        if (isMutable(value)) {\n            value = value.v;\n        }\n        else if (immutable) {\n            subscriber = null;\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$(subscriber, isA ? undefined : prop);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            verifySerializable(unwrappedNewValue);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$, prop);\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        if (oldValue !== unwrappedNewValue) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol)\n            return true;\n        if (property === QOjectFlagsSymbol)\n            return true;\n        return Object.prototype.hasOwnProperty.call(target, property);\n    }\n    ownKeys(target) {\n        let subscriber = null;\n        const invokeCtx = tryGetInvokeContext();\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (subscriber) {\n            this.$manager$.$addSub$(subscriber);\n        }\n        return Object.getOwnPropertyNames(target);\n    }\n}\nconst wrap = (value, containerState) => {\n    if (isQrl(value)) {\n        return value;\n    }\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (isNode(nakedValue)) {\n            return value;\n        }\n        if (!shouldSerialize(nakedValue)) {\n            return value;\n        }\n        if (qDev) {\n            verifySerializable(value);\n        }\n        const proxy = containerState.$proxyMap$.get(value);\n        return proxy ? proxy : getOrCreateProxy(value, containerState, QObjectRecursive);\n    }\n    else {\n        return value;\n    }\n};\nexport const verifySerializable = (value) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen);\n};\nconst _verifySerializable = (value, seen) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        switch (typeof unwrapped) {\n            case 'object':\n                if (isPromise(unwrapped))\n                    return value;\n                if (isQwikElement(unwrapped))\n                    return value;\n                if (isDocument(unwrapped))\n                    return value;\n                if (isArray(unwrapped)) {\n                    for (const item of unwrapped) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const item of Object.values(unwrapped)) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        throw qError(QError_verifySerializable, unwrapped);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this\n * is a runtime error as Store wants to eagerly report when a non-serializable property is\n * assigned to it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.builder.io/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\nexport const immutable = (input) => {\n    return Object.freeze(input);\n};\n// <docs markdown=\"../readme.md#mutable\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#mutable instead)\n/**\n * Mark property as mutable.\n *\n * Qwik assumes that all bindings in components are immutable by default. This is done for two\n * reasons:\n *\n * 1. JSX does not allow Qwik runtime to know if a binding is static or mutable.\n *    `<Example valueA={123} valueB={exp}>` At runtime there is no way to know if `valueA` is\n * immutable.\n * 2. If Qwik assumes that properties are immutable, then it can do a better job data-shaking the\n * amount of code that needs to be serialized to the client.\n *\n * Because Qwik assumes that bindings are immutable by default, it needs a way for a developer to\n * let it know that binding is mutable. `mutable()` function serves that purpose.\n * `<Example valueA={123} valueB={mutable(exp)}>`. In this case, the Qwik runtime can correctly\n * recognize that the `Example` props are mutable and need to be serialized.\n *\n * See: [Mutable Props Tutorial](http://qwik.builder.io/tutorial/props/mutable) for an example\n *\n * @alpha\n */\n// </docs>\nexport const mutable = (v) => {\n    return {\n        [MUTABLE]: true,\n        v,\n    };\n};\nexport const isConnected = (sub) => {\n    if (isQwikElement(sub)) {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n    else {\n        return isConnected(sub.$el$);\n    }\n};\nconst MUTABLE = Symbol('mutable');\nexport const isMutable = (v) => {\n    return isObject(v) && v[MUTABLE] === true;\n};\n/**\n * @alpha\n */\nexport const unwrapProxy = (proxy) => {\n    return getProxyTarget(proxy) ?? proxy;\n};\nexport const getProxyTarget = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectTargetSymbol];\n    }\n    return undefined;\n};\nexport const getProxyFlags = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectFlagsSymbol];\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,","import { createProxy, getProxyTarget, isMutable, mutable, QObjectImmutable, } from '../object/q-object';\nimport { resumeContainer } from '../object/store';\nimport { QContainerAttr } from '../util/markers';\nimport { destroyWatch } from '../use/use-watch';\nimport { pauseContainer } from '../object/store';\nimport { qDev } from '../util/qdev';\nimport { logError } from '../util/log';\nimport { isQrl } from '../import/qrl-class';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertDefined, assertTrue } from '../assert/assert';\nimport { codeToText, QError_immutableJsxProps } from '../error/error';\nimport { getWrappingContainer } from '../use/use-core';\nimport { getContainerState } from '../render/container';\nimport { fromCamelToKebabCase } from '../util/case';\nexport const Q_CTX = '_qc_';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qDev) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: getContainerState(containerEl),\n    };\n};\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (element) => {\n    let ctx = tryGetContext(element);\n    if (!ctx) {\n        element[Q_CTX] = ctx = {\n            $dirty$: false,\n            $mounted$: false,\n            $attachedListeners$: false,\n            $id$: '',\n            $element$: element,\n            $refMap$: [],\n            $seq$: [],\n            $watches$: [],\n            $slots$: null,\n            $scopeIds$: null,\n            $appendStyles$: null,\n            $props$: null,\n            $vdom$: null,\n            $renderQrl$: null,\n            li: null,\n            $contexts$: null,\n        };\n    }\n    return ctx;\n};\nexport const cleanupContext = (ctx, subsManager) => {\n    const el = ctx.$element$;\n    ctx.$watches$.forEach((watch) => {\n        subsManager.$clearSub$(watch);\n        destroyWatch(watch);\n    });\n    if (ctx.$renderQrl$) {\n        subsManager.$clearSub$(el);\n    }\n    ctx.$renderQrl$ = null;\n    ctx.$seq$.length = 0;\n    ctx.$watches$.length = 0;\n    ctx.$dirty$ = false;\n    el[Q_CTX] = undefined;\n};\nconst PREFIXES = ['on', 'window:on', 'document:on'];\nconst SCOPED = ['on', 'on-window', 'on-document'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n            break;\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = fromCamelToKebabCase(prop.slice(1));\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return scope + \":\" + prop;\n};\nexport const createProps = (target, containerState) => {\n    return createProxy(target, containerState, QObjectImmutable);\n};\nexport const getPropsMutator = (ctx, containerState) => {\n    let props = ctx.$props$;\n    if (!ctx.$props$) {\n        ctx.$props$ = props = createProps({}, containerState);\n    }\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    const manager = containerState.$subsManager$.$getLocal$(target);\n    return {\n        set(prop, value) {\n            const didSet = prop in target;\n            let oldValue = target[prop];\n            let mut = false;\n            if (isMutable(oldValue)) {\n                oldValue = oldValue.v;\n            }\n            if (containerState.$mutableProps$) {\n                mut = true;\n                if (isMutable(value)) {\n                    value = value.v;\n                    target[prop] = value;\n                }\n                else {\n                    target[prop] = mutable(value);\n                }\n            }\n            else {\n                target[prop] = value;\n                if (isMutable(value)) {\n                    value = value.v;\n                    mut = true;\n                }\n            }\n            if (oldValue !== value) {\n                if (qDev) {\n                    if (didSet && !mut && !isQrl(value)) {\n                        const displayName = ctx.$renderQrl$?.getSymbol() ?? ctx.$element$.localName;\n                        logError(codeToText(QError_immutableJsxProps), `If you need to change a value of a passed in prop, please wrap the prop with \"mutable()\" <${displayName} ${prop}={mutable(...)}>`, '\\n - Component:', displayName, '\\n - Prop:', prop, '\\n - Old value:', oldValue, '\\n - New value:', value);\n                    }\n                }\n                manager.$notifySubs$(prop);\n            }\n        },\n    };\n};\n/**\n * @internal\n */\nexport const _useMutableProps = (element, mutable) => {\n    const ctx = getWrappingContainer(element);\n    getContainerState(ctx).$mutableProps$ = mutable;\n};\nexport const inflateQrl = (qrl, elCtx) => {\n    assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n    return qrl.$captureRef$ = qrl.$capture$.map((idx) => {\n        const int = parseInt(idx, 10);\n        const obj = elCtx.$refMap$[int];\n        assertTrue(elCtx.$refMap$.length > int, 'out of bounds inflate access', idx);\n        return obj;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { isNode } from '../../testing/html';\nimport { tryGetContext } from '../props/props';\nimport { isElement } from './element';\nimport { qDev } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // eslint-disable-next-line no-console\n    console.error('%cQWIK ERROR', STYLE, err.message, ...printParams(optionalParams), err.stack);\n    return err;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = logError(message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nexport const logWarn = (message, ...optionalParams) => {\n    // eslint-disable-next-line no-console\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isNode(p) && isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$renderQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sS0FBSyxHQUFHLElBQUk7SUFDaEIsQ0FBQyxDQUFDLDRGQUE0RjtJQUM5RixDQUFDLENBQUMsRUFBRSxDQUFDO0FBRVAsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ2xFLE1BQU0sR0FBRyxHQUFHLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEUsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUN6RSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7SUFDakQsdUNBQXVDO0lBQ3ZDLFFBQVEsQ0FBQztJQUNULE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ2pFLHNDQUFzQztJQUN0QyxJQUFJLElBQUksRUFBRTtRQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztLQUM3RTtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQWdCLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDckUsSUFBSSxJQUFJLEVBQUU7UUFDUixzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0tBQ3pFO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxjQUFxQixFQUFFLEVBQUU7SUFDNUMsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUM5QixJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdCLE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxjQUFjLENBQUM7QUFDeEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFXLEVBQUUsRUFBRTtJQUNuQyxNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsTUFBTSxRQUFRLEdBQVksYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQzVDLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBRXJGLE9BQU87UUFDTCxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU87UUFDbkIsU0FBUyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO1FBQ3hDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNsQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUc7S0FDaEMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uLy4uL3Rlc3RpbmcvaHRtbCc7XG5pbXBvcnQgeyB0cnlHZXRDb250ZXh0IH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuL3FkZXYnO1xuXG5jb25zdCBTVFlMRSA9IHFEZXZcbiAgPyBgYmFja2dyb3VuZDogIzU2NENFMDsgY29sb3I6IHdoaXRlOyBwYWRkaW5nOiAycHggM3B4OyBib3JkZXItcmFkaXVzOiAycHg7IGZvbnQtc2l6ZTogMC44ZW07YFxuICA6ICcnO1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3IgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVyciA9IG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciA/IG1lc3NhZ2UgOiBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoJyVjUVdJSyBFUlJPUicsIFNUWUxFLCBlcnIubWVzc2FnZSwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpLCBlcnIuc3RhY2spO1xuICByZXR1cm4gZXJyO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvZ0Vycm9yQW5kU3RvcCA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgY29uc3QgZXJyID0gbG9nRXJyb3IobWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgZGVidWdnZXI7XG4gIHJldHVybiBlcnI7XG59O1xuXG5leHBvcnQgY29uc3QgbG9nV2FybiA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgaWYgKHFEZXYpIHtcbiAgICBjb25zb2xlLndhcm4oJyVjUVdJSyBXQVJOJywgU1RZTEUsIG1lc3NhZ2UsIC4uLnByaW50UGFyYW1zKG9wdGlvbmFsUGFyYW1zKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBsb2dEZWJ1ZyA9IChtZXNzYWdlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZGVidWcoJyVjUVdJSycsIFNUWUxFLCBtZXNzYWdlLCAuLi5wcmludFBhcmFtcyhvcHRpb25hbFBhcmFtcykpO1xuICB9XG59O1xuXG5jb25zdCBwcmludFBhcmFtcyA9IChvcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICByZXR1cm4gb3B0aW9uYWxQYXJhbXMubWFwKChwKSA9PiB7XG4gICAgICBpZiAoaXNOb2RlKHApICYmIGlzRWxlbWVudChwKSkge1xuICAgICAgICByZXR1cm4gcHJpbnRFbGVtZW50KHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbmFsUGFyYW1zO1xufTtcblxuY29uc3QgcHJpbnRFbGVtZW50ID0gKGVsOiBFbGVtZW50KSA9PiB7XG4gIGNvbnN0IGN0eCA9IHRyeUdldENvbnRleHQoZWwpO1xuICBjb25zdCBpc1NlcnZlcjogYm9vbGVhbiA9IC8qI19fUFVSRV9fKi8gKCgpID0+XG4gICAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICEhcHJvY2Vzcy52ZXJzaW9ucyAmJiAhIXByb2Nlc3MudmVyc2lvbnMubm9kZSkoKTtcblxuICByZXR1cm4ge1xuICAgIHRhZ05hbWU6IGVsLnRhZ05hbWUsXG4gICAgcmVuZGVyUVJMOiBjdHg/LiRyZW5kZXJRcmwkPy5nZXRTeW1ib2woKSxcbiAgICBlbGVtZW50OiBpc1NlcnZlciA/IHVuZGVmaW5lZCA6IGVsLFxuICAgIGN0eDogaXNTZXJ2ZXIgPyB1bmRlZmluZWQgOiBjdHgsXG4gIH07XG59O1xuIl19","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_canNotMountUseServerMount = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    return logErrorAndStop(text, ...parts);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute',\n            'Can not serialize a HTML Node that is not an Element',\n            'Rruntime but no instance found on element.',\n            'Only primitive and object literals can be serialized',\n            'Crash while rendering',\n            'You can render over a existing q:container. Skipping render().',\n            'Set property',\n            \"Only function's and 'string's are supported.\",\n            \"Only objects can be wrapped in 'QObject'\",\n            `Only objects literals can be wrapped in 'QObject'`,\n            'QRL is not a function',\n            'Dynamic import not found',\n            'Unknown type argument',\n            'Actual value for useContext() can not be found, make sure some ancestor component has set a value using useContextProvider()',\n            \"Invoking 'use*()' method outside of invocation context.\",\n            'Cant access renderCtx for existing context',\n            'Cant access document for existing context',\n            'props are inmutable',\n            '<div> component can only be used at the root of a Qwik component$()',\n            'Props are immutable by default.',\n            'use- method must be called only at the root level of a component$()',\n            'Container is already paused. Skipping',\n            'Components using useServerMount() can only be mounted in the server, if you need your component to be mounted in the client, use \"useMount$()\" instead',\n            'When rendering directly on top of Document, the root node must be a <html>',\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>',\n            'Invalid JSXNode type. It must be either a function or a string. Found:',\n            'Tracking value changes can only be done to useStore() objects and component props',\n            'Missing Object ID for captured object',\n            'The provided Context reference is not a valid context created by createContext()',\n            '<html> is the root container, it can not be rendered inside a component', // 29\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { verifySerializable } from '../object/q-object';\nimport { getPlatform } from '../platform/platform';\nimport { newInvokeContext, invoke, newInvokeContextFromTuple, } from '../use/use-core';\nimport { then } from '../util/promises';\nimport { qDev, seal } from '../util/qdev';\nimport { isArray, isFunction } from '../util/types';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev) {\n        verifySerializable(captureRef);\n    }\n    let containerEl;\n    const setContainer = (el) => {\n        if (!containerEl) {\n            containerEl = el;\n        }\n    };\n    const resolve = async () => {\n        if (symbolRef) {\n            return symbolRef;\n        }\n        if (symbolFn) {\n            return (symbolRef = symbolFn().then((module) => (symbolRef = module[symbol])));\n        }\n        else {\n            if (!containerEl) {\n                throw new Error(`QRL '${chunk}#${symbol || 'default'}' does not have an attached container`);\n            }\n            const symbol2 = getPlatform(containerEl).importSymbol(containerEl, chunk, symbol);\n            return (symbolRef = then(symbol2, (ref) => {\n                return (symbolRef = ref);\n            }));\n        }\n    };\n    const resolveLazy = () => {\n        return isFunction(symbolRef) ? symbolRef : resolve();\n    };\n    const invokeFn = (currentCtx, beforeFn) => {\n        return ((...args) => {\n            const fn = resolveLazy();\n            return then(fn, (fn) => {\n                if (isFunction(fn)) {\n                    const baseContext = createInvokationContext(currentCtx);\n                    const context = {\n                        ...baseContext,\n                        $qrl$: QRL,\n                    };\n                    if (beforeFn) {\n                        beforeFn();\n                    }\n                    return invoke(context, fn, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        });\n    };\n    const createInvokationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const invokeQRL = async function (...args) {\n        const fn = invokeFn();\n        const result = await fn(...args);\n        return result;\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    const QRL = invokeQRL;\n    const methods = {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n    };\n    const qrl = Object.assign(invokeQRL, methods);\n    seal(qrl);\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { getDocument } from '../util/dom';\nimport { logError } from '../util/log';\nimport { codeToText, qError, QError_dynamicImportFailed, QError_runtimeQrlNoElement, QError_unknownTypeArgument, } from '../error/error';\nimport { qTest } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { assertTrue } from '../assert/assert';\nimport { isElement } from '../../testing/html';\nlet runtimeSymbolId = 0;\nconst RUNTIME_QRL = '/runtimeQRL';\nconst INLINED_QRL = '/inlinedQRL';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst QRLcache = new Map();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @see `QRL`, `$(...)`\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - a set of lexically scoped variables to capture.\n * @alpha\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    let chunk = '';\n    let symbolFn = null;\n    if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        const cached = QRLcache.get(symbol);\n        if (cached) {\n            chunk = cached;\n        }\n        else {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n            QRLcache.set(symbol, chunk);\n        }\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\nexport const runtimeQrl = (symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQRL(RUNTIME_QRL, 's' + runtimeSymbolId++, symbol, null, null, lexicalScopeCapture, null);\n};\n/**\n * @alpha\n */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(INLINED_QRL, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\nexport const stringifyQRL = (qrl, opts = {}) => {\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = opts.$platform$;\n    const element = opts.$element$;\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    if (chunk.startsWith('./')) {\n        chunk = chunk.slice(2);\n    }\n    const parts = [chunk];\n    if (symbol && symbol !== 'default') {\n        if (chunk === RUNTIME_QRL && qTest) {\n            symbol = '_';\n        }\n        parts.push('#', symbol);\n    }\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (captureRef && captureRef.length) {\n        if (opts.$getObjId$) {\n            const capture = captureRef.map(opts.$getObjId$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n        else if (opts.$addRefMap$) {\n            const capture = captureRef.map(opts.$addRefMap$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n    }\n    else if (capture && capture.length > 0) {\n        parts.push(`[${capture.join(' ')}]`);\n    }\n    const qrlString = parts.join('');\n    if (qrl.$chunk$ === RUNTIME_QRL && element) {\n        const qrls = element.__qrls__ || (element.__qrls__ = new Set());\n        qrls.add(qrl);\n    }\n    return qrlString;\n};\nexport const serializeQRLs = (existingQRLs, elCtx) => {\n    assertTrue(isElement(elCtx.$element$), 'Element must be an actual element');\n    const opts = {\n        $platform$: getPlatform(elCtx.$element$),\n        $element$: elCtx.$element$,\n        $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj),\n    };\n    return existingQRLs.map((qrl) => stringifyQRL(qrl, opts)).join('\\n');\n};\nexport const qrlToUrl = (element, qrl) => {\n    return new URL(stringifyQRL(qrl), getDocument(element).baseURI);\n};\n/**\n * `./chunk#symbol[captures]\n */\nexport const parseQRL = (qrl, containerEl) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    if (chunk === RUNTIME_QRL) {\n        logError(codeToText(QError_runtimeQrlNoElement), qrl);\n    }\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (containerEl) {\n        iQrl.$setContainer$(containerEl);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return array.length - 1;\n    }\n    return index;\n};\n//# sourceMappingURL=data:application/json;base64,","import { runtimeQrl } from './qrl';\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n * import { importedFn } from './import/example';\n * import { createContext, useContext, useContextProvider } from './use/use-context';\n * import { useRef } from './use/use-ref';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(importedFn); // importedFn is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => importedFn()); // importedFn is importable\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n */\n// </docs>\nexport const $ = (expression) => {\n    return runtimeQrl(expression);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\nimport { OnRenderProp } from '../util/markers';\nimport { jsx } from '../render/jsx/jsx-runtime';\nimport { SERIALIZABLE_STATE } from '../object/serializers';\nimport { qTest } from '../util/qdev';\nimport { Virtual } from '../render/jsx/host.public';\nimport { assertQrl } from '../import/qrl-class';\n// const ELEMENTS_SKIP_KEY: JSXTagName[] = ['html', 'body', 'head'];\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (onRenderQrl) => {\n    // Return a QComponent Factory function.\n    function QwikComponent(props, key) {\n        assertQrl(onRenderQrl);\n        const hash = qTest ? 'sX' : onRenderQrl.$hash$;\n        const finalKey = hash + ':' + (key ? key : '');\n        return jsx(Virtual, { [OnRenderProp]: onRenderQrl, ...props }, finalKey);\n    }\n    QwikComponent[SERIALIZABLE_STATE] = [onRenderQrl];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl($(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,","/* eslint-disable */\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { JSXNodeImpl } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * @public\n */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : EMPTY_ARRAY,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    return new JSXNodeImpl(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFrQixFQUFFLEdBQVMsRUFBTyxFQUFFO0lBQ3BFLG9GQUFvRjtJQUNwRixJQUFJLENBQUMsR0FBRztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxDQUFDLENBQ2YsSUFBVSxFQUNWLEtBQW1CLEVBQ25CLEdBQUcsUUFBZTtJQUVsQixpREFBaUQ7SUFDakQsMENBQTBDO0lBQzFDLDZFQUE2RTtJQUM3RSwwREFBMEQ7SUFFMUQsTUFBTSxlQUFlLEdBQVE7UUFDM0IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDdEUsQ0FBQztJQUVGLElBQUksR0FBUSxDQUFDO0lBQ2IsSUFBSSxDQUFNLENBQUM7SUFFWCxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDZixJQUFJLENBQUMsSUFBSSxLQUFLO1lBQUUsR0FBRyxHQUFJLEtBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQ25ELGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlsL2ZseXdlaWdodCc7XG5pbXBvcnQgeyBKU1hOb2RlSW1wbCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuQXJyYXkgPSA8VD4oYXJyYXk6IChUIHwgVFtdKVtdLCBkc3Q/OiBUW10pOiBUW10gPT4ge1xuICAvLyBZZXMgdGhpcyBmdW5jdGlvbiBpcyBqdXN0IEFycmF5LmZsYXQsIGJ1dCB3ZSBuZWVkIHRvIHJ1biBvbiBvbGQgdmVyc2lvbnMgb2YgTm9kZS5cbiAgaWYgKCFkc3QpIGRzdCA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXkpIHtcbiAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgZmxhdHRlbkFycmF5KGl0ZW0sIGRzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoPFRZUEUgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxQUk9QUz4sIFBST1BTIGV4dGVuZHMge30gPSB7fT4oXG4gIHR5cGU6IFRZUEUsXG4gIHByb3BzOiBQUk9QUyB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBhbnlbXVxuKTogSlNYTm9kZTxUWVBFPiB7XG4gIC8vIFVzaW5nIGxlZ2FjeSBoKCkganN4IHRyYW5zZm9ybSBhbmQgbW9ycGhpbmcgaXRcbiAgLy8gc28gaXQgY2FuIHVzZSB0aGUgbW9kZXJuIHZkb20gc3RydWN0dXJlXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvYmxvZy8yMDIwLzA5LzIyL2ludHJvZHVjaW5nLXRoZS1uZXctanN4LXRyYW5zZm9ybS5odG1sXG4gIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy90c2NvbmZpZyNqc3hJbXBvcnRTb3VyY2VcblxuICBjb25zdCBub3JtYWxpemVkUHJvcHM6IGFueSA9IHtcbiAgICBjaGlsZHJlbjogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBmbGF0dGVuQXJyYXkoY2hpbGRyZW4pIDogRU1QVFlfQVJSQVksXG4gIH07XG5cbiAgbGV0IGtleTogYW55O1xuICBsZXQgaTogYW55O1xuXG4gIGZvciAoaSBpbiBwcm9wcykge1xuICAgIGlmIChpID09ICdrZXknKSBrZXkgPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gICAgZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IEpTWE5vZGVJbXBsKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5KTtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBoIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBOb2RlLCBkYXRhOiBhbnkpOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGNoaWxkcmVuOiBBcnJheTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGRhdGE6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChcbiAgICB0eXBlOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIGNoaWxkcmVuOiBBcnJheTxKU1hOb2RlPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPlxuICApOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHNlbDogYW55LCBkYXRhOiBhbnkgfCBudWxsLCBjaGlsZHJlbjogSlNYTm9kZTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuXG4gIGV4cG9ydCBuYW1lc3BhY2UgSlNYIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBRd2lrSlNYLkVsZW1lbnQge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBRd2lrSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNFbGVtZW50cyB7fVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHtcbiAgICAgIGNoaWxkcmVuPzogYW55O1xuICAgIH1cbiAgfVxufVxuIl19","import { QSlotS } from '../../util/markers';\nimport { Virtual } from './host.public';\nimport { jsx } from './jsx-runtime';\n/**\n * @public\n */\nexport const Slot = (props) => {\n    const name = props.name ?? '';\n    return jsx(Virtual, {\n        [QSlotS]: '',\n    }, name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUVaLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDYixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztJQUM5QixPQUFPLEdBQUcsQ0FDUixPQUFPLEVBQ1A7UUFDRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7S0FDYixFQUNELElBQUksQ0FDTCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUVNsb3RTIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IFZpcnR1YWwgfSBmcm9tICcuL2hvc3QucHVibGljJztcbmltcG9ydCB7IGpzeCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vdHlwZXMvanN4LW5vZGUnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNsb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbmFtZT86IHN0cmluZztcbn0+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBwcm9wcy5uYW1lID8/ICcnO1xuICByZXR1cm4ganN4KFxuICAgIFZpcnR1YWwsXG4gICAge1xuICAgICAgW1FTbG90U106ICcnLFxuICAgIH0sXG4gICAgbmFtZVxuICApO1xufTtcbiJdfQ==","/**\n * QWIK_VERSION\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBSSxVQUFrQixDQUFDLFlBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFFXSUtfVkVSU0lPTlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IChnbG9iYWxUaGlzIGFzIGFueSkuUVdJS19WRVJTSU9OIGFzIHN0cmluZztcbiJdfQ==","import { isDocument } from '../../util/element';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { qDev } from '../../util/qdev';\nimport { version } from '../../version';\nimport { QContainerAttr } from '../../util/markers';\nimport { appendQwikDevTools } from '../../props/props';\nimport { qError, QError_cannotRenderOverExistingContainer } from '../../error/error';\nimport { directSetAttribute } from '../fast-calls';\nimport { processData, wrapJSX } from './render-dom';\nimport { getContainerState } from '../container';\nimport { postRendering } from './notify-render';\nimport { createRenderContext } from '../execute-component';\nimport { executeDOMRender, printRenderStats } from './operations';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means\n * it always tries to reuse what is already in the DOM (rather then destroy and\n * recreate content.)\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When\n *     possible the rendering will try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @alpha\n */\nexport const render = async (parent, jsxNode, opts) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        throw qError(QError_cannotRenderOverExistingContainer, containerEl);\n    }\n    injectQContainer(containerEl);\n    const containerState = getContainerState(containerEl);\n    const envData = opts?.envData;\n    if (envData) {\n        Object.assign(containerState.$envData$, envData);\n    }\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = renderRoot(containerEl, jsxNode, doc, containerState, containerEl);\n    const renderCtx = await containerState.$renderPromise$;\n    await postRendering(containerState, renderCtx);\n};\nconst renderRoot = async (parent, jsxNode, doc, containerState, containerEl) => {\n    const ctx = createRenderContext(doc, containerState);\n    const staticCtx = ctx.$static$;\n    // staticCtx.$roots$.push(parent as Element);\n    const processedNodes = await processData(jsxNode);\n    const rootJsx = domToVnode(parent);\n    await visitJsxNode(ctx, rootJsx, wrapJSX(parent, processedNodes), 0);\n    staticCtx.$operations$.push(...staticCtx.$postOperations$);\n    executeDOMRender(staticCtx);\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n        printRenderStats(staticCtx);\n    }\n    return staticCtx;\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version ?? 'dev');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    directSetAttribute(containerEl, 'q:render', qDev ? 'dom-dev' : 'dom');\n};\n//# sourceMappingURL=data:application/json;base64,","import { isNotNullable, isPromise, then } from '../../util/promises';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { getContext, getPropsMutator } from '../../props/props';\nimport { ALLOWS_PROPS, createRenderContext, executeComponent, getNextIndex, joinClasses, stringifyStyle, } from '../execute-component';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotRef, QSlotS, QStyle, } from '../../util/markers';\nimport { SSRComment, Virtual } from '../jsx/host.public';\nimport { logError, logWarn } from '../../util/log';\nimport { addQRLListener, isOnProp, setEvent } from '../../props/props-on';\nimport { version } from '../../version';\nimport { serializeQRLs } from '../../import/qrl';\nimport { getContainerState } from '../container';\nimport { assertDefined } from '../../assert/assert';\nimport { serializeSStyle, styleHost } from '../../component/qrl-styles';\nimport { serializeVirtualAttributes, VIRTUAL } from '../dom/virtual-element';\nimport { qDev } from '../../util/qdev';\nimport { qError, QError_canNotRenderHTML } from '../../error/error';\nconst IS_HEAD = 1 << 0;\nconst IS_RAW_CONTENT = 1 << 1;\nconst IS_HTML = 1 << 2;\n/**\n * @alpha\n */\nexport const renderSSR = async (doc, node, opts) => {\n    const root = opts.containerTagName;\n    const containerEl = doc.createElement(root);\n    const containerState = getContainerState(containerEl);\n    const rctx = createRenderContext(doc, containerState);\n    const headNodes = opts.beforeContent ?? [];\n    const ssrCtx = {\n        rctx,\n        $contexts$: [],\n        projectedChildren: undefined,\n        projectedContext: undefined,\n        hostCtx: undefined,\n        invocationContext: undefined,\n        headNodes: root === 'html' ? headNodes : [],\n    };\n    const containerAttributes = {\n        ...opts.containerAttributes,\n        'q:container': 'paused',\n        'q:version': version ?? 'dev',\n        'q:render': qDev ? 'ssr-dev' : 'ssr',\n    };\n    if (opts.base) {\n        containerAttributes['q:base'] = opts.base;\n    }\n    if (opts.url) {\n        containerState.$envData$['url'] = opts.url;\n    }\n    if (opts.envData) {\n        Object.assign(containerState.$envData$, opts.envData);\n    }\n    if (root === 'html') {\n        node = jsx(root, {\n            ...containerAttributes,\n            children: [node],\n        });\n    }\n    else {\n        node = jsx(root, {\n            ...containerAttributes,\n            children: [...(headNodes ?? []), node],\n        });\n    }\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = Promise.resolve().then(() => renderRoot(node, ssrCtx, opts.stream, containerState, opts));\n    await containerState.$renderPromise$;\n};\nexport const renderRoot = async (node, ssrCtx, stream, containerState, opts) => {\n    const beforeClose = opts.beforeClose;\n    await renderNode(node, ssrCtx, stream, 0, (stream) => {\n        const result = beforeClose?.(ssrCtx.$contexts$, containerState);\n        if (result) {\n            return processData(result, ssrCtx, stream, 0, undefined);\n        }\n    });\n    if (qDev) {\n        if (ssrCtx.headNodes.length > 0) {\n            logError('Missing <head>. Global styles could not be rendered. Please render a <head> element at the root of the app');\n        }\n    }\n    return ssrCtx.rctx.$static$;\n};\nexport const renderNodeFunction = (node, ssrCtx, stream, flags, beforeClose) => {\n    if (node.type === SSRComment) {\n        stream.write(`<!--${node.props.data ?? ''}-->`);\n        return;\n    }\n    if (node.type === Virtual) {\n        const elCtx = getContext(ssrCtx.rctx.$static$.$doc$.createElement(VIRTUAL));\n        return renderNodeVirtual(node, elCtx, undefined, ssrCtx, stream, flags, beforeClose);\n    }\n    const res = ssrCtx.invocationContext\n        ? invoke(ssrCtx.invocationContext, () => node.type(node.props, node.key))\n        : node.type(node.props, node.key);\n    return processData(res, ssrCtx, stream, flags, beforeClose);\n};\nexport const renderNodeVirtual = (node, elCtx, extraNodes, ssrCtx, stream, flags, beforeClose) => {\n    const props = node.props;\n    const renderQrl = props[OnRenderProp];\n    if (renderQrl) {\n        elCtx.$renderQrl$ = renderQrl;\n        return renderSSRComponent(ssrCtx, stream, elCtx, node, flags, beforeClose);\n    }\n    const { children, ...attributes } = node.props;\n    const isSlot = QSlotS in props;\n    const key = node.key != null ? String(node.key) : null;\n    if (isSlot) {\n        assertDefined(ssrCtx.hostCtx?.$id$, 'hostId must be defined for a slot');\n        attributes[QSlotRef] = ssrCtx.hostCtx.$id$;\n    }\n    if (key != null) {\n        attributes['q:key'] = key;\n    }\n    const url = new Map(Object.entries(attributes));\n    stream.write(`<!--qv ${serializeVirtualAttributes(url)}-->`);\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = processData(props.children, ssrCtx, stream, flags);\n    return then(promise, () => {\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(CLOSE_VIRTUAL);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            assertDefined(key, 'key must be defined for a slot');\n            const content = ssrCtx.projectedChildren?.[key];\n            if (content) {\n                ssrCtx.projectedChildren[key] = undefined;\n                promise = processData(content, ssrCtx.projectedContext, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = then(promise, () => beforeClose(stream));\n        }\n        return then(promise, () => {\n            stream.write(CLOSE_VIRTUAL);\n        });\n    });\n};\nconst CLOSE_VIRTUAL = `<!--/qv-->`;\nexport const renderNodeElement = (node, extraAttributes, extraNodes, ssrCtx, stream, flags, beforeClose) => {\n    const key = node.key != null ? String(node.key) : null;\n    const props = node.props;\n    const textType = node.type;\n    const elCtx = getContext(ssrCtx.rctx.$static$.$doc$.createElement(node.type));\n    const hasRef = 'ref' in props;\n    const attributes = updateProperties(elCtx, props);\n    const hostCtx = ssrCtx.hostCtx;\n    if (hostCtx) {\n        if (textType === 'html') {\n            throw qError(QError_canNotRenderHTML);\n        }\n        attributes['class'] = joinClasses(hostCtx.$scopeIds$, attributes['class']);\n        const cmp = hostCtx;\n        if (!cmp.$attachedListeners$) {\n            cmp.$attachedListeners$ = true;\n            hostCtx.li?.forEach((qrls, eventName) => {\n                addQRLListener(elCtx, eventName, qrls);\n            });\n        }\n    }\n    // Reset HOST flags\n    if (textType === 'head') {\n        flags |= IS_HEAD;\n    }\n    const hasEvents = elCtx.li;\n    const isHead = flags & IS_HEAD;\n    if (key != null) {\n        attributes['q:key'] = key;\n    }\n    if (hasRef || hasEvents) {\n        const newID = getNextIndex(ssrCtx.rctx);\n        attributes[ELEMENT_ID] = newID;\n        elCtx.$id$ = newID;\n        ssrCtx.$contexts$.push(elCtx);\n    }\n    if (isHead) {\n        attributes['q:head'] = '';\n    }\n    if (extraAttributes) {\n        Object.assign(attributes, extraAttributes);\n    }\n    if (elCtx.li) {\n        elCtx.li.forEach((value, key) => {\n            attributes[key] = serializeQRLs(value, elCtx);\n        });\n    }\n    if (renderNodeElementSync(textType, attributes, stream)) {\n        return;\n    }\n    if (textType !== 'head') {\n        flags &= ~IS_HEAD;\n    }\n    if (textType === 'html') {\n        flags |= IS_HTML;\n    }\n    else {\n        flags &= ~IS_HTML;\n    }\n    if (hasRawContent[textType]) {\n        flags |= IS_RAW_CONTENT;\n    }\n    else {\n        flags &= ~IS_RAW_CONTENT;\n    }\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = processData(props.children, ssrCtx, stream, flags);\n    return then(promise, () => {\n        // If head inject base styles\n        if (textType === 'head') {\n            ssrCtx.headNodes.forEach((node) => {\n                renderNodeElementSync(node.type, node.props, stream);\n            });\n            ssrCtx.headNodes.length = 0;\n        }\n        // Fast path\n        if (!beforeClose) {\n            stream.write(`</${textType}>`);\n            return;\n        }\n        // Inject before close\n        return then(beforeClose(stream), () => {\n            stream.write(`</${textType}>`);\n        });\n    });\n};\nexport const renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write(`<${tagName}`);\n    Object.entries(attributes).forEach(([key, value]) => {\n        if (key !== 'dangerouslySetInnerHTML' && key !== 'children') {\n            if (key === 'class' && !value) {\n                return;\n            }\n            const chunk = value === '' ? ` ${key}` : ` ${key}=\"${escapeAttr(value)}\"`;\n            stream.write(chunk);\n        }\n    });\n    stream.write(`>`);\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return true;\n    }\n    // Render innerHTML\n    const innerHTML = attributes.dangerouslySetInnerHTML;\n    if (innerHTML) {\n        stream.write(innerHTML);\n        stream.write(`</${tagName}>`);\n        return true;\n    }\n    return false;\n};\nexport const mergeChildren = (a, b) => {\n    const output = [];\n    if (a) {\n        if (isArray(a)) {\n            output.push(...a);\n        }\n        else {\n            output.push(a);\n        }\n    }\n    if (b) {\n        if (isArray(b)) {\n            output.push(...b);\n        }\n        else {\n            output.push(b);\n        }\n    }\n    return output;\n};\nexport const renderSSRComponent = (ssrCtx, stream, elCtx, node, flags, beforeClose) => {\n    const attributes = updateComponentProperties(ssrCtx.rctx, elCtx, node.props);\n    return then(executeComponent(ssrCtx.rctx, elCtx), (res) => {\n        if (!res) {\n            logError('component was not rendered during SSR');\n            return;\n        }\n        const hostElement = elCtx.$element$;\n        const newCtx = res.rctx;\n        let children = node.props.children;\n        if (children) {\n            if (isArray(children)) {\n                if (children.filter(isNotNullable).length === 0) {\n                    children = undefined;\n                }\n            }\n            else {\n                children = [children];\n            }\n        }\n        const invocationContext = newInvokeContext(newCtx.$static$.$doc$, hostElement, undefined);\n        invocationContext.$subscriber$ = hostElement;\n        invocationContext.$renderCtx$ = newCtx;\n        const projectedContext = {\n            ...ssrCtx,\n            rctx: newCtx,\n        };\n        const newSSrContext = {\n            ...ssrCtx,\n            projectedChildren: splitProjectedChildren(children, ssrCtx),\n            projectedContext,\n            rctx: newCtx,\n            invocationContext,\n        };\n        const extraNodes = [];\n        const styleClasses = [];\n        if (elCtx.$appendStyles$) {\n            const isHTML = !!(flags & IS_HTML);\n            const array = isHTML ? ssrCtx.headNodes : extraNodes;\n            for (const style of elCtx.$appendStyles$) {\n                array.push(jsx('style', {\n                    [QStyle]: style.styleId,\n                    dangerouslySetInnerHTML: style.content,\n                }));\n            }\n        }\n        if (elCtx.$scopeIds$) {\n            for (const styleId of elCtx.$scopeIds$) {\n                styleClasses.push(styleHost(styleId));\n            }\n            const value = serializeSStyle(elCtx.$scopeIds$);\n            if (value) {\n                attributes[QScopedStyle] = value;\n            }\n        }\n        const newID = getNextIndex(ssrCtx.rctx);\n        attributes[ELEMENT_ID] = newID;\n        elCtx.$id$ = newID;\n        ssrCtx.$contexts$.push(elCtx);\n        const processedNode = jsx(node.type, {\n            ...attributes,\n            children: res.node,\n        }, node.key);\n        newSSrContext.hostCtx = elCtx;\n        return renderNodeVirtual(processedNode, elCtx, extraNodes, newSSrContext, stream, flags, (stream) => {\n            return then(renderQTemplates(newSSrContext, stream), () => {\n                return beforeClose?.(stream);\n            });\n        });\n    });\n};\nconst renderQTemplates = (ssrContext, stream) => {\n    const projectedChildren = ssrContext.projectedChildren;\n    if (projectedChildren) {\n        const nodes = Object.keys(projectedChildren).map((slotName) => {\n            const value = projectedChildren[slotName];\n            if (value) {\n                return jsx('q:template', {\n                    [QSlot]: slotName,\n                    hidden: '',\n                    'aria-hidden': 'true',\n                    children: value,\n                });\n            }\n        });\n        return processData(nodes, ssrContext, stream, 0, undefined);\n    }\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] ?? '';\n        }\n        let array = slotMap[slotName];\n        if (!array) {\n            slotMap[slotName] = array = [];\n        }\n        array.push(child);\n    }\n    return slotMap;\n};\nexport const renderNode = (node, ssrCtx, stream, flags, beforeClose) => {\n    if (typeof node.type === 'string') {\n        return renderNodeElement(node, undefined, undefined, ssrCtx, stream, flags, beforeClose);\n    }\n    else {\n        return renderNodeFunction(node, ssrCtx, stream, flags, beforeClose);\n    }\n};\nexport const processData = (node, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isJSXNode(node)) {\n        return renderNode(node, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, ssrCtx, stream, flags, beforeClose));\n    }\n    else if (isArray(node)) {\n        node = _flatVirtualChildren(node, ssrCtx);\n        return walkChildren(node, ssrCtx, stream, flags);\n    }\n    else if (isString(node) || typeof node === 'number') {\n        if ((flags & IS_RAW_CONTENT) !== 0) {\n            stream.write(String(node));\n        }\n        else {\n            stream.write(escape(String(node)));\n        }\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n    }\n};\nfunction walkChildren(children, ssrContext, stream, flags) {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, ssrContext, stream, flags);\n    }\n    if (children.length === 1) {\n        return processData(children[0], ssrContext, stream, flags);\n    }\n    if (children.length === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = {\n            write(chunk) {\n                if (currentIndex === index) {\n                    stream.write(chunk);\n                }\n                else {\n                    buffer.push(chunk);\n                }\n            },\n        };\n        return then(processData(child, ssrContext, localStream, flags), () => {\n            return then(prevPromise, () => {\n                currentIndex++;\n                if (buffers.length > currentIndex) {\n                    buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n                }\n            });\n        });\n    }, undefined);\n}\nexport const flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nexport const _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) &&\n        isFunction(children.type) &&\n        children.type !== SSRComment &&\n        children.type !== Virtual) {\n        const fn = children.type;\n        const res = ssrCtx.invocationContext\n            ? invoke(ssrCtx.invocationContext, () => fn(children.props, children.key))\n            : fn(children.props, children.key);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst updateProperties = (ctx, expectProps) => {\n    const attributes = {};\n    if (!expectProps) {\n        return attributes;\n    }\n    const keys = Object.keys(expectProps);\n    if (keys.length === 0) {\n        return attributes;\n    }\n    const elm = ctx.$element$;\n    for (const key of keys) {\n        if (key === 'children' || key === OnRenderProp) {\n            continue;\n        }\n        const newValue = expectProps[key];\n        if (key === 'ref') {\n            newValue.current = elm;\n            continue;\n        }\n        // Early exit if value didnt change\n        // Check of data- or aria-\n        if (key.startsWith('data-') || key.startsWith('aria-')) {\n            attributes[key] = newValue;\n            continue;\n        }\n        if (isOnProp(key)) {\n            setEvent(ctx, key, newValue);\n            continue;\n        }\n        // Check if its an exception\n        setProperty(attributes, key, newValue);\n    }\n    return attributes;\n};\nconst updateComponentProperties = (rctx, ctx, expectProps) => {\n    const attributes = {};\n    if (!expectProps) {\n        return attributes;\n    }\n    const keys = Object.keys(expectProps);\n    if (keys.length === 0) {\n        return attributes;\n    }\n    const qwikProps = getPropsMutator(ctx, rctx.$static$.$containerState$);\n    for (const key of keys) {\n        if (key === 'children' || key === OnRenderProp) {\n            continue;\n        }\n        const newValue = expectProps[key];\n        const skipProperty = ALLOWS_PROPS.includes(key);\n        if (!skipProperty) {\n            // Qwik props\n            qwikProps.set(key, newValue);\n            continue;\n        }\n        setProperty(attributes, key, newValue);\n    }\n    return attributes;\n};\nfunction setProperty(attributes, prop, value) {\n    if (value != null && value !== false) {\n        prop = processPropKey(prop);\n        const attrValue = processPropValue(prop, value, attributes[prop]);\n        if (attrValue !== null) {\n            attributes[prop] = attrValue;\n        }\n    }\n}\nfunction processPropKey(prop) {\n    if (prop === 'className') {\n        return 'class';\n    }\n    return prop;\n}\nfunction processPropValue(prop, value, prevValue) {\n    if (prop === 'class') {\n        const str = joinClasses(value, prevValue);\n        return str === '' ? null : str;\n    }\n    if (prop === 'style') {\n        return stringifyStyle(value);\n    }\n    if (value === false || value == null) {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    return String(value);\n}\nconst hasRawContent = {\n    style: true,\n    script: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nexport const escape = (s) => {\n    return s.replace(/[&<>\\u00A0]/g, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            case '\\u00A0':\n                return '&nbsp;';\n            default:\n                return '';\n        }\n    });\n};\nexport const escapeAttr = (s) => {\n    const toEscape = /[&\"\\u00A0]/g;\n    if (!toEscape.test(s)) {\n        // nothing to do, fast path\n        return s;\n    }\n    else {\n        return s.replace(toEscape, (c) => {\n            switch (c) {\n                case '&':\n                    return '&amp;';\n                case '\"':\n                    return '&quot;';\n                case '\\u00A0':\n                    return '&nbsp;';\n                default:\n                    return '';\n            }\n        });\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { createProxy, QObjectRecursive } from '../object/q-object';\nimport { isFunction } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has\n * a unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ## Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const value = isFunction(initialState) ? initialState() : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = ctx.$renderCtx$.$static$.$containerState$;\n        const recursive = opts?.recursive ?? false;\n        const flags = recursive ? QObjectRecursive : 0;\n        const newStore = createProxy(value, containerState, flags, undefined);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVU1RCwwQ0FBMEM7QUFDMUMseUNBQXlDO0FBQ3pDLHVDQUF1QztBQUN2Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBERztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsWUFBbUMsRUFDbkMsSUFBc0IsRUFDZixFQUFFO0lBQ1QsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLEVBQVMsQ0FBQztJQUN0RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBQ0QsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBRSxZQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUNyRixJQUFJLElBQUksRUFBRSxRQUFRLEtBQUssS0FBSyxFQUFFO1FBQzVCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNYLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO1FBQ2pFLE1BQU0sU0FBUyxHQUFHLElBQUksRUFBRSxTQUFTLElBQUksS0FBSyxDQUFDO1FBQzNDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxRQUFRLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVQcm94eSwgUU9iamVjdFJlY3Vyc2l2ZSB9IGZyb20gJy4uL29iamVjdC9xLW9iamVjdCc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU3RvcmVPcHRpb25zIHtcbiAgcmVjdXJzaXZlPzogYm9vbGVhbjtcbiAgcmVhY3RpdmU/OiBib29sZWFuO1xufVxuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTdG9yZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VTdG9yZSBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IFF3aWsgY2FuIHRyYWNrIGFjcm9zcyBzZXJpYWxpemF0aW9ucy5cbiAqXG4gKiBVc2UgYHVzZVN0b3JlYCB0byBjcmVhdGUgYSBzdGF0ZSBmb3IgeW91ciBhcHBsaWNhdGlvbi4gVGhlIHJldHVybmVkIG9iamVjdCBpcyBhIHByb3h5IHRoYXQgaGFzXG4gKiBhIHVuaXF1ZSBJRC4gVGhlIElEIG9mIHRoZSBvYmplY3QgaXMgdXNlZCBpbiB0aGUgYFFSTGBzIHRvIHJlZmVyIHRvIHRoZSBzdG9yZS5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogRXhhbXBsZSBzaG93aW5nIGhvdyBgdXNlU3RvcmVgIGlzIHVzZWQgaW4gQ291bnRlciBleGFtcGxlIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGNvdW50LlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgU3RvcmVzID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VDb3VudGVyKDEpO1xuICpcbiAqICAgLy8gUmVhY3Rpdml0eSBoYXBwZW5zIGV2ZW4gZm9yIG5lc3RlZCBvYmplY3RzIGFuZCBhcnJheXNcbiAqICAgY29uc3QgdXNlckRhdGEgPSB1c2VTdG9yZSh7XG4gKiAgICAgbmFtZTogJ01hbnUnLFxuICogICAgIGFkZHJlc3M6IHtcbiAqICAgICAgIGFkZHJlc3M6ICcnLFxuICogICAgICAgY2l0eTogJycsXG4gKiAgICAgfSxcbiAqICAgICBvcmdzOiBbXSxcbiAqICAgfSk7XG4gKlxuICogICAvLyB1c2VTdG9yZSgpIGNhbiBhbHNvIGFjY2VwdCBhIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgaW5pdGlhbCB2YWx1ZVxuICogICBjb25zdCBzdGF0ZSA9IHVzZVN0b3JlKCgpID0+IHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgdmFsdWU6IGV4cGVuc2l2ZUluaXRpYWxWYWx1ZSgpLFxuICogICAgIH07XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGRpdj5Db3VudGVyOiB7Y291bnRlci52YWx1ZX08L2Rpdj5cbiAqICAgICAgIDxDaGlsZCB1c2VyRGF0YT17dXNlckRhdGF9IHN0YXRlPXtzdGF0ZX0gLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGZ1bmN0aW9uIHVzZUNvdW50ZXIoc3RlcDogbnVtYmVyKSB7XG4gKiAgIC8vIE11bHRpcGxlIHN0b3JlcyBjYW4gYmUgY3JlYXRlZCBpbiBjdXN0b20gaG9va3MgZm9yIGNvbnZlbmllbmNlIGFuZCBjb21wb3NhYmlsaXR5XG4gKiAgIGNvbnN0IGNvdW50ZXJTdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICB2YWx1ZTogMCxcbiAqICAgfSk7XG4gKiAgIHVzZUNsaWVudEVmZmVjdCQoKCkgPT4ge1xuICogICAgIC8vIE9ubHkgcnVucyBpbiB0aGUgY2xpZW50XG4gKiAgICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gKiAgICAgICBjb3VudGVyU3RvcmUudmFsdWUgKz0gc3RlcDtcbiAqICAgICB9LCA1MDApO1xuICogICAgIHJldHVybiAoKSA9PiB7XG4gKiAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAqICAgICB9O1xuICogICB9KTtcbiAqICAgcmV0dXJuIGNvdW50ZXJTdG9yZTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gPFNUQVRFIGV4dGVuZHMgb2JqZWN0PihcbiAgaW5pdGlhbFN0YXRlOiBTVEFURSB8ICgoKSA9PiBTVEFURSksXG4gIG9wdHM/OiBVc2VTdG9yZU9wdGlvbnNcbik6IFNUQVRFID0+IHtcbiAgY29uc3QgeyBnZXQsIHNldCwgY3R4IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8U1RBVEU+KCk7XG4gIGlmIChnZXQgIT0gbnVsbCkge1xuICAgIHJldHVybiBnZXQ7XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBpc0Z1bmN0aW9uKGluaXRpYWxTdGF0ZSkgPyAoaW5pdGlhbFN0YXRlIGFzIEZ1bmN0aW9uKSgpIDogaW5pdGlhbFN0YXRlO1xuICBpZiAob3B0cz8ucmVhY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29udGFpbmVyU3RhdGUgPSBjdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJDtcbiAgICBjb25zdCByZWN1cnNpdmUgPSBvcHRzPy5yZWN1cnNpdmUgPz8gZmFsc2U7XG4gICAgY29uc3QgZmxhZ3MgPSByZWN1cnNpdmUgPyBRT2JqZWN0UmVjdXJzaXZlIDogMDtcbiAgICBjb25zdCBuZXdTdG9yZSA9IGNyZWF0ZVByb3h5KHZhbHVlLCBjb250YWluZXJTdGF0ZSwgZmxhZ3MsIHVuZGVmaW5lZCk7XG4gICAgc2V0KG5ld1N0b3JlKTtcbiAgICByZXR1cm4gbmV3U3RvcmU7XG4gIH1cbn07XG4iXX0=","import { useStore } from './use-store.public';\n// <docs markdown=\"../readme.md#useRef\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useRef instead)\n/**\n * It's a very thin wrapper around `useStore()`, including the proper type signature to be passed\n * to the `ref` property in JSX.\n *\n * ```tsx\n * export function useRef<T = Element>(current?: T): Ref<T> {\n *   return useStore({ current });\n * }\n * ```\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const input = useRef<HTMLInputElement>();\n *\n *   useClientEffect$(({ track }) => {\n *     const el = track(input, 'current')!;\n *     el.focus();\n *   });\n *\n *   return (\n *     <div>\n *       <input type=\"text\" ref={input} />\n *     </div>\n *   );\n * });\n *\n * ```\n *\n * @public\n */\n// </docs>\nexport const useRef = (current) => {\n    return useStore({ current });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFTOUMsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0ErQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQThCLE9BQVcsRUFBVSxFQUFFO0lBQ3pFLE9BQU8sUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vdXNlLXN0b3JlLnB1YmxpYyc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlZjxUPiB7XG4gIGN1cnJlbnQ6IFQgfCB1bmRlZmluZWQ7XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlZlwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZWYgaW5zdGVhZClcbi8qKlxuICogSXQncyBhIHZlcnkgdGhpbiB3cmFwcGVyIGFyb3VuZCBgdXNlU3RvcmUoKWAsIGluY2x1ZGluZyB0aGUgcHJvcGVyIHR5cGUgc2lnbmF0dXJlIHRvIGJlIHBhc3NlZFxuICogdG8gdGhlIGByZWZgIHByb3BlcnR5IGluIEpTWC5cbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiB1c2VSZWY8VCA9IEVsZW1lbnQ+KGN1cnJlbnQ/OiBUKTogUmVmPFQ+IHtcbiAqICAgcmV0dXJuIHVzZVN0b3JlKHsgY3VycmVudCB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBpbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PigpO1xuICpcbiAqICAgdXNlQ2xpZW50RWZmZWN0JCgoeyB0cmFjayB9KSA9PiB7XG4gKiAgICAgY29uc3QgZWwgPSB0cmFjayhpbnB1dCwgJ2N1cnJlbnQnKSE7XG4gKiAgICAgZWwuZm9jdXMoKTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiByZWY9e2lucHV0fSAvPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKlxuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlUmVmID0gPFQgZXh0ZW5kcyBFbGVtZW50ID0gRWxlbWVudD4oY3VycmVudD86IFQpOiBSZWY8VD4gPT4ge1xuICByZXR1cm4gdXNlU3RvcmUoeyBjdXJyZW50IH0pO1xufTtcbiJdfQ==","import { fromCamelToKebabCase } from '../util/case';\nimport { getContext, tryGetContext } from '../props/props';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { verifySerializable } from '../object/q-object';\nimport { qDev } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { getVirtualElement, isComment, } from '../render/dom/virtual-element';\n// <docs markdown=\"../readme.md#createContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContext instead)\n/**\n * Create a context ID to be used in your application.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContext()` to create a `Context`. `Context` is just a serializable identifier for\n * the context. It is not the context value itself. See `useContextProvider()` and `useContext()`\n * for the values. Qwik needs a serializable ID for the context so that the it can track context\n * providers and consumers in a way that survives resumability.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContext = (name) => {\n    return Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assign use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const hostElement = ctx.$hostElement$;\n    const hostCtx = getContext(hostElement);\n    let contexts = hostCtx.$contexts$;\n    if (!contexts) {\n        hostCtx.$contexts$ = contexts = new Map();\n    }\n    if (qDev) {\n        verifySerializable(newValue);\n    }\n    contexts.set(context.id, newValue);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrive Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a\n * parent component needs to invoke `useContextProvider()` to assign a value.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return get;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    let hostElement = ctx.$hostElement$;\n    const contexts = ctx.$renderCtx$.$localStack$;\n    for (let i = contexts.length - 1; i >= 0; i--) {\n        const ctx = contexts[i];\n        hostElement = ctx.$element$;\n        if (ctx.$contexts$) {\n            const found = ctx.$contexts$.get(context.id);\n            if (found) {\n                set(found);\n                return found;\n            }\n        }\n    }\n    if (hostElement.closest) {\n        const value = queryContextFromDom(hostElement, context.id);\n        if (value !== undefined) {\n            set(value);\n            return value;\n        }\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\nexport const queryContextFromDom = (hostElement, contextId) => {\n    let element = hostElement;\n    while (element) {\n        let node = element;\n        let virtual;\n        while (node && (virtual = findVirtual(node))) {\n            const contexts = tryGetContext(virtual)?.$contexts$;\n            if (contexts) {\n                if (contexts.has(contextId)) {\n                    return contexts.get(contextId);\n                }\n            }\n            node = virtual;\n        }\n        element = element.parentElement;\n    }\n    return undefined;\n};\nexport const findVirtual = (el) => {\n    let node = el;\n    let stack = 1;\n    while ((node = node.previousSibling)) {\n        if (isComment(node)) {\n            if (node.data === '/qv') {\n                stack++;\n            }\n            else if (node.data.startsWith('qv ')) {\n                stack--;\n                if (stack === 0) {\n                    return getVirtualElement(node);\n                }\n            }\n        }\n    }\n    return null;\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { useInvokeContext } from './use-core';\n/**\n * @alpha\n */\nexport function useEnvData(key, defaultValue) {\n    const ctx = useInvokeContext();\n    return ctx.$renderCtx$.$static$.$containerState$.$envData$[key] ?? defaultValue;\n}\n/**\n * @alpha\n * @deprecated Please use `useEnvData` instead.\n */\nexport const useUserContext = useEnvData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBWTlDOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXLEVBQUUsWUFBa0I7SUFDeEQsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFZLENBQUM7QUFDbEYsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VFbnZEYXRhPFQ+KGtleTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVudkRhdGE8VCwgQiA9IFQ+KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IEIpOiBUIHwgQjtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVudkRhdGEoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkge1xuICBjb25zdCBjdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIHJldHVybiBjdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJC4kZW52RGF0YSRba2V5XSA/PyBkZWZhdWx0VmFsdWU7XG59XG5cbi8qKlxuICogQGFscGhhXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGB1c2VFbnZEYXRhYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgdXNlVXNlckNvbnRleHQgPSB1c2VFbnZEYXRhO1xuIl19","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from '../util/markers';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(idx - 2);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping())\n            return;\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,","import { styleContent, styleKey } from '../component/qrl-styles';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { scopeStylesheet } from '../style/scoped-stylesheet';\nimport { getContext } from '../props/props';\nimport { hasStyle } from '../render/execute-component';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, (str) => str, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    _useStyles(styles, scopeStylesheet, true);\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get) {\n        return get;\n    }\n    const renderCtx = ctx.$renderCtx$;\n    const styleId = styleKey(styleQrl, i);\n    const hostElement = ctx.$hostElement$;\n    const containerState = renderCtx.$static$.$containerState$;\n    const elCtx = getContext(ctx.$hostElement$);\n    set(styleId);\n    if (!elCtx.$appendStyles$) {\n        elCtx.$appendStyles$ = [];\n    }\n    if (!elCtx.$scopeIds$) {\n        elCtx.$scopeIds$ = [];\n    }\n    if (scoped) {\n        elCtx.$scopeIds$.push(styleContent(styleId));\n    }\n    if (!hasStyle(containerState, styleId)) {\n        containerState.$styleIds$.add(styleId);\n        ctx.$waitOn$.push(styleQrl.resolve(hostElement).then((styleText) => {\n            elCtx.$appendStyles$.push({\n                styleId,\n                content: transform(styleText, styleId),\n            });\n        }));\n    }\n    return styleId;\n};\n//# sourceMappingURL=data:application/json;base64,"],"names":["isElement","isNode","setProperty","escape","SHOW_COMMENT","FILTER_ACCEPT","FILTER_REJECT","processData","IS_HEAD","updateProperties","updateComponentProperties","renderRoot"],"mappings":"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;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,MAAM,GAAG,CAAC,OAAO,KAAK;IACnC,IAAI,OAAO,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IACjC;;IC/BA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,aAAa,GAAG,CAAC,IAAI,KAAK;IACvC,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC;IACzB,QAAQ,EAAE,EAAE,oBAAoB,CAAC,IAAI,CAAC;IACtC,KAAK,CAAC,CAAC;IACP,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,kBAAkB,GAAG,CAAC,OAAO,EAAE,QAAQ,KAAK;IACzD,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;IACnD,IAAI,IAAI,GAAG,EAAE;IACb,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,IAAI,IAAI,EAAE;IACd,QAAQ,eAAe,CAAC,OAAO,CAAC,CAAC;IACjC,KAAK;IACL,IAAI,MAAM,WAAW,GAAG,GAAG,CAAC,aAAa,CAAC;IAC1C,IAAI,MAAM,OAAO,GAAG,UAAU,CAAC,WAAW,CAAC,CAAC;IAC5C,I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"}