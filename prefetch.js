const qrlResolver=(e,t,s)=>(e=e.closest("[q\\:container]"),new URL(t,new URL(e?e.getAttribute("q:base"):s,s)));((e,t,s)=>{const n=e=>e.forEach((e=>{if(e.intersectionRatio>0){const s=e.target,n=s.attributes;for(let e=0;e<n.length;e++){const c=n[e].value;if(n[e].name.startsWith("on:")&&c){const e=qrlResolver(s,c,t.baseURI);e.hash=e.search="";const n=e+".js";o[n]||r(o[n]=n)}}}})),o={},r=e=>{if(!c){const e=URL.createObjectURL(new Blob(["((e,a)=>{const s={},t=async(e,n)=>{1!==s[n]&&(s[n]=1,((await a(n)).headers.get(\"Link\")||\"\").replace(/<([^>]*)>/g,t))};e.addEventListener(\"message\",(e=>t(\"\",e.data)))})(self,fetch);"],{type:"text/javascript"}));c=new Worker(e)}c.postMessage(e)};let c;e.addEventListener("load",(()=>{const e=new s(n);t.querySelectorAll("[on\\:\\.]").forEach(e.observe.bind(e))}))})(window,document,IntersectionObserver);