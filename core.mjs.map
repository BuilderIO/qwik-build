{"version":3,"file":"core.mjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/assert/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-host-element.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-document.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-watch.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props-obj-map.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/host.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/render-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/cursor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/q-object.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js"],"sourcesContent":["/*#__PURE__*/ ((gbl) => {\n    // ensures unit tests have globalThis on Node10\n    // this will be removed from production builds\n    if (typeof globalThis === 'undefined') {\n        gbl.globalThis = gbl;\n    }\n})(typeof global !== 'undefined'\n    ? global\n    : typeof window !== 'undefined'\n        ? window\n        : typeof self !== 'undefined'\n            ? self\n            : {});\n// minification can replace the `globalThis.qDev` with `false`\n// which will remove all dev code within from the build\nexport const qDev = globalThis.qDev !== false;\nexport const qTest = globalThis.describe !== undefined;\nexport const qGlobal = globalThis;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUMxQiwrQ0FBK0M7SUFDL0MsOENBQThDO0lBQzlDLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0tBQ3RCO0FBQ0gsQ0FBQyxDQUFDLENBQ0EsT0FBTyxNQUFNLEtBQUssV0FBVztJQUMzQixDQUFDLENBQUMsTUFBTTtJQUNSLENBQUMsQ0FBQyxPQUFPLE1BQU0sS0FBSyxXQUFXO1FBQy9CLENBQUMsQ0FBQyxNQUFNO1FBQ1IsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFdBQVc7WUFDN0IsQ0FBQyxDQUFDLElBQUk7WUFDTixDQUFDLENBQUMsRUFBRSxDQUNQLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsdURBQXVEO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBSSxVQUFrQixDQUFDLElBQUksS0FBSyxLQUFLLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFJLFVBQWtCLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQztBQUNoRSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsVUFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qI19fUFVSRV9fKi8gKChnYmw6IGFueSkgPT4ge1xuICAvLyBlbnN1cmVzIHVuaXQgdGVzdHMgaGF2ZSBnbG9iYWxUaGlzIG9uIE5vZGUxMFxuICAvLyB0aGlzIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBnYmwuZ2xvYmFsVGhpcyA9IGdibDtcbiAgfVxufSkoXG4gIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgID8gc2VsZlxuICAgIDoge31cbik7XG5cbi8vIG1pbmlmaWNhdGlvbiBjYW4gcmVwbGFjZSB0aGUgYGdsb2JhbFRoaXMucURldmAgd2l0aCBgZmFsc2VgXG4vLyB3aGljaCB3aWxsIHJlbW92ZSBhbGwgZGV2IGNvZGUgd2l0aGluIGZyb20gdGhlIGJ1aWxkXG5leHBvcnQgY29uc3QgcURldiA9IChnbG9iYWxUaGlzIGFzIGFueSkucURldiAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSAoZ2xvYmFsVGhpcyBhcyBhbnkpLmRlc2NyaWJlICE9PSB1bmRlZmluZWQ7XG5leHBvcnQgY29uc3QgcUdsb2JhbCA9IGdsb2JhbFRoaXMgYXMgYW55O1xuIl19","import { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n    Error.stackTraceLimit = 9999;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRTVCLElBQUksSUFBSSxFQUFFO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA5OTk5O1xufVxuIl19","import { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    const error = text + parts.join(' ');\n    debugger; // eslint-disable-line no-debugger\n    return new Error(error);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute',\n            'Can not serialize a HTML Node that is not an Element',\n            'Rruntime but no instance found on element.',\n            'Only primitive and object literals can be serialized',\n            'Crash while rendering',\n            'You can render over a existing q:container. Skipping render().',\n            'Set property',\n            \"Only function's and 'string's are supported.\",\n            \"Only objects can be wrapped in 'QObject'\",\n            `Only objects literals can be wrapped in 'QObject'`,\n            'QRL is not a function',\n            'Dynamic import not found',\n            'Unknown type argument',\n            'not found state for useContext',\n            \"Invoking 'use*()' method outside of invocation context.\",\n            'Cant access renderCtx for existing context',\n            'Cant access document for existing context',\n            'props are inmutable',\n            '<Host> component can only be used at the root of a Qwik component$()', // 18\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvZXJyb3IvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxDQUFDLENBQUM7QUFDOUMsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLENBQUMseURBQXlEO0FBQ3RHLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLENBQUMsQ0FBQyxDQUFDLG1FQUFtRTtBQUNoSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxpRUFBaUU7QUFDN0csTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO0FBQ3JFLE1BQU0sQ0FBQyxNQUFNLHdDQUF3QyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtFQUFrRTtBQUM3SCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7QUFDckQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLEVBQUUsQ0FBQztBQUNqRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUN4QyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLENBQUM7QUFFN0MsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBWSxFQUFFLEdBQUcsS0FBWSxFQUFTLEVBQUU7SUFDN0QsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLFFBQVEsQ0FBQyxDQUFDLGtDQUFrQztJQUM1QyxPQUFPLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLElBQVksRUFBVSxFQUFFO0lBQ2pELElBQUksSUFBSSxFQUFFO1FBQ1IsTUFBTSxHQUFHLEdBQUc7WUFDVix5Q0FBeUM7WUFDekMsc0RBQXNEO1lBQ3RELDRDQUE0QztZQUM1QyxzREFBc0Q7WUFDdEQsdUJBQXVCO1lBQ3ZCLGdFQUFnRTtZQUNoRSxjQUFjO1lBQ2QsOENBQThDO1lBQzlDLDBDQUEwQztZQUMxQyxtREFBbUQ7WUFDbkQsdUJBQXVCO1lBQ3ZCLDBCQUEwQjtZQUMxQix1QkFBdUI7WUFDdkIsZ0NBQWdDO1lBQ2hDLHlEQUF5RDtZQUN6RCw0Q0FBNEM7WUFDNUMsMkNBQTJDO1lBQzNDLHFCQUFxQjtZQUNyQixzRUFBc0UsRUFBRSxLQUFLO1NBQzlFLENBQUM7UUFDRixPQUFPLFFBQVEsSUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztLQUM1QztTQUFNO1FBQ0wsT0FBTyxRQUFRLElBQUksR0FBRyxDQUFDO0tBQ3hCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmV4cG9ydCBjb25zdCBRRXJyb3Jfc3RyaW5naWZ5Q2xhc3NPclN0eWxlID0gMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY2Fubm90U2VyaWFsaXplTm9kZSA9IDE7IC8vICdDYW4gbm90IHNlcmlhbGl6ZSBhIEhUTUwgTm9kZSB0aGF0IGlzIG5vdCBhbiBFbGVtZW50J1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ydW50aW1lUXJsTm9FbGVtZW50ID0gMjsgLy8gYFEtRVJST1I6ICcke3FybH0nIGlzIHJ1bnRpbWUgYnV0IG5vIGluc3RhbmNlIGZvdW5kIG9uIGVsZW1lbnQuYFxuZXhwb3J0IGNvbnN0IFFFcnJvcl92ZXJpZnlTZXJpYWxpemFibGUgPSAzOyAvLyAnT25seSBwcmltaXRpdmUgYW5kIG9iamVjdCBsaXRlcmFscyBjYW4gYmUgc2VyaWFsaXplZCcsIHZhbHVlLFxuZXhwb3J0IGNvbnN0IFFFcnJvcl9lcnJvcldoaWxlUmVuZGVyaW5nID0gNDsgLy8gQ3Jhc2ggd2hpbGUgcmVuZGVyaW5nXG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbm5vdFJlbmRlck92ZXJFeGlzdGluZ0NvbnRhaW5lciA9IDU7IC8vJ1lvdSBjYW4gcmVuZGVyIG92ZXIgYSBleGlzdGluZyBxOmNvbnRhaW5lci4gU2tpcHBpbmcgcmVuZGVyKCkuJ1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zZXRQcm9wZXJ0eSA9IDY7IC8vJ1NldCBwcm9wZXJ0eSdcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsT3JFcnJvciA9IDc7XG5leHBvcnQgY29uc3QgUUVycm9yX29ubHlPYmplY3RXcmFwcGVkID0gODtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfb25seUxpdGVyYWxXcmFwcGVkID0gOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsSXNOb3RGdW5jdGlvbiA9IDEwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9keW5hbWljSW1wb3J0RmFpbGVkID0gMTE7XG5leHBvcnQgY29uc3QgUUVycm9yX3Vua25vd25UeXBlQXJndW1lbnQgPSAxMjtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfbm90Rm91bmRDb250ZXh0ID0gMTM7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZU1ldGhvZE91dHNpZGVDb250ZXh0ID0gMTQ7XG5leHBvcnQgY29uc3QgUUVycm9yX21pc3NpbmdSZW5kZXJDdHggPSAxNTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ0RvYyA9IDE2O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9pbW11dGFibGVQcm9wcyA9IDE3O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ob3N0Q2FuT25seUJlQXRSb290ID0gMTg7XG5cbmV4cG9ydCBjb25zdCBxRXJyb3IgPSAoY29kZTogbnVtYmVyLCAuLi5wYXJ0czogYW55W10pOiBFcnJvciA9PiB7XG4gIGNvbnN0IHRleHQgPSBjb2RlVG9UZXh0KGNvZGUpO1xuICBjb25zdCBlcnJvciA9IHRleHQgKyBwYXJ0cy5qb2luKCcgJyk7XG4gIGRlYnVnZ2VyOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWRlYnVnZ2VyXG4gIHJldHVybiBuZXcgRXJyb3IoZXJyb3IpO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvZGVUb1RleHQgPSAoY29kZTogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBjb25zdCBNQVAgPSBbXG4gICAgICAnRXJyb3Igd2hpbGUgc2VyaWFsaXppbmcgY2xhc3MgYXR0cmlidXRlJywgLy8gMFxuICAgICAgJ0NhbiBub3Qgc2VyaWFsaXplIGEgSFRNTCBOb2RlIHRoYXQgaXMgbm90IGFuIEVsZW1lbnQnLCAvLyAxXG4gICAgICAnUnJ1bnRpbWUgYnV0IG5vIGluc3RhbmNlIGZvdW5kIG9uIGVsZW1lbnQuJywgLy8gMlxuICAgICAgJ09ubHkgcHJpbWl0aXZlIGFuZCBvYmplY3QgbGl0ZXJhbHMgY2FuIGJlIHNlcmlhbGl6ZWQnLCAvLyAzXG4gICAgICAnQ3Jhc2ggd2hpbGUgcmVuZGVyaW5nJywgLy8gNFxuICAgICAgJ1lvdSBjYW4gcmVuZGVyIG92ZXIgYSBleGlzdGluZyBxOmNvbnRhaW5lci4gU2tpcHBpbmcgcmVuZGVyKCkuJywgLy8gNVxuICAgICAgJ1NldCBwcm9wZXJ0eScsIC8vIDZcbiAgICAgIFwiT25seSBmdW5jdGlvbidzIGFuZCAnc3RyaW5nJ3MgYXJlIHN1cHBvcnRlZC5cIiwgLy8gN1xuICAgICAgXCJPbmx5IG9iamVjdHMgY2FuIGJlIHdyYXBwZWQgaW4gJ1FPYmplY3QnXCIsIC8vIDhcbiAgICAgIGBPbmx5IG9iamVjdHMgbGl0ZXJhbHMgY2FuIGJlIHdyYXBwZWQgaW4gJ1FPYmplY3QnYCwgLy8gOVxuICAgICAgJ1FSTCBpcyBub3QgYSBmdW5jdGlvbicsIC8vIDEwXG4gICAgICAnRHluYW1pYyBpbXBvcnQgbm90IGZvdW5kJywgLy8gMTFcbiAgICAgICdVbmtub3duIHR5cGUgYXJndW1lbnQnLCAvLyAxMlxuICAgICAgJ25vdCBmb3VuZCBzdGF0ZSBmb3IgdXNlQ29udGV4dCcsIC8vIDEzXG4gICAgICBcIkludm9raW5nICd1c2UqKCknIG1ldGhvZCBvdXRzaWRlIG9mIGludm9jYXRpb24gY29udGV4dC5cIiwgLy8gMTRcbiAgICAgICdDYW50IGFjY2VzcyByZW5kZXJDdHggZm9yIGV4aXN0aW5nIGNvbnRleHQnLCAvLyAxNVxuICAgICAgJ0NhbnQgYWNjZXNzIGRvY3VtZW50IGZvciBleGlzdGluZyBjb250ZXh0JywgLy8gMTZcbiAgICAgICdwcm9wcyBhcmUgaW5tdXRhYmxlJywgLy8gMTdcbiAgICAgICc8SG9zdD4gY29tcG9uZW50IGNhbiBvbmx5IGJlIHVzZWQgYXQgdGhlIHJvb3Qgb2YgYSBRd2lrIGNvbXBvbmVudCQoKScsIC8vIDE4XG4gICAgXTtcbiAgICByZXR1cm4gYENvZGUoJHtjb2RlfSk6ICR7TUFQW2NvZGVdID8/ICcnfWA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGBDb2RlKCR7Y29kZX0pYDtcbiAgfVxufTtcbiJdfQ==","/**\n * @private\n */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFNLEVBQVksRUFBRTtJQUMzQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBTSxFQUFjLEVBQUU7SUFDNUMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBZSxFQUFFO0lBQzlDLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQy9CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQU0sRUFBaUIsRUFBRTtJQUNsRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLFVBQVUsQ0FBQztBQUNqQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBpc0h0bWxFbGVtZW50ID0gKG5vZGU6IGFueSk6IG5vZGUgaXMgRWxlbWVudCA9PiB7XG4gIHJldHVybiBub2RlID8gbm9kZS5ub2RlVHlwZSA9PT0gMSA6IGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzT2JqZWN0ID0gKHY6IGFueSk6IHYgaXMgYW55ID0+IHtcbiAgcmV0dXJuIHYgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSAodjogYW55KTogdiBpcyBhbnlbXSA9PiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHYpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU3RyaW5nID0gKHY6IGFueSk6IHYgaXMgc3RyaW5nID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uID0gKHY6IGFueSk6IHYgaXMgRnVuY3Rpb24gPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKipcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgdmFsdWUgd2hpY2ggaXMgZWl0aGVyIHJlc29sdmUgb3IgYSBwcm9taXNlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBWYWx1ZU9yUHJvbWlzZTxUPiA9IFQgfCBQcm9taXNlPFQ+O1xuIl19","import { qDev } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    // eslint-disable-next-line no-console\n    console.error('%cQWIK ERROR', STYLE, message, ...optionalParams);\n};\nexport const logWarn = (message, ...optionalParams) => {\n    // eslint-disable-next-line no-console\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...optionalParams);\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...optionalParams);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxLQUFLLEdBQUcsSUFBSTtJQUNoQixDQUFDLENBQUMsNEZBQTRGO0lBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFUCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDbEUsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztBQUNuRSxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDakUsc0NBQXNDO0lBQ3RDLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0tBQ2hFO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ2xFLElBQUksSUFBSSxFQUFFO1FBQ1Isc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztLQUM1RDtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHFEZXYgfSBmcm9tICcuL3FkZXYnO1xuXG5jb25zdCBTVFlMRSA9IHFEZXZcbiAgPyBgYmFja2dyb3VuZDogIzU2NENFMDsgY29sb3I6IHdoaXRlOyBwYWRkaW5nOiAycHggM3B4OyBib3JkZXItcmFkaXVzOiAycHg7IGZvbnQtc2l6ZTogMC44ZW07YFxuICA6ICcnO1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3IgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoJyVjUVdJSyBFUlJPUicsIFNUWUxFLCBtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG59O1xuXG5leHBvcnQgY29uc3QgbG9nV2FybiA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgaWYgKHFEZXYpIHtcbiAgICBjb25zb2xlLndhcm4oJyVjUVdJSyBXQVJOJywgU1RZTEUsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ0RlYnVnID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBpZiAocURldikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5kZWJ1ZygnJWNRV0lLJywgU1RZTEUsIG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgfVxufTtcbiJdfQ==","import { logError } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { isString } from '../util/types';\nexport const assertDefined = (value, text) => {\n    if (qDev) {\n        if (value != null)\n            return;\n        throw newError(text || 'Expected defined value');\n    }\n};\nexport const assertNotPromise = (value, text) => {\n    if (qDev) {\n        if (!(value instanceof Promise))\n            return;\n        throw newError(text || 'Expected defined value.');\n    }\n};\nexport const assertDefinedAndNotPromise = (value, text) => {\n    if (qDev) {\n        assertDefined(value, text);\n        assertNotPromise(value, text);\n    }\n};\nexport const assertInstanceOf = (value, type, text) => {\n    if (qDev) {\n        if (value instanceof type)\n            return;\n        throw newError(text || `Expected value '${value}' to be instance of '${type}' but was '${typeOf(value)}'.`);\n    }\n};\nexport const assertString = (value, text) => {\n    if (qDev) {\n        if (isString(value))\n            return;\n        throw newError(text || `Expected value '${value}' to be 'string' but was '${typeOf(value)}'.`);\n    }\n};\nexport const assertNotEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 !== value2)\n            return;\n        throw newError(text || `Expected '${value1}' !== '${value2}'.`);\n    }\n};\nexport const assertEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 === value2)\n            return;\n        throw newError(text || `Expected '${value1}' === '${value2}'.`);\n    }\n};\nexport const assertLessOrEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 <= value2)\n            return;\n        throw newError(text || `Expected '${value1}' <= '${value2}'.`);\n    }\n};\nexport const assertLess = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 < value2)\n            return;\n        throw newError(text || `Expected '${value1}' < '${value2}'.`);\n    }\n};\nexport const assertGreaterOrEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 >= value2)\n            return;\n        throw newError(text || `Expected '${value1}' >= '${value2}'.`);\n    }\n};\nexport const assertGreater = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 > value2)\n            return;\n        throw newError(text || `Expected '${value1}' > '${value2}'.`);\n    }\n};\nconst typeOf = (value) => {\n    if (value === null)\n        return 'null';\n    const type = typeof value;\n    if (type === 'object') {\n        return value?.constructor?.name || '<unknown>';\n    }\n    else {\n        return type;\n    }\n};\nconst newError = (text) => {\n    debugger; // eslint-disable-line no-debugger\n    const error = new Error(text);\n    logError(error); // eslint-disable-line no-console\n    return error;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Fzc2VydC9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBVSxFQUFFLElBQWEsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxLQUFLLElBQUksSUFBSTtZQUFFLE9BQU87UUFDMUIsTUFBTSxRQUFRLENBQUMsSUFBSSxJQUFJLHdCQUF3QixDQUFDLENBQUM7S0FDbEQ7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQVUsRUFBRSxJQUFhLEVBQUUsRUFBRTtJQUM1RCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxPQUFPLENBQUM7WUFBRSxPQUFPO1FBQ3hDLE1BQU0sUUFBUSxDQUFDLElBQUksSUFBSSx5QkFBeUIsQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxLQUFVLEVBQUUsSUFBYSxFQUFFLEVBQUU7SUFDdEUsSUFBSSxJQUFJLEVBQUU7UUFDUixhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzNCLGdCQUFnQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMvQjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsS0FBVSxFQUFFLElBQVMsRUFBRSxJQUFhLEVBQUUsRUFBRTtJQUN2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QUMxQixJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7UUFDckIsT0FBTyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksSUFBSSxXQUFXLENBQUM7S0FDaEQ7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFDO0tBQ2I7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO0lBQ2hDLFFBQVEsQ0FBQyxDQUFDLGtDQUFrQztJQUM1QyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7SUFDbEQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dFcnJvciB9IGZyb20gJy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGFzc2VydERlZmluZWQgPSAodmFsdWU6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSByZXR1cm47XG4gICAgdGhyb3cgbmV3RXJyb3IodGV4dCB8fCAnRXhwZWN0ZWQgZGVmaW5lZCB2YWx1ZScpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXNzZXJ0Tm90UHJvbWlzZSA9ICh2YWx1ZTogYW55LCB0ZXh0Pzogc3RyaW5nKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSkgcmV0dXJuO1xuICAgIHRocm93IG5ld0Vycm9yKHRleHQgfHwgJ0V4cGVjdGVkIGRlZmluZWQgdmFsdWUuJyk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhc3NlcnREZWZpbmVkQW5kTm90UHJvbWlzZSA9ICh2YWx1ZTogYW55LCB0ZXh0Pzogc3RyaW5nKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgYXNzZXJ0RGVmaW5lZCh2YWx1ZSwgdGV4dCk7XG4gICAgYXNzZXJ0Tm90UHJvbWlzZSh2YWx1ZSwgdGV4dCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhc3NlcnRJbnN0YW5jZU9mID0gKHZhbHVlOiBhbnksIHR5cGU6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHR5cGUpIHJldHVybjtcbiAgICB0aHJvdyBuZXdFcnJvcihcbiAgICAgIHRleHQgfHwgYEV4cGVjdGVkIHZhbHVlICcke3ZhbHVlfScgdG8gYmUgaW5zdGFuY2Ugb2YgJyR7dHlwZX0nIGJ1dCB3YXMgJyR7dHlwZU9mKHZhbHVlKX0nLmBcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXNzZXJ0U3RyaW5nID0gKHZhbHVlOiBhbnksIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG4gICAgdGhyb3cgbmV3RXJyb3IodGV4dCB8fCBgRXhwZWN0ZWQgdmFsdWUgJyR7dmFsdWV9JyB0byBiZSAnc3RyaW5nJyBidXQgd2FzICcke3R5cGVPZih2YWx1ZSl9Jy5gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydE5vdEVxdWFsID0gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgIT09IHZhbHVlMikgcmV0dXJuO1xuICAgIHRocm93IG5ld0Vycm9yKHRleHQgfHwgYEV4cGVjdGVkICcke3ZhbHVlMX0nICE9PSAnJHt2YWx1ZTJ9Jy5gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydEVxdWFsID0gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IHZhbHVlMikgcmV0dXJuO1xuICAgIHRocm93IG5ld0Vycm9yKHRleHQgfHwgYEV4cGVjdGVkICcke3ZhbHVlMX0nID09PSAnJHt2YWx1ZTJ9Jy5gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydExlc3NPckVxdWFsID0gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPD0gdmFsdWUyKSByZXR1cm47XG4gICAgdGhyb3cgbmV3RXJyb3IodGV4dCB8fCBgRXhwZWN0ZWQgJyR7dmFsdWUxfScgPD0gJyR7dmFsdWUyfScuYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhc3NlcnRMZXNzID0gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPCB2YWx1ZTIpIHJldHVybjtcbiAgICB0aHJvdyBuZXdFcnJvcih0ZXh0IHx8IGBFeHBlY3RlZCAnJHt2YWx1ZTF9JyA8ICcke3ZhbHVlMn0nLmApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXNzZXJ0R3JlYXRlck9yRXF1YWwgPSAodmFsdWUxOiBhbnksIHZhbHVlMjogYW55LCB0ZXh0Pzogc3RyaW5nKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA+PSB2YWx1ZTIpIHJldHVybjtcbiAgICB0aHJvdyBuZXdFcnJvcih0ZXh0IHx8IGBFeHBlY3RlZCAnJHt2YWx1ZTF9JyA+PSAnJHt2YWx1ZTJ9Jy5gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydEdyZWF0ZXIgPSAodmFsdWUxOiBhbnksIHZhbHVlMjogYW55LCB0ZXh0Pzogc3RyaW5nKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA+IHZhbHVlMikgcmV0dXJuO1xuICAgIHRocm93IG5ld0Vycm9yKHRleHQgfHwgYEV4cGVjdGVkICcke3ZhbHVlMX0nID4gJyR7dmFsdWUyfScuYCk7XG4gIH1cbn07XG5cbmNvbnN0IHR5cGVPZiA9ICh2YWx1ZTogYW55KSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHZhbHVlPy5jb25zdHJ1Y3Rvcj8ubmFtZSB8fCAnPHVua25vd24+JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufTtcblxuY29uc3QgbmV3RXJyb3IgPSAodGV4dDogc3RyaW5nKSA9PiB7XG4gIGRlYnVnZ2VyOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWRlYnVnZ2VyXG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHRleHQpO1xuICBsb2dFcnJvcihlcnJvcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICByZXR1cm4gZXJyb3I7XG59O1xuIl19","/**\n * State factory of the component.\n */\nexport const OnMount = 'on:qmount';\n/**\n * State factory of the component.\n */\nexport const QHostAttr = 'q:host';\nexport const OnRenderProp = 'q:renderFn';\n/**\n * State factory of the component.\n */\nexport const QHostSelector = '[q\\\\:host]';\n/**\n * State factory of the component.\n */\nexport const OnUnmount = 'on:qunmount';\n/**\n * State factory of the component.\n */\nexport const OnResume = 'on:qinit';\n/**\n * Component Styles.\n */\nexport const ComponentScopedStyles = 'q:sstyle';\n/**\n * Unscoped Component Styles.\n */\nexport const ComponentUnscopedStyles = 'q:ustyle';\n/**\n * Component style host prefix\n */\nexport const ComponentStylesPrefixHost = '💎';\n/**\n * Component style content prefix\n */\nexport const ComponentStylesPrefixContent = '⭐️';\n/**\n * Prefix used to identify on listeners.\n */\nexport const EventPrefix = 'on:';\n/**\n * Attribute used to mark that an event listener is attached.\n */\nexport const EventAny = 'on:.';\n/**\n * Tag name used for projection.\n */\nexport const QSlot = 'Q:SLOT';\nexport const QSlotSelector = 'Q\\\\:SLOT';\n/**\n * `<some-element q:slot=\"...\">`\n */\nexport const QSlotAttr = 'q:slot';\nexport const QCtxAttr = 'q:ctx';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const RenderEvent = 'qRender';\n/**\n * `<q:slot name=\"...\">`\n */\nexport const QSlotName = 'name';\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const ELEMENT_ID_Q_PROPS_PREFIX = '&';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQztBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFFdkM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsVUFBVSxDQUFDO0FBRWhEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsVUFBVSxDQUFDO0FBRWxEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFFL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxVQUFVLENBQUM7QUFFeEM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDO0FBRWxDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUM7QUFFaEMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztBQUU1QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDO0FBQ3JDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUNyQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uTW91bnQgPSAnb246cW1vdW50JztcblxuLyoqXG4gKiBTdGF0ZSBmYWN0b3J5IG9mIHRoZSBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBRSG9zdEF0dHIgPSAncTpob3N0JztcbmV4cG9ydCBjb25zdCBPblJlbmRlclByb3AgPSAncTpyZW5kZXJGbic7XG5cbi8qKlxuICogU3RhdGUgZmFjdG9yeSBvZiB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgY29uc3QgUUhvc3RTZWxlY3RvciA9ICdbcVxcXFw6aG9zdF0nO1xuXG4vKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uVW5tb3VudCA9ICdvbjpxdW5tb3VudCc7XG5cbi8qKlxuICogU3RhdGUgZmFjdG9yeSBvZiB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgY29uc3QgT25SZXN1bWUgPSAnb246cWluaXQnO1xuXG4vKipcbiAqIENvbXBvbmVudCBTdHlsZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTY29wZWRTdHlsZXMgPSAncTpzc3R5bGUnO1xuXG4vKipcbiAqIFVuc2NvcGVkIENvbXBvbmVudCBTdHlsZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRVbnNjb3BlZFN0eWxlcyA9ICdxOnVzdHlsZSc7XG5cbi8qKlxuICogQ29tcG9uZW50IHN0eWxlIGhvc3QgcHJlZml4XG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTdHlsZXNQcmVmaXhIb3N0ID0gJ/Cfko4nO1xuXG4vKipcbiAqIENvbXBvbmVudCBzdHlsZSBjb250ZW50IHByZWZpeFxuICovXG5leHBvcnQgY29uc3QgQ29tcG9uZW50U3R5bGVzUHJlZml4Q29udGVudCA9ICfirZDvuI8nO1xuXG4vKipcbiAqIFByZWZpeCB1c2VkIHRvIGlkZW50aWZ5IG9uIGxpc3RlbmVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IEV2ZW50UHJlZml4ID0gJ29uOic7XG5cbi8qKlxuICogQXR0cmlidXRlIHVzZWQgdG8gbWFyayB0aGF0IGFuIGV2ZW50IGxpc3RlbmVyIGlzIGF0dGFjaGVkLlxuICovXG5leHBvcnQgY29uc3QgRXZlbnRBbnkgPSAnb246Lic7XG5cbi8qKlxuICogVGFnIG5hbWUgdXNlZCBmb3IgcHJvamVjdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IFFTbG90ID0gJ1E6U0xPVCc7XG5leHBvcnQgY29uc3QgUVNsb3RTZWxlY3RvciA9ICdRXFxcXDpTTE9UJztcblxuLyoqXG4gKiBgPHNvbWUtZWxlbWVudCBxOnNsb3Q9XCIuLi5cIj5gXG4gKi9cbmV4cG9ydCBjb25zdCBRU2xvdEF0dHIgPSAncTpzbG90JztcblxuZXhwb3J0IGNvbnN0IFFDdHhBdHRyID0gJ3E6Y3R4JztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJBdHRyID0gJ3E6Y29udGFpbmVyJztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJTZWxlY3RvciA9ICdbcVxcXFw6Y29udGFpbmVyXSc7XG5cbmV4cG9ydCBjb25zdCBSZW5kZXJFdmVudCA9ICdxUmVuZGVyJztcbi8qKlxuICogYDxxOnNsb3QgbmFtZT1cIi4uLlwiPmBcbiAqL1xuZXhwb3J0IGNvbnN0IFFTbG90TmFtZSA9ICduYW1lJztcbmV4cG9ydCBjb25zdCBRU2xvdEluZXJ0TmFtZSA9ICdcXHUwMDAwJztcblxuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSUQgPSAncTppZCc7XG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRF9TRUxFQ1RPUiA9ICdbcVxcXFw6aWRdJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1BSRUZJWCA9ICcjJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1FfUFJPUFNfUFJFRklYID0gJyYnO1xuIl19","import { assertDefined } from '../assert/assert';\nexport const getDocument = (node) => {\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc);\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFVLEVBQVksRUFBRTtJQUNsRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtRQUNuQyxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUU7UUFDdkIsT0FBTyxJQUFnQixDQUFDO0tBQ3pCO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMvQixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsT0FBTyxHQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vYXNzZXJ0L2Fzc2VydCc7XG5cbmV4cG9ydCBjb25zdCBnZXREb2N1bWVudCA9IChub2RlOiBOb2RlKTogRG9jdW1lbnQgPT4ge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBub2RlIGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MpO1xuICByZXR1cm4gZG9jITtcbn07XG4iXX0=","import { isArray, isObject } from '../util/types';\nimport { assertDefined } from '../assert/assert';\nimport { QContainerSelector, QHostAttr } from '../util/markers';\nimport { getDocument } from '../util/dom';\nimport { qError, QError_missingRenderCtx, QError_useMethodOutsideContext } from '../error/error';\nexport const CONTAINER = Symbol('container');\nexport const isStyleTask = (obj) => {\n    return isObject(obj) && obj.type === 'style';\n};\nlet _context;\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            const element = context[0];\n            const hostElement = getHostElement(element);\n            assertDefined(element);\n            return (document.__q_context__ = newInvokeContext(getDocument(element), hostElement, element, context[1], context[2]));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvoke = (context, fn, ...args) => {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(null, args);\n    }\n    finally {\n        const currentCtx = _context;\n        _context = previousContext;\n        if (currentCtx.$waitOn$ && currentCtx.$waitOn$.length > 0) {\n            // eslint-disable-next-line no-unsafe-finally\n            return Promise.all(currentCtx.$waitOn$).then(() => returnValue);\n        }\n    }\n    return returnValue;\n};\nexport const newInvokeContext = (doc, hostElement, element, event, url) => {\n    return {\n        $seq$: 0,\n        $doc$: doc,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $url$: url || null,\n        $qrl$: undefined,\n    };\n};\n/**\n * @alpha\n */\nexport const useWaitOn = (promise) => {\n    const ctx = getInvokeContext();\n    (ctx.$waitOn$ || (ctx.$waitOn$ = [])).push(promise);\n};\nexport const getHostElement = (el) => {\n    let foundSlot = false;\n    let node = el;\n    while (node) {\n        const isHost = node.hasAttribute(QHostAttr);\n        const isSlot = node.tagName === 'Q:SLOT';\n        if (isHost) {\n            if (!foundSlot) {\n                break;\n            }\n            else {\n                foundSlot = false;\n            }\n        }\n        if (isSlot) {\n            foundSlot = true;\n        }\n        node = node.parentElement;\n    }\n    return node;\n};\nexport const getContainer = (el) => {\n    let container = el[CONTAINER];\n    if (!container) {\n        container = el.closest(QContainerSelector);\n        el[CONTAINER] = container;\n    }\n    return container;\n};\nexport const useRenderContext = () => {\n    const ctx = getInvokeContext();\n    const renderCtx = ctx.$renderCtx$;\n    if (!renderCtx) {\n        throw qError(QError_missingRenderCtx);\n    }\n    return renderCtx;\n};\n//# sourceMappingURL=data:application/json;base64,","export const isPromise = (value) => {\n    return value instanceof Promise;\n};\nexport const then = (promise, thenFn, rejectFn) => {\n    return isPromise(promise) ? promise.then(thenFn, rejectFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsT0FBTyxLQUFLLFlBQVksT0FBTyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUNsQixPQUEwQixFQUMxQixNQUE4QyxFQUM5QyxRQUE0QixFQUNULEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBYyxDQUFDLENBQUM7QUFDN0YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQ3hCLFFBQVcsRUFDa0QsRUFBRTtJQUMvRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxRQUFlLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUksQ0FBSSxFQUF1QixFQUFFO0lBQzVELE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFByb21pc2VUcmVlPFQ+ID0gVCB8IFByb21pc2U8VD4gfCBQcm9taXNlPFRbXT4gfCBBcnJheTxQcm9taXNlVHJlZTxUPj47XG5cbmV4cG9ydCBjb25zdCBpc1Byb21pc2UgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFByb21pc2U8YW55PiA9PiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2U7XG59O1xuXG5leHBvcnQgY29uc3QgdGhlbiA9IDxULCBCPihcbiAgcHJvbWlzZTogVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogKGFyZzogQXdhaXRlZDxUPikgPT4gVmFsdWVPclByb21pc2U8Qj4sXG4gIHJlamVjdEZuPzogKGVycjogYW55KSA9PiBhbnlcbik6IFZhbHVlT3JQcm9taXNlPEI+ID0+IHtcbiAgcmV0dXJuIGlzUHJvbWlzZShwcm9taXNlKSA/IHByb21pc2UudGhlbih0aGVuRm4gYXMgYW55LCByZWplY3RGbikgOiB0aGVuRm4ocHJvbWlzZSBhcyBhbnkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGwgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHsgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBBd2FpdGVkPFRbUF0+IH0+ID0+IHtcbiAgY29uc3QgaGFzUHJvbWlzZSA9IHByb21pc2VzLnNvbWUoaXNQcm9taXNlKTtcbiAgaWYgKGhhc1Byb21pc2UpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG4gIHJldHVybiBwcm9taXNlcyBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb3ROdWxsYWJsZSA9IDxUPih2OiBUKTogdiBpcyBOb25OdWxsYWJsZTxUPiA9PiB7XG4gIHJldHVybiB2ICE9IG51bGw7XG59O1xuIl19","import { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { newInvokeContext, useInvoke } from '../use/use-core';\nimport { then } from '../util/promises';\nimport { isFunction } from '../util/types';\nimport { qrlImport, stringifyQRL } from './qrl';\nexport const isQrl = (value) => {\n    return value instanceof QRL;\n};\nclass QRL {\n    constructor($chunk$, $symbol$, $symbolRef$, $symbolFn$, $capture$, $captureRef$) {\n        this.$chunk$ = $chunk$;\n        this.$symbol$ = $symbol$;\n        this.$symbolRef$ = $symbolRef$;\n        this.$symbolFn$ = $symbolFn$;\n        this.$capture$ = $capture$;\n        this.$captureRef$ = $captureRef$;\n    }\n    setContainer(el) {\n        if (!this.$el$) {\n            this.$el$ = el;\n        }\n    }\n    getSymbol() {\n        return this.$refSymbol$ ?? this.$symbol$;\n    }\n    getHash() {\n        return getSymbolHash(this.$refSymbol$ ?? this.$symbol$);\n    }\n    async resolve(el) {\n        if (el) {\n            this.setContainer(el);\n        }\n        return qrlImport(this.$el$, this);\n    }\n    resolveLazy(el) {\n        return isFunction(this.$symbolRef$) ? this.$symbolRef$ : this.resolve(el);\n    }\n    invokeFn(el, currentCtx, beforeFn) {\n        return ((...args) => {\n            const fn = this.resolveLazy(el);\n            return then(fn, (fn) => {\n                if (isFunction(fn)) {\n                    const baseContext = currentCtx ?? newInvokeContext();\n                    const context = {\n                        ...baseContext,\n                        $qrl$: this,\n                    };\n                    if (beforeFn) {\n                        beforeFn();\n                    }\n                    return useInvoke(context, fn, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        });\n    }\n    copy() {\n        const copy = new QRL(this.$chunk$, this.$symbol$, this.$symbolRef$, this.$symbolFn$, null, this.$captureRef$);\n        copy.$refSymbol$ = this.$refSymbol$;\n        return copy;\n    }\n    async invoke(...args) {\n        const fn = this.invokeFn();\n        const result = await fn(...args);\n        return result;\n    }\n    serialize(options) {\n        return stringifyQRL(this, options);\n    }\n}\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport const isSameQRL = (a, b) => {\n    return a.getHash() === b.getHash();\n};\nexport { QRL as QRLInternal };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLWNsYXNzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2ltcG9ydC9xcmwtY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBaUIsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0UsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxVQUFVLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQXVCLFlBQVksRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUdyRSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFVLEVBQWdCLEVBQUU7SUFDaEQsT0FBTyxLQUFLLFlBQVksR0FBRyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sR0FBRztJQU1QLFlBQ1MsT0FBZSxFQUNmLFFBQWdCLEVBQ2hCLFdBQXdDLEVBQ3hDLFVBQXVELEVBQ3ZELFNBQTBCLEVBQzFCLFlBQTBCO1FBTDFCLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVyxDQUE2QjtRQUN4QyxlQUFVLEdBQVYsVUFBVSxDQUE2QztRQUN2RCxjQUFTLEdBQVQsU0FBUyxDQUFpQjtRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUNoQyxDQUFDO0lBRUosWUFBWSxDQUFDLEVBQVc7UUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztTQUNoQjtJQUNILENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxRQUFR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QUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRUYsT0FBTyxFQUFFLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHFFcnJvciwgUUVycm9yX3FybElzTm90RnVuY3Rpb24gfSBmcm9tICcuLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBJbnZva2VDb250ZXh0LCBuZXdJbnZva2VDb250ZXh0LCB1c2VJbnZva2UgfSBmcm9tICcuLi91c2UvdXNlLWNvcmUnO1xuaW1wb3J0IHsgdGhlbiB9IGZyb20gJy4uL3V0aWwvcHJvbWlzZXMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IHFybEltcG9ydCwgUVJMU2VyaWFsaXplT3B0aW9ucywgc3RyaW5naWZ5UVJMIH0gZnJvbSAnLi9xcmwnO1xuaW1wb3J0IHR5cGUgeyBRUkwgYXMgSVFSTCB9IGZyb20gJy4vcXJsLnB1YmxpYyc7XG5cbmV4cG9ydCBjb25zdCBpc1FybCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUVJMID0+IHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUVJMO1xufTtcblxuY2xhc3MgUVJMPFRZUEUgPSBhbnk+IGltcGxlbWVudHMgSVFSTDxUWVBFPiB7XG4gIF9fYnJhbmRfX1FSTF9fITogVFlQRTtcbiAgJHJlZlN5bWJvbCQ/OiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSAkZWwkOiBFbGVtZW50IHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyAkY2h1bmskOiBzdHJpbmcsXG4gICAgcHVibGljICRzeW1ib2wkOiBzdHJpbmcsXG4gICAgcHVibGljICRzeW1ib2xSZWYkOiBudWxsIHwgVmFsdWVPclByb21pc2U8VFlQRT4sXG4gICAgcHVibGljICRzeW1ib2xGbiQ6IG51bGwgfCAoKCkgPT4gUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBhbnk+PiksXG4gICAgcHVibGljICRjYXB0dXJlJDogbnVsbCB8IHN0cmluZ1tdLFxuICAgIHB1YmxpYyAkY2FwdHVyZVJlZiQ6IG51bGwgfCBhbnlbXVxuICApIHt9XG5cbiAgc2V0Q29udGFpbmVyKGVsOiBFbGVtZW50KSB7XG4gICAgaWYgKCF0aGlzLiRlbCQpIHtcbiAgICAgIHRoaXMuJGVsJCA9IGVsO1xuICAgIH1cbiAgfVxuXG4gIGdldFN5bWJvbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLiRyZWZTeW1ib2wkID8/IHRoaXMuJHN5bWJvbCQ7XG4gIH1cblxuICBnZXRIYXNoKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGdldFN5bWJvbEhhc2godGhpcy4kcmVmU3ltYm9sJCA/PyB0aGlzLiRzeW1ib2wkKTtcbiAgfVxuXG4gIGFzeW5jIHJlc29sdmUoZWw/OiBFbGVtZW50KTogUHJvbWlzZTxUWVBFPiB7XG4gICAgaWYgKGVsKSB7XG4gICAgICB0aGlzLnNldENvbnRhaW5lcihlbCk7XG4gICAgfVxuICAgIHJldHVybiBxcmxJbXBvcnQodGhpcy4kZWwkLCB0aGlzIGFzIGFueSk7XG4gIH1cblxuICByZXNvbHZlTGF6eShlbD86IEVsZW1lbnQpOiBWYWx1ZU9yUHJvbWlzZTxUWVBFPiB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGhpcy4kc3ltYm9sUmVmJCkgPyB0aGlzLiRzeW1ib2xSZWYkIDogdGhpcy5yZXNvbHZlKGVsKTtcbiAgfVxuXG4gIGludm9rZUZuKGVsPzogRWxlbWVudCwgY3VycmVudEN0eD86IEludm9rZUNvbnRleHQsIGJlZm9yZUZuPzogKCkgPT4gdm9pZCk6IGFueSB7XG4gICAgcmV0dXJuICgoLi4uYXJnczogYW55W10pOiBhbnkgPT4ge1xuICAgICAgY29uc3QgZm4gPSB0aGlzLnJlc29sdmVMYXp5KGVsKSBhcyBUWVBFO1xuICAgICAgcmV0dXJuIHRoZW4oZm4sIChmbikgPT4ge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikpIHtcbiAgICAgICAgICBjb25zdCBiYXNlQ29udGV4dCA9IGN1cnJlbnRDdHggPz8gbmV3SW52b2tlQ29udGV4dCgpO1xuICAgICAgICAgIGNvbnN0IGNvbnRleHQ6IEludm9rZUNvbnRleHQgPSB7XG4gICAgICAgICAgICAuLi5iYXNlQ29udGV4dCxcbiAgICAgICAgICAgICRxcmwkOiB0aGlzLFxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGJlZm9yZUZuKSB7XG4gICAgICAgICAgICBiZWZvcmVGbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdXNlSW52b2tlKGNvbnRleHQsIGZuIGFzIGFueSwgLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgcUVycm9yKFFFcnJvcl9xcmxJc05vdEZ1bmN0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pIGFzIGFueTtcbiAgfVxuXG4gIGNvcHkoKTogUVJMPFRZUEU+IHtcbiAgICBjb25zdCBjb3B5ID0gbmV3IFFSTChcbiAgICAgIHRoaXMuJGNodW5rJCxcbiAgICAgIHRoaXMuJHN5bWJvbCQsXG4gICAgICB0aGlzLiRzeW1ib2xSZWYkLFxuICAgICAgdGhpcy4kc3ltYm9sRm4kLFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMuJGNhcHR1cmVSZWYkXG4gICAgKTtcbiAgICBjb3B5LiRyZWZTeW1ib2wkID0gdGhpcy4kcmVmU3ltYm9sJDtcbiAgICByZXR1cm4gY29weTtcbiAgfVxuXG4gIGFzeW5jIGludm9rZSguLi5hcmdzOiBUWVBFIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIEFSR1MpID0+IGFueSA/IEFSR1MgOiBuZXZlcikge1xuICAgIGNvbnN0IGZuID0gdGhpcy5pbnZva2VGbigpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGZuKC4uLmFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBzZXJpYWxpemUob3B0aW9ucz86IFFSTFNlcmlhbGl6ZU9wdGlvbnMpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5UVJMKHRoaXMsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBnZXRTeW1ib2xIYXNoID0gKHN5bWJvbE5hbWU6IHN0cmluZykgPT4ge1xuICBjb25zdCBpbmRleCA9IHN5bWJvbE5hbWUubGFzdEluZGV4T2YoJ18nKTtcbiAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICByZXR1cm4gc3ltYm9sTmFtZS5zbGljZShpbmRleCArIDEpO1xuICB9XG4gIHJldHVybiBzeW1ib2xOYW1lO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2FtZVFSTCA9IChhOiBRUkw8YW55PiwgYjogUVJMPGFueT4pOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIGEuZ2V0SGFzaCgpID09PSBiLmdldEhhc2goKTtcbn07XG5cbmV4cG9ydCB7IFFSTCBhcyBRUkxJbnRlcm5hbCB9O1xuIl19","import { getContainer } from '../use/use-core';\nimport { getDocument } from '../util/dom';\nimport { isObject } from '../util/types';\nexport const createPlatform = (doc) => {\n    const moduleCache = new Map();\n    return {\n        isServer: false,\n        importSymbol(element, url, symbolName) {\n            const urlDoc = toUrl(doc, element, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            const mod = moduleCache.get(importURL);\n            if (mod) {\n                return mod[symbolName];\n            }\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                mod = findModule(mod);\n                moduleCache.set(importURL, mod);\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol() {\n            return undefined;\n        },\n    };\n};\nconst findModule = (module) => {\n    return Object.values(module).find(isModule) || module;\n};\nconst isModule = (module) => {\n    return isObject(module) && module[Symbol.toStringTag] === 'Module';\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *    - `Element` use `base.ownerDocument.baseURI`\n *    - `Document` use `base.baseURI`\n *    - `string` use `base` as is\n *    - `QConfig` use `base.baseURI`\n * @param url - relative URL\n * @returns fully qualified URL.\n */\nexport const toUrl = (doc, element, url) => {\n    const containerEl = getContainer(element);\n    const base = new URL(containerEl?.getAttribute('q:base') ?? doc.baseURI, doc.baseURI);\n    return new URL(url, base);\n};\n/**\n * @public\n */\nexport const setPlatform = (doc, plt) => (doc[DocumentPlatform] = plt);\n/**\n * @public\n */\nexport const getPlatform = (docOrNode) => {\n    const doc = getDocument(docOrNode);\n    return doc[DocumentPlatform] || (doc[DocumentPlatform] = createPlatform(doc));\n};\nconst DocumentPlatform = /*#__PURE__*/ Symbol();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0uanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcGxhdGZvcm0vcGxhdGZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd6QyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFhLEVBQWdCLEVBQUU7SUFDNUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQXFDLENBQUM7SUFDakUsT0FBTztRQUNMLFFBQVEsRUFBRSxLQUFLO1FBQ2YsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVTtZQUNuQyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVuRCxNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUNsQixPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztZQUNwQixNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQy9CLE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkMsSUFBSSxHQUFHLEVBQUU7Z0JBQ1AsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDeEI7WUFDRCxPQUFPLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDdkQsR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDdEIsV0FBVyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2hDLE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM3QixxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7b0JBQ3pCLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM3QixVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELGNBQWM7WUFDWixPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBVyxFQUFFLEVBQUU7SUFDakMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxNQUFNLENBQUM7QUFDeEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFXLEVBQUUsRUFBRTtJQUMvQixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUNyRSxDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBYSxFQUFFLE9BQWdCLEVBQUUsR0FBaUIsRUFBTyxFQUFFO0lBQy9FLE1BQU0sV0FBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQyxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RGLE9BQU8sSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBYSxFQUFFLEdBQWlCLEVBQUUsRUFBRSxDQUM5RCxDQUFFLEdBQXdCLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUV0RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLFNBQTBCLEVBQUUsRUFBRTtJQUN4RCxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFxQixDQUFDO0lBQ3ZELE9BQU8sR0FBRyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNoRixDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENvbnRhaW5lciB9IGZyb20gJy4uL3VzZS91c2UtY29yZSc7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3V0aWwvZG9tJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IENvcmVQbGF0Zm9ybSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUGxhdGZvcm0gPSAoZG9jOiBEb2N1bWVudCk6IENvcmVQbGF0Zm9ybSA9PiB7XG4gIGNvbnN0IG1vZHVsZUNhY2hlID0gbmV3IE1hcDxzdHJpbmcsIHsgW3N5bWJvbDogc3RyaW5nXTogYW55IH0+KCk7XG4gIHJldHVybiB7XG4gICAgaXNTZXJ2ZXI6IGZhbHNlLFxuICAgIGltcG9ydFN5bWJvbChlbGVtZW50LCB1cmwsIHN5bWJvbE5hbWUpIHtcbiAgICAgIGNvbnN0IHVybERvYyA9IHRvVXJsKGRvYywgZWxlbWVudCwgdXJsKS50b1N0cmluZygpO1xuXG4gICAgICBjb25zdCB1cmxDb3B5ID0gbmV3IFVSTCh1cmxEb2MpO1xuICAgICAgdXJsQ29weS5oYXNoID0gJyc7XG4gICAgICB1cmxDb3B5LnNlYXJjaCA9ICcnO1xuICAgICAgY29uc3QgaW1wb3J0VVJMID0gdXJsQ29weS5ocmVmO1xuICAgICAgY29uc3QgbW9kID0gbW9kdWxlQ2FjaGUuZ2V0KGltcG9ydFVSTCk7XG4gICAgICBpZiAobW9kKSB7XG4gICAgICAgIHJldHVybiBtb2Rbc3ltYm9sTmFtZV07XG4gICAgICB9XG4gICAgICByZXR1cm4gaW1wb3J0KC8qIEB2aXRlLWlnbm9yZSAqLyBpbXBvcnRVUkwpLnRoZW4oKG1vZCkgPT4ge1xuICAgICAgICBtb2QgPSBmaW5kTW9kdWxlKG1vZCk7XG4gICAgICAgIG1vZHVsZUNhY2hlLnNldChpbXBvcnRVUkwsIG1vZCk7XG4gICAgICAgIHJldHVybiBtb2Rbc3ltYm9sTmFtZV07XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHJhZjogKGZuKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbmV4dFRpY2s6IChmbikgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBjaHVua0ZvclN5bWJvbCgpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgfTtcbn07XG5cbmNvbnN0IGZpbmRNb2R1bGUgPSAobW9kdWxlOiBhbnkpID0+IHtcbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMobW9kdWxlKS5maW5kKGlzTW9kdWxlKSB8fCBtb2R1bGU7XG59O1xuXG5jb25zdCBpc01vZHVsZSA9IChtb2R1bGU6IGFueSkgPT4ge1xuICByZXR1cm4gaXNPYmplY3QobW9kdWxlKSAmJiBtb2R1bGVbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZSc7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgcmVsYXRpdmUgYmFzZSBVUkkgYW5kIHJlbGF0aXZlIFVSTCBpbnRvIGEgZnVsbHkgcXVhbGlmaWVkIFVSTC5cbiAqXG4gKiBAcGFyYW0gYmFzZSAtYFFSTGBzIGFyZSByZWxhdGl2ZSwgYW5kIHRoZXJlZm9yZSB0aGV5IG5lZWQgYSBiYXNlIGZvciByZXNvbHV0aW9uLlxuICogICAgLSBgRWxlbWVudGAgdXNlIGBiYXNlLm93bmVyRG9jdW1lbnQuYmFzZVVSSWBcbiAqICAgIC0gYERvY3VtZW50YCB1c2UgYGJhc2UuYmFzZVVSSWBcbiAqICAgIC0gYHN0cmluZ2AgdXNlIGBiYXNlYCBhcyBpc1xuICogICAgLSBgUUNvbmZpZ2AgdXNlIGBiYXNlLmJhc2VVUklgXG4gKiBAcGFyYW0gdXJsIC0gcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyBmdWxseSBxdWFsaWZpZWQgVVJMLlxuICovXG5leHBvcnQgY29uc3QgdG9VcmwgPSAoZG9jOiBEb2N1bWVudCwgZWxlbWVudDogRWxlbWVudCwgdXJsOiBzdHJpbmcgfCBVUkwpOiBVUkwgPT4ge1xuICBjb25zdCBjb250YWluZXJFbCA9IGdldENvbnRhaW5lcihlbGVtZW50KTtcbiAgY29uc3QgYmFzZSA9IG5ldyBVUkwoY29udGFpbmVyRWw/LmdldEF0dHJpYnV0ZSgncTpiYXNlJykgPz8gZG9jLmJhc2VVUkksIGRvYy5iYXNlVVJJKTtcbiAgcmV0dXJuIG5ldyBVUkwodXJsLCBiYXNlKTtcbn07XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc2V0UGxhdGZvcm0gPSAoZG9jOiBEb2N1bWVudCwgcGx0OiBDb3JlUGxhdGZvcm0pID0+XG4gICgoZG9jIGFzIFBsYXRmb3JtRG9jdW1lbnQpW0RvY3VtZW50UGxhdGZvcm1dID0gcGx0KTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQbGF0Zm9ybSA9IChkb2NPck5vZGU6IERvY3VtZW50IHwgTm9kZSkgPT4ge1xuICBjb25zdCBkb2MgPSBnZXREb2N1bWVudChkb2NPck5vZGUpIGFzIFBsYXRmb3JtRG9jdW1lbnQ7XG4gIHJldHVybiBkb2NbRG9jdW1lbnRQbGF0Zm9ybV0gfHwgKGRvY1tEb2N1bWVudFBsYXRmb3JtXSA9IGNyZWF0ZVBsYXRmb3JtKGRvYykpO1xufTtcblxuY29uc3QgRG9jdW1lbnRQbGF0Zm9ybSA9IC8qI19fUFVSRV9fKi8gU3ltYm9sKCk7XG5cbmludGVyZmFjZSBQbGF0Zm9ybURvY3VtZW50IGV4dGVuZHMgRG9jdW1lbnQge1xuICBbRG9jdW1lbnRQbGF0Zm9ybV0/OiBDb3JlUGxhdGZvcm07XG59XG4iXX0=","export const isNode = (value) => {\n    return value && typeof value.nodeType == 'number';\n};\nexport const isDocument = (value) => {\n    return value && value.nodeType == 9;\n};\nexport const isElement = (value) => {\n    return isNode(value) && value.nodeType === 1;\n};\nexport const isText = (value) => {\n    return isNode(value) && value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return isNode(value) && value.nodeType === 9;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVSxFQUFxQixFQUFFO0lBQzFELE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVUsRUFBb0IsRUFBRTtJQUN4RCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFO0lBQ3hELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQy9DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc05vZGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09ICdudW1iZXInO1xufTtcbmV4cG9ydCBjb25zdCBpc0RvY3VtZW50ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBEb2N1bWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5ub2RlVHlwZSA9PSA5O1xufTtcbmV4cG9ydCBjb25zdCBpc0VsZW1lbnQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gaXNOb2RlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbn07XG5leHBvcnQgY29uc3QgaXNUZXh0ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBUZXh0ID0+IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDM7XG59O1xuZXhwb3J0IGNvbnN0IGlzQ29tbWVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgQ29tbWVudCA9PiB7XG4gIHJldHVybiBpc05vZGUodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSA5O1xufTtcbiJdfQ==","import { assertDefined } from '../assert/assert';\nimport { getInvokeContext } from './use-core';\n// <docs markdown=\"../readme.md#useHostElement\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useHostElement instead)\n/**\n * Retrieves the Host Element of the current component.\n *\n * NOTE: `useHostElement` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * ```tsx\n * const Section = component$(\n *   () => {\n *     const hostElement = useHostElement();\n *     console.log(hostElement); // hostElement is a HTMLSectionElement\n *\n *     return <Host>I am a section</Host>;\n *   },\n *   {\n *     tagName: 'section',\n *   }\n * );\n * ```\n *\n * @public\n */\n// </docs>\nexport const useHostElement = () => {\n    const ctx = getInvokeContext();\n    const element = ctx.$hostElement$;\n    assertDefined(element);\n    return element;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWhvc3QtZWxlbWVudC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1ob3N0LWVsZW1lbnQucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFOUMsZ0RBQWdEO0FBQ2hELHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsR0FBWSxFQUFFO0lBQzFDLE1BQU0sR0FBRyxHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFDL0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLGFBQWMsQ0FBQztJQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHsgZ2V0SW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VIb3N0RWxlbWVudFwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VIb3N0RWxlbWVudCBpbnN0ZWFkKVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIEhvc3QgRWxlbWVudCBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuXG4gKlxuICogTk9URTogYHVzZUhvc3RFbGVtZW50YCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2tcbiAqIChiZWZvcmUgYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBTZWN0aW9uID0gY29tcG9uZW50JChcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnN0IGhvc3RFbGVtZW50ID0gdXNlSG9zdEVsZW1lbnQoKTtcbiAqICAgICBjb25zb2xlLmxvZyhob3N0RWxlbWVudCk7IC8vIGhvc3RFbGVtZW50IGlzIGEgSFRNTFNlY3Rpb25FbGVtZW50XG4gKlxuICogICAgIHJldHVybiA8SG9zdD5JIGFtIGEgc2VjdGlvbjwvSG9zdD47XG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0YWdOYW1lOiAnc2VjdGlvbicsXG4gKiAgIH1cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VIb3N0RWxlbWVudCA9ICgpOiBFbGVtZW50ID0+IHtcbiAgY29uc3QgY3R4ID0gZ2V0SW52b2tlQ29udGV4dCgpO1xuICBjb25zdCBlbGVtZW50ID0gY3R4LiRob3N0RWxlbWVudCQhO1xuICBhc3NlcnREZWZpbmVkKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudDtcbn07XG4iXX0=","import { createProxy, QObjectRecursive } from '../object/q-object';\nimport { getInvokeContext, useRenderContext } from './use-core';\nimport { useHostElement } from './use-host-element.public';\nimport { getContext } from '../props/props';\nimport { assertEqual } from '../assert/assert';\nimport { RenderEvent } from '../util/markers';\nimport { isFunction } from '../util/types';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates a object that Qwik can track across serializations.\n *\n * Use `useStore` to create state for your application. The return object is a proxy which has a\n * unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ## Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <Host>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </Host>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const [store, setStore] = useSequentialScope();\n    if (store != null) {\n        return store;\n    }\n    const containerState = useRenderContext().$containerState$;\n    const value = isFunction(initialState) ? initialState() : initialState;\n    const recursive = opts?.recursive ?? false;\n    const flags = recursive ? QObjectRecursive : 0;\n    const newStore = createProxy(value, containerState, flags, undefined);\n    setStore(newStore);\n    return newStore;\n};\n// <docs markdown=\"../readme.md#useRef\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useRef instead)\n/**\n * It's a very thin wrapper around `useStore()` including the proper type signature to be passed\n * to the `ref` property in JSX.\n *\n * ```tsx\n * export function useRef<T = Element>(current?: T): Ref<T> {\n *   return useStore({ current });\n * }\n * ```\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const input = useRef<HTMLInputElement>();\n *\n *   useClientEffect$((track) => {\n *     const el = track(input, 'current')!;\n *     el.focus();\n *   });\n *\n *   return (\n *     <Host>\n *       <input type=\"text\" ref={input} />\n *     </Host>\n *   );\n * });\n *\n * ```\n *\n * @public\n */\n// </docs>\nexport const useRef = (current) => {\n    return useStore({ current });\n};\n/**\n * @alpha\n */\nexport const useSequentialScope = () => {\n    const ctx = getInvokeContext();\n    assertEqual(ctx.$event$, RenderEvent);\n    const index = ctx.$seq$;\n    const hostElement = useHostElement();\n    const elementCtx = getContext(hostElement);\n    ctx.$seq$++;\n    const updateFn = (value) => {\n        elementCtx.$seq$[index] = value;\n    };\n    return [elementCtx.$seq$[index], updateFn, index];\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual } from '../assert/assert';\nimport { qError, QError_missingDoc } from '../error/error';\nimport { RenderEvent } from '../util/markers';\nimport { getInvokeContext } from './use-core';\n// <docs markdown=\"../readme.md#useDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useDocument instead)\n/**\n * Retrieves the document of the current element. It's important to use this method instead of\n * accessing `document` directly, because during SSR, the global document might not exist.\n *\n * NOTE: `useDocument` method can only be used in the synchronous portion of the callback (before\n * any `await` statements.)\n *\n * @alpha\n */\n// </docs>\nexport const useDocument = () => {\n    const ctx = getInvokeContext();\n    assertEqual(ctx.$event$, RenderEvent);\n    const doc = ctx.$doc$;\n    if (!doc) {\n        throw qError(QError_missingDoc);\n    }\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWRvY3VtZW50LnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWRvY3VtZW50LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFOUMsNkNBQTZDO0FBQzdDLHlDQUF5QztBQUN6QywwQ0FBMEM7QUFDMUM7Ozs7Ozs7O0dBUUc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQWEsRUFBRTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDdEIsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLE1BQU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7S0FDakM7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydEVxdWFsIH0gZnJvbSAnLi4vYXNzZXJ0L2Fzc2VydCc7XG5pbXBvcnQgeyBxRXJyb3IsIFFFcnJvcl9taXNzaW5nRG9jIH0gZnJvbSAnLi4vZXJyb3IvZXJyb3InO1xuaW1wb3J0IHsgUmVuZGVyRXZlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgZ2V0SW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VEb2N1bWVudFwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VEb2N1bWVudCBpbnN0ZWFkKVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGRvY3VtZW50IG9mIHRoZSBjdXJyZW50IGVsZW1lbnQuIEl0J3MgaW1wb3J0YW50IHRvIHVzZSB0aGlzIG1ldGhvZCBpbnN0ZWFkIG9mXG4gKiBhY2Nlc3NpbmcgYGRvY3VtZW50YCBkaXJlY3RseSwgYmVjYXVzZSBkdXJpbmcgU1NSLCB0aGUgZ2xvYmFsIGRvY3VtZW50IG1pZ2h0IG5vdCBleGlzdC5cbiAqXG4gKiBOT1RFOiBgdXNlRG9jdW1lbnRgIG1ldGhvZCBjYW4gb25seSBiZSB1c2VkIGluIHRoZSBzeW5jaHJvbm91cyBwb3J0aW9uIG9mIHRoZSBjYWxsYmFjayAoYmVmb3JlXG4gKiBhbnkgYGF3YWl0YCBzdGF0ZW1lbnRzLilcbiAqXG4gKiBAYWxwaGFcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZURvY3VtZW50ID0gKCk6IERvY3VtZW50ID0+IHtcbiAgY29uc3QgY3R4ID0gZ2V0SW52b2tlQ29udGV4dCgpO1xuICBhc3NlcnRFcXVhbChjdHguJGV2ZW50JCwgUmVuZGVyRXZlbnQpO1xuICBjb25zdCBkb2MgPSBjdHguJGRvYyQ7XG4gIGlmICghZG9jKSB7XG4gICAgdGhyb3cgcUVycm9yKFFFcnJvcl9taXNzaW5nRG9jKTtcbiAgfVxuICByZXR1cm4gZG9jO1xufTtcbiJdfQ==","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmcm9tQ2FtZWxUb0tlYmFiQ2FzZSA9ICh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC8oW0EtWl0pL2csICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufTtcbiJdfQ==","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQVcsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDN0UsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUM5RCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRpcmVjdFNldEF0dHJpYnV0ZSA9IChlbDogRWxlbWVudCwgcHJvcDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEdldEF0dHJpYnV0ZSA9IChlbDogRWxlbWVudCwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7XG59O1xuIl19","import { getPlatform } from '../platform/platform';\nimport { parseQRL, stringifyQRL } from '../import/qrl';\nimport { isSameQRL } from '../import/qrl-class';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { setAttribute } from '../render/cursor';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isArray } from '../util/types';\nconst ON_PROP_REGEX = /^(window:|document:|)on([A-Z]|-.).*Qrl$/;\nconst ON$_PROP_REGEX = /^(window:|document:|)on([A-Z]|-.).*\\$$/;\nexport const isOnProp = (prop) => {\n    return ON_PROP_REGEX.test(prop);\n};\nexport const isOn$Prop = (prop) => {\n    return ON$_PROP_REGEX.test(prop);\n};\nexport const qPropWriteQRL = (rctx, ctx, prop, value) => {\n    if (!value) {\n        return;\n    }\n    if (!ctx.$listeners$) {\n        ctx.$listeners$ = getDomListeners(ctx.$element$);\n    }\n    const kebabProp = fromCamelToKebabCase(prop);\n    const existingListeners = ctx.$listeners$.get(kebabProp) || [];\n    const newQRLs = isArray(value) ? value : [value];\n    for (const value of newQRLs) {\n        const cp = value.copy();\n        cp.setContainer(ctx.$element$);\n        const capture = cp.$capture$;\n        if (capture == null) {\n            // we need to serialize the lexical scope references\n            const captureRef = cp.$captureRef$;\n            cp.$capture$ =\n                captureRef && captureRef.length\n                    ? captureRef.map((ref) => String(ctx.$refMap$.$add$(ref)))\n                    : EMPTY_ARRAY;\n        }\n        // Important we modify the array as it is cached.\n        for (let i = 0; i < existingListeners.length; i++) {\n            const qrl = existingListeners[i];\n            if (isSameQRL(qrl, cp)) {\n                existingListeners.splice(i, 1);\n                i--;\n            }\n        }\n        existingListeners.push(cp);\n    }\n    ctx.$listeners$.set(kebabProp, existingListeners);\n    const newValue = serializeQRLs(existingListeners, ctx);\n    if (directGetAttribute(ctx.$element$, kebabProp) !== newValue) {\n        if (rctx) {\n            setAttribute(rctx, ctx.$element$, kebabProp, newValue);\n        }\n        else {\n            directSetAttribute(ctx.$element$, kebabProp, newValue);\n        }\n    }\n};\nexport const getDomListeners = (el) => {\n    const attributes = el.attributes;\n    const listeners = new Map();\n    for (let i = 0; i < attributes.length; i++) {\n        const attr = attributes.item(i);\n        if (attr.name.startsWith('on:') ||\n            attr.name.startsWith('on-window:') ||\n            attr.name.startsWith('on-document:')) {\n            let array = listeners.get(attr.name);\n            if (!array) {\n                listeners.set(attr.name, (array = []));\n            }\n            array.push(parseQRL(attr.value, el));\n        }\n    }\n    return listeners;\n};\nconst serializeQRLs = (existingQRLs, ctx) => {\n    const opts = {\n        $platform$: getPlatform(ctx.$element$),\n        $element$: ctx.$element$,\n    };\n    return existingQRLs.map((qrl) => stringifyQRL(qrl, opts)).join('\\n');\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which\n * ends in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example these function call are equivalent:\n *\n * - `component$(() => {...})` is same as `onRender($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - function that should have its first argument automatically `$`.\n * @alpha\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUU5QyxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaFxuICogZW5kcyBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlIHRoZXNlIGZ1bmN0aW9uIGNhbGwgYXJlIGVxdWl2YWxlbnQ6XG4gKlxuICogLSBgY29tcG9uZW50JCgoKSA9PiB7Li4ufSlgIGlzIHNhbWUgYXMgYG9uUmVuZGVyKCQoKCkgPT4gey4uLn0pKWBcbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiBteUFwaShjYWxsYmFjazogUVJMPCgpID0+IHZvaWQ+KTogdm9pZCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGV4cG9ydCBjb25zdCBteUFwaSQgPSBpbXBsaWNpdCRGaXJzdEFyZyhteUFwaSk7XG4gKiAvLyB0eXBlIG9mIG15QXBpJDogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZFxuICpcbiAqIC8vIGNhbiBiZSB1c2VkIGFzOlxuICogbXlBcGkkKCgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyB3aWxsIGJlIHRyYW5zcGlsZWQgdG86XG4gKiAvLyBGSUxFOiA8Y3VycmVudCBmaWxlPlxuICogbXlBcGkocXJsKCcuL2NodW5rLWFiYy5qcycsICdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyBGSUxFOiBjaHVuay1hYmMuanNcbiAqIGV4cG9ydCBjb25zdCBjYWxsYmFjayA9ICgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGZuIC0gZnVuY3Rpb24gdGhhdCBzaG91bGQgaGF2ZSBpdHMgZmlyc3QgYXJndW1lbnQgYXV0b21hdGljYWxseSBgJGAuXG4gKiBAYWxwaGFcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IGltcGxpY2l0JEZpcnN0QXJnID0gPEZJUlNULCBSRVNUIGV4dGVuZHMgYW55W10sIFJFVD4oXG4gIGZuOiAoZmlyc3Q6IFFSTDxGSVJTVD4sIC4uLnJlc3Q6IFJFU1QpID0+IFJFVFxuKTogKChmaXJzdDogRklSU1QsIC4uLnJlc3Q6IFJFU1QpID0+IFJFVCkgPT4ge1xuICByZXR1cm4gZnVuY3Rpb24gKGZpcnN0OiBGSVJTVCwgLi4ucmVzdDogUkVTVCk6IFJFVCB7XG4gICAgcmV0dXJuIGZuLmNhbGwobnVsbCwgJChmaXJzdCksIC4uLnJlc3QpO1xuICB9O1xufTtcbiJdfQ==","import { getContext } from '../props/props';\nimport { qPropWriteQRL } from '../props/props-on';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useHostElement } from './use-host-element.public';\nimport { useSequentialScope } from './use-store.public';\nimport { WatchFlagsIsCleanup } from './use-watch';\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * Can be used to release resouces, abort network requets, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resouces, abort network requets, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanupQrl = (unmountFn) => {\n    const [watch, setWatch, i] = useSequentialScope();\n    if (!watch) {\n        const el = useHostElement();\n        const watch = {\n            qrl: unmountFn,\n            el,\n            f: WatchFlagsIsCleanup,\n            i,\n        };\n        setWatch(true);\n        getContext(el).$watches$.push(watch);\n    }\n};\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * Can be used to release resouces, abort network requets, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resouces, abort network requets, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanup$ = /*#__PURE__*/ implicit$FirstArg(useCleanupQrl);\n// <docs markdown=\"../readme.md#useResume\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResume instead)\n/**\n * A lazy-loadable reference to a component's on resume hook.\n *\n * The hook is eagerly invoked when the application resumes on the client. Because it is called\n * eagerly, this allows the component to resume even if no user interaction has taken place.\n *\n * Only called in the client.\n * Only called once.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useResume$(() => {\n *     // Eagerly invoked when the application resumes on the client\n *     console.log('called once in client');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @see `useVisible`, `useClientEffect`\n *\n * @alpha\n */\n// </docs>\nexport const useResumeQrl = (resumeFn) => {\n    useOn('qinit', resumeFn);\n};\n// <docs markdown=\"../readme.md#useResume\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResume instead)\n/**\n * A lazy-loadable reference to a component's on resume hook.\n *\n * The hook is eagerly invoked when the application resumes on the client. Because it is called\n * eagerly, this allows the component to resume even if no user interaction has taken place.\n *\n * Only called in the client.\n * Only called once.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useResume$(() => {\n *     // Eagerly invoked when the application resumes on the client\n *     console.log('called once in client');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @see `useVisible`, `useClientEffect`\n *\n * @alpha\n */\n// </docs>\nexport const useResume$ = /*#__PURE__*/ implicit$FirstArg(useResumeQrl);\n// <docs markdown=\"../readme.md#useVisible\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisible instead)\n/**\n * A lazy-loadable reference to a component's on visible hook.\n *\n * The hook is lazily invoked when the component becomes visible in the browser viewport.\n *\n * Only called in the client.\n * Only called once.\n *\n * @see `useResume`, `useClientEffect`\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     isVisible: false,\n *   });\n *   useVisible$(() => {\n *     // Invoked once when the component is visible in the browser's viewport\n *     console.log('called once in client when visible');\n *     store.isVisible = true;\n *   });\n *   return <div>{store.isVisible}</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useVisibleQrl = (resumeFn) => {\n    useOn('qvisible', resumeFn);\n};\n// <docs markdown=\"../readme.md#useVisible\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisible instead)\n/**\n * A lazy-loadable reference to a component's on visible hook.\n *\n * The hook is lazily invoked when the component becomes visible in the browser viewport.\n *\n * Only called in the client.\n * Only called once.\n *\n * @see `useResume`, `useClientEffect`\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     isVisible: false,\n *   });\n *   useVisible$(() => {\n *     // Invoked once when the component is visible in the browser's viewport\n *     console.log('called once in client when visible');\n *     store.isVisible = true;\n *   });\n *   return <div>{store.isVisible}</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useVisible$ = /*#__PURE__*/ implicit$FirstArg(useVisibleQrl);\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise it's adding a JSX listener in the `<Host>` is a better idea.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * @alpha\n */\n// </docs>\nexport const useOn = (event, eventFn) => {\n    const el = useHostElement();\n    const ctx = getContext(el);\n    qPropWriteQRL(undefined, ctx, `on:${event}`, eventFn);\n};\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $(() => {\n *       console.log('body scrolled');\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <Host>Profit!</Host>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => {\n    const el = useHostElement();\n    const ctx = getContext(el);\n    qPropWriteQRL(undefined, ctx, `on-document:${event}`, eventQrl);\n};\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $(() => {\n *       console.log('navigation happened');\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <Host>Profit!</Host>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnWindow = (event, eventFn) => {\n    const el = useHostElement();\n    const ctx = getContext(el);\n    qPropWriteQRL(undefined, ctx, `on-window:${event}`, eventFn);\n};\n//# sourceMappingURL=data:application/json;base64,","import { getProxyTarget, noSerialize } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { newInvokeContext, useRenderContext, useWaitOn } from './use-core';\nimport { useHostElement } from './use-host-element.public';\nimport { logDebug, logError } from '../util/log';\nimport { then } from '../util/promises';\nimport { useSequentialScope } from './use-store.public';\nimport { QRLInternal } from '../import/qrl-class';\nimport { getDocument } from '../util/dom';\nimport { isFunction, isObject } from '../util/types';\nimport { getPlatform } from '../platform/platform';\nimport { useDocument } from './use-document.public';\nimport { handleWatch } from '../render/notify-render';\nimport { useResumeQrl, useVisibleQrl } from './use-on';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined } from '../assert/assert';\nexport const WatchFlagsIsEffect = 1 << 0;\nexport const WatchFlagsIsWatch = 1 << 1;\nexport const WatchFlagsIsDirty = 1 << 2;\nexport const WatchFlagsIsCleanup = 1 << 3;\nexport const isWatchDescriptor = (obj) => {\n    return isObject(obj) && 'qrl' in obj && 'f' in obj;\n};\nexport const isWatchCleanup = (obj) => {\n    return isWatchDescriptor(obj) && !!(obj.f & WatchFlagsIsCleanup);\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs use the `obs`\n * function to wrap property reads. This creates subscriptions which will trigger the `watchFn`\n * to re-run.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$((track) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$((track) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <Host>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatchQrl = (qrl, opts) => {\n    const [watch, setWatch, i] = useSequentialScope();\n    if (!watch) {\n        const el = useHostElement();\n        const containerState = useRenderContext().$containerState$;\n        const watch = {\n            qrl,\n            el,\n            f: WatchFlagsIsDirty | WatchFlagsIsWatch,\n            i,\n        };\n        setWatch(true);\n        getContext(el).$watches$.push(watch);\n        useWaitOn(Promise.resolve().then(() => runWatch(watch, containerState)));\n        const isServer = containerState.$platform$.isServer;\n        if (isServer) {\n            useRunWatch(watch, opts?.run);\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs use the `obs`\n * function to wrap property reads. This creates subscriptions which will trigger the `watchFn`\n * to re-run.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$((track) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$((track) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <Host>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatch$ = /*#__PURE__*/ implicit$FirstArg(useWatchQrl);\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <Host>{store.count}</Host>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffectQrl = (qrl, opts) => {\n    const [watch, setWatch, i] = useSequentialScope();\n    if (!watch) {\n        const el = useHostElement();\n        const watch = {\n            qrl,\n            el,\n            f: WatchFlagsIsEffect,\n            i,\n        };\n        setWatch(true);\n        getContext(el).$watches$.push(watch);\n        useRunWatch(watch, opts?.run ?? 'visible');\n        const doc = useDocument();\n        if (doc['qO']) {\n            doc['qO'].observe(el);\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <Host>{store.count}</Host>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffect$ = /*#__PURE__*/ implicit$FirstArg(useClientEffectQrl);\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook, that runs only in server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <Host>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </Host>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useClientMount` `useMount`\n * @public\n */\n// </docs>\nexport const useServerMountQrl = (mountQrl) => {\n    const [watch, setWatch] = useSequentialScope();\n    if (!watch) {\n        setWatch(true);\n        const isServer = getPlatform(useDocument()).isServer;\n        if (isServer) {\n            useWaitOn(mountQrl.invoke());\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook, that runs only in server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <Host>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </Host>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useClientMount` `useMount`\n * @public\n */\n// </docs>\nexport const useServerMount$ = /*#__PURE__*/ implicit$FirstArg(useServerMountQrl);\n// <docs markdown=\"../readme.md#useClientMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientMount instead)\n/**\n * Register's a client mount hook, that runs only in client when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     hash: ''\n *   });\n *\n *   useClientMount$(async () => {\n *     // This code will ONLY run once in the client, when the component is mounted\n *     store.hash = document.location.hash\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The url hash is: ${store.hash}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useMount`\n *\n * @public\n */\n// </docs>\nexport const useClientMountQrl = (mountQrl) => {\n    const [watch, setWatch] = useSequentialScope();\n    if (!watch) {\n        setWatch(true);\n        const isServer = getPlatform(useDocument()).isServer;\n        if (!isServer) {\n            useWaitOn(mountQrl.invoke());\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useClientMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientMount instead)\n/**\n * Register's a client mount hook, that runs only in client when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     hash: ''\n *   });\n *\n *   useClientMount$(async () => {\n *     // This code will ONLY run once in the client, when the component is mounted\n *     store.hash = document.location.hash\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The url hash is: ${store.hash}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useMount`\n *\n * @public\n */\n// </docs>\nexport const useClientMount$ = /*#__PURE__*/ implicit$FirstArg(useClientMountQrl);\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register's a mount hook, that runs both in the server and the client when the component is\n * first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = await res.json() as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The temperature is: ${store.temp}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useClientMount`\n * @public\n */\n// </docs>\nexport const useMountQrl = (mountQrl) => {\n    const [watch, setWatch] = useSequentialScope();\n    if (!watch) {\n        setWatch(true);\n        useWaitOn(mountQrl.invoke());\n    }\n};\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register's a mount hook, that runs both in the server and the client when the component is\n * first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = await res.json() as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The temperature is: ${store.temp}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useClientMount`\n * @public\n */\n// </docs>\nexport const useMount$ = /*#__PURE__*/ implicit$FirstArg(useMountQrl);\nexport const runWatch = (watch, containerState) => {\n    if (!(watch.f & WatchFlagsIsDirty)) {\n        logDebug('Watch is not dirty, skipping run', watch);\n        return Promise.resolve(watch);\n    }\n    watch.f &= ~WatchFlagsIsDirty;\n    const promise = new Promise((resolve) => {\n        then(watch.running, () => {\n            cleanupWatch(watch);\n            const el = watch.el;\n            const doc = getDocument(el);\n            const invokationContext = newInvokeContext(doc, el, el, 'WatchEvent');\n            const { $subsManager$: subsManager } = containerState;\n            const watchFn = watch.qrl.invokeFn(el, invokationContext, () => {\n                subsManager.$clearSub$(watch);\n            });\n            const track = (obj, prop) => {\n                const target = getProxyTarget(obj);\n                assertDefined(target, 'Expected a Proxy object to track');\n                const manager = subsManager.$getLocal$(target);\n                manager.$addSub$(watch, prop);\n                if (prop) {\n                    return obj[prop];\n                }\n                else {\n                    return obj;\n                }\n            };\n            return then(watchFn(track), (returnValue) => {\n                if (isFunction(returnValue)) {\n                    watch.destroy = noSerialize(returnValue);\n                }\n                resolve(watch);\n            });\n        });\n    });\n    watch.running = noSerialize(promise);\n    return promise;\n};\nexport const cleanupWatch = (watch) => {\n    const destroy = watch.destroy;\n    if (destroy) {\n        watch.destroy = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyWatch = (watch) => {\n    if (watch.f & WatchFlagsIsCleanup) {\n        watch.f &= ~WatchFlagsIsCleanup;\n        const cleanup = watch.qrl.invokeFn(watch.el);\n        cleanup();\n    }\n    else {\n        cleanupWatch(watch);\n    }\n};\nconst useRunWatch = (watch, run) => {\n    if (run === 'load') {\n        useResumeQrl(getWatchHandlerQrl(watch));\n    }\n    else if (run === 'visible') {\n        useVisibleQrl(getWatchHandlerQrl(watch));\n    }\n};\nconst getWatchHandlerQrl = (watch) => {\n    const watchQrl = watch.qrl;\n    const watchHandler = new QRLInternal(watchQrl.$chunk$, 'handleWatch', handleWatch, null, null, [watch]);\n    watchHandler.$refSymbol$ = watchQrl.$symbol$;\n    return watchHandler;\n};\n//# sourceMappingURL=data:application/json;base64,","export const emitEvent = (el, eventName, detail, bubbles) => {\n    if (el && typeof CustomEvent === 'function') {\n        el.dispatchEvent(new CustomEvent(eventName, {\n            detail,\n            bubbles: bubbles,\n            composed: bubbles,\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLEVBQUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLEVBQUU7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsTUFBTTtZQUNOLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1pdEV2ZW50ID0gKFxuICBlbDogRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGRldGFpbDogYW55LFxuICBidWJibGVzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKGVsICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbCxcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgY29tcG9zZWQ6IGJ1YmJsZXMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0=","import { assertDefined, assertEqual } from '../assert/assert';\nimport { parseQRL, stringifyQRL } from '../import/qrl';\nimport { isQrl } from '../import/qrl-class';\nimport { getContext, tryGetContext } from '../props/props';\nimport { getDocument } from '../util/dom';\nimport { isDocument, isElement, isNode } from '../util/element';\nimport { logDebug, logError, logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { createProxy, getOrCreateProxy, getProxyFlags, getProxyTarget, isConnected, isMutable, mutable, shouldSerialize, } from './q-object';\nimport { destroyWatch, WatchFlagsIsDirty } from '../use/use-watch';\nimport { emitEvent } from '../util/event';\nimport { getContainerState } from '../render/notify-render';\nimport { codeToText, QError_cannotSerializeNode } from '../error/error';\nimport { isArray, isObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isNotNullable } from '../util/promises';\nexport const UNDEFINED_PREFIX = '\\u0010';\nexport const QRL_PREFIX = '\\u0011';\nexport const DOCUMENT_PREFIX = '\\u0012';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n/**\n * Serialize the current state of the application into DOM\n *\n * @alpha\n */\n// </docs>\nexport const pauseContainer = (elmOrDoc) => {\n    const doc = getDocument(elmOrDoc);\n    const containerEl = isDocument(elmOrDoc) ? elmOrDoc.documentElement : elmOrDoc;\n    const parentJSON = isDocument(elmOrDoc) ? elmOrDoc.body : containerEl;\n    const data = snapshotState(containerEl);\n    const script = doc.createElement('script');\n    directSetAttribute(script, 'type', 'qwik/json');\n    script.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(script);\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    return data;\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping hydration because parent element is not q:container');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (!script) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    script.remove();\n    const containerState = getContainerState(containerEl);\n    const meta = JSON.parse(unescapeText(script.textContent || '{}'));\n    // Collect all elements\n    const elements = new Map();\n    const getObject = (id) => {\n        return getObjectImpl(id, elements, meta.objs, containerState);\n    };\n    getNodesInScope(containerEl, hasQId).forEach((el) => {\n        const id = directGetAttribute(el, ELEMENT_ID);\n        elements.set(ELEMENT_ID_PREFIX + id, el);\n    });\n    // Revive proxies with subscriptions into the proxymap\n    reviveValues(meta.objs, meta.subs, getObject, containerState, parentJSON);\n    // Rebuild target objects\n    for (const obj of meta.objs) {\n        reviveNestedObjects(obj, getObject);\n    }\n    Object.entries(meta.ctx).forEach(([elementID, ctxMeta]) => {\n        const el = getObject(elementID);\n        assertDefined(el);\n        const ctx = getContext(el);\n        const qobj = ctxMeta.r;\n        const seq = ctxMeta.s;\n        const host = ctxMeta.h;\n        const contexts = ctxMeta.c;\n        const watches = ctxMeta.w;\n        if (qobj) {\n            ctx.$refMap$.$array$.push(...qobj.split(' ').map((part) => getObject(part)));\n        }\n        if (seq) {\n            ctx.$seq$ = seq.split(' ').map((part) => getObject(part));\n        }\n        if (watches) {\n            ctx.$watches$ = watches.split(' ').map((part) => getObject(part));\n        }\n        if (contexts) {\n            contexts.split(' ').map((part) => {\n                const [key, value] = part.split('=');\n                if (!ctx.$contexts$) {\n                    ctx.$contexts$ = new Map();\n                }\n                ctx.$contexts$.set(key, getObject(value));\n            });\n        }\n        // Restore sequence scoping\n        if (host) {\n            const [props, renderQrl] = host.split(' ');\n            assertDefined(props);\n            assertDefined(renderQrl);\n            ctx.$props$ = getObject(props);\n            ctx.$renderQrl$ = getObject(renderQrl);\n        }\n    });\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst hasContext = (el) => {\n    return !!tryGetContext(el);\n};\nexport const snapshotState = (containerEl) => {\n    const containerState = getContainerState(containerEl);\n    const doc = getDocument(containerEl);\n    const elementToIndex = new Map();\n    const collector = createCollector(doc, containerState);\n    // Collect all qObjected around the DOM\n    const elements = getNodesInScope(containerEl, hasContext);\n    elements.forEach((node) => {\n        const ctx = tryGetContext(node);\n        collectProps(node, ctx.$props$, collector);\n        ctx.$contexts$?.forEach((ctx) => {\n            collectValue(ctx, collector);\n        });\n        ctx.$listeners$?.forEach((listeners) => {\n            for (const l of listeners) {\n                const captured = l.$captureRef$;\n                if (captured) {\n                    captured.forEach((obj) => collectValue(obj, collector));\n                }\n            }\n        });\n        ctx.$watches$.forEach((watch) => {\n            collector.$watches$.push(watch);\n        });\n    });\n    // Convert objSet to array\n    const objs = Array.from(collector.$objSet$);\n    const objToId = new Map();\n    const hasSubscriptions = (a) => {\n        const flags = getProxyFlags(containerState.$proxyMap$.get(a));\n        if (typeof flags === 'number' && flags > 0) {\n            return true;\n        }\n        const manager = containerState.$subsManager$.$tryGetLocal$(a);\n        if (manager) {\n            return manager.$subs$.size > 0;\n        }\n        return false;\n    };\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            if (el.isConnected) {\n                id = intToStr(elementToIndex.size);\n                directSetAttribute(el, ELEMENT_ID, id);\n                id = ELEMENT_ID_PREFIX + id;\n            }\n            else {\n                id = null;\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isMutable(obj)) {\n            obj = obj.v;\n            suffix = '%';\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n            }\n            const id = objToId.get(normalizeObj(target ?? obj, doc));\n            if (id !== undefined) {\n                return intToStr(id) + suffix;\n            }\n            if (!target && isNode(obj)) {\n                if (obj.nodeType === 1) {\n                    return getElementID(obj) + suffix;\n                }\n                else {\n                    logError(codeToText(QError_cannotSerializeNode), obj);\n                    return null;\n                }\n            }\n        }\n        else {\n            const id = objToId.get(normalizeObj(obj, doc));\n            if (id !== undefined) {\n                return intToStr(id) + suffix;\n            }\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const id = getObjId(obj);\n        assertDefined(id);\n        return id;\n    };\n    const serialize = (value) => {\n        return getObjId(value) ?? value;\n    };\n    let count = 0;\n    objs.sort((a, b) => {\n        const isProxyA = hasSubscriptions(a) ? 0 : 1;\n        const isProxyB = hasSubscriptions(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    for (const obj of objs) {\n        objToId.set(obj, count);\n        count++;\n    }\n    const subs = objs\n        .map((obj) => {\n        const flags = getProxyFlags(containerState.$proxyMap$.get(obj));\n        if (flags === undefined) {\n            return null;\n        }\n        const subs = containerState.$subsManager$.$tryGetLocal$(obj)?.$subs$;\n        if ((subs && subs.size > 0) || flags !== 0) {\n            const subsObj = {};\n            if (flags > 0) {\n                subsObj['$'] = flags;\n            }\n            subs &&\n                subs.forEach((set, key) => {\n                    const id = getObjId(key);\n                    if (id !== null) {\n                        subsObj[id] = set ? Array.from(set) : null;\n                    }\n                });\n            return subsObj;\n        }\n        else {\n            return null;\n        }\n    })\n        .filter(isNotNullable);\n    const qrlSerializeOptions = {\n        $platform$: containerState.$platform$,\n        $getObjId$: getObjId,\n    };\n    const convertedObjs = objs.map((obj) => {\n        if (isObject(obj)) {\n            if (isArray(obj)) {\n                return obj.map(serialize);\n            }\n            if (isQrl(obj)) {\n                return QRL_PREFIX + stringifyQRL(obj, qrlSerializeOptions);\n            }\n            const output = {};\n            Object.entries(obj).forEach(([key, value]) => {\n                output[key] = serialize(value);\n            });\n            return output;\n        }\n        return obj;\n    });\n    const listeners = [];\n    const meta = {};\n    // Write back to the dom\n    elements.forEach((node) => {\n        const ctx = getContext(node);\n        assertDefined(ctx);\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const watches = ctx.$watches$;\n        const renderQrl = ctx.$renderQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = collector.$elements$.includes(node);\n        let add = false;\n        if (ref.$array$.length > 0) {\n            const value = ref.$array$.map((obj) => mustGetObjId(obj)).join(' ');\n            if (value) {\n                metaValue.r = value;\n                add = true;\n            }\n        }\n        if (elementCaptured && props) {\n            const objs = [props];\n            if (renderQrl) {\n                objs.push(renderQrl);\n            }\n            const value = objs.map((obj) => mustGetObjId(obj)).join(' ');\n            if (value) {\n                metaValue.h = value;\n                add = true;\n            }\n        }\n        if (watches.length > 0) {\n            const value = watches\n                .map((watch) => getObjId(watch))\n                .filter(isNotNullable)\n                .join(' ');\n            if (value) {\n                metaValue.w = value;\n                add = true;\n            }\n        }\n        if (elementCaptured && seq.length > 0) {\n            const value = seq.map((obj) => mustGetObjId(obj)).join(' ');\n            if (value) {\n                metaValue.s = value;\n                add = true;\n            }\n        }\n        if (contexts) {\n            const serializedContexts = [];\n            contexts.forEach((value, key) => {\n                serializedContexts.push(`${key}=${mustGetObjId(value)}`);\n            });\n            const value = serializedContexts.join(' ');\n            if (value) {\n                metaValue.c = value;\n                add = true;\n            }\n        }\n        if (add) {\n            const elementID = getElementID(node);\n            assertDefined(elementID);\n            meta[elementID] = metaValue;\n        }\n        if (ctx.$listeners$) {\n            ctx.$listeners$.forEach((qrls, key) => {\n                qrls.forEach((qrl) => {\n                    listeners.push({\n                        key,\n                        qrl,\n                    });\n                });\n            });\n        }\n    });\n    for (const watch of collector.$watches$) {\n        destroyWatch(watch);\n        if (qDev) {\n            if (watch.f & WatchFlagsIsDirty) {\n                logWarn('Serializing dirty watch. Looks like an internal error.');\n            }\n            if (!isConnected(watch)) {\n                logWarn('Serializing disconneted watch. Looks like an internal error.');\n            }\n        }\n    }\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (getDocument(el) !== doc) {\n                logWarn('element from different document', value, el.tagName);\n            }\n            if (!value) {\n                logWarn('unconnected element', el.tagName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        listeners,\n    };\n};\nexport const getQwikJSON = (parentElm) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, 'type') === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const nodes = [];\n    walkNodes(nodes, parent, predicate);\n    return nodes;\n};\nexport const walkNodes = (nodes, parent, predicate) => {\n    let child = parent.firstElementChild;\n    while (child) {\n        if (!isContainer(child)) {\n            if (predicate(child)) {\n                nodes.push(child);\n            }\n            walkNodes(nodes, child, predicate);\n        }\n        child = child.nextElementSibling;\n    }\n};\nconst reviveValues = (objs, subs, getObject, containerState, containerEl) => {\n    for (let i = 0; i < objs.length; i++) {\n        const value = objs[i];\n        if (isString(value)) {\n            if (value === UNDEFINED_PREFIX) {\n                objs[i] = undefined;\n            }\n            else if (value === DOCUMENT_PREFIX) {\n                objs[i] = getDocument(containerEl);\n            }\n            else if (value.startsWith(QRL_PREFIX)) {\n                objs[i] = parseQRL(value.slice(1), containerEl);\n            }\n        }\n        else {\n            const sub = subs[i];\n            if (sub) {\n                const converted = new Map();\n                let flags = 0;\n                Object.entries(sub).forEach((entry) => {\n                    if (entry[0] === '$') {\n                        flags = entry[1];\n                        return;\n                    }\n                    const el = getObject(entry[0]);\n                    if (!el) {\n                        logWarn('QWIK can not revive subscriptions because of missing element ID', entry, value);\n                        return;\n                    }\n                    const set = entry[1] === null ? null : new Set(entry[1]);\n                    converted.set(el, set);\n                });\n                createProxy(value, containerState, flags, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject) => {\n    if (obj && typeof obj == 'object') {\n        if (isQrl(obj)) {\n            if (obj.$capture$ && obj.$capture$.length > 0) {\n                obj.$captureRef$ = obj.$capture$.map(getObject);\n                obj.$capture$ = null;\n            }\n            return;\n        }\n        else if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                const value = obj[i];\n                if (typeof value == 'string') {\n                    obj[i] = getObject(value);\n                }\n                else {\n                    reviveNestedObjects(value, getObject);\n                }\n            }\n        }\n        else if (Object.getPrototypeOf(obj) === Object.prototype) {\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (typeof value == 'string') {\n                        obj[key] = getObject(value);\n                    }\n                    else {\n                        reviveNestedObjects(value, getObject);\n                    }\n                }\n            }\n        }\n    }\n};\nconst getObjectImpl = (id, elements, objs, containerState) => {\n    if (id.startsWith(ELEMENT_ID_PREFIX)) {\n        assertEqual(elements.has(id), true);\n        return elements.get(id);\n    }\n    const index = strToInt(id);\n    assertEqual(objs.length > index, true);\n    let obj = objs[index];\n    const needsProxy = id.endsWith('!');\n    if (needsProxy && containerState) {\n        id = id.slice(0, -1);\n        obj = containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    }\n    if (id.endsWith('%')) {\n        obj = mutable(obj);\n    }\n    return obj;\n};\nconst normalizeObj = (obj, doc) => {\n    if (obj === doc) {\n        return DOCUMENT_PREFIX;\n    }\n    if (obj === undefined || !shouldSerialize(obj)) {\n        return UNDEFINED_PREFIX;\n    }\n    return getProxyTarget(obj) ?? obj;\n};\nconst collectValue = (obj, collector) => {\n    const handled = collectQObjects(obj, collector);\n    if (!handled) {\n        collector.$objSet$.add(normalizeObj(obj, collector.$doc$));\n    }\n};\nconst collectProps = (el, props, collector) => {\n    const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(getProxyTarget(props))?.$subs$;\n    if (subs && subs.has(el)) {\n        // The host element read the props\n        collectElement(el, collector);\n    }\n};\nconst createCollector = (doc, containerState) => {\n    return {\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $elements$: [],\n        $watches$: [],\n        $containerState$: containerState,\n        $doc$: doc,\n    };\n};\nconst collectQrl = (obj, collector) => {\n    if (collector.$seen$.has(obj)) {\n        return true;\n    }\n    collector.$seen$.add(obj);\n    collector.$objSet$.add(normalizeObj(obj, collector.$doc$));\n    if (obj.$captureRef$) {\n        obj.$captureRef$.forEach((obj) => collectValue(obj, collector));\n    }\n};\nconst collectElement = (el, collector) => {\n    if (collector.$seen$.has(el)) {\n        return;\n    }\n    collector.$seen$.add(el);\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        collector.$elements$.push(el);\n        if (ctx.$props$) {\n            collectValue(ctx.$props$, collector);\n        }\n        if (ctx.$renderQrl$) {\n            collectValue(ctx.$renderQrl$, collector);\n        }\n        ctx.$seq$.forEach((obj) => {\n            collectValue(obj, collector);\n        });\n        ctx.$refMap$.$array$.forEach((obj) => {\n            collectValue(obj, collector);\n        });\n        ctx.$watches$.forEach((watch) => {\n            collectValue(watch, collector);\n        });\n        if (ctx.$contexts$) {\n            ctx.$contexts$.forEach((obj) => {\n                collectValue(obj, collector);\n            });\n        }\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nconst collectSubscriptions = (subs, collector) => {\n    if (collector.$seen$.has(subs)) {\n        return;\n    }\n    collector.$seen$.add(subs);\n    Array.from(subs.keys()).forEach((key) => {\n        if (isElement(key)) {\n            collectElement(key, collector);\n        }\n        else {\n            collectValue(key, collector);\n        }\n    });\n};\nconst collectQObjects = (obj, collector) => {\n    if (obj != null) {\n        if (typeof obj === 'object') {\n            const target = getProxyTarget(obj);\n            if (!target && isNode(obj)) {\n                if (obj.nodeType === 1) {\n                    return true;\n                }\n                return false;\n            }\n            if (isQrl(obj)) {\n                collectQrl(obj, collector);\n                return true;\n            }\n            const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(target)?.$subs$;\n            if (subs) {\n                collectSubscriptions(subs, collector);\n            }\n            obj = normalizeObj(obj, collector.$doc$);\n        }\n        if (typeof obj === 'object') {\n            if (collector.$seen$.has(obj)) {\n                return true;\n            }\n            collector.$seen$.add(obj);\n            collector.$objSet$.add(obj);\n            if (isArray(obj)) {\n                for (let i = 0; i < obj.length; i++) {\n                    collectQObjects(obj[i], collector);\n                }\n            }\n            else {\n                for (const key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        collectQObjects(obj[key], collector);\n                    }\n                }\n            }\n            return true;\n        }\n        if (isString(obj)) {\n            collector.$objSet$.add(obj);\n            return true;\n        }\n    }\n    return false;\n};\nexport const isContainer = (el) => {\n    return el.hasAttribute(QContainerAttr);\n};\nconst hasQId = (el) => {\n    return el.hasAttribute(ELEMENT_ID);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\n//# sourceMappingURL=data:application/json;base64,","export const newQObjectMap = () => {\n    const array = [];\n    return {\n        $array$: array,\n        $get$(index) {\n            return array[index];\n        },\n        $indexOf$(obj) {\n            const index = array.indexOf(obj);\n            return index === -1 ? undefined : index;\n        },\n        $add$(object) {\n            const index = array.indexOf(object);\n            if (index === -1) {\n                array.push(object);\n                return array.length - 1;\n            }\n            return index;\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHMtb2JqLW1hcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9wcm9wcy9wcm9wcy1vYmotbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFlLEVBQUU7SUFDNUMsTUFBTSxLQUFLLEdBQW1CLEVBQUUsQ0FBQztJQUNqQyxPQUFPO1FBQ0wsT0FBTyxFQUFFLEtBQUs7UUFDZCxLQUFLLENBQUMsS0FBYTtZQUNqQixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixDQUFDO1FBQ0QsU0FBUyxDQUFDLEdBQVc7WUFDbkIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQyxPQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDMUMsQ0FBQztRQUNELEtBQUssQ0FBQyxNQUFvQjtZQUN4QixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNuQixPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2FBQ3pCO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQ1ksQ0FBQztBQUNsQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFFPYmplY3QgfSBmcm9tICcuLi9vYmplY3QvcS1vYmplY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFFPYmplY3RNYXAge1xuICAkYWRkJChxT2JqZWN0OiBRT2JqZWN0PGFueT4pOiBudW1iZXI7XG4gICRnZXQkKGluZGV4OiBudW1iZXIpOiBRT2JqZWN0PGFueT4gfCB1bmRlZmluZWQ7XG4gICRpbmRleE9mJChvYmplY3Q6IFFPYmplY3Q8YW55Pik6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgJGFycmF5JDogUU9iamVjdDxhbnk+W107XG59XG5cbmV4cG9ydCBjb25zdCBuZXdRT2JqZWN0TWFwID0gKCk6IFFPYmplY3RNYXAgPT4ge1xuICBjb25zdCBhcnJheTogUU9iamVjdDxhbnk+W10gPSBbXTtcbiAgcmV0dXJuIHtcbiAgICAkYXJyYXkkOiBhcnJheSxcbiAgICAkZ2V0JChpbmRleDogbnVtYmVyKTogUU9iamVjdDxhbnk+IHwgdW5kZWZpbmVkIHtcbiAgICAgIHJldHVybiBhcnJheVtpbmRleF07XG4gICAgfSxcbiAgICAkaW5kZXhPZiQob2JqOiBzdHJpbmcpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgICAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKG9iaik7XG4gICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gdW5kZWZpbmVkIDogaW5kZXg7XG4gICAgfSxcbiAgICAkYWRkJChvYmplY3Q6IFFPYmplY3Q8YW55Pikge1xuICAgICAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKG9iamVjdCk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFycmF5LnB1c2gob2JqZWN0KTtcbiAgICAgICAgcmV0dXJuIGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgfSBhcyBRT2JqZWN0TWFwO1xufTtcbiJdfQ==","import { createProxy, getProxyTarget, isMutable, QObjectImmutable, } from '../object/q-object';\nimport { resumeContainer } from '../object/store';\nimport { newQObjectMap } from './props-obj-map';\nimport { qPropWriteQRL } from './props-on';\nimport { QContainerAttr } from '../util/markers';\nimport { destroyWatch } from '../use/use-watch';\nimport { pauseContainer } from '../object/store';\nimport { getContainerState } from '../render/notify-render';\nimport { qDev } from '../util/qdev';\nimport { logError } from '../util/log';\nimport { isQrl } from '../import/qrl-class';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertDefined } from '../assert/assert';\nconst Q_CTX = '__ctx__';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qDev) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: getContainerState(containerEl),\n    };\n};\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (element) => {\n    let ctx = tryGetContext(element);\n    if (!ctx) {\n        const cache = new Map();\n        element[Q_CTX] = ctx = {\n            $element$: element,\n            $cache$: cache,\n            $refMap$: newQObjectMap(),\n            $dirty$: false,\n            $seq$: [],\n            $watches$: [],\n            $props$: undefined,\n            $renderQrl$: undefined,\n            $component$: undefined,\n        };\n    }\n    return ctx;\n};\nexport const cleanupContext = (ctx, subsManager) => {\n    const el = ctx.$element$;\n    ctx.$watches$.forEach((watch) => {\n        subsManager.$clearSub$(watch);\n        destroyWatch(watch);\n    });\n    if (ctx.$renderQrl$) {\n        subsManager.$clearSub$(el);\n    }\n    ctx.$component$ = undefined;\n    ctx.$renderQrl$ = undefined;\n    ctx.$seq$.length = 0;\n    ctx.$watches$.length = 0;\n    ctx.$cache$.clear();\n    ctx.$dirty$ = false;\n    ctx.$refMap$.$array$.length = 0;\n    el[Q_CTX] = undefined;\n};\nconst PREFIXES = ['document:on', 'window:on', 'on'];\nconst SCOPED = ['on-document', 'on-window', 'on'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = prop.slice(1);\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return `${scope}:${prop}`;\n};\nexport const setEvent = (rctx, ctx, prop, value) => {\n    qPropWriteQRL(rctx, ctx, normalizeOnProp(prop), value);\n};\nexport const createProps = (target, containerState) => {\n    return createProxy(target, containerState, QObjectImmutable);\n};\nexport const getPropsMutator = (ctx, containerState) => {\n    let props = ctx.$props$;\n    if (!ctx.$props$) {\n        ctx.$props$ = props = createProps({}, containerState);\n    }\n    const target = getProxyTarget(props);\n    assertDefined(target);\n    const manager = containerState.$subsManager$.$getLocal$(target);\n    return {\n        set(prop, value) {\n            const didSet = prop in target;\n            let oldValue = target[prop];\n            let mut = false;\n            if (isMutable(oldValue)) {\n                oldValue = oldValue.v;\n            }\n            target[prop] = value;\n            if (isMutable(value)) {\n                value = value.v;\n                mut = true;\n            }\n            if (oldValue !== value) {\n                if (qDev) {\n                    if (didSet && !mut && !isQrl(value)) {\n                        const displayName = ctx.$renderQrl$?.getSymbol() ?? ctx.$element$.localName;\n                        logError(`Props are immutable by default. If you need to change a value of a passed in prop, please wrap the prop with \"mutable()\" <${displayName} ${prop}={mutable(...)}>`, '\\n - Component:', displayName, '\\n - Prop:', prop, '\\n - Old value:', oldValue, '\\n - New value:', value);\n                    }\n                }\n                manager.$notifySubs$(prop);\n            }\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * Place at the root of the component View to allow binding of attributes on the Host element.\n *\n * ```\n * <Host someAttr={someExpr} someAttrStatic=\"value\">\n *   View content implementation.\n * </Host>\n * ```\n *\n * Qwik requires that components have [docs/HOST_ELEMENTS.ts] so that it is possible to have\n * asynchronous loading point. Host element is not owned by the component. At times it is\n * desirable for the component to render additional attributes on the host element. `<Host>`\n * servers that purpose.\n * @public\n */\nexport const Host = { __brand__: 'host' };\n/**\n * @public\n */\nexport const SkipRerender = { __brand__: 'skip' };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9ob3N0LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBbUQsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFTLENBQUM7QUFFakc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQTBCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIVE1MQXR0cmlidXRlcyB9IGZyb20gJy4vdHlwZXMvanN4LWdlbmVyYXRlZCc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5cbi8qKlxuICogUGxhY2UgYXQgdGhlIHJvb3Qgb2YgdGhlIGNvbXBvbmVudCBWaWV3IHRvIGFsbG93IGJpbmRpbmcgb2YgYXR0cmlidXRlcyBvbiB0aGUgSG9zdCBlbGVtZW50LlxuICpcbiAqIGBgYFxuICogPEhvc3Qgc29tZUF0dHI9e3NvbWVFeHByfSBzb21lQXR0clN0YXRpYz1cInZhbHVlXCI+XG4gKiAgIFZpZXcgY29udGVudCBpbXBsZW1lbnRhdGlvbi5cbiAqIDwvSG9zdD5cbiAqIGBgYFxuICpcbiAqIFF3aWsgcmVxdWlyZXMgdGhhdCBjb21wb25lbnRzIGhhdmUgW2RvY3MvSE9TVF9FTEVNRU5UUy50c10gc28gdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBoYXZlXG4gKiBhc3luY2hyb25vdXMgbG9hZGluZyBwb2ludC4gSG9zdCBlbGVtZW50IGlzIG5vdCBvd25lZCBieSB0aGUgY29tcG9uZW50LiBBdCB0aW1lcyBpdCBpc1xuICogZGVzaXJhYmxlIGZvciB0aGUgY29tcG9uZW50IHRvIHJlbmRlciBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMgb24gdGhlIGhvc3QgZWxlbWVudC4gYDxIb3N0PmBcbiAqIHNlcnZlcnMgdGhhdCBwdXJwb3NlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgSG9zdDogRnVuY3Rpb25Db21wb25lbnQ8SFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+PiA9IHsgX19icmFuZF9fOiAnaG9zdCcgfSBhcyBhbnk7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgU2tpcFJlcmVuZGVyOiBGdW5jdGlvbkNvbXBvbmVudDx7fT4gPSB7IF9fYnJhbmRfXzogJ3NraXAnIH0gYXMgYW55O1xuIl19","import { qDev } from '../../util/qdev';\nimport { Host, SkipRerender } from './host.public';\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { isNotNullable, isPromise, promiseAll, then } from '../../util/promises';\nimport { useInvoke } from '../../use/use-core';\n/**\n * @public\n */\nexport const jsx = (type, props, key) => {\n    return new JSXNodeImpl(type, props, key);\n};\nexport const HOST_TYPE = ':host';\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, key = null) {\n        this.type = type;\n        this.props = props;\n        this.key = key;\n    }\n}\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $children$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$children$ = $children$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const key = node.key != null ? String(node.key) : null;\n    let textType = '';\n    if (node.type === Host) {\n        textType = HOST_TYPE;\n    }\n    else if (node.type === SkipRerender) {\n        textType = SKIP_RENDER_TYPE;\n    }\n    else if (isFunction(node.type)) {\n        const res = invocationContext\n            ? useInvoke(invocationContext, () => node.type(node.props, node.key))\n            : node.type(node.props, node.key);\n        return processData(res, invocationContext);\n    }\n    else if (isString(node.type)) {\n        textType = node.type;\n    }\n    let children = EMPTY_ARRAY;\n    if (node.props) {\n        const mightPromise = processData(node.props.children, invocationContext);\n        return then(mightPromise, (result) => {\n            if (result !== undefined) {\n                if (isArray(result)) {\n                    children = result;\n                }\n                else {\n                    children = [result];\n                }\n            }\n            return new ProcessedJSXNodeImpl(textType, node.props, children, key);\n        });\n    }\n    return new ProcessedJSXNodeImpl(textType, node.props, children, key);\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return then(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isString(node) || typeof node === 'number') {\n        const newNode = new ProcessedJSXNodeImpl('#text', null, EMPTY_ARRAY, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else {\n        logWarn('Unvalid node, skipping');\n        return undefined;\n    }\n};\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === JSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"JSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\n/**\n * @public\n */\nexport const Fragment = (props) => props.children;\nexport { jsx as jsxs, jsx as jsxDEV };\n//# sourceMappingURL=data:application/json;base64,","import { getContext } from '../props/props';\nimport { isArray } from '../util/types';\nimport { smartUpdateChildren, updateProperties } from './cursor';\nimport { HOST_TYPE } from './jsx/jsx-runtime';\nexport const visitJsxNode = (ctx, elm, jsxNode, isSvg) => {\n    if (jsxNode === undefined) {\n        return smartUpdateChildren(ctx, elm, [], 'root', isSvg);\n    }\n    if (isArray(jsxNode)) {\n        return smartUpdateChildren(ctx, elm, jsxNode.flat(), 'root', isSvg);\n    }\n    else if (jsxNode.$type$ === HOST_TYPE) {\n        updateProperties(ctx, getContext(elm), jsxNode.$props$, isSvg);\n        return smartUpdateChildren(ctx, elm, jsxNode.$children$ || [], 'root', isSvg);\n    }\n    else {\n        return smartUpdateChildren(ctx, elm, [jsxNode], 'root', isSvg);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9yZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxPQUFPLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBaUIsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRzlDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUMxQixHQUFrQixFQUNsQixHQUFZLEVBQ1osT0FBMEQsRUFDMUQsS0FBYyxFQUNRLEVBQUU7SUFDeEIsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ3pCLE9BQU8sbUJBQW1CLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDckU7U0FBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3ZDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRCxPQUFPLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQy9FO1NBQU07UUFDTCxPQUFPLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDaEU7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgaXNBcnJheSwgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IFJlbmRlckNvbnRleHQsIHNtYXJ0VXBkYXRlQ2hpbGRyZW4sIHVwZGF0ZVByb3BlcnRpZXMgfSBmcm9tICcuL2N1cnNvcic7XG5pbXBvcnQgdHlwZSB7IFByb2Nlc3NlZEpTWE5vZGUgfSBmcm9tICcuL2pzeC90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBIT1NUX1RZUEUgfSBmcm9tICcuL2pzeC9qc3gtcnVudGltZSc7XG5leHBvcnQgdHlwZSBDb21wb25lbnRSZW5kZXJRdWV1ZSA9IFByb21pc2U8SFRNTEVsZW1lbnRbXT5bXTtcblxuZXhwb3J0IGNvbnN0IHZpc2l0SnN4Tm9kZSA9IChcbiAgY3R4OiBSZW5kZXJDb250ZXh0LFxuICBlbG06IEVsZW1lbnQsXG4gIGpzeE5vZGU6IFByb2Nlc3NlZEpTWE5vZGUgfCBQcm9jZXNzZWRKU1hOb2RlW10gfCB1bmRlZmluZWQsXG4gIGlzU3ZnOiBib29sZWFuXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmIChqc3hOb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gc21hcnRVcGRhdGVDaGlsZHJlbihjdHgsIGVsbSwgW10sICdyb290JywgaXNTdmcpO1xuICB9XG4gIGlmIChpc0FycmF5KGpzeE5vZGUpKSB7XG4gICAgcmV0dXJuIHNtYXJ0VXBkYXRlQ2hpbGRyZW4oY3R4LCBlbG0sIGpzeE5vZGUuZmxhdCgpLCAncm9vdCcsIGlzU3ZnKTtcbiAgfSBlbHNlIGlmIChqc3hOb2RlLiR0eXBlJCA9PT0gSE9TVF9UWVBFKSB7XG4gICAgdXBkYXRlUHJvcGVydGllcyhjdHgsIGdldENvbnRleHQoZWxtKSwganN4Tm9kZS4kcHJvcHMkLCBpc1N2Zyk7XG4gICAgcmV0dXJuIHNtYXJ0VXBkYXRlQ2hpbGRyZW4oY3R4LCBlbG0sIGpzeE5vZGUuJGNoaWxkcmVuJCB8fCBbXSwgJ3Jvb3QnLCBpc1N2Zyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNtYXJ0VXBkYXRlQ2hpbGRyZW4oY3R4LCBlbG0sIFtqc3hOb2RlXSwgJ3Jvb3QnLCBpc1N2Zyk7XG4gIH1cbn07XG4iXX0=","export const hashCode = (text, hash = 0) => {\n    if (text.length === 0)\n        return hash;\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzaENvZGUgPSAodGV4dDogc3RyaW5nLCBoYXNoOiBudW1iZXIgPSAwKSA9PiB7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNociA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cbiAgcmV0dXJuIE51bWJlcihNYXRoLmFicyhoYXNoKSkudG9TdHJpbmcoMzYpO1xufTtcbiJdfQ==","import { ComponentStylesPrefixContent, ComponentStylesPrefixHost } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\n/**\n * @public\n */\nexport const styleKey = (qStyles, index) => {\n    return `${hashCode(qStyles.getHash())}-${index}`;\n};\n/**\n * @public\n */\nexport const styleHost = (styleId) => {\n    return ComponentStylesPrefixHost + styleId;\n};\n/**\n * @public\n */\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9jb21wb25lbnQvcXJsLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFN0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUE0QixFQUFFLEtBQWEsRUFBVSxFQUFFO0lBQzlFLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDbkQsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxPQUFlLEVBQVUsRUFBRTtJQUNuRCxPQUFPLHlCQUF5QixHQUFHLE9BQU8sQ0FBQztBQUM3QyxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ3RELE9BQU8sNEJBQTRCLEdBQUcsT0FBTyxDQUFDO0FBQ2hELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9pbXBvcnQvcXJsLWNsYXNzJztcbmltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQsIENvbXBvbmVudFN0eWxlc1ByZWZpeEhvc3QgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc3R5bGVLZXkgPSAocVN0eWxlczogUVJMSW50ZXJuYWw8c3RyaW5nPiwgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgJHtoYXNoQ29kZShxU3R5bGVzLmdldEhhc2goKSl9LSR7aW5kZXh9YDtcbn07XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc3R5bGVIb3N0ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhIb3N0ICsgc3R5bGVJZDtcbn07XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc3R5bGVDb250ZW50ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ICsgc3R5bGVJZDtcbn07XG4iXX0=","import { assertDefined } from '../assert/assert';\nimport { copyRenderContext } from './cursor';\nimport { visitJsxNode } from './render';\nimport { ComponentScopedStyles, QHostAttr, RenderEvent } from '../util/markers';\nimport { promiseAll, then } from '../util/promises';\nimport { styleContent, styleHost } from '../component/qrl-styles';\nimport { newInvokeContext } from '../use/use-core';\nimport { processData } from './jsx/jsx-runtime';\nimport { logDebug, logError } from '../util/log';\nimport { isFunction } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from './fast-calls';\nexport const firstRenderComponent = (rctx, ctx) => {\n    directSetAttribute(ctx.$element$, QHostAttr, '');\n    return renderComponent(rctx, ctx);\n};\nexport const renderComponent = (rctx, ctx) => {\n    ctx.$dirty$ = false;\n    const hostElement = ctx.$element$;\n    const onRenderQRL = ctx.$renderQrl$;\n    assertDefined(onRenderQRL);\n    const props = ctx.$props$;\n    assertDefined(props);\n    // Component is not dirty any more\n    rctx.$containerState$.$hostsStaging$.delete(hostElement);\n    const newCtx = copyRenderContext(rctx);\n    // Invoke render hook\n    const invocatinContext = newInvokeContext(rctx.$doc$, hostElement, hostElement, RenderEvent);\n    invocatinContext.$subscriber$ = hostElement;\n    invocatinContext.$renderCtx$ = newCtx;\n    const waitOn = (invocatinContext.$waitOn$ = []);\n    // Clean current subscription before render\n    rctx.$containerState$.$subsManager$.$clearSub$(hostElement);\n    // Resolve render function\n    const onRenderFn = onRenderQRL.invokeFn(rctx.$containerEl$, invocatinContext);\n    try {\n        // Execution of the render function\n        const renderPromise = onRenderFn(props);\n        // Wait for results\n        return then(renderPromise, (jsxNode) => {\n            rctx.$hostElements$.add(hostElement);\n            const waitOnPromise = promiseAll(waitOn);\n            return then(waitOnPromise, () => {\n                if (isFunction(jsxNode)) {\n                    ctx.$dirty$ = false;\n                    jsxNode = jsxNode();\n                }\n                else if (ctx.$dirty$) {\n                    logDebug('Dropping render. State changed during render.');\n                    return renderComponent(rctx, ctx);\n                }\n                let componentCtx = ctx.$component$;\n                if (!componentCtx) {\n                    componentCtx = ctx.$component$ = {\n                        $hostElement$: hostElement,\n                        $slots$: [],\n                        $styleHostClass$: undefined,\n                        $styleClass$: undefined,\n                        $styleId$: undefined,\n                    };\n                    const scopedStyleId = directGetAttribute(hostElement, ComponentScopedStyles) ?? undefined;\n                    if (scopedStyleId) {\n                        componentCtx.$styleId$ = scopedStyleId;\n                        componentCtx.$styleHostClass$ = styleHost(scopedStyleId);\n                        componentCtx.$styleClass$ = styleContent(scopedStyleId);\n                        hostElement.classList.add(componentCtx.$styleHostClass$);\n                    }\n                }\n                componentCtx.$slots$ = [];\n                newCtx.$contexts$.push(ctx);\n                newCtx.$currentComponent$ = componentCtx;\n                const invocatinContext = newInvokeContext(rctx.$doc$, hostElement, hostElement);\n                invocatinContext.$subscriber$ = hostElement;\n                invocatinContext.$renderCtx$ = newCtx;\n                const processedJSXNode = processData(jsxNode, invocatinContext);\n                return then(processedJSXNode, (processedJSXNode) => {\n                    return visitJsxNode(newCtx, hostElement, processedJSXNode, false);\n                });\n            });\n        }, (err) => {\n            logError(err);\n        });\n    }\n    catch (err) {\n        logError(err);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { OnRenderProp, QHostAttr, QSlotAttr } from '../util/markers';\nimport { cleanupContext, getContext, getPropsMutator, setEvent, tryGetContext, } from '../props/props';\nimport { isOn$Prop, isOnProp } from '../props/props-on';\nimport { isArray, isString } from '../util/types';\nimport { $ } from '../import/qrl.public';\nimport { firstRenderComponent, renderComponent } from './render-component';\nimport { promiseAll, then } from '../util/promises';\nimport { assertDefined, assertEqual } from '../assert/assert';\nimport { intToStr } from '../object/store';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { logDebug, logError, logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { codeToText, qError, QError_hostCanOnlyBeAtRoot, QError_setProperty, QError_stringifyClassOrStyle, } from '../error/error';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { CONTAINER, isStyleTask } from '../use/use-core';\nimport { getDocument } from '../util/dom';\nimport { directGetAttribute, directSetAttribute } from './fast-calls';\nimport { HOST_TYPE, SKIP_RENDER_TYPE } from './jsx/jsx-runtime';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const smartUpdateChildren = (ctx, elm, ch, mode, isSvg) => {\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        if (elm.firstChild !== null) {\n            return;\n        }\n        ch = ch[0].$children$;\n    }\n    const oldCh = getChildren(elm, mode);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return updateChildren(ctx, elm, oldCh, ch, isSvg);\n    }\n    else if (ch.length > 0) {\n        return addVnodes(ctx, elm, null, ch, 0, ch.length - 1, isSvg);\n    }\n    else if (oldCh.length > 0) {\n        return removeVnodes(ctx, oldCh, 0, oldCh.length - 1);\n    }\n};\nexport const updateChildren = (ctx, parentElm, oldCh, newCh, isSvg) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newStartVnode)) {\n            results.push(patchVnode(ctx, oldStartVnode, newStartVnode, isSvg));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (sameVnode(oldEndVnode, newEndVnode)) {\n            results.push(patchVnode(ctx, oldEndVnode, newEndVnode, isSvg));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            results.push(patchVnode(ctx, oldStartVnode, newEndVnode, isSvg));\n            insertBefore(ctx, parentElm, oldStartVnode, oldEndVnode.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            results.push(patchVnode(ctx, oldEndVnode, newStartVnode, isSvg));\n            insertBefore(ctx, parentElm, oldEndVnode, oldStartVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, isSvg);\n                results.push(then(newElm, (newElm) => {\n                    insertBefore(ctx, parentElm, newElm, oldStartVnode);\n                }));\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (!isTagName(elmToMove, newStartVnode.$type$)) {\n                    const newElm = createElm(ctx, newStartVnode, isSvg);\n                    results.push(then(newElm, (newElm) => {\n                        insertBefore(ctx, parentElm, newElm, oldStartVnode);\n                    }));\n                }\n                else {\n                    results.push(patchVnode(ctx, elmToMove, newStartVnode, isSvg));\n                    oldCh[idxInOld] = undefined;\n                    insertBefore(ctx, parentElm, elmToMove, oldStartVnode);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, isSvg));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = then(wait, () => {\n            removeVnodes(ctx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nconst isComponentNode = (node) => {\n    return node.$props$ && OnRenderProp in node.$props$;\n};\nconst getCh = (elm, filter) => {\n    return Array.from(elm.childNodes).filter(filter);\n};\nexport const getChildren = (elm, mode) => {\n    switch (mode) {\n        case 'default':\n            return getCh(elm, isNode);\n        case 'slot':\n            return getCh(elm, isChildSlot);\n        case 'root':\n            return getCh(elm, isChildComponent);\n        case 'fallback':\n            return getCh(elm, isFallback);\n    }\n};\nexport const isNode = (elm) => {\n    const type = elm.nodeType;\n    return type === 1 || type === 3;\n};\nconst isFallback = (node) => {\n    return node.nodeName === 'Q:FALLBACK';\n};\nconst isChildSlot = (node) => {\n    return isNode(node) && node.nodeName !== 'Q:FALLBACK' && node.nodeName !== 'Q:TEMPLATE';\n};\nconst isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nconst isChildComponent = (node) => {\n    return isNode(node) && node.nodeName !== 'Q:TEMPLATE';\n};\nconst splitBy = (input, condition) => {\n    const output = {};\n    for (const item of input) {\n        const key = condition(item);\n        const array = output[key] ?? (output[key] = []);\n        array.push(item);\n    }\n    return output;\n};\nexport const patchVnode = (rctx, elm, vnode, isSvg) => {\n    vnode.$elm$ = elm;\n    const tag = vnode.$type$;\n    if (tag === '#text') {\n        if (elm.data !== vnode.$text$) {\n            setProperty(rctx, elm, 'data', vnode.$text$);\n        }\n        return;\n    }\n    if (tag === '#comment') {\n        if (elm.data !== vnode.$text$) {\n            setProperty(rctx, elm, 'data', vnode.$text$);\n        }\n        return;\n    }\n    if (tag === HOST_TYPE) {\n        throw qError(QError_hostCanOnlyBeAtRoot);\n    }\n    if (tag === SKIP_RENDER_TYPE) {\n        return;\n    }\n    if (!isSvg) {\n        isSvg = tag === 'svg';\n    }\n    let promise;\n    const props = vnode.$props$;\n    const ctx = getContext(elm);\n    const dirty = updateProperties(rctx, ctx, props, isSvg);\n    const isSlot = tag === 'q:slot';\n    if (isSvg && vnode.$type$ === 'foreignObject') {\n        isSvg = false;\n    }\n    else if (isSlot) {\n        const currentComponent = rctx.$currentComponent$;\n        if (currentComponent) {\n            currentComponent.$slots$.push(vnode);\n        }\n    }\n    const isComponent = isComponentNode(vnode);\n    if (dirty) {\n        assertEqual(isComponent, true);\n        promise = renderComponent(rctx, ctx);\n    }\n    const ch = vnode.$children$;\n    if (isComponent) {\n        return then(promise, () => {\n            const slotMaps = getSlots(ctx.$component$, elm);\n            const splittedChidren = splitBy(ch, getSlotName);\n            const promises = [];\n            const slotRctx = copyRenderContext(rctx);\n            slotRctx.$contexts$.push(ctx);\n            // Mark empty slots and remove content\n            Object.entries(slotMaps.slots).forEach(([key, slotEl]) => {\n                if (slotEl && !splittedChidren[key]) {\n                    const oldCh = getChildren(slotEl, 'slot');\n                    if (oldCh.length > 0) {\n                        removeVnodes(slotRctx, oldCh, 0, oldCh.length - 1);\n                    }\n                }\n            });\n            // Mark empty slots and remove content\n            Object.entries(slotMaps.templates).forEach(([key, templateEl]) => {\n                if (templateEl && !splittedChidren[key]) {\n                    removeNode(slotRctx, templateEl);\n                    slotMaps.templates[key] = undefined;\n                }\n            });\n            // Render into slots\n            Object.entries(splittedChidren).forEach(([key, ch]) => {\n                const slotElm = getSlotElement(slotRctx, slotMaps, elm, key);\n                promises.push(smartUpdateChildren(slotRctx, slotElm, ch, 'slot', isSvg));\n            });\n            return then(promiseAll(promises), () => {\n                removeTemplates(slotRctx, slotMaps);\n            });\n        });\n    }\n    const setsInnerHTML = checkInnerHTML(props);\n    if (setsInnerHTML) {\n        if (qDev && ch.length > 0) {\n            logWarn('Node can not have children when innerHTML is set');\n        }\n        return;\n    }\n    return then(promise, () => {\n        const mode = isSlot ? 'fallback' : 'default';\n        return smartUpdateChildren(rctx, elm, ch, mode, isSvg);\n    });\n};\nconst addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, isSvg) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch);\n        promises.push(createElm(ctx, ch, isSvg));\n    }\n    return then(promiseAll(promises), (children) => {\n        for (const child of children) {\n            insertBefore(ctx, parentElm, child, before);\n        }\n    });\n};\nconst removeVnodes = (ctx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            removeNode(ctx, ch);\n        }\n    }\n};\nlet refCount = 0;\nconst RefSymbol = Symbol();\nconst setSlotRef = (ctx, hostElm, slotEl) => {\n    let ref = hostElm[RefSymbol] ?? directGetAttribute(hostElm, 'q:sref');\n    if (ref === null) {\n        ref = intToStr(refCount++);\n        hostElm[RefSymbol] = ref;\n        setAttribute(ctx, hostElm, 'q:sref', ref);\n    }\n    directSetAttribute(slotEl, 'q:sref', ref);\n};\nconst getSlotElement = (ctx, slotMaps, parentEl, slotName) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return slotEl;\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return templateEl;\n    }\n    const template = createTemplate(ctx, slotName);\n    prepend(ctx, parentEl, template);\n    slotMaps.templates[slotName] = template;\n    return template;\n};\nconst createTemplate = (ctx, slotName) => {\n    const template = createElement(ctx, 'q:template', false);\n    directSetAttribute(template, QSlotAttr, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nconst removeTemplates = (ctx, slotMaps) => {\n    Object.keys(slotMaps.templates).forEach((key) => {\n        const template = slotMaps.templates[key];\n        if (template && slotMaps.slots[key] !== undefined) {\n            removeNode(ctx, template);\n            slotMaps.templates[key] = undefined;\n        }\n    });\n};\nexport const resolveSlotProjection = (ctx, hostElm, before, after) => {\n    Object.entries(before.slots).forEach(([key, slotEl]) => {\n        if (slotEl && !after.slots[key]) {\n            // Slot removed\n            // Move slot to template\n            const template = createTemplate(ctx, key);\n            const slotChildren = getChildren(slotEl, 'slot');\n            template.append(...slotChildren);\n            hostElm.insertBefore(template, hostElm.firstChild);\n            ctx.$operations$.push({\n                $el$: template,\n                $operation$: 'slot-to-template',\n                $args$: slotChildren,\n                $fn$: () => { },\n            });\n        }\n    });\n    Object.entries(after.slots).forEach(([key, slotEl]) => {\n        if (slotEl && !before.slots[key]) {\n            // Slot created\n            // Move template to slot\n            const template = before.templates[key];\n            if (template) {\n                slotEl.append(...getChildren(template, 'default'));\n                template.remove();\n                ctx.$operations$.push({\n                    $el$: slotEl,\n                    $operation$: 'template-to-slot',\n                    $args$: [template],\n                    $fn$: () => { },\n                });\n            }\n        }\n    });\n};\nconst getSlotName = (node) => {\n    return node.$props$?.['q:slot'] ?? '';\n};\nconst createElm = (rctx, vnode, isSvg) => {\n    rctx.$perf$.$visited$++;\n    const tag = vnode.$type$;\n    if (tag === '#text') {\n        return (vnode.$elm$ = createTextNode(rctx, vnode.$text$));\n    }\n    if (tag === HOST_TYPE) {\n        throw qError(QError_hostCanOnlyBeAtRoot);\n    }\n    if (!isSvg) {\n        isSvg = tag === 'svg';\n    }\n    const props = vnode.$props$;\n    const elm = (vnode.$elm$ = createElement(rctx, tag, isSvg));\n    const isComponent = isComponentNode(vnode);\n    const ctx = getContext(elm);\n    setKey(elm, vnode.$key$);\n    updateProperties(rctx, ctx, props, isSvg);\n    if (isSvg && tag === 'foreignObject') {\n        isSvg = false;\n    }\n    const currentComponent = rctx.$currentComponent$;\n    if (currentComponent) {\n        const styleTag = currentComponent.$styleClass$;\n        if (styleTag) {\n            classlistAdd(rctx, elm, styleTag);\n        }\n        if (tag === 'q:slot') {\n            setSlotRef(rctx, currentComponent.$hostElement$, elm);\n            currentComponent.$slots$.push(vnode);\n        }\n    }\n    let wait;\n    if (isComponent) {\n        // Run mount hook\n        const renderQRL = props[OnRenderProp];\n        ctx.$renderQrl$ = renderQRL;\n        wait = firstRenderComponent(rctx, ctx);\n    }\n    else {\n        const setsInnerHTML = checkInnerHTML(props);\n        if (setsInnerHTML) {\n            if (qDev && vnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return elm;\n        }\n    }\n    return then(wait, () => {\n        let children = vnode.$children$;\n        if (children.length > 0) {\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotRctx = copyRenderContext(rctx);\n            slotRctx.$contexts$.push(ctx);\n            const slotMap = isComponent ? getSlots(ctx.$component$, elm) : undefined;\n            const promises = children.map((ch) => createElm(slotRctx, ch, isSvg));\n            return then(promiseAll(promises), () => {\n                let parent = elm;\n                for (const node of children) {\n                    if (slotMap) {\n                        parent = getSlotElement(slotRctx, slotMap, elm, getSlotName(node));\n                    }\n                    parent.appendChild(node.$elm$);\n                }\n                return elm;\n            });\n        }\n        return elm;\n    });\n};\nconst getSlots = (componentCtx, hostElm) => {\n    const slots = {};\n    const templates = {};\n    const slotRef = directGetAttribute(hostElm, 'q:sref');\n    const existingSlots = Array.from(hostElm.querySelectorAll(`q\\\\:slot[q\\\\:sref=\"${slotRef}\"]`));\n    const newSlots = componentCtx?.$slots$ ?? EMPTY_ARRAY;\n    const t = Array.from(hostElm.children).filter(isSlotTemplate);\n    // Map slots\n    for (const elm of existingSlots) {\n        slots[directGetAttribute(elm, 'name') ?? ''] = elm;\n    }\n    // Map virtual slots\n    for (const vnode of newSlots) {\n        slots[vnode.$props$?.name ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, 'q:slot') ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst handleStyle = (ctx, elm, _, newValue) => {\n    setAttribute(ctx, elm, 'style', stringifyClassOrStyle(newValue, false));\n    return true;\n};\nconst handleClass = (ctx, elm, _, newValue) => {\n    setAttribute(ctx, elm, 'class', stringifyClassOrStyle(newValue, true));\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, prop, newValue) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            setProperty(ctx, elm, prop, newValue);\n        }\n    }\n    return true;\n};\nconst dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\nconst setInnerHTML = (ctx, elm, _, newValue) => {\n    if (dangerouslySetInnerHTML in elm) {\n        setProperty(ctx, elm, dangerouslySetInnerHTML, newValue);\n    }\n    else if ('innerHTML' in elm) {\n        setProperty(ctx, elm, 'innerHTML', newValue);\n    }\n    return true;\n};\nconst PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    className: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n};\nconst ALLOWS_PROPS = ['class', 'className', 'style', 'id', 'q:slot'];\nconst HOST_PREFIX = 'host:';\nconst SCOPE_PREFIX = /^(host|window|document):/;\nexport const updateProperties = (rctx, ctx, expectProps, isSvg) => {\n    if (!expectProps) {\n        return false;\n    }\n    const elm = ctx.$element$;\n    const isCmp = OnRenderProp in expectProps;\n    const qwikProps = isCmp ? getPropsMutator(ctx, rctx.$containerState$) : undefined;\n    for (let key of Object.keys(expectProps)) {\n        if (key === 'children' || key === OnRenderProp) {\n            continue;\n        }\n        const newValue = expectProps[key];\n        if (key === 'ref') {\n            newValue.current = elm;\n            continue;\n        }\n        // Early exit if value didnt change\n        const oldValue = ctx.$cache$.get(key);\n        if (newValue === oldValue) {\n            continue;\n        }\n        ctx.$cache$.set(key, newValue);\n        // Check of data- or aria-\n        if (key.startsWith('data-') || key.startsWith('aria-')) {\n            setAttribute(rctx, elm, key, newValue);\n            continue;\n        }\n        if (qwikProps) {\n            const skipProperty = ALLOWS_PROPS.includes(key);\n            const hasPrefix = SCOPE_PREFIX.test(key);\n            if (!skipProperty && !hasPrefix) {\n                // Qwik props\n                qwikProps.set(key, newValue);\n                continue;\n            }\n            const hPrefixed = key.startsWith(HOST_PREFIX);\n            if (hPrefixed) {\n                key = key.slice(HOST_PREFIX.length);\n            }\n        }\n        else if (qDev && key.startsWith(HOST_PREFIX)) {\n            logWarn(`${HOST_PREFIX} prefix can not be used in non components`);\n            continue;\n        }\n        if (isOnProp(key)) {\n            setEvent(rctx, ctx, key.slice(0, -3), newValue);\n            continue;\n        }\n        if (isOn$Prop(key)) {\n            setEvent(rctx, ctx, key.slice(0, -1), $(newValue));\n            continue;\n        }\n        // Check if its an exception\n        const exception = PROP_HANDLER_MAP[key];\n        if (exception) {\n            if (exception(rctx, elm, key, newValue, oldValue)) {\n                continue;\n            }\n        }\n        // Check if property in prototype\n        if (!isSvg && key in elm) {\n            setProperty(rctx, elm, key, newValue);\n            continue;\n        }\n        // Fallback to render attribute\n        setAttribute(rctx, elm, key, newValue);\n    }\n    return ctx.$dirty$;\n};\nexport const createRenderContext = (doc, containerState, containerEl) => {\n    const ctx = {\n        $doc$: doc,\n        $containerState$: containerState,\n        $containerEl$: containerEl,\n        $hostElements$: new Set(),\n        $operations$: [],\n        $roots$: [],\n        $contexts$: [],\n        $currentComponent$: undefined,\n        $perf$: {\n            $visited$: 0,\n        },\n    };\n    return ctx;\n};\nexport const copyRenderContext = (ctx) => {\n    const newCtx = {\n        ...ctx,\n        $contexts$: [...ctx.$contexts$],\n    };\n    return newCtx;\n};\nexport const setAttribute = (ctx, el, prop, value) => {\n    const fn = () => {\n        if (value == null) {\n            el.removeAttribute(prop);\n        }\n        else {\n            directSetAttribute(el, prop, String(value));\n        }\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'set-attribute',\n        $args$: [prop, value],\n        $fn$: fn,\n    });\n};\nexport const classlistAdd = (ctx, el, hostStyleTag) => {\n    const fn = () => {\n        el.classList.add(hostStyleTag);\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'classlist-add',\n        $args$: [hostStyleTag],\n        $fn$: fn,\n    });\n};\nconst setProperty = (ctx, node, key, value) => {\n    const fn = () => {\n        try {\n            node[key] = value;\n        }\n        catch (err) {\n            logError(codeToText(QError_setProperty), { node, key, value }, err);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: node,\n        $operation$: 'set-property',\n        $args$: [key, value],\n        $fn$: fn,\n    });\n};\nconst createElement = (ctx, expectTag, isSvg) => {\n    const el = isSvg\n        ? ctx.$doc$.createElementNS(SVG_NS, expectTag)\n        : ctx.$doc$.createElement(expectTag);\n    el[CONTAINER] = ctx.$containerEl$;\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'create-element',\n        $args$: [expectTag],\n        $fn$: () => { },\n    });\n    return el;\n};\nconst insertBefore = (ctx, parent, newChild, refChild) => {\n    const fn = () => {\n        parent.insertBefore(newChild, refChild ? refChild : null);\n    };\n    ctx.$operations$.push({\n        $el$: parent,\n        $operation$: 'insert-before',\n        $args$: [newChild, refChild],\n        $fn$: fn,\n    });\n    return newChild;\n};\nexport const appendStyle = (ctx, hostElement, styleTask) => {\n    const fn = () => {\n        const containerEl = ctx.$containerEl$;\n        const stylesParent = ctx.$doc$.documentElement === containerEl ? ctx.$doc$.head ?? containerEl : containerEl;\n        const style = ctx.$doc$.createElement('style');\n        directSetAttribute(style, 'q:style', styleTask.styleId);\n        style.textContent = styleTask.content;\n        stylesParent.insertBefore(style, stylesParent.firstChild);\n    };\n    ctx.$operations$.push({\n        $el$: hostElement,\n        $operation$: 'append-style',\n        $args$: [styleTask],\n        $fn$: fn,\n    });\n};\nexport const hasStyle = (ctx, styleId) => {\n    const containerEl = ctx.$containerEl$;\n    const doc = getDocument(containerEl);\n    const hasOperation = ctx.$operations$.some((op) => {\n        if (op.$operation$ === 'append-style') {\n            const s = op.$args$[0];\n            if (isStyleTask(s)) {\n                return s.styleId === styleId;\n            }\n        }\n        return false;\n    });\n    if (hasOperation) {\n        return true;\n    }\n    const stylesParent = doc.documentElement === containerEl ? doc.head ?? containerEl : containerEl;\n    return !!stylesParent.querySelector(`style[q\\\\:style=\"${styleId}\"]`);\n};\nconst prepend = (ctx, parent, newChild) => {\n    const fn = () => {\n        parent.insertBefore(newChild, parent.firstChild);\n    };\n    ctx.$operations$.push({\n        $el$: parent,\n        $operation$: 'prepend',\n        $args$: [newChild],\n        $fn$: fn,\n    });\n};\nconst removeNode = (ctx, el) => {\n    const fn = () => {\n        const parent = el.parentNode;\n        if (parent) {\n            if (el.nodeType === 1) {\n                cleanupTree(el, ctx.$containerState$.$subsManager$);\n            }\n            parent.removeChild(el);\n        }\n        else if (qDev) {\n            logWarn('Trying to remove component already removed', el);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'remove',\n        $args$: [],\n        $fn$: fn,\n    });\n};\nexport const cleanupTree = (parent, subsManager) => {\n    if (parent.nodeName === 'Q:SLOT') {\n        return;\n    }\n    if (parent.hasAttribute(QHostAttr)) {\n        cleanupElement(parent, subsManager);\n    }\n    let child = parent.firstElementChild;\n    while (child) {\n        cleanupTree(child, subsManager);\n        child = child.nextElementSibling;\n    }\n};\nconst cleanupElement = (el, subsManager) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        cleanupContext(ctx, subsManager);\n    }\n};\nconst createTextNode = (ctx, text) => {\n    return ctx.$doc$.createTextNode(text);\n};\nexport const executeContextWithSlots = (ctx) => {\n    const before = ctx.$roots$.map((elm) => getSlots(undefined, elm));\n    executeContext(ctx);\n    const after = ctx.$roots$.map((elm) => getSlots(undefined, elm));\n    assertEqual(before.length, after.length);\n    for (let i = 0; i < before.length; i++) {\n        resolveSlotProjection(ctx, ctx.$roots$[i], before[i], after[i]);\n    }\n};\nexport const executeContext = (ctx) => {\n    for (const op of ctx.$operations$) {\n        op.$fn$();\n    }\n};\nexport const printRenderStats = (ctx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of ctx.$operations$) {\n                byOp[op.$operation$] = (byOp[op.$operation$] ?? 0) + 1;\n            }\n            const affectedElements = Array.from(new Set(ctx.$operations$.map((a) => a.$el$)));\n            const stats = {\n                byOp,\n                roots: ctx.$roots$,\n                hostElements: Array.from(ctx.$hostElements$),\n                affectedElements,\n                visitedNodes: ctx.$perf$.$visited$,\n                operations: ctx.$operations$.map((v) => [v.$operation$, v.$el$, ...v.$args$]),\n            };\n            const noOps = ctx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        if (child.nodeType === 1) {\n            const key = getKey(child);\n            if (key != null) {\n                map[key] = i;\n            }\n        }\n    }\n    return map;\n};\nconst KEY_SYMBOL = Symbol('vnode key');\nconst getKey = (el) => {\n    let key = el[KEY_SYMBOL];\n    if (key === undefined) {\n        key = el[KEY_SYMBOL] = directGetAttribute(el, 'q:key');\n    }\n    return key;\n};\nconst setKey = (el, key) => {\n    if (isString(key)) {\n        directSetAttribute(el, 'q:key', key);\n    }\n    el[KEY_SYMBOL] = key;\n};\nconst sameVnode = (elm, vnode2) => {\n    const isElement = elm.nodeType === 1;\n    if (isElement) {\n        const isSameSel = elm.localName === vnode2.$type$;\n        if (!isSameSel) {\n            return false;\n        }\n        return getKey(elm) === vnode2.$key$;\n    }\n    return elm.nodeName === vnode2.$type$;\n};\nconst isTagName = (elm, tagName) => {\n    if (elm.nodeType === 1) {\n        return elm.localName === tagName;\n    }\n    return elm.nodeName === tagName;\n};\nconst checkInnerHTML = (props) => {\n    return props && ('innerHTML' in props || dangerouslySetInnerHTML in props);\n};\nexport const stringifyClassOrStyle = (obj, isClass) => {\n    if (obj == null)\n        return '';\n    if (typeof obj == 'object') {\n        let text = '';\n        let sep = '';\n        if (isArray(obj)) {\n            if (!isClass) {\n                throw qError(QError_stringifyClassOrStyle, obj, 'style');\n            }\n            for (let i = 0; i < obj.length; i++) {\n                text += sep + obj[i];\n                sep = ' ';\n            }\n        }\n        else {\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        text += isClass\n                            ? value\n                                ? sep + key\n                                : ''\n                            : sep + fromCamelToKebabCase(key) + ':' + value;\n                        sep = isClass ? ' ' : ';';\n                    }\n                }\n            }\n        }\n        return text;\n    }\n    return String(obj);\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertEqual } from '../assert/assert';\nimport { parseQRL } from '../import/qrl';\nimport { getContext, resumeIfNeeded } from '../props/props';\nimport { getContainer, getInvokeContext } from './use-core';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexical scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @public\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    const hostElement = context.$hostElement$;\n    const qrl = (context.$qrl$ ??\n        parseQRL(decodeURIComponent(String(context.$url$)), hostElement));\n    if (qrl.$captureRef$ == null) {\n        const el = context.$element$;\n        assertDefined(el);\n        resumeIfNeeded(getContainer(el));\n        const ctx = getContext(el);\n        qrl.$captureRef$ = qrl.$capture$.map((idx) => qInflate(idx, ctx));\n    }\n    const subscriber = context.$subscriber$;\n    if (subscriber) {\n        return qrl.$captureRef$;\n    }\n    return qrl.$captureRef$;\n};\nconst qInflate = (ref, hostCtx) => {\n    const int = parseInt(ref, 10);\n    const obj = hostCtx.$refMap$.$get$(int);\n    assertEqual(hostCtx.$refMap$.$array$.length > int, true);\n    return obj;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQVksY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUc1RCxpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQTZCLEVBQUU7SUFDNUQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDO0lBQzFDLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUs7UUFDeEIsUUFBUSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBZ0IsQ0FBQztJQUNuRixJQUFJLEdBQUcsQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFO1FBQzVCLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFVLENBQUM7UUFDOUIsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xCLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFM0IsR0FBRyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsU0FBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3BFO0lBQ0QsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUN4QyxJQUFJLFVBQVUsRUFBRTtRQUNkLE9BQU8sR0FBRyxDQUFDLFlBQW9CLENBQUM7S0FDakM7SUFDRCxPQUFPLEdBQUcsQ0FBQyxZQUFvQixDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBVyxFQUFFLE9BQWlCLEVBQUUsRUFBRTtJQUNsRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0RXF1YWwgfSBmcm9tICcuLi9hc3NlcnQvYXNzZXJ0JztcbmltcG9ydCB7IHBhcnNlUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybCc7XG5pbXBvcnQgeyBnZXRDb250ZXh0LCBRQ29udGV4dCwgcmVzdW1lSWZOZWVkZWQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBnZXRDb250YWluZXIsIGdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB0eXBlIHsgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9pbXBvcnQvcXJsLWNsYXNzJztcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZUxleGljYWxTY29wZSBpbnN0ZWFkKVxuLyoqXG4gKiBVc2VkIGJ5IHRoZSBRd2lrIE9wdGltaXplciB0byByZXN0b3JlIHRoZSBsZXhpY2FsIHNjb3BlZCB2YXJpYWJsZXMuXG4gKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIG5vdCBiZSBwcmVzZW50IGluIHRoZSBhcHBsaWNhdGlvbiBzb3VyY2UgY29kZS5cbiAqXG4gKiBOT1RFOiBgdXNlTGV4aWNhbFNjb3BlYCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2tcbiAqIChiZWZvcmUgYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlTGV4aWNhbFNjb3BlID0gPFZBUlMgZXh0ZW5kcyBhbnlbXT4oKTogVkFSUyA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBnZXRJbnZva2VDb250ZXh0KCk7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gY29udGV4dC4kaG9zdEVsZW1lbnQkO1xuICBjb25zdCBxcmwgPSAoY29udGV4dC4kcXJsJCA/P1xuICAgIHBhcnNlUVJMKGRlY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGV4dC4kdXJsJCkpLCBob3N0RWxlbWVudCkpIGFzIFFSTEludGVybmFsO1xuICBpZiAocXJsLiRjYXB0dXJlUmVmJCA9PSBudWxsKSB7XG4gICAgY29uc3QgZWwgPSBjb250ZXh0LiRlbGVtZW50JCE7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCk7XG4gICAgcmVzdW1lSWZOZWVkZWQoZ2V0Q29udGFpbmVyKGVsKSEpO1xuICAgIGNvbnN0IGN0eCA9IGdldENvbnRleHQoZWwpO1xuXG4gICAgcXJsLiRjYXB0dXJlUmVmJCA9IHFybC4kY2FwdHVyZSQhLm1hcCgoaWR4KSA9PiBxSW5mbGF0ZShpZHgsIGN0eCkpO1xuICB9XG4gIGNvbnN0IHN1YnNjcmliZXIgPSBjb250ZXh0LiRzdWJzY3JpYmVyJDtcbiAgaWYgKHN1YnNjcmliZXIpIHtcbiAgICByZXR1cm4gcXJsLiRjYXB0dXJlUmVmJCBhcyBWQVJTO1xuICB9XG4gIHJldHVybiBxcmwuJGNhcHR1cmVSZWYkIGFzIFZBUlM7XG59O1xuXG5jb25zdCBxSW5mbGF0ZSA9IChyZWY6IHN0cmluZywgaG9zdEN0eDogUUNvbnRleHQpID0+IHtcbiAgY29uc3QgaW50ID0gcGFyc2VJbnQocmVmLCAxMCk7XG4gIGNvbnN0IG9iaiA9IGhvc3RDdHguJHJlZk1hcCQuJGdldCQoaW50KTtcbiAgYXNzZXJ0RXF1YWwoaG9zdEN0eC4kcmVmTWFwJC4kYXJyYXkkLmxlbmd0aCA+IGludCwgdHJ1ZSk7XG4gIHJldHVybiBvYmo7XG59O1xuIl19","import { assertDefined } from '../assert/assert';\nimport { QContainerAttr, QHostAttr } from '../util/markers';\nimport { createRenderContext, executeContextWithSlots, printRenderStats, } from './cursor';\nimport { getContext, resumeIfNeeded } from '../props/props';\nimport { qDev, qTest } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { getDocument } from '../util/dom';\nimport { renderComponent } from './render-component';\nimport { logError, logWarn } from '../util/log';\nimport { getContainer } from '../use/use-core';\nimport { runWatch, WatchFlagsIsDirty, WatchFlagsIsEffect, WatchFlagsIsWatch, } from '../use/use-watch';\nimport { createSubscriptionManager } from '../object/q-object';\nimport { then } from '../util/promises';\nimport { codeToText, QError_errorWhileRendering } from '../error/error';\nimport { directGetAttribute } from './fast-calls';\nimport { useLexicalScope } from '../use/use-lexical-scope.public';\nimport { isElement } from '../util/element';\nconst CONTAINER_STATE = Symbol('ContainerState');\nexport const getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        containerEl[CONTAINER_STATE] = set = {\n            $proxyMap$: new WeakMap(),\n            $subsManager$: createSubscriptionManager(),\n            $platform$: getPlatform(containerEl),\n            $watchNext$: new Set(),\n            $watchStaging$: new Set(),\n            $hostsNext$: new Set(),\n            $hostsStaging$: new Set(),\n            $renderPromise$: undefined,\n            $hostsRendering$: undefined,\n        };\n    }\n    return set;\n};\nexport const notifyChange = (subscriber) => {\n    if (isElement(subscriber)) {\n        notifyRender(subscriber);\n    }\n    else {\n        notifyWatch(subscriber);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time.\n * This method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The\n * default implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n * @public\n */\nconst notifyRender = async (hostElement) => {\n    assertDefined(directGetAttribute(hostElement, QHostAttr));\n    const containerEl = getContainer(hostElement);\n    assertDefined(containerEl);\n    const state = getContainerState(containerEl);\n    if (qDev &&\n        !qTest &&\n        state.$platform$.isServer &&\n        directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        logWarn('Can not rerender in server platform');\n        return undefined;\n    }\n    resumeIfNeeded(containerEl);\n    const ctx = getContext(hostElement);\n    assertDefined(ctx.$renderQrl$);\n    if (ctx.$dirty$) {\n        return state.$renderPromise$;\n    }\n    ctx.$dirty$ = true;\n    const activeRendering = state.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        state.$hostsStaging$.add(hostElement);\n        return state.$renderPromise$.then((ctx) => {\n            if (state.$hostsNext$.has(hostElement)) {\n                // TODO\n                return state.$renderPromise$;\n            }\n            else {\n                return ctx;\n            }\n        });\n    }\n    else {\n        state.$hostsNext$.add(hostElement);\n        return scheduleFrame(containerEl, state);\n    }\n};\nconst notifyWatch = (watch) => {\n    const containerEl = getContainer(watch.el);\n    const state = getContainerState(containerEl);\n    watch.f |= WatchFlagsIsDirty;\n    const activeRendering = state.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        state.$watchStaging$.add(watch);\n    }\n    else {\n        state.$watchNext$.add(watch);\n        scheduleFrame(containerEl, state);\n    }\n};\nconst scheduleFrame = (containerEl, containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = containerState.$platform$.nextTick(() => renderMarked(containerEl, containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * @alpha\n */\nexport const handleWatch = () => {\n    const [watch] = useLexicalScope();\n    notifyWatch(watch);\n};\nconst renderMarked = async (containerEl, containerState) => {\n    const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n    containerState.$hostsNext$.clear();\n    await executeWatches(containerState, (watch) => {\n        return (watch.f & WatchFlagsIsWatch) !== 0;\n    });\n    containerState.$hostsStaging$.forEach((host) => {\n        hostsRendering.add(host);\n    });\n    containerState.$hostsStaging$.clear();\n    const doc = getDocument(containerEl);\n    const platform = containerState.$platform$;\n    const renderingQueue = Array.from(hostsRendering);\n    sortNodes(renderingQueue);\n    const ctx = createRenderContext(doc, containerState, containerEl);\n    for (const el of renderingQueue) {\n        if (!ctx.$hostElements$.has(el)) {\n            ctx.$roots$.push(el);\n            try {\n                await renderComponent(ctx, getContext(el));\n            }\n            catch (e) {\n                logError(codeToText(QError_errorWhileRendering), e);\n            }\n        }\n    }\n    // Early exist, no dom operations\n    if (ctx.$operations$.length === 0) {\n        printRenderStats(ctx);\n        postRendering(containerEl, containerState, ctx);\n        return ctx;\n    }\n    return platform.raf(() => {\n        executeContextWithSlots(ctx);\n        printRenderStats(ctx);\n        postRendering(containerEl, containerState, ctx);\n        return ctx;\n    });\n};\nconst postRendering = async (containerEl, containerState, ctx) => {\n    await executeWatches(containerState, (watch, stage) => {\n        if ((watch.f & WatchFlagsIsEffect) === 0) {\n            return false;\n        }\n        if (stage) {\n            return ctx.$hostElements$.has(watch.el);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    if (containerState.$hostsNext$.size + containerState.$watchNext$.size > 0) {\n        scheduleFrame(containerEl, containerState);\n    }\n};\nconst executeWatches = async (containerState, watchPred) => {\n    const watchPromises = [];\n    containerState.$watchNext$.forEach((watch) => {\n        if (watchPred(watch, false)) {\n            watchPromises.push(then(watch.qrl.resolveLazy(watch.el), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (watchPred(watch, true)) {\n                watchPromises.push(then(watch.qrl.resolveLazy(watch.el), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runWatch(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => (a.compareDocumentPosition(b) & 2 ? 1 : -1));\n};\nconst sortWatches = (watches) => {\n    watches.sort((a, b) => {\n        if (a.el === b.el) {\n            return a.i < b.i ? -1 : 1;\n        }\n        return (a.el.compareDocumentPosition(b.el) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual } from '../assert/assert';\nimport { qError, QError_immutableProps, QError_onlyLiteralWrapped, QError_onlyObjectWrapped, QError_verifySerializable, } from '../error/error';\nimport { isQrl } from '../import/qrl-class';\nimport { notifyChange } from '../render/notify-render';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { isDocument, isElement, isNode } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { tryGetContext } from '../props/props';\nimport { RenderEvent } from '../util/markers';\nimport { isArray, isFunction, isObject } from '../util/types';\nexport const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\n/**\n * Creates a proxy which notifies of any writes.\n */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    return createProxy(target, containerState, flags, undefined);\n};\nexport const createProxy = (target, containerState, flags, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location');\n    assertEqual(containerState.$proxyMap$.has(target), false, 'Proxy was already created');\n    if (!isObject(target)) {\n        throw qError(QError_onlyObjectWrapped, target);\n    }\n    if (target.constructor !== Object && !isArray(target)) {\n        throw qError(QError_onlyLiteralWrapped, target);\n    }\n    const manager = containerState.$subsManager$.$getLocal$(target, subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager, flags));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nconst QOjectTargetSymbol = Symbol();\nconst QOjectFlagsSymbol = Symbol();\nexport const createSubscriptionManager = () => {\n    const objToSubs = new Map();\n    const subsToObjs = new Map();\n    const clearSub = (sub) => {\n        const subs = subsToObjs.get(sub);\n        if (subs) {\n            subs.forEach((s) => {\n                s.delete(sub);\n            });\n            subsToObjs.delete(sub);\n            subs.clear();\n        }\n    };\n    const tryGetLocal = (obj) => {\n        assertEqual(getProxyTarget(obj), undefined);\n        return objToSubs.get(obj);\n    };\n    const trackSubToObj = (subscriber, map) => {\n        let set = subsToObjs.get(subscriber);\n        if (!set) {\n            subsToObjs.set(subscriber, (set = new Set()));\n        }\n        set.add(map);\n    };\n    const getLocal = (obj, initialMap) => {\n        let local = tryGetLocal(obj);\n        if (local) {\n            assertEqual(initialMap, undefined);\n        }\n        else {\n            const map = !initialMap ? new Map() : initialMap;\n            map.forEach((_, key) => {\n                trackSubToObj(key, map);\n            });\n            objToSubs.set(obj, (local = {\n                $subs$: map,\n                $addSub$(subscriber, key) {\n                    if (key == null) {\n                        map.set(subscriber, null);\n                    }\n                    else {\n                        let sub = map.get(subscriber);\n                        if (sub === undefined) {\n                            map.set(subscriber, (sub = new Set()));\n                        }\n                        if (sub) {\n                            sub.add(key);\n                        }\n                    }\n                    trackSubToObj(subscriber, map);\n                },\n                $notifySubs$(key) {\n                    map.forEach((value, subscriber) => {\n                        if (value === null || !key) {\n                            notifyChange(subscriber);\n                        }\n                        else if (value.has(key)) {\n                            notifyChange(subscriber);\n                        }\n                    });\n                },\n            }));\n        }\n        return local;\n    };\n    return {\n        $tryGetLocal$: tryGetLocal,\n        $getLocal$: getLocal,\n        $clearSub$: clearSub,\n    };\n};\nclass ReadWriteProxyHandler {\n    constructor($containerState$, $manager$, $flags$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n        this.$flags$ = $flags$;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol)\n                return target;\n            if (prop === QOjectFlagsSymbol)\n                return this.$flags$;\n            return target[prop];\n        }\n        let subscriber;\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        let value = target[prop];\n        if (isMutable(value)) {\n            value = value.v;\n        }\n        else if (immutable) {\n            subscriber = null;\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$(subscriber, isA ? undefined : prop);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            verifySerializable(unwrappedNewValue);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$, prop);\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        if (oldValue !== unwrappedNewValue) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol)\n            return true;\n        if (property === QOjectFlagsSymbol)\n            return true;\n        return Object.prototype.hasOwnProperty.call(target, property);\n    }\n    ownKeys(target) {\n        let subscriber = null;\n        const invokeCtx = tryGetInvokeContext();\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (subscriber) {\n            this.$manager$.$addSub$(subscriber);\n        }\n        return Object.getOwnPropertyNames(target);\n    }\n}\nconst wrap = (value, containerState) => {\n    if (isObject(value)) {\n        if (isQrl(value)) {\n            return value;\n        }\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (isNode(nakedValue)) {\n            return value;\n        }\n        if (!shouldSerialize(nakedValue)) {\n            return value;\n        }\n        if (qDev) {\n            verifySerializable(value);\n        }\n        const proxy = containerState.$proxyMap$.get(value);\n        return proxy ? proxy : getOrCreateProxy(value, containerState, QObjectRecursive);\n    }\n    else {\n        return value;\n    }\n};\nexport const verifySerializable = (value) => {\n    if (value == null) {\n        return;\n    }\n    if (shouldSerialize(value)) {\n        switch (typeof value) {\n            case 'object':\n                if (isArray(value))\n                    return;\n                if (Object.getPrototypeOf(value) === Object.prototype)\n                    return;\n                if (isQrl(value))\n                    return;\n                if (isElement(value))\n                    return;\n                if (isDocument(value))\n                    return;\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return;\n        }\n        throw qError(QError_verifySerializable, value);\n    }\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * @alpha\n */\n// </docs>\nexport const noSerialize = (input) => {\n    noSerializeSet.add(input);\n    return input;\n};\n/**\n * @alpha\n */\nexport const immutable = (input) => {\n    return Object.freeze(input);\n};\n/**\n * @alpha\n */\nexport const mutable = (v) => {\n    return {\n        [MUTABLE]: true,\n        v,\n    };\n};\nexport const isConnected = (sub) => {\n    if (isElement(sub)) {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n    else {\n        return isConnected(sub.el);\n    }\n};\nconst MUTABLE = Symbol('mutable');\nexport const isMutable = (v) => {\n    return isObject(v) && v[MUTABLE] === true;\n};\n/**\n * @alpha\n */\nexport const unwrapProxy = (proxy) => {\n    return getProxyTarget(proxy) ?? proxy;\n};\nexport const getProxyTarget = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectTargetSymbol];\n    }\n    return undefined;\n};\nexport const getProxyFlags = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectFlagsSymbol];\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { isQrl, QRLInternal } from './qrl-class';\nimport { isArray, isFunction, isString } from '../util/types';\nimport { getDocument } from '../util/dom';\nimport { logError } from '../util/log';\nimport { then } from '../util/promises';\nimport { getPlatform } from '../platform/platform';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { codeToText, qError, QError_dynamicImportFailed, QError_qrlOrError, QError_runtimeQrlNoElement, QError_unknownTypeArgument, } from '../error/error';\nimport { qDev } from '../util/qdev';\nimport { getProxyTarget, verifySerializable } from '../object/q-object';\nlet runtimeSymbolId = 0;\nconst RUNTIME_QRL = '/runtimeQRL';\nconst INLINED_QRL = '/inlinedQRL';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\n/**\n * Lazy-load a `QRL` symbol and return the lazy-loaded value.\n *\n * @see `QRL`\n *\n * @param element - Location of the URL to resolve against. This is needed to take `q:base` into\n * account.\n * @param qrl - QRL to load.\n * @returns A resolved QRL value as a Promise.\n */\nexport const qrlImport = (element, qrl) => {\n    const qrl_ = qrl;\n    if (qrl_.$symbolRef$)\n        return qrl_.$symbolRef$;\n    if (qrl_.$symbolFn$) {\n        return (qrl_.$symbolRef$ = qrl_\n            .$symbolFn$()\n            .then((module) => (qrl_.$symbolRef$ = module[qrl_.$symbol$])));\n    }\n    else {\n        if (!element) {\n            throw new Error(`QRL '${qrl_.$chunk$}#${qrl_.$symbol$ || 'default'}' does not have an attached container`);\n        }\n        const symbol = getPlatform(element).importSymbol(element, qrl_.$chunk$, qrl_.$symbol$);\n        return (qrl_.$symbolRef$ = then(symbol, (ref) => {\n            return (qrl_.$symbolRef$ = ref);\n        }));\n    }\n};\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @see `QRL`, `$(...)`\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - a set of lexically scoped variables to capture.\n * @alpha\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    let chunk;\n    let symbolFn = null;\n    if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        let match;\n        const srcCode = String(chunkOrFn);\n        if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n            chunk = match[2];\n        }\n        else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n            const ref = 'QWIK-SELF';\n            const frames = new Error(ref).stack.split('\\n');\n            const start = frames.findIndex((f) => f.includes(ref));\n            const frame = frames[start + 2];\n            match = frame.match(EXTRACT_FILE_NAME);\n            if (!match) {\n                chunk = 'main';\n            }\n            else {\n                chunk = match[1];\n            }\n        }\n        else {\n            throw qError(QError_dynamicImportFailed, srcCode);\n        }\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    // Unwrap subscribers\n    unwrapLexicalScope(lexicalScopeCapture);\n    const qrl = new QRLInternal(chunk, symbol, null, symbolFn, null, lexicalScopeCapture);\n    const ctx = tryGetInvokeContext();\n    if (ctx && ctx.$element$) {\n        qrl.setContainer(ctx.$element$);\n    }\n    return qrl;\n};\nexport const runtimeQrl = (symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return new QRLInternal(RUNTIME_QRL, 's' + runtimeSymbolId++, symbol, null, null, lexicalScopeCapture);\n};\n/**\n * @alpha\n */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return new QRLInternal(INLINED_QRL, symbolName, symbol, null, null, unwrapLexicalScope(lexicalScopeCapture));\n};\nconst unwrapLexicalScope = (lexicalScope) => {\n    if (isArray(lexicalScope)) {\n        for (let i = 0; i < lexicalScope.length; i++) {\n            if (qDev) {\n                verifySerializable(getProxyTarget(lexicalScope[i]) ?? lexicalScope[i]);\n            }\n        }\n    }\n    return lexicalScope;\n};\nexport const stringifyQRL = (qrl, opts = {}) => {\n    const qrl_ = qrl;\n    let symbol = qrl_.$symbol$;\n    let chunk = qrl_.$chunk$;\n    const refSymbol = qrl_.$refSymbol$ ?? symbol;\n    const platform = opts.$platform$;\n    const element = opts.$element$;\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol);\n        if (result) {\n            chunk = result[1];\n            if (!qrl_.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    const parts = [chunk];\n    if (symbol && symbol !== 'default') {\n        parts.push('#', symbol);\n    }\n    const capture = qrl_.$capture$;\n    const captureRef = qrl_.$captureRef$;\n    if (opts.$getObjId$) {\n        if (captureRef && captureRef.length) {\n            const capture = captureRef.map(opts.$getObjId$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n    }\n    else if (capture && capture.length > 0) {\n        parts.push(`[${capture.join(' ')}]`);\n    }\n    const qrlString = parts.join('');\n    if (qrl_.$chunk$ === RUNTIME_QRL && element) {\n        const qrls = element.__qrls__ || (element.__qrls__ = new Set());\n        qrls.add(qrl);\n    }\n    return qrlString;\n};\nexport const qrlToUrl = (element, qrl) => {\n    return new URL(stringifyQRL(qrl), getDocument(element).baseURI);\n};\n/**\n * `./chunk#symbol[captures]\n */\nexport const parseQRL = (qrl, el) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    if (chunk === RUNTIME_QRL) {\n        logError(codeToText(QError_runtimeQrlNoElement), qrl);\n    }\n    const iQrl = new QRLInternal(chunk, symbol, null, null, capture, null);\n    if (el) {\n        iQrl.setContainer(el);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nexport const toQrlOrError = (symbolOrQrl) => {\n    if (!isQrl(symbolOrQrl)) {\n        if (typeof symbolOrQrl == 'function' || typeof symbolOrQrl == 'string') {\n            symbolOrQrl = runtimeQrl(symbolOrQrl);\n        }\n        else {\n            throw qError(QError_qrlOrError);\n        }\n    }\n    return symbolOrQrl;\n};\n//# sourceMappingURL=data:application/json;base64,","import { runtimeQrl } from './qrl';\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example `$(...)` is used to capture the callback function of `onmousemove` into\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $(() => console.log('mousemove'))\n * );\n * ```\n *\n * In this code the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function then all lexically captured values must be:\n *    - importable (vars shows up in `import` or has `export`)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n * import { importedFn } from './import/example';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(importedFn); // importedFn is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => importedFn()); // importedFn is importable\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n */\n// </docs>\nexport const $ = (expression) => {\n    return runtimeQrl(expression);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\nimport { OnRenderProp } from '../util/markers';\nimport { jsx } from '../render/jsx/jsx-runtime';\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`, `useScopedStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (onRenderQrl, options = {}) => {\n    const tagName = options.tagName ?? 'div';\n    // Return a QComponent Factory function.\n    return function QSimpleComponent(props, key) {\n        const finalKey = onRenderQrl.getHash() + ':' + (key ? key : '');\n        return jsx(tagName, { [OnRenderProp]: onRenderQrl, ...props }, finalKey);\n    };\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`, `useScopedStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount, options) => {\n    return componentQrl($(onMount), options);\n};\n//# sourceMappingURL=data:application/json;base64,","/* eslint-disable */\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { JSXNodeImpl } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * @public\n */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : EMPTY_ARRAY,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    return new JSXNodeImpl(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFrQixFQUFFLEdBQVMsRUFBTyxFQUFFO0lBQ3BFLG9GQUFvRjtJQUNwRixJQUFJLENBQUMsR0FBRztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxDQUFDLENBQ2YsSUFBdUMsRUFDdkMsS0FBbUIsRUFDbkIsR0FBRyxRQUFlO0lBRWxCLGlEQUFpRDtJQUNqRCwwQ0FBMEM7SUFDMUMsNkVBQTZFO0lBQzdFLDBEQUEwRDtJQUUxRCxNQUFNLGVBQWUsR0FBUTtRQUMzQixRQUFRLEVBQUUsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVztLQUN0RSxDQUFDO0lBRUYsSUFBSSxHQUFRLENBQUM7SUFDYixJQUFJLENBQU0sQ0FBQztJQUVYLEtBQUssQ0FBQyxJQUFJLEtBQUssRUFBRTtRQUNmLElBQUksQ0FBQyxJQUFJLEtBQUs7WUFBRSxHQUFHLEdBQUksS0FBNkIsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7WUFDbkQsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFJLEtBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDN0Q7SUFFRCxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDckQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBFTVBUWV9BUlJBWSB9IGZyb20gJy4uLy4uL3V0aWwvZmx5d2VpZ2h0JztcbmltcG9ydCB7IEpTWE5vZGVJbXBsIH0gZnJvbSAnLi9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IFF3aWtKU1ggfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQsIEpTWE5vZGUgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi8uLi91dGlsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGZsYXR0ZW5BcnJheSA9IDxUPihhcnJheTogKFQgfCBUW10pW10sIGRzdD86IFRbXSk6IFRbXSA9PiB7XG4gIC8vIFllcyB0aGlzIGZ1bmN0aW9uIGlzIGp1c3QgQXJyYXkuZmxhdCwgYnV0IHdlIG5lZWQgdG8gcnVuIG9uIG9sZCB2ZXJzaW9ucyBvZiBOb2RlLlxuICBpZiAoIWRzdCkgZHN0ID0gW107XG4gIGZvciAoY29uc3QgaXRlbSBvZiBhcnJheSkge1xuICAgIGlmIChpc0FycmF5KGl0ZW0pKSB7XG4gICAgICBmbGF0dGVuQXJyYXkoaXRlbSwgZHN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkc3Q7XG59O1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGg8UFJPUFMgZXh0ZW5kcyB7fSA9IHt9PihcbiAgdHlwZTogc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8UFJPUFM+LFxuICBwcm9wczogUFJPUFMgfCBudWxsLFxuICAuLi5jaGlsZHJlbjogYW55W11cbik6IEpTWE5vZGUge1xuICAvLyBVc2luZyBsZWdhY3kgaCgpIGpzeCB0cmFuc2Zvcm0gYW5kIG1vcnBoaW5nIGl0XG4gIC8vIHNvIGl0IGNhbiB1c2UgdGhlIG1vZGVybiB2ZG9tIHN0cnVjdHVyZVxuICAvLyBodHRwczovL3JlYWN0anMub3JnL2Jsb2cvMjAyMC8wOS8yMi9pbnRyb2R1Y2luZy10aGUtbmV3LWpzeC10cmFuc2Zvcm0uaHRtbFxuICAvLyBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvdHNjb25maWcjanN4SW1wb3J0U291cmNlXG5cbiAgY29uc3Qgbm9ybWFsaXplZFByb3BzOiBhbnkgPSB7XG4gICAgY2hpbGRyZW46IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gZmxhdHRlbkFycmF5KGNoaWxkcmVuKSA6IEVNUFRZX0FSUkFZLFxuICB9O1xuXG4gIGxldCBrZXk6IGFueTtcbiAgbGV0IGk6IGFueTtcblxuICBmb3IgKGkgaW4gcHJvcHMpIHtcbiAgICBpZiAoaSA9PSAna2V5Jykga2V5ID0gKHByb3BzIGFzIFJlY29yZDxzdHJpbmcsIGFueT4pW2ldO1xuICAgIGVsc2Ugbm9ybWFsaXplZFByb3BzW2ldID0gKHByb3BzIGFzIFJlY29yZDxzdHJpbmcsIGFueT4pW2ldO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBKU1hOb2RlSW1wbCh0eXBlLCBub3JtYWxpemVkUHJvcHMsIGtleSk7XG59XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgaCB7XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSk6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogTm9kZSwgZGF0YTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIHRleHQ6IHN0cmluZyk6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55LCBjaGlsZHJlbjogQXJyYXk8YW55Pik6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55LCBkYXRhOiBhbnksIHRleHQ6IHN0cmluZyk6IEpTWE5vZGU8YW55PjtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgoXG4gICAgdHlwZTogYW55LFxuICAgIGRhdGE6IGFueSxcbiAgICBjaGlsZHJlbjogQXJyYXk8SlNYTm9kZTxhbnk+IHwgdW5kZWZpbmVkIHwgbnVsbD5cbiAgKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChzZWw6IGFueSwgZGF0YTogYW55IHwgbnVsbCwgY2hpbGRyZW46IEpTWE5vZGU8YW55Pik6IEpTWE5vZGU8YW55PjtcblxuICBleHBvcnQgbmFtZXNwYWNlIEpTWCB7XG4gICAgZXhwb3J0IGludGVyZmFjZSBFbGVtZW50IGV4dGVuZHMgUXdpa0pTWC5FbGVtZW50IHt9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnRyaW5zaWNBdHRyaWJ1dGVzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNBdHRyaWJ1dGVzIHt9XG4gICAgZXhwb3J0IGludGVyZmFjZSBJbnRyaW5zaWNFbGVtZW50cyBleHRlbmRzIFF3aWtKU1guSW50cmluc2ljRWxlbWVudHMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRDaGlsZHJlbkF0dHJpYnV0ZSB7XG4gICAgICBjaGlsZHJlbj86IGFueTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==","import { isArray } from '../../util/types';\nimport { jsx } from './jsx-runtime';\n/**\n * @public\n */\nexport const Slot = (props) => {\n    const hasChildren = props.children || (isArray(props.children) && props.children.length > 0);\n    const newChildrem = !hasChildren\n        ? []\n        : jsx('q:fallback', {\n            children: props.children,\n        });\n    return jsx('q:slot', {\n        name: props.name,\n        children: newChildrem,\n    }, props.name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdwQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FHWixDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ2IsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0YsTUFBTSxXQUFXLEdBQUcsQ0FBQyxXQUFXO1FBQzlCLENBQUMsQ0FBQyxFQUFFO1FBQ0osQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7WUFDaEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQ3pCLENBQUMsQ0FBQztJQUVQLE9BQU8sR0FBRyxDQUNSLFFBQVEsRUFDUjtRQUNFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtRQUNoQixRQUFRLEVBQUUsV0FBVztLQUN0QixFQUNELEtBQUssQ0FBQyxJQUFJLENBQ1gsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi8uLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IGpzeCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vdHlwZXMvanN4LW5vZGUnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNsb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBhbnk7XG59PiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBoYXNDaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuIHx8IChpc0FycmF5KHByb3BzLmNoaWxkcmVuKSAmJiBwcm9wcy5jaGlsZHJlbi5sZW5ndGggPiAwKTtcbiAgY29uc3QgbmV3Q2hpbGRyZW0gPSAhaGFzQ2hpbGRyZW5cbiAgICA/IFtdXG4gICAgOiBqc3goJ3E6ZmFsbGJhY2snLCB7XG4gICAgICAgIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbixcbiAgICAgIH0pO1xuXG4gIHJldHVybiBqc3goXG4gICAgJ3E6c2xvdCcsXG4gICAge1xuICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgIGNoaWxkcmVuOiBuZXdDaGlsZHJlbSxcbiAgICB9LFxuICAgIHByb3BzLm5hbWVcbiAgKTtcbn07XG4iXX0=","/**\n * QWIK_VERSION\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBSSxVQUFrQixDQUFDLFlBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFFXSUtfVkVSU0lPTlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IChnbG9iYWxUaGlzIGFzIGFueSkuUVdJS19WRVJTSU9OIGFzIHN0cmluZztcbiJdfQ==","import { isDocument } from '../util/element';\nimport { createRenderContext, executeContext, printRenderStats } from './cursor';\nimport { isJSXNode, jsx, processData } from './jsx/jsx-runtime';\nimport { visitJsxNode } from './render';\nimport { getContainerState } from './notify-render';\nimport { getDocument } from '../util/dom';\nimport { qDev, qTest } from '../util/qdev';\nimport { version } from '../version';\nimport { QContainerAttr } from '../util/markers';\nimport { logError } from '../util/log';\nimport { runWatch, WatchFlagsIsDirty } from '../use/use-watch';\nimport { appendQwikDevTools, getContext } from '../props/props';\nimport { codeToText, QError_cannotRenderOverExistingContainer } from '../error/error';\nimport { directSetAttribute } from './fast-calls';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means\n * it always tries to reuse what is already in the DOM (rather then destroy and\n * recreate content.)\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When\n *     possible the rendering will try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @alpha\n */\nexport const render = async (parent, jsxNode) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        logError(codeToText(QError_cannotRenderOverExistingContainer));\n        return;\n    }\n    injectQContainer(containerEl);\n    const containerState = getContainerState(containerEl);\n    const ctx = createRenderContext(doc, containerState, containerEl);\n    ctx.$roots$.push(parent);\n    const processedNodes = await processData(jsxNode);\n    await visitJsxNode(ctx, parent, processedNodes, false);\n    executeContext(ctx);\n    if (!qTest) {\n        injectQwikSlotCSS(parent);\n    }\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n        printRenderStats(ctx);\n    }\n    const promises = [];\n    ctx.$hostElements$.forEach((host) => {\n        const elCtx = getContext(host);\n        elCtx.$watches$.forEach((watch) => {\n            if (watch.f & WatchFlagsIsDirty) {\n                promises.push(runWatch(watch, containerState));\n            }\n        });\n    });\n    await Promise.all(promises);\n};\nexport const injectQwikSlotCSS = (docOrElm) => {\n    const doc = getDocument(docOrElm);\n    const element = isDocument(docOrElm) ? docOrElm.head : docOrElm;\n    const style = doc.createElement('style');\n    directSetAttribute(style, 'id', 'qwik/base-styles');\n    style.textContent = `q\\\\:slot{display:contents}q\\\\:fallback,q\\\\:template{display:none}q\\\\:fallback:last-child{display:contents}`;\n    element.insertBefore(style, element.firstChild);\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version || '');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n};\n//# sourceMappingURL=data:application/json;base64,","import { getInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-store.public';\nimport { setAttribute } from '../render/cursor';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { getContext } from '../props/props';\nimport { QCtxAttr } from '../util/markers';\nimport { qError, QError_notFoundContext } from '../error/error';\n/**\n * @alpha\n */\nexport const createContext = (name) => {\n    return Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n/**\n * @alpha\n */\nexport const useContextProvider = (context, newValue) => {\n    const [value, setValue] = useSequentialScope();\n    if (value) {\n        return;\n    }\n    const invokeContext = getInvokeContext();\n    const hostElement = invokeContext.$hostElement$;\n    const renderCtx = invokeContext.$renderCtx$;\n    const ctx = getContext(hostElement);\n    let contexts = ctx.$contexts$;\n    if (!contexts) {\n        ctx.$contexts$ = contexts = new Map();\n    }\n    contexts.set(context.id, newValue);\n    const serializedContexts = [];\n    contexts.forEach((_, key) => {\n        serializedContexts.push(`${key}`);\n    });\n    setAttribute(renderCtx, hostElement, QCtxAttr, serializedContexts.join(' '));\n    setValue(true);\n};\n/**\n * @alpha\n */\nexport const useContext = (context) => {\n    const [value, setValue] = useSequentialScope();\n    if (!value) {\n        const invokeContext = getInvokeContext();\n        let hostElement = invokeContext.$hostElement$;\n        const contexts = invokeContext.$renderCtx$.$contexts$;\n        for (let i = contexts.length - 1; i >= 0; i--) {\n            const ctx = contexts[i];\n            hostElement = ctx.$element$;\n            if (ctx.$contexts$) {\n                const found = ctx.$contexts$.get(context.id);\n                if (found) {\n                    setValue(found);\n                    return found;\n                }\n            }\n        }\n        const foundEl = hostElement.closest(`[q\\\\:ctx*=\"${context.id}\"]`);\n        if (foundEl) {\n            const value = getContext(foundEl).$contexts$.get(context.id);\n            if (value) {\n                setValue(value);\n                return value;\n            }\n        }\n        throw qError(QError_notFoundContext, context.id);\n    }\n    return value;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWNvbnRleHQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM5QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBVWhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQXVCLElBQVksRUFBa0IsRUFBRTtJQUNsRixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDbkIsRUFBRSxFQUFFLG9CQUFvQixDQUFDLElBQUksQ0FBQztLQUN4QixDQUFDLENBQUM7QUFDWixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQ2hDLE9BQXVCLEVBQ3ZCLFFBQWUsRUFDZixFQUFFO0lBQ0YsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxrQkFBa0IsRUFBRSxDQUFDO0lBQy9DLElBQUksS0FBSyxFQUFFO1FBQ1QsT0FBTztLQUNSO0lBQ0QsTUFBTSxhQUFhLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUN6QyxNQUFNLFdBQVcsR0FBRyxhQUFhLENBQUMsYUFBYyxDQUFDO0lBQ2pELE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxXQUFZLENBQUM7SUFDN0MsTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3BDLElBQUksUUFBUSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUM7SUFDOUIsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLEdBQUcsQ0FBQyxVQUFVLEdBQUcsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7S0FDdkM7SUFDRCxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFbkMsTUFBTSxrQkFBa0IsR0FBYSxFQUFFLENBQUM7SUFDeEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUMxQixrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsWUFBWSxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUF1QixPQUF1QixFQUFTLEVBQUU7SUFDakYsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsR0FBRyxrQkFBa0IsRUFBRSxDQUFDO0lBQy9DLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDVixNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3pDLElBQUksV0FBVyxHQUFHLGFBQWEsQ0FBQyxhQUFjLENBQUM7UUFDL0MsTUFBTSxRQUFRLEdBQUcsYUFBYSxDQUFDLFdBQVksQ0FBQyxVQUFVLENBQUM7UUFDdkQsS0FBSyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixXQUFXLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUM1QixJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUU7Z0JBQ2xCLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDN0MsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNoQixPQUFPLEtBQUssQ0FBQztpQkFDZDthQUNGO1NBQ0Y7UUFDRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLGNBQWMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEUsSUFBSSxPQUFPLEVBQUU7WUFDWCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDOUQsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNoQixPQUFPLEtBQUssQ0FBQzthQUNkO1NBQ0Y7UUFDRCxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDbEQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXN0b3JlLnB1YmxpYyc7XG5pbXBvcnQgeyBzZXRBdHRyaWJ1dGUgfSBmcm9tICcuLi9yZW5kZXIvY3Vyc29yJztcbmltcG9ydCB7IGZyb21DYW1lbFRvS2ViYWJDYXNlIH0gZnJvbSAnLi4vdXRpbC9jYXNlJztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBRQ3R4QXR0ciB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBxRXJyb3IsIFFFcnJvcl9ub3RGb3VuZENvbnRleHQgfSBmcm9tICcuLi9lcnJvci9lcnJvcic7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ29udGV4dDxTVEFURSBleHRlbmRzIG9iamVjdD4ge1xuICByZWFkb25seSBpZDogc3RyaW5nO1xuICByZWFkb25seSBfdjogU1RBVEU7XG59XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVDb250ZXh0ID0gPFNUQVRFIGV4dGVuZHMgb2JqZWN0PihuYW1lOiBzdHJpbmcpOiBDb250ZXh0PFNUQVRFPiA9PiB7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKHtcbiAgICBpZDogZnJvbUNhbWVsVG9LZWJhYkNhc2UobmFtZSksXG4gIH0gYXMgYW55KTtcbn07XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VDb250ZXh0UHJvdmlkZXIgPSA8U1RBVEUgZXh0ZW5kcyBvYmplY3Q+KFxuICBjb250ZXh0OiBDb250ZXh0PFNUQVRFPixcbiAgbmV3VmFsdWU6IFNUQVRFXG4pID0+IHtcbiAgY29uc3QgW3ZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTZXF1ZW50aWFsU2NvcGUoKTtcbiAgaWYgKHZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGludm9rZUNvbnRleHQgPSBnZXRJbnZva2VDb250ZXh0KCk7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gaW52b2tlQ29udGV4dC4kaG9zdEVsZW1lbnQkITtcbiAgY29uc3QgcmVuZGVyQ3R4ID0gaW52b2tlQ29udGV4dC4kcmVuZGVyQ3R4JCE7XG4gIGNvbnN0IGN0eCA9IGdldENvbnRleHQoaG9zdEVsZW1lbnQpO1xuICBsZXQgY29udGV4dHMgPSBjdHguJGNvbnRleHRzJDtcbiAgaWYgKCFjb250ZXh0cykge1xuICAgIGN0eC4kY29udGV4dHMkID0gY29udGV4dHMgPSBuZXcgTWFwKCk7XG4gIH1cbiAgY29udGV4dHMuc2V0KGNvbnRleHQuaWQsIG5ld1ZhbHVlKTtcblxuICBjb25zdCBzZXJpYWxpemVkQ29udGV4dHM6IHN0cmluZ1tdID0gW107XG4gIGNvbnRleHRzLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgIHNlcmlhbGl6ZWRDb250ZXh0cy5wdXNoKGAke2tleX1gKTtcbiAgfSk7XG4gIHNldEF0dHJpYnV0ZShyZW5kZXJDdHgsIGhvc3RFbGVtZW50LCBRQ3R4QXR0ciwgc2VyaWFsaXplZENvbnRleHRzLmpvaW4oJyAnKSk7XG4gIHNldFZhbHVlKHRydWUpO1xufTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUNvbnRleHQgPSA8U1RBVEUgZXh0ZW5kcyBvYmplY3Q+KGNvbnRleHQ6IENvbnRleHQ8U1RBVEU+KTogU1RBVEUgPT4ge1xuICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IHVzZVNlcXVlbnRpYWxTY29wZSgpO1xuICBpZiAoIXZhbHVlKSB7XG4gICAgY29uc3QgaW52b2tlQ29udGV4dCA9IGdldEludm9rZUNvbnRleHQoKTtcbiAgICBsZXQgaG9zdEVsZW1lbnQgPSBpbnZva2VDb250ZXh0LiRob3N0RWxlbWVudCQhO1xuICAgIGNvbnN0IGNvbnRleHRzID0gaW52b2tlQ29udGV4dC4kcmVuZGVyQ3R4JCEuJGNvbnRleHRzJDtcbiAgICBmb3IgKGxldCBpID0gY29udGV4dHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGN0eCA9IGNvbnRleHRzW2ldO1xuICAgICAgaG9zdEVsZW1lbnQgPSBjdHguJGVsZW1lbnQkO1xuICAgICAgaWYgKGN0eC4kY29udGV4dHMkKSB7XG4gICAgICAgIGNvbnN0IGZvdW5kID0gY3R4LiRjb250ZXh0cyQuZ2V0KGNvbnRleHQuaWQpO1xuICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICBzZXRWYWx1ZShmb3VuZCk7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZvdW5kRWwgPSBob3N0RWxlbWVudC5jbG9zZXN0KGBbcVxcXFw6Y3R4Kj1cIiR7Y29udGV4dC5pZH1cIl1gKTtcbiAgICBpZiAoZm91bmRFbCkge1xuICAgICAgY29uc3QgdmFsdWUgPSBnZXRDb250ZXh0KGZvdW5kRWwpLiRjb250ZXh0cyQhLmdldChjb250ZXh0LmlkKTtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBzZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgcUVycm9yKFFFcnJvcl9ub3RGb3VuZENvbnRleHQsIGNvbnRleHQuaWQpO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn07XG4iXX0=","import { styleKey } from '../component/qrl-styles';\nimport { toQrlOrError } from '../import/qrl';\nimport { appendStyle, hasStyle } from '../render/cursor';\nimport { directSetAttribute } from '../render/fast-calls';\nimport { ComponentScopedStyles } from '../util/markers';\nimport { useRenderContext, useWaitOn } from './use-core';\nimport { useHostElement } from './use-host-element.public';\nimport { useSequentialScope } from './use-store.public';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useScopedStyles`.\n *\n * @public\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useScopedStyles`.\n *\n * @public\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useScopedStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useScopedStyles instead)\n/**\n * @see `useStyles`.\n *\n * @alpha\n */\n// </docs>\nexport const useScopedStylesQrl = (styles) => {\n    _useStyles(styles, true);\n};\n// <docs markdown=\"../readme.md#useScopedStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useScopedStyles instead)\n/**\n * @see `useStyles`.\n *\n * @alpha\n */\n// </docs>\nexport const useScopedStyles$ = /*#__PURE__*/ implicit$FirstArg(useScopedStylesQrl);\nconst _useStyles = (styles, scoped) => {\n    const [style, setStyle, index] = useSequentialScope();\n    if (style === true) {\n        return;\n    }\n    setStyle(true);\n    const renderCtx = useRenderContext();\n    const styleQrl = toQrlOrError(styles);\n    const styleId = styleKey(styleQrl, index);\n    const hostElement = useHostElement();\n    if (scoped) {\n        directSetAttribute(hostElement, ComponentScopedStyles, styleId);\n    }\n    if (!hasStyle(renderCtx, styleId)) {\n        useWaitOn(styleQrl.resolve(hostElement).then((styleText) => {\n            if (!hasStyle(renderCtx, styleId)) {\n                appendStyle(renderCtx, hostElement, {\n                    type: 'style',\n                    styleId,\n                    content: scoped ? styleText.replace(/�/g, styleId) : styleText,\n                });\n            }\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDekQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTVELDJDQUEyQztBQUMzQyx5Q0FBeUM7QUFDekMsd0NBQXdDO0FBQ3hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQW1CLEVBQVEsRUFBRTtJQUN4RCxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQztBQUVGLDJDQUEyQztBQUMzQyx5Q0FBeUM7QUFDekMsd0NBQXdDO0FBQ3hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFeEUsaURBQWlEO0FBQ2pELHlDQUF5QztBQUN6Qyw4Q0FBOEM7QUFDOUM7Ozs7R0FJRztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE1BQW1CLEVBQVEsRUFBRTtJQUM5RCxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQztBQUVGLGlEQUFpRDtBQUNqRCx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDOzs7O0dBSUc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFcEYsTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFtQixFQUFFLE1BQWUsRUFBRSxFQUFFO0lBQzFELE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxHQUFHLGtCQUFrQixFQUFFLENBQUM7SUFDdEQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1FBQ2xCLE9BQU87S0FDUjtJQUNELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNmLE1BQU0sU0FBUyxHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFDckMsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUMsTUFBTSxXQUFXLEdBQUcsY0FBYyxFQUFFLENBQUM7SUFDckMsSUFBSSxNQUFNLEVBQUU7UUFDVixrQkFBa0IsQ0FBQyxXQUFXLEVBQUUscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDakU7SUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUNqQyxTQUFTLENBQ1AsUUFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRTtnQkFDakMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUU7b0JBQ2xDLElBQUksRUFBRSxPQUFPO29CQUNiLE9BQU87b0JBQ1AsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7aUJBQy9ELENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3R5bGVLZXkgfSBmcm9tICcuLi9jb21wb25lbnQvcXJsLXN0eWxlcyc7XG5pbXBvcnQgeyB0b1FybE9yRXJyb3IgfSBmcm9tICcuLi9pbXBvcnQvcXJsJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybC5wdWJsaWMnO1xuaW1wb3J0IHsgYXBwZW5kU3R5bGUsIGhhc1N0eWxlIH0gZnJvbSAnLi4vcmVuZGVyL2N1cnNvcic7XG5pbXBvcnQgeyBkaXJlY3RTZXRBdHRyaWJ1dGUgfSBmcm9tICcuLi9yZW5kZXIvZmFzdC1jYWxscyc7XG5pbXBvcnQgeyBDb21wb25lbnRTY29wZWRTdHlsZXMgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgdXNlUmVuZGVyQ29udGV4dCwgdXNlV2FpdE9uIH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyB1c2VIb3N0RWxlbWVudCB9IGZyb20gJy4vdXNlLWhvc3QtZWxlbWVudC5wdWJsaWMnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc3RvcmUucHVibGljJztcbmltcG9ydCB7IGltcGxpY2l0JEZpcnN0QXJnIH0gZnJvbSAnLi4vdXRpbC9pbXBsaWNpdF9kb2xsYXInO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTdHlsZXNcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU3R5bGVzIGluc3RlYWQpXG4vKipcbiAqIEEgbGF6eS1sb2FkYWJsZSByZWZlcmVuY2UgdG8gYSBjb21wb25lbnQncyBzdHlsZXMuXG4gKlxuICogQ29tcG9uZW50IHN0eWxlcyBhbGxvdyBRd2lrIHRvIGxhenkgbG9hZCB0aGUgc3R5bGUgaW5mb3JtYXRpb24gZm9yIHRoZSBjb21wb25lbnQgb25seSB3aGVuXG4gKiBuZWVkZWQuIChBbmQgYXZvaWQgZG91YmxlIGxvYWRpbmcgaXQgaW4gY2FzZSBvZiBTU1IgaHlkcmF0aW9uLilcbiAqXG4gKiBgYGB0c3hcbiAqIGltcG9ydCBzdHlsZXMgZnJvbSAnLi9jb2RlLWJsb2NrLmNzcz9pbmxpbmUnO1xuICpcbiAqIGV4cG9ydCBjb25zdCBDbXBTdHlsZXMgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgdXNlU3R5bGVzJChzdHlsZXMpO1xuICpcbiAqICAgcmV0dXJuIDxIb3N0PlNvbWUgdGV4dDwvSG9zdD47XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgYHVzZVNjb3BlZFN0eWxlc2AuXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlU3R5bGVzUXJsID0gKHN0eWxlczogUVJMPHN0cmluZz4pOiB2b2lkID0+IHtcbiAgX3VzZVN0eWxlcyhzdHlsZXMsIGZhbHNlKTtcbn07XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVN0eWxlc1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VTdHlsZXMgaW5zdGVhZClcbi8qKlxuICogQSBsYXp5LWxvYWRhYmxlIHJlZmVyZW5jZSB0byBhIGNvbXBvbmVudCdzIHN0eWxlcy5cbiAqXG4gKiBDb21wb25lbnQgc3R5bGVzIGFsbG93IFF3aWsgdG8gbGF6eSBsb2FkIHRoZSBzdHlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGNvbXBvbmVudCBvbmx5IHdoZW5cbiAqIG5lZWRlZC4gKEFuZCBhdm9pZCBkb3VibGUgbG9hZGluZyBpdCBpbiBjYXNlIG9mIFNTUiBoeWRyYXRpb24uKVxuICpcbiAqIGBgYHRzeFxuICogaW1wb3J0IHN0eWxlcyBmcm9tICcuL2NvZGUtYmxvY2suY3NzP2lubGluZSc7XG4gKlxuICogZXhwb3J0IGNvbnN0IENtcFN0eWxlcyA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICB1c2VTdHlsZXMkKHN0eWxlcyk7XG4gKlxuICogICByZXR1cm4gPEhvc3Q+U29tZSB0ZXh0PC9Ib3N0PjtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSBgdXNlU2NvcGVkU3R5bGVzYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMkID0gLyojX19QVVJFX18qLyBpbXBsaWNpdCRGaXJzdEFyZyh1c2VTdHlsZXNRcmwpO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTY29wZWRTdHlsZXNcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU2NvcGVkU3R5bGVzIGluc3RlYWQpXG4vKipcbiAqIEBzZWUgYHVzZVN0eWxlc2AuXG4gKlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTY29wZWRTdHlsZXNRcmwgPSAoc3R5bGVzOiBRUkw8c3RyaW5nPik6IHZvaWQgPT4ge1xuICBfdXNlU3R5bGVzKHN0eWxlcywgdHJ1ZSk7XG59O1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTY29wZWRTdHlsZXNcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU2NvcGVkU3R5bGVzIGluc3RlYWQpXG4vKipcbiAqIEBzZWUgYHVzZVN0eWxlc2AuXG4gKlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTY29wZWRTdHlsZXMkID0gLyojX19QVVJFX18qLyBpbXBsaWNpdCRGaXJzdEFyZyh1c2VTY29wZWRTdHlsZXNRcmwpO1xuXG5jb25zdCBfdXNlU3R5bGVzID0gKHN0eWxlczogUVJMPHN0cmluZz4sIHNjb3BlZDogYm9vbGVhbikgPT4ge1xuICBjb25zdCBbc3R5bGUsIHNldFN0eWxlLCBpbmRleF0gPSB1c2VTZXF1ZW50aWFsU2NvcGUoKTtcbiAgaWYgKHN0eWxlID09PSB0cnVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNldFN0eWxlKHRydWUpO1xuICBjb25zdCByZW5kZXJDdHggPSB1c2VSZW5kZXJDb250ZXh0KCk7XG4gIGNvbnN0IHN0eWxlUXJsID0gdG9RcmxPckVycm9yKHN0eWxlcyk7XG4gIGNvbnN0IHN0eWxlSWQgPSBzdHlsZUtleShzdHlsZVFybCwgaW5kZXgpO1xuICBjb25zdCBob3N0RWxlbWVudCA9IHVzZUhvc3RFbGVtZW50KCk7XG4gIGlmIChzY29wZWQpIHtcbiAgICBkaXJlY3RTZXRBdHRyaWJ1dGUoaG9zdEVsZW1lbnQsIENvbXBvbmVudFNjb3BlZFN0eWxlcywgc3R5bGVJZCk7XG4gIH1cblxuICBpZiAoIWhhc1N0eWxlKHJlbmRlckN0eCwgc3R5bGVJZCkpIHtcbiAgICB1c2VXYWl0T24oXG4gICAgICBzdHlsZVFybC5yZXNvbHZlKGhvc3RFbGVtZW50KS50aGVuKChzdHlsZVRleHQpID0+IHtcbiAgICAgICAgaWYgKCFoYXNTdHlsZShyZW5kZXJDdHgsIHN0eWxlSWQpKSB7XG4gICAgICAgICAgYXBwZW5kU3R5bGUocmVuZGVyQ3R4LCBob3N0RWxlbWVudCwge1xuICAgICAgICAgICAgdHlwZTogJ3N0eWxlJyxcbiAgICAgICAgICAgIHN0eWxlSWQsXG4gICAgICAgICAgICBjb250ZW50OiBzY29wZWQgPyBzdHlsZVRleHQucmVwbGFjZSgv77+9L2csIHN0eWxlSWQpIDogc3R5bGVUZXh0LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0="],"names":["isNode","QRLInternal"],"mappings":"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I,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC7B,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,UAAU,iBAAiB,iBAAiB,CAAC,YAAY,EAAE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,aAAa,GAAG,CAAC,QAAQ,KAAK;AAC3C,IAAI,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;AAChC,CAAC,CAAC;AAgCF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,KAAK,GAAG,CAAC,KAAK,EAAE,OAAO,KAAK;AACzC,IAAI,MAAM,EAAE,GAAG,cAAc,EAAE,CAAC;AAChC,IAAI,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;AAC/B,IAAI,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;AAC1D,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,aAAa,GAAG,CAAC,KAAK,EAAE,QAAQ,KAAK;AAClD,IAAI,MAAM,EAAE,GAAG,cAAc,EAAE,CAAC;AAChC,IAAI,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;AAC/B,IAAI,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;AACpE,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,WAAW,GAAG,CAAC,KAAK,EAAE,OAAO,KAAK;AAC/C,IAAI,MAAM,EAAE,GAAG,cAAc,EAAE,CAAC;AAChC,IAAI,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;AAC/B,IAAI,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;AACjE;;AC1QO,MAAM,kBAAkB,GAAG,CAAC,IAAI,CAAC,CAAC;AAClC,MAAM,iBAAiB,GAAG,CAAC,IAAI,CAAC,CAAC;AACjC,MAAM,iBAAiB,GAAG,CAAC,IAAI,CAAC,CAAC;AACjC,MAAM,mBAAmB,GAAG,CAAC,IAAI,CAAC,CAAC;AAO1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,WAAW,GAAG,CAAC,GAAG,EAAE,IAAI,KAAK;AAC1C,IAAI,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,kBAAkB,EAAE,CAAC;AACtD,IAAI,IAAI,CAAC,KAAK,EAAE;AAChB,QAAQ,MAAM,EAAE,GAAG,cAAc,EAAE,CAAC;AACpC,QAAQ,MAAM,cAAc,GAAG,gBAAgB,EAAE,CAAC,gBAAgB,CAAC;AACnE,QAAQ,MAAM,KAAK,GAAG;AACtB,YAAY,GAAG;AACf,YAAY,EAAE;AACd,YAAY,CAAC,EAAE,iBAAiB,GAAG,iBAAiB;AACpD,YAAY,CAAC;AACb,SAAS,CAAC;AACV,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,UAAU,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7C,QAAQ,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;AACjF,QAAQ,MAAM,QAAQ,GAAG,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC;AAC5D,QAAQ,IAAI,QAAQ,EAAE;AACtB,YAAY,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC;AAC1C,SAAS;AACT,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,SAAS,iBAAiB,iBAAiB,CAAC,WAAW,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,kBAAkB,GAAG,CAAC,GAAG,EAAE,IAAI,KAAK;AACjD,IAAI,MAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC,GAAG,kBAAkB,EAAE,CAAC;AACtD,IAAI,IAAI,CAAC,KAAK,EAAE;AAChB,QAAQ,MAAM,EAAE,GAAG,cAAc,EAAE,CAAC;AACpC,QAAQ,MAAM,KAAK,GAAG;AACtB,YAAY,GAAG;AACf,YAAY,EAAE;AACd,YAAY,CAAC,EAAE,kBAAkB;AACjC,YAAY,CAAC;AACb,SAAS,CAAC;AACV,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,UAAU,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC7C,QAAQ,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,SAAS,CAAC,CAAC;AACnD,QAAQ,MAAM,GAAG,GAAG,WAAW,EAAE,CAAC;AAClC,QAAQ,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE;AACvB,YAAY,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AAClC,SAAS;AACT,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,gBAAgB,iBAAiB,iBAAiB,CAAC,kBAAkB,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,iBAAiB,GAAG,CAAC,QAAQ,KAAK;AAC/C,IAAI,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,CAAC,KAAK,EAAE;AAChB,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC;AAC7D,QAAQ,IAAI,QAAQ,EAAE;AACtB,YAAY,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;AACzC,SAAS;AACT,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,iBAAiB,GAAG,CAAC,QAAQ,KAAK;AAC/C,IAAI,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,CAAC,KAAK,EAAE;AAChB,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC;AAC7D,QAAQ,IAAI,CAAC,QAAQ,EAAE;AACvB,YAAY,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;AACzC,SAAS;AACT,KAAK;AACL,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB,EAAE;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,WAAW,GAAG,CAAC,QAAQ,KAAK;AACzC,IAAI,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,kBAAkB,EAAE,CAAC;AACnD,IAAI,IAAI,CAAC,KAAK,EAAE;AAChB,QAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;AACvB,QAAQ,SAAS,CAAC,QAAQ,CAAC,MAAM,E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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,CAAC,GAAG,CAAC,UAAU,KAAK;AACjC,IAAI,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC;AAClC;;AC7EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,YAAY,GAAG,CAAC,WAAW,EAAE,OAAO,GAAG,EAAE,KAAK;AAC3D,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,KAAK,CAAC;AAC7C;AACA,IAAI,OAAO,SAAS,gBAAgB,CAAC,KAAK,EAAE,GAAG,EAAE;AACjD,QAAQ,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;AACxE,QAAQ,OAAO,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,YAAY,GAAG,WAAW,EAAE,GAAG,KAAK,EAAE,EAAE,QAAQ,CAAC,CAAC;AACjF,KAAK,CAAC;AACN,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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"}