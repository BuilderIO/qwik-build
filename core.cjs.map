{"version":3,"file":"core.cjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/assert/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/host.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-watch.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/q-object.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-host-element.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-document.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-ref.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js"],"sourcesContent":["/*#__PURE__*/ ((gbl) => {\n    // ensures unit tests have globalThis on Node10\n    // this will be removed from production builds\n    if (typeof globalThis === 'undefined') {\n        gbl.globalThis = gbl;\n    }\n})(typeof global !== 'undefined'\n    ? global\n    : typeof window !== 'undefined'\n        ? window\n        : typeof self !== 'undefined'\n            ? self\n            : {});\n// minification can replace the `globalThis.qDev` with `false`\n// which will remove all dev code within from the build\nexport const qDev = globalThis.qDev !== false;\nexport const qTest = !!globalThis.describe;\nexport const qGlobal = globalThis;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUMxQiwrQ0FBK0M7SUFDL0MsOENBQThDO0lBQzlDLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0tBQ3RCO0FBQ0gsQ0FBQyxDQUFDLENBQ0EsT0FBTyxNQUFNLEtBQUssV0FBVztJQUMzQixDQUFDLENBQUMsTUFBTTtJQUNSLENBQUMsQ0FBQyxPQUFPLE1BQU0sS0FBSyxXQUFXO1FBQy9CLENBQUMsQ0FBQyxNQUFNO1FBQ1IsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFdBQVc7WUFDN0IsQ0FBQyxDQUFDLElBQUk7WUFDTixDQUFDLENBQUMsRUFBRSxDQUNQLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsdURBQXVEO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBSSxVQUFrQixDQUFDLElBQUksS0FBSyxLQUFLLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBRSxVQUFrQixDQUFDLFFBQVEsQ0FBQztBQUNwRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsVUFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qI19fUFVSRV9fKi8gKChnYmw6IGFueSkgPT4ge1xuICAvLyBlbnN1cmVzIHVuaXQgdGVzdHMgaGF2ZSBnbG9iYWxUaGlzIG9uIE5vZGUxMFxuICAvLyB0aGlzIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBnYmwuZ2xvYmFsVGhpcyA9IGdibDtcbiAgfVxufSkoXG4gIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgID8gc2VsZlxuICAgIDoge31cbik7XG5cbi8vIG1pbmlmaWNhdGlvbiBjYW4gcmVwbGFjZSB0aGUgYGdsb2JhbFRoaXMucURldmAgd2l0aCBgZmFsc2VgXG4vLyB3aGljaCB3aWxsIHJlbW92ZSBhbGwgZGV2IGNvZGUgd2l0aGluIGZyb20gdGhlIGJ1aWxkXG5leHBvcnQgY29uc3QgcURldiA9IChnbG9iYWxUaGlzIGFzIGFueSkucURldiAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSAhIShnbG9iYWxUaGlzIGFzIGFueSkuZGVzY3JpYmU7XG5leHBvcnQgY29uc3QgcUdsb2JhbCA9IGdsb2JhbFRoaXMgYXMgYW55O1xuIl19","import { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n    Error.stackTraceLimit = 9999;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRTVCLElBQUksSUFBSSxFQUFFO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA5OTk5O1xufVxuIl19","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Fzc2VydC9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxhQUFhLENBQzNCLEtBQVEsRUFDUixJQUFZLEVBQ1osR0FBRyxLQUFZO0lBRWYsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLEtBQUssSUFBSSxJQUFJO1lBQUUsT0FBTztRQUMxQixNQUFNLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUN6QixNQUFXLEVBQ1gsTUFBVyxFQUNYLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRTtRQUNSLElBQUksTUFBTSxLQUFLLE1BQU07WUFBRSxPQUFPO1FBQzlCLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDbkUsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLE1BQU0sS0FBSyxJQUFJO1lBQUUsT0FBTztRQUM1QixNQUFNLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dFcnJvckFuZFN0b3AgfSBmcm9tICcuLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydERlZmluZWQ8VD4oXG4gIHZhbHVlOiBULFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZSBpcyBOb25OdWxsYWJsZTxUPiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFcXVhbChcbiAgdmFsdWUxOiBhbnksXG4gIHZhbHVlMjogYW55LFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZTEgaXMgdHlwZW9mIHZhbHVlMiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHJ1ZSh2YWx1ZTE6IGFueSwgdGV4dDogc3RyaW5nLCAuLi5wYXJ0czogYW55W10pOiBhc3NlcnRzIHZhbHVlMSBpcyB0cnVlIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUxID09PSB0cnVlKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuIl19","/**\n * @private\n */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO0lBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBWSxFQUFFO0lBQzNDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFNLEVBQWMsRUFBRTtJQUM1QyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBTSxFQUFlLEVBQUU7SUFDOUMsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBTSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGlzSHRtbEVsZW1lbnQgPSAobm9kZTogYW55KTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSAxIDogZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTZXJpYWxpemFibGVPYmplY3QgPSAodjogYW55KSA9PiB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHYpO1xuICByZXR1cm4gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodjogYW55KTogdiBpcyBhbnkgPT4ge1xuICByZXR1cm4gdiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9ICh2OiBhbnkpOiB2IGlzIGFueVtdID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAodjogYW55KTogdiBpcyBzdHJpbmcgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodjogYW55KTogdiBpcyBGdW5jdGlvbiA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSB2YWx1ZSB3aGljaCBpcyBlaXRoZXIgcmVzb2x2ZSBvciBhIHByb21pc2UuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFZhbHVlT3JQcm9taXNlPFQ+ID0gVCB8IFByb21pc2U8VD47XG4iXX0=","/**\n * State factory of the component.\n */\nexport const OnRenderProp = 'q:renderFn';\n/**\n * Component style host prefix\n */\nexport const ComponentStylesPrefixHost = '💎';\n/**\n * Component style content prefix\n */\nexport const ComponentStylesPrefixContent = '⭐️';\n/**\n * Prefix used to identify on listeners.\n */\nexport const EventPrefix = 'on:';\n/**\n * Attribute used to mark that an event listener is attached.\n */\nexport const EventAny = 'on:.';\n/**\n * `<some-element q:slot=\"...\">`\n */\nexport const QSlot = 'q:slot';\nexport const QSlotRef = 'q:sref';\nexport const QSlotName = 'q:sname';\nexport const QStyle = 'q:style';\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const RenderEvent = 'qRender';\n/**\n * `<q:slot name=\"...\">`\n */\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const ELEMENT_ID_Q_PROPS_PREFIX = '&';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUNuQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUVoQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDO0FBRTVDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO0FBRXBELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDckM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUNyQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uUmVuZGVyUHJvcCA9ICdxOnJlbmRlckZuJztcblxuLyoqXG4gKiBDb21wb25lbnQgc3R5bGUgaG9zdCBwcmVmaXhcbiAqL1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudFN0eWxlc1ByZWZpeEhvc3QgPSAn8J+Sjic7XG5cbi8qKlxuICogQ29tcG9uZW50IHN0eWxlIGNvbnRlbnQgcHJlZml4XG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ID0gJ+KtkO+4jyc7XG5cbi8qKlxuICogUHJlZml4IHVzZWQgdG8gaWRlbnRpZnkgb24gbGlzdGVuZXJzLlxuICovXG5leHBvcnQgY29uc3QgRXZlbnRQcmVmaXggPSAnb246JztcblxuLyoqXG4gKiBBdHRyaWJ1dGUgdXNlZCB0byBtYXJrIHRoYXQgYW4gZXZlbnQgbGlzdGVuZXIgaXMgYXR0YWNoZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBFdmVudEFueSA9ICdvbjouJztcbi8qKlxuICogYDxzb21lLWVsZW1lbnQgcTpzbG90PVwiLi4uXCI+YFxuICovXG5leHBvcnQgY29uc3QgUVNsb3QgPSAncTpzbG90JztcbmV4cG9ydCBjb25zdCBRU2xvdFJlZiA9ICdxOnNyZWYnO1xuZXhwb3J0IGNvbnN0IFFTbG90TmFtZSA9ICdxOnNuYW1lJztcbmV4cG9ydCBjb25zdCBRU3R5bGUgPSAncTpzdHlsZSc7XG5leHBvcnQgY29uc3QgUVNjb3BlZFN0eWxlID0gJ3E6c3N0eWxlJztcbmV4cG9ydCBjb25zdCBRQ3R4QXR0ciA9ICdxOmN0eCc7XG5cbmV4cG9ydCBjb25zdCBRQ29udGFpbmVyQXR0ciA9ICdxOmNvbnRhaW5lcic7XG5cbmV4cG9ydCBjb25zdCBRQ29udGFpbmVyU2VsZWN0b3IgPSAnW3FcXFxcOmNvbnRhaW5lcl0nO1xuXG5leHBvcnQgY29uc3QgUmVuZGVyRXZlbnQgPSAncVJlbmRlcic7XG4vKipcbiAqIGA8cTpzbG90IG5hbWU9XCIuLi5cIj5gXG4gKi9cbmV4cG9ydCBjb25zdCBRU2xvdEluZXJ0TmFtZSA9ICdcXHUwMDAwJztcblxuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSUQgPSAncTppZCc7XG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRF9TRUxFQ1RPUiA9ICdbcVxcXFw6aWRdJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1BSRUZJWCA9ICcjJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1FfUFJPUFNfUFJFRklYID0gJyYnO1xuIl19","import { assertDefined } from '../assert/assert';\nexport const getDocument = (node) => {\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFVLEVBQVksRUFBRTtJQUNsRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtRQUNuQyxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUU7UUFDdkIsT0FBTyxJQUFnQixDQUFDO0tBQ3pCO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMvQixhQUFhLENBQUMsR0FBRyxFQUFFLHFCQUFxQixDQUFDLENBQUM7SUFDMUMsT0FBTyxHQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vYXNzZXJ0L2Fzc2VydCc7XG5cbmV4cG9ydCBjb25zdCBnZXREb2N1bWVudCA9IChub2RlOiBOb2RlKTogRG9jdW1lbnQgPT4ge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBub2RlIGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MsICdkb2MgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIHJldHVybiBkb2MhO1xufTtcbiJdfQ==","import { isArray } from '../util/types';\nimport { assertDefined } from '../assert/assert';\nimport { QContainerSelector, RenderEvent } from '../util/markers';\nimport { getDocument } from '../util/dom';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nlet _context;\nexport const CONTAINER = Symbol('container');\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            const element = context[0];\n            return (document.__q_context__ = newInvokeContext(getDocument(element), undefined, element, context[1], context[2]));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = getInvokeContext();\n    if (ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$waitOn$, `invoke: $waitOn$ must be defined`, ctx);\n    assertDefined(ctx.$renderCtx$, `invoke: $renderCtx$ must be defined`, ctx);\n    assertDefined(ctx.$doc$, `invoke: $doc$ must be defined`, ctx);\n    assertDefined(ctx.$subscriber$, `invoke: $subscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport const useInvoke = (context, fn, ...args) => {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(null, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n};\nexport const newInvokeContext = (doc, hostElement, element, event, url) => {\n    return {\n        $seq$: 0,\n        $doc$: doc,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $url$: url || null,\n        $qrl$: undefined,\n    };\n};\nexport const getContainer = (el) => {\n    let container = el[CONTAINER];\n    if (!container) {\n        container = el.closest(QContainerSelector);\n        el[CONTAINER] = container;\n    }\n    return container;\n};\n//# sourceMappingURL=data:application/json;base64,","export const isNode = (value) => {\n    return value && typeof value.nodeType == 'number';\n};\nexport const isDocument = (value) => {\n    return value && value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return isNode(value) && value.nodeType === 1;\n};\nexport const isText = (value) => {\n    return isNode(value) && value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return isNode(value) && value.nodeType === 9;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVSxFQUFxQixFQUFFO0lBQzFELE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVUsRUFBb0IsRUFBRTtJQUN4RCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFO0lBQ3hELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQy9DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc05vZGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09ICdudW1iZXInO1xufTtcbmV4cG9ydCBjb25zdCBpc0RvY3VtZW50ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBEb2N1bWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gOTtcbn07XG5leHBvcnQgY29uc3QgaXNFbGVtZW50ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDE7XG59O1xuZXhwb3J0IGNvbnN0IGlzVGV4dCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgVGV4dCA9PiB7XG4gIHJldHVybiBpc05vZGUodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSAzO1xufTtcbmV4cG9ydCBjb25zdCBpc0NvbW1lbnQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIENvbW1lbnQgPT4ge1xuICByZXR1cm4gaXNOb2RlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gOTtcbn07XG4iXX0=","export const isPromise = (value) => {\n    return value instanceof Promise;\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const promise = call();\n        if (isPromise(promise)) {\n            return promise.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(promise);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const then = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsT0FBTyxLQUFLLFlBQVksT0FBTyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixJQUE2QixFQUM3QixNQUE4QyxFQUM5QyxRQUE0QixFQUNMLEVBQUU7SUFDekIsSUFBSTtRQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDOUM7YUFBTTtZQUNMLE9BQU8sTUFBTSxDQUFDLE9BQWMsQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQ2xCLE9BQTBCLEVBQzFCLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFjLENBQUMsQ0FBQztBQUNuRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsUUFBVyxFQUNrRCxFQUFFO0lBQy9ELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBSSxDQUFJLEVBQXVCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBQcm9taXNlVHJlZTxUPiA9IFQgfCBQcm9taXNlPFQ+IHwgUHJvbWlzZTxUW10+IHwgQXJyYXk8UHJvbWlzZVRyZWU8VD4+O1xuXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlPGFueT4gPT4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhZmVDYWxsID0gPFQsIEIsIEM+KFxuICBjYWxsOiAoKSA9PiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPixcbiAgcmVqZWN0Rm46IChyZWFzb246IGFueSkgPT4gQ1xuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9taXNlID0gY2FsbCgpO1xuICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVqZWN0Rm4oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0aGVuID0gPFQsIEI+KFxuICBwcm9taXNlOiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPlxuKTogVmFsdWVPclByb21pc2U8Qj4gPT4ge1xuICByZXR1cm4gaXNQcm9taXNlKHByb21pc2UpID8gcHJvbWlzZS50aGVuKHRoZW5GbiBhcyBhbnkpIDogdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlQWxsID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogQXdhaXRlZDxUW1BdPiB9PiA9PiB7XG4gIGNvbnN0IGhhc1Byb21pc2UgPSBwcm9taXNlcy5zb21lKGlzUHJvbWlzZSk7XG4gIGlmIChoYXNQcm9taXNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzTm90TnVsbGFibGUgPSA8VD4odjogVCk6IHYgaXMgTm9uTnVsbGFibGU8VD4gPT4ge1xuICByZXR1cm4gdiAhPSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gKHRpbWVvdXQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICB9KTtcbn07XG4iXX0=","import { getContainer } from '../use/use-core';\nimport { getDocument } from '../util/dom';\nimport { isObject } from '../util/types';\nexport const createPlatform = (doc) => {\n    const moduleCache = new Map();\n    return {\n        isServer: false,\n        importSymbol(element, url, symbolName) {\n            const urlDoc = toUrl(doc, element, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            const mod = moduleCache.get(importURL);\n            if (mod) {\n                return mod[symbolName];\n            }\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                mod = findModule(mod);\n                moduleCache.set(importURL, mod);\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol() {\n            return undefined;\n        },\n    };\n};\nconst findModule = (module) => {\n    return Object.values(module).find(isModule) || module;\n};\nconst isModule = (module) => {\n    return isObject(module) && module[Symbol.toStringTag] === 'Module';\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *    - `Element` use `base.ownerDocument.baseURI`\n *    - `Document` use `base.baseURI`\n *    - `string` use `base` as is\n *    - `QConfig` use `base.baseURI`\n * @param url - relative URL\n * @returns fully qualified URL.\n */\nexport const toUrl = (doc, element, url) => {\n    const containerEl = getContainer(element);\n    const base = new URL(containerEl?.getAttribute('q:base') ?? doc.baseURI, doc.baseURI);\n    return new URL(url, base);\n};\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @alpha\n */\n// </docs>\nexport const setPlatform = (doc, plt) => (doc[DocumentPlatform] = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings\n * from symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but\n * is specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform`\n * is associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @alpha\n */\n// </docs>\nexport const getPlatform = (docOrNode) => {\n    const doc = getDocument(docOrNode);\n    return doc[DocumentPlatform] || (doc[DocumentPlatform] = createPlatform(doc));\n};\nexport const isServer = (doc) => {\n    return getPlatform(doc).isServer;\n};\nconst DocumentPlatform = ':platform:';\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which\n * ends in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `onRender($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - a function that should have its first argument automatically `$`.\n * @alpha\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUU5QyxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaFxuICogZW5kcyBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGVzZSBmdW5jdGlvbiBjYWxscyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAtIGBjb21wb25lbnQkKCgpID0+IHsuLi59KWAgaXMgc2FtZSBhcyBgb25SZW5kZXIoJCgoKSA9PiB7Li4ufSkpYFxuICpcbiAqIGBgYHRzeFxuICogZXhwb3J0IGZ1bmN0aW9uIG15QXBpKGNhbGxiYWNrOiBRUkw8KCkgPT4gdm9pZD4pOiB2b2lkIHtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKlxuICogZXhwb3J0IGNvbnN0IG15QXBpJCA9IGltcGxpY2l0JEZpcnN0QXJnKG15QXBpKTtcbiAqIC8vIHR5cGUgb2YgbXlBcGkkOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkXG4gKlxuICogLy8gY2FuIGJlIHVzZWQgYXM6XG4gKiBteUFwaSQoKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIHdpbGwgYmUgdHJhbnNwaWxlZCB0bzpcbiAqIC8vIEZJTEU6IDxjdXJyZW50IGZpbGU+XG4gKiBteUFwaShxcmwoJy4vY2h1bmstYWJjLmpzJywgJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIEZJTEU6IGNodW5rLWFiYy5qc1xuICogZXhwb3J0IGNvbnN0IGNhbGxiYWNrID0gKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZm4gLSBhIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGhhdmUgaXRzIGZpcnN0IGFyZ3VtZW50IGF1dG9tYXRpY2FsbHkgYCRgLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCRGaXJzdEFyZyA9IDxGSVJTVCwgUkVTVCBleHRlbmRzIGFueVtdLCBSRVQ+KFxuICBmbjogKGZpcnN0OiBRUkw8RklSU1Q+LCAuLi5yZXN0OiBSRVNUKSA9PiBSRVRcbik6ICgoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKSA9PiBSRVQpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmaXJzdDogRklSU1QsIC4uLnJlc3Q6IFJFU1QpOiBSRVQge1xuICAgIHJldHVybiBmbi5jYWxsKG51bGwsICQoZmlyc3QpLCAuLi5yZXN0KTtcbiAgfTtcbn07XG4iXX0=","import { parseQRL } from '../import/qrl';\nimport { isQrl, isSameQRL } from '../import/qrl-class';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { isArray } from '../util/types';\nimport { $ } from '../import/qrl.public';\nimport { QScopedStyle } from '../util/markers';\nconst ON_PROP_REGEX = /^(window:|document:|)on([A-Z]|-.).*\\$$/;\nexport const isOnProp = (prop) => {\n    return ON_PROP_REGEX.test(prop);\n};\nexport const addQRLListener = (ctx, prop, input) => {\n    if (!input) {\n        return undefined;\n    }\n    const value = isArray(input) ? input.map(ensureQrl) : ensureQrl(input);\n    if (!ctx.$listeners$) {\n        ctx.$listeners$ = new Map();\n    }\n    let existingListeners = ctx.$listeners$.get(prop);\n    if (!existingListeners) {\n        ctx.$listeners$.set(prop, (existingListeners = []));\n    }\n    const newQRLs = isArray(value) ? value : [value];\n    for (const value of newQRLs) {\n        const cp = value.$copy$();\n        cp.$setContainer$(ctx.$element$);\n        const capture = cp.$capture$;\n        if (capture == null) {\n            // we need to serialize the lexical scope references\n            const captureRef = cp.$captureRef$;\n            cp.$capture$ =\n                captureRef && captureRef.length\n                    ? captureRef.map((ref) => String(addToArray(ctx.$refMap$, ref)))\n                    : EMPTY_ARRAY;\n        }\n        // Important we modify the array as it is cached.\n        for (let i = 0; i < existingListeners.length; i++) {\n            const qrl = existingListeners[i];\n            if (isSameQRL(qrl, cp)) {\n                existingListeners.splice(i, 1);\n                i--;\n            }\n        }\n        existingListeners.push(cp);\n    }\n    return existingListeners;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return array.length - 1;\n    }\n    return index;\n};\nconst ensureQrl = (value) => {\n    return isQrl(value) ? value : $(value);\n};\nexport const getDomListeners = (el) => {\n    const attributes = el.attributes;\n    const listeners = new Map();\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            let array = listeners.get(name);\n            if (!array) {\n                listeners.set(name, (array = []));\n            }\n            array.push(parseQRL(value, el));\n        }\n    }\n    return listeners;\n};\nexport const getScopeIds = (el) => {\n    const scoped = el.getAttribute(QScopedStyle);\n    if (scoped) {\n        return scoped.split(' ');\n    }\n    return [];\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHMtb24uanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcHJvcHMvcHJvcHMtb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBZSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxDQUFDLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsTUFBTSxhQUFhLEdBQUcsd0NBQXdDLENBQUM7QUFFL0QsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsSUFBWSxFQUFXLEVBQUU7SUFDaEQsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUM1QixHQUFhLEVBQ2IsSUFBWSxFQUNaLEtBQVUsRUFDc0IsRUFBRTtJQUNsQyxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFDRCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2RSxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRTtRQUNwQixHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7S0FDN0I7SUFDRCxJQUFJLGlCQUFpQixHQUFHLEdB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SSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7WUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7WUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsRUFDL0I7WUFDQSxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ1YsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNuQztZQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO0tBQ0Y7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUFXLEVBQVksRUFBRTtJQUNuRCxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdDLElBQUksTUFBTSxFQUFFO1FBQ1YsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZVFSTCB9IGZyb20gJy4uL2ltcG9ydC9xcmwnO1xuaW1wb3J0IHsgaXNRcmwsIGlzU2FtZVFSTCwgUVJMSW50ZXJuYWwgfSBmcm9tICcuLi9pbXBvcnQvcXJsLWNsYXNzJztcbmltcG9ydCB7IEVNUFRZX0FSUkFZIH0gZnJvbSAnLi4vdXRpbC9mbHl3ZWlnaHQnO1xuaW1wb3J0IHR5cGUgeyBRQ29udGV4dCB9IGZyb20gJy4vcHJvcHMnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgJCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcbmltcG9ydCB7IFFTY29wZWRTdHlsZSB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5cbmNvbnN0IE9OX1BST1BfUkVHRVggPSAvXih3aW5kb3c6fGRvY3VtZW50Onwpb24oW0EtWl18LS4pLipcXCQkLztcblxuZXhwb3J0IGNvbnN0IGlzT25Qcm9wID0gKHByb3A6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gT05fUFJPUF9SRUdFWC50ZXN0KHByb3ApO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZFFSTExpc3RlbmVyID0gKFxuICBjdHg6IFFDb250ZXh0LFxuICBwcm9wOiBzdHJpbmcsXG4gIGlucHV0OiBhbnlcbik6IFFSTEludGVybmFsPGFueT5bXSB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmICghaW5wdXQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IHZhbHVlID0gaXNBcnJheShpbnB1dCkgPyBpbnB1dC5tYXAoZW5zdXJlUXJsKSA6IGVuc3VyZVFybChpbnB1dCk7XG5cbiAgaWYgKCFjdHguJGxpc3RlbmVycyQpIHtcbiAgICBjdHguJGxpc3RlbmVycyQgPSBuZXcgTWFwKCk7XG4gIH1cbiAgbGV0IGV4aXN0aW5nTGlzdGVuZXJzID0gY3R4LiRsaXN0ZW5lcnMkLmdldChwcm9wKTtcbiAgaWYgKCFleGlzdGluZ0xpc3RlbmVycykge1xuICAgIGN0eC4kbGlzdGVuZXJzJC5zZXQocHJvcCwgKGV4aXN0aW5nTGlzdGVuZXJzID0gW10pKTtcbiAgfVxuICBjb25zdCBuZXdRUkxzID0gaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG4gIGZvciAoY29uc3QgdmFsdWUgb2YgbmV3UVJMcykge1xuICAgIGNvbnN0IGNwID0gdmFsdWUuJGNvcHkkKCk7XG4gICAgY3AuJHNldENvbnRhaW5lciQoY3R4LiRlbGVtZW50JCk7XG5cbiAgICBjb25zdCBjYXB0dXJlID0gY3AuJGNhcHR1cmUkO1xuICAgIGlmIChjYXB0dXJlID09IG51bGwpIHtcbiAgICAgIC8vIHdlIG5lZWQgdG8gc2VyaWFsaXplIHRoZSBsZXhpY2FsIHNjb3BlIHJlZmVyZW5jZXNcbiAgICAgIGNvbnN0IGNhcHR1cmVSZWYgPSBjcC4kY2FwdHVyZVJlZiQ7XG4gICAgICBjcC4kY2FwdHVyZSQgPVxuICAgICAgICBjYXB0dXJlUmVmICYmIGNhcHR1cmVSZWYubGVuZ3RoXG4gICAgICAgICAgPyBjYXB0dXJlUmVmLm1hcCgocmVmKSA9PiBTdHJpbmcoYWRkVG9BcnJheShjdHguJHJlZk1hcCQsIHJlZikpKVxuICAgICAgICAgIDogRU1QVFlfQVJSQVk7XG4gICAgfVxuXG4gICAgLy8gSW1wb3J0YW50IHdlIG1vZGlmeSB0aGUgYXJyYXkgYXMgaXQgaXMgY2FjaGVkLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXhpc3RpbmdMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHFybCA9IGV4aXN0aW5nTGlzdGVuZXJzW2ldO1xuICAgICAgaWYgKGlzU2FtZVFSTChxcmwgYXMgYW55LCBjcCkpIHtcbiAgICAgICAgZXhpc3RpbmdMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgfVxuICAgIGV4aXN0aW5nTGlzdGVuZXJzLnB1c2goY3ApO1xuICB9XG4gIHJldHVybiBleGlzdGluZ0xpc3RlbmVycztcbn07XG5cbmNvbnN0IGFkZFRvQXJyYXkgPSAoYXJyYXk6IGFueVtdLCBvYmo6IGFueSkgPT4ge1xuICBjb25zdCBpbmRleCA9IGFycmF5LmluZGV4T2Yob2JqKTtcbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIGFycmF5LnB1c2gob2JqKTtcbiAgICByZXR1cm4gYXJyYXkubGVuZ3RoIC0gMTtcbiAgfVxuICByZXR1cm4gaW5kZXg7XG59O1xuXG5jb25zdCBlbnN1cmVRcmwgPSAodmFsdWU6IGFueSkgPT4ge1xuICByZXR1cm4gaXNRcmwodmFsdWUpID8gdmFsdWUgOiAoJCh2YWx1ZSkgYXMgUVJMSW50ZXJuYWwpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldERvbUxpc3RlbmVycyA9IChlbDogRWxlbWVudCk6IE1hcDxzdHJpbmcsIFFSTEludGVybmFsW10+ID0+IHtcbiAgY29uc3QgYXR0cmlidXRlcyA9IGVsLmF0dHJpYnV0ZXM7XG4gIGNvbnN0IGxpc3RlbmVyczogTWFwPHN0cmluZywgUVJMSW50ZXJuYWxbXT4gPSBuZXcgTWFwKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHsgbmFtZSwgdmFsdWUgfSA9IGF0dHJpYnV0ZXMuaXRlbShpKSE7XG4gICAgaWYgKFxuICAgICAgbmFtZS5zdGFydHNXaXRoKCdvbjonKSB8fFxuICAgICAgbmFtZS5zdGFydHNXaXRoKCdvbi13aW5kb3c6JykgfHxcbiAgICAgIG5hbWUuc3RhcnRzV2l0aCgnb24tZG9jdW1lbnQ6JylcbiAgICApIHtcbiAgICAgIGxldCBhcnJheSA9IGxpc3RlbmVycy5nZXQobmFtZSk7XG4gICAgICBpZiAoIWFycmF5KSB7XG4gICAgICAgIGxpc3RlbmVycy5zZXQobmFtZSwgKGFycmF5ID0gW10pKTtcbiAgICAgIH1cbiAgICAgIGFycmF5LnB1c2gocGFyc2VRUkwodmFsdWUsIGVsKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsaXN0ZW5lcnM7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0U2NvcGVJZHMgPSAoZWw6IEVsZW1lbnQpOiBzdHJpbmdbXSA9PiB7XG4gIGNvbnN0IHNjb3BlZCA9IGVsLmdldEF0dHJpYnV0ZShRU2NvcGVkU3R5bGUpO1xuICBpZiAoc2NvcGVkKSB7XG4gICAgcmV0dXJuIHNjb3BlZC5zcGxpdCgnICcpO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG4iXX0=","import { verifySerializable } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { qDev } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\nexport const useSequentialScope = () => {\n    const ctx = useInvokeContext();\n    const i = ctx.$seq$;\n    const hostElement = ctx.$hostElement$;\n    const elementCtx = getContext(hostElement);\n    ctx.$seq$++;\n    const set = (value) => {\n        if (qDev) {\n            verifySerializable(value);\n        }\n        return (elementCtx.$seq$[i] = value);\n    };\n    return {\n        get: elementCtx.$seq$[i],\n        set,\n        i,\n        ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBdUIsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFTbkUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDcEIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUN0QyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ1osTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFRLEVBQUUsRUFBRTtRQUN2QixJQUFJLElBQUksRUFBRTtZQUNSLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxDQUFDO0lBQ0YsT0FBTztRQUNMLEdBQUcsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4QixHQUFHO1FBQ0gsQ0FBQztRQUNELEdBQUc7S0FDSixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyaWZ5U2VyaWFsaXphYmxlIH0gZnJvbSAnLi4vb2JqZWN0L3Etb2JqZWN0JztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IFJlbmRlckludm9rZUNvbnRleHQsIHVzZUludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW50aWFsU2NvcGU8VD4ge1xuICByZWFkb25seSBnZXQ6IFQgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHNldDogKHY6IFQpID0+IFQ7XG4gIHJlYWRvbmx5IGk6IG51bWJlcjtcbiAgcmVhZG9ubHkgY3R4OiBSZW5kZXJJbnZva2VDb250ZXh0O1xufVxuXG5leHBvcnQgY29uc3QgdXNlU2VxdWVudGlhbFNjb3BlID0gPFQ+KCk6IFNlcXVlbnRpYWxTY29wZTxUPiA9PiB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgY29uc3QgaSA9IGN0eC4kc2VxJDtcbiAgY29uc3QgaG9zdEVsZW1lbnQgPSBjdHguJGhvc3RFbGVtZW50JDtcbiAgY29uc3QgZWxlbWVudEN0eCA9IGdldENvbnRleHQoaG9zdEVsZW1lbnQpO1xuICBjdHguJHNlcSQrKztcbiAgY29uc3Qgc2V0ID0gKHZhbHVlOiBUKSA9PiB7XG4gICAgaWYgKHFEZXYpIHtcbiAgICAgIHZlcmlmeVNlcmlhbGl6YWJsZSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiAoZWxlbWVudEN0eC4kc2VxJFtpXSA9IHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGVsZW1lbnRDdHguJHNlcSRbaV0sXG4gICAgc2V0LFxuICAgIGksXG4gICAgY3R4LFxuICB9O1xufTtcbiJdfQ==","import { assertQrl } from '../import/qrl-class';\nimport { getContext } from '../props/props';\nimport { addQRLListener } from '../props/props-on';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { Watch, WatchFlagsIsCleanup } from './use-watch';\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * It can be used to release resources, abort network requests, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resouces, abort network requets, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanupQrl = (unmountFn) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (!get) {\n        assertQrl(unmountFn);\n        const el = ctx.$hostElement$;\n        const watch = new Watch(WatchFlagsIsCleanup, i, el, unmountFn, undefined);\n        set(true);\n        getContext(el).$watches$.push(watch);\n    }\n};\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * It can be used to release resources, abort network requests, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resouces, abort network requets, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanup$ = /*#__PURE__*/ implicit$FirstArg(useCleanupQrl);\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<Host>` is a better\n * idea.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * @alpha\n */\n// </docs>\nexport const useOn = (event, eventQrl) => _useOn(`on:${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <Host>Profit!</Host>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => _useOn(`on-document:${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <Host>Profit!</Host>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => _useOn(`on-window:${event}`, eventQrl);\nconst _useOn = (eventName, eventQrl) => {\n    const invokeCtx = useInvokeContext();\n    const ctx = getContext(invokeCtx.$hostElement$);\n    assertQrl(eventQrl);\n    addQRLListener(ctx, eventName, eventQrl);\n};\n//# sourceMappingURL=data:application/json;base64,","export const emitEvent = (el, eventName, detail, bubbles) => {\n    if (el && typeof CustomEvent === 'function') {\n        el.dispatchEvent(new CustomEvent(eventName, {\n            detail,\n            bubbles: bubbles,\n            composed: bubbles,\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLEVBQUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLEVBQUU7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsTUFBTTtZQUNOLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1pdEV2ZW50ID0gKFxuICBlbDogRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGRldGFpbDogYW55LFxuICBidWJibGVzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKGVsICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbCxcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgY29tcG9zZWQ6IGJ1YmJsZXMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0=","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQVcsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDN0UsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUM5RCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRpcmVjdFNldEF0dHJpYnV0ZSA9IChlbDogRWxlbWVudCwgcHJvcDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEdldEF0dHJpYnV0ZSA9IChlbDogRWxlbWVudCwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7XG59O1xuIl19","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmcm9tQ2FtZWxUb0tlYmFiQ2FzZSA9ICh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC8oW0EtWl0pL2csICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufTtcbiJdfQ==","import { qDev } from '../../util/qdev';\nimport { logWarn } from '../../util/log';\nimport { isFunction, isObject, isString } from '../../util/types';\nimport { qError, QError_invalidJsxNodeType } from '../../error/error';\n/**\n * @public\n */\nexport const jsx = (type, props, key) => {\n    if (qDev) {\n        if (!isString(type) && !isFunction(type)) {\n            throw qError(QError_invalidJsxNodeType, type);\n        }\n    }\n    return new JSXNodeImpl(type, props, key);\n};\nexport const HOST_TYPE = ':host';\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, key = null) {\n        this.type = type;\n        this.props = props;\n        this.key = key;\n    }\n}\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\n/**\n * @public\n */\nexport const Fragment = (props) => props.children;\nexport { jsx as jsxs, jsx as jsxDEV };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4LXJ1bnRpbWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9qc3gtcnVudGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxNQUFNLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV0RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUNqQixJQUFPLEVBQ1AsS0FBWSxFQUNaLEdBQXFCLEVBQ1QsRUFBRTtJQUNkLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QyxNQUFNLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMvQztLQUNGO0lBQ0QsT0FBTyxJQUFJLFdBQVcsQ0FBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzlDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDO0FBRTlDLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQ1MsSUFBTyxFQUNQLEtBQTBCLEVBQzFCLE1BQThCLElBQUk7UUFGbEMsU0FBSSxHQUFKLElBQUksQ0FBRztRQUNQLFVBQUssR0FBTCxLQUFLLENBQXFCO1FBQzFCLFFBQUcsR0FBSCxHQUFHLENBQStCO0lBQ3hDLENBQUM7Q0FDTDtBQUVELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQU0sRUFBeUIsRUFBRTtJQUN6RCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxZQUFZLFdBQVcsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDNUQsT0FBTyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7WUFDeEQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE9BQU8sQ0FBQyxZQUFZLFdBQVcsQ0FBQztLQUNqQztBQUNILENBQUMsQ0FBQztBQUNGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUEwQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQWUsQ0FBQztBQUloRyxPQUFPLEVBQUUsR0FBRyxJQUFJLElBQUksRUFBRSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgdHlwZSB7IFF3aWtKU1ggfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi8uLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgbG9nV2FybiB9IGZyb20gJy4uLy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgcUVycm9yLCBRRXJyb3JfaW52YWxpZEpzeE5vZGVUeXBlIH0gZnJvbSAnLi4vLi4vZXJyb3IvZXJyb3InO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGpzeCA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8UFJPUFM+LCBQUk9QUz4oXG4gIHR5cGU6IFQsXG4gIHByb3BzOiBQUk9QUyxcbiAga2V5Pzogc3RyaW5nIHwgbnVtYmVyXG4pOiBKU1hOb2RlPFQ+ID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHR5cGUpICYmICFpc0Z1bmN0aW9uKHR5cGUpKSB7XG4gICAgICB0aHJvdyBxRXJyb3IoUUVycm9yX2ludmFsaWRKc3hOb2RlVHlwZSwgdHlwZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgSlNYTm9kZUltcGw8VD4odHlwZSwgcHJvcHMsIGtleSk7XG59O1xuXG5leHBvcnQgY29uc3QgSE9TVF9UWVBFID0gJzpob3N0JztcbmV4cG9ydCBjb25zdCBTS0lQX1JFTkRFUl9UWVBFID0gJzpza2lwUmVuZGVyJztcblxuZXhwb3J0IGNsYXNzIEpTWE5vZGVJbXBsPFQ+IGltcGxlbWVudHMgSlNYTm9kZTxUPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB0eXBlOiBULFxuICAgIHB1YmxpYyBwcm9wczogUmVjb3JkPHN0cmluZywgYW55PixcbiAgICBwdWJsaWMga2V5OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsID0gbnVsbFxuICApIHt9XG59XG5cbmV4cG9ydCBjb25zdCBpc0pTWE5vZGUgPSAobjogYW55KTogbiBpcyBKU1hOb2RlPHVua25vd24+ID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAobiBpbnN0YW5jZW9mIEpTWE5vZGVJbXBsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KG4pICYmICdrZXknIGluIG4gJiYgJ3Byb3BzJyBpbiBuICYmICd0eXBlJyBpbiBuKSB7XG4gICAgICBsb2dXYXJuKGBEdXBsaWNhdGUgaW1wbGVtZW50YXRpb25zIG9mIFwiSlNYTm9kZVwiIGZvdW5kYCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuIGluc3RhbmNlb2YgSlNYTm9kZUltcGw7XG4gIH1cbn07XG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEZyYWdtZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7IGNoaWxkcmVuPzogYW55IH0+ID0gKHByb3BzKSA9PiBwcm9wcy5jaGlsZHJlbiBhcyBhbnk7XG5cbmV4cG9ydCB0eXBlIHsgUXdpa0pTWCBhcyBKU1ggfTtcblxuZXhwb3J0IHsganN4IGFzIGpzeHMsIGpzeCBhcyBqc3hERVYgfTtcbiJdfQ==","import { fromCamelToKebabCase } from '../util/case';\nimport { getContext } from '../props/props';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { verifySerializable } from '../object/q-object';\nimport { qDev } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#createContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContext instead)\n/**\n * Create a context ID to be used in your application.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContext()` to create a `Context`. `Context` is just a serializable identifier for\n * the context. It is not the context value itself. See `useContextProvider()` and `useContext()`\n * for the values. Qwik needs a serializable ID for the context so that the it can track context\n * providers and consumers in a way that survives resumability.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContext = (name) => {\n    return Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assign use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const hostElement = ctx.$hostElement$;\n    const hostCtx = getContext(hostElement);\n    let contexts = hostCtx.$contexts$;\n    if (!contexts) {\n        hostCtx.$contexts$ = contexts = new Map();\n    }\n    if (qDev) {\n        verifySerializable(newValue);\n    }\n    contexts.set(context.id, newValue);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrive Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a\n * parent component needs to invoke `useContextProvider()` to assign a value.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return get;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    let hostElement = ctx.$hostElement$;\n    const contexts = ctx.$renderCtx$.$localStack$;\n    for (let i = contexts.length - 1; i >= 0; i--) {\n        const ctx = contexts[i];\n        hostElement = ctx.$element$;\n        if (ctx.$contexts$) {\n            const found = ctx.$contexts$.get(context.id);\n            if (found) {\n                set(found);\n                return found;\n            }\n        }\n    }\n    if (hostElement.closest) {\n        const foundEl = hostElement.closest(`[q\\\\:ctx*=\"${context.id}\"]`);\n        if (foundEl) {\n            const value = getContext(foundEl).$contexts$.get(context.id);\n            if (value) {\n                set(value);\n                return value;\n            }\n        }\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\nexport const serializeInlineContexts = (contexts) => {\n    const serializedContexts = [];\n    contexts.forEach((_, key) => {\n        serializedContexts.push(key);\n    });\n    return serializedContexts.join(' ');\n};\n//# sourceMappingURL=data:application/json;base64,","import { jsx } from '../jsx/jsx-runtime';\n/**\n * Place at the root of the component View to allow binding of attributes on the Host element.\n *\n * ```\n * <Host someAttr={someExpr} someAttrStatic=\"value\">\n *   View content implementation.\n * </Host>\n * ```\n *\n * Qwik requires that components have [docs/HOST_ELEMENTS.ts] so that it is possible to have\n * asynchronous loading point. Host element is not owned by the component. At times it is\n * desirable for the component to render additional attributes on the host element. `<Host>`\n * servers that purpose.\n *\n * @public\n */\nexport const Host = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SkipRerender = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRComment = (() => null);\n/**\n * @alpha\n */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: 'qkssr-pu' }),\n        props.children,\n        jsx(SSRComment, { data: 'qkssr-po' }),\n    ];\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9ob3N0LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFXekM7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFzQyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFRLENBQUM7QUFFL0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQTBCLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQVEsQ0FBQztBQUUzRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBd0MsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQVEsQ0FBQztBQUVuRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBMEMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUM3RSxPQUFPO1FBQ0wsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztRQUNyQyxLQUFLLENBQUMsUUFBUTtRQUNkLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUM7S0FDL0IsQ0FBQztBQUNYLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCB9IGZyb20gJy4uL2pzeC9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEhUTUxBdHRyaWJ1dGVzIH0gZnJvbSAnLi90eXBlcy9qc3gtZ2VuZXJhdGVkJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSG9zdEF0dHJpYnV0ZXMgZXh0ZW5kcyBIVE1MQXR0cmlidXRlczxIVE1MRWxlbWVudD4ge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbi8qKlxuICogUGxhY2UgYXQgdGhlIHJvb3Qgb2YgdGhlIGNvbXBvbmVudCBWaWV3IHRvIGFsbG93IGJpbmRpbmcgb2YgYXR0cmlidXRlcyBvbiB0aGUgSG9zdCBlbGVtZW50LlxuICpcbiAqIGBgYFxuICogPEhvc3Qgc29tZUF0dHI9e3NvbWVFeHByfSBzb21lQXR0clN0YXRpYz1cInZhbHVlXCI+XG4gKiAgIFZpZXcgY29udGVudCBpbXBsZW1lbnRhdGlvbi5cbiAqIDwvSG9zdD5cbiAqIGBgYFxuICpcbiAqIFF3aWsgcmVxdWlyZXMgdGhhdCBjb21wb25lbnRzIGhhdmUgW2RvY3MvSE9TVF9FTEVNRU5UUy50c10gc28gdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBoYXZlXG4gKiBhc3luY2hyb25vdXMgbG9hZGluZyBwb2ludC4gSG9zdCBlbGVtZW50IGlzIG5vdCBvd25lZCBieSB0aGUgY29tcG9uZW50LiBBdCB0aW1lcyBpdCBpc1xuICogZGVzaXJhYmxlIGZvciB0aGUgY29tcG9uZW50IHRvIHJlbmRlciBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMgb24gdGhlIGhvc3QgZWxlbWVudC4gYDxIb3N0PmBcbiAqIHNlcnZlcnMgdGhhdCBwdXJwb3NlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IEhvc3Q6IEZ1bmN0aW9uQ29tcG9uZW50PEhvc3RBdHRyaWJ1dGVzPiA9ICgocHJvcHM6IGFueSkgPT4gcHJvcHMuY2hpbGRyZW4pIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNraXBSZXJlbmRlcjogRnVuY3Rpb25Db21wb25lbnQ8e30+ID0gKChwcm9wczogYW55KSA9PiBwcm9wcy5jaGlsZHJlbikgYXMgYW55O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgU1NSQ29tbWVudDogRnVuY3Rpb25Db21wb25lbnQ8eyBkYXRhOiBzdHJpbmcgfT4gPSAoKCkgPT4gbnVsbCkgYXMgYW55O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgU1NSU3RyZWFtQmxvY2s6IEZ1bmN0aW9uQ29tcG9uZW50PHsgY2hpbGRyZW4/OiBhbnkgfT4gPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIFtcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiAncWtzc3ItcHUnIH0pLFxuICAgIHByb3BzLmNoaWxkcmVuLFxuICAgIGpzeChTU1JDb21tZW50LCB7IGRhdGE6ICdxa3Nzci1wbycgfSksXG4gIF0gYXMgYW55O1xufTtcbiJdfQ==","import { assertDefined } from '../assert/assert';\nimport { ComponentStylesPrefixContent, ELEMENT_ID, QSlot, RenderEvent } from '../util/markers';\nimport { promiseAll, safeCall, then } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { logError } from '../util/log';\nimport { isArray, isFunction, isObject, isString } from '../util/types';\nimport { tryGetContext } from '../props/props';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { intToStr } from '../object/store';\nimport { directSetAttribute } from './fast-calls';\nexport const executeComponent = (rctx, ctx) => {\n    ctx.$dirty$ = false;\n    ctx.$mounted$ = true;\n    const hostElement = ctx.$element$;\n    const onRenderQRL = ctx.$renderQrl$;\n    assertDefined(onRenderQRL, `render: host element to render must has a $renderQrl$:`, ctx);\n    const props = ctx.$props$;\n    assertDefined(props, `render: host element to render must has defined props`, ctx);\n    // Component is not dirty any more\n    rctx.$containerState$.$hostsStaging$.delete(hostElement);\n    const newCtx = copyRenderContext(rctx);\n    // Invoke render hook\n    const invocatinContext = newInvokeContext(rctx.$doc$, hostElement, hostElement, RenderEvent);\n    invocatinContext.$subscriber$ = hostElement;\n    invocatinContext.$renderCtx$ = newCtx;\n    const waitOn = (invocatinContext.$waitOn$ = []);\n    // Clean current subscription before render\n    rctx.$containerState$.$subsManager$.$clearSub$(hostElement);\n    // Resolve render function\n    const onRenderFn = onRenderQRL.$invokeFn$(rctx.$containerEl$, invocatinContext);\n    return safeCall(() => onRenderFn(props), (jsxNode) => {\n        rctx.$hostElements$.add(hostElement);\n        const waitOnPromise = promiseAll(waitOn);\n        return then(waitOnPromise, () => {\n            if (isFunction(jsxNode)) {\n                ctx.$dirty$ = false;\n                jsxNode = jsxNode();\n            }\n            else if (ctx.$dirty$) {\n                return executeComponent(rctx, ctx);\n            }\n            let componentCtx = ctx.$component$;\n            if (!componentCtx) {\n                componentCtx = ctx.$component$ = {\n                    $ctx$: ctx,\n                    $slots$: [],\n                };\n            }\n            componentCtx.$slots$ = [];\n            newCtx.$localStack$.push(ctx);\n            newCtx.$currentComponent$ = componentCtx;\n            return {\n                node: jsxNode,\n                rctx: newCtx,\n            };\n        });\n    }, (err) => {\n        logError(err);\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $doc$: doc,\n        $containerState$: containerState,\n        $containerEl$: containerState.$containerEl$,\n        $hostElements$: new Set(),\n        $operations$: [],\n        $roots$: [],\n        $localStack$: [],\n        $currentComponent$: undefined,\n        $perf$: {\n            $visited$: 0,\n        },\n    };\n    return ctx;\n};\nexport const copyRenderContext = (ctx) => {\n    const newCtx = {\n        ...ctx,\n        $localStack$: [...ctx.$localStack$],\n    };\n    return newCtx;\n};\nexport const stringifyClass = (obj, oldValue) => {\n    const oldParsed = parseClassAny(oldValue);\n    const newParsed = parseClassAny(obj);\n    return [...oldParsed.filter((s) => s.includes(ComponentStylesPrefixContent)), ...newParsed].join(' ');\n};\nexport const joinClasses = (...input) => {\n    const set = new Set();\n    input.forEach((value) => {\n        parseClassAny(value).forEach((v) => set.add(v));\n    });\n    return Array.from(set).join(' ');\n};\nexport const parseClassAny = (obj) => {\n    if (isString(obj)) {\n        return parseClassList(obj);\n    }\n    else if (isObject(obj)) {\n        if (isArray(obj)) {\n            return obj;\n        }\n        else {\n            const output = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        output.push(key);\n                    }\n                }\n            }\n            return output;\n        }\n    }\n    return [];\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => !value ? [] : value.split(parseClassListRegex);\nexport const stringifyStyle = (obj) => {\n    if (obj == null)\n        return '';\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        chunks.push(fromCamelToKebabCase(key) + ':' + value);\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$containerState$.$elementIndex$++);\n};\nexport const getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nexport const setQId = (rctx, ctx) => {\n    const id = getNextIndex(rctx);\n    ctx.$id$ = id;\n    directSetAttribute(ctx.$element$, ELEMENT_ID, id);\n};\nexport const hasStyle = (containerState, styleId) => {\n    return containerState.$styleIds$.has(styleId);\n};\nexport const ALLOWS_PROPS = ['class', 'className', 'style', 'id', QSlot];\nexport const HOST_PREFIX = 'host:';\nexport const SCOPE_PREFIX = /^(host|window|document|prevent(d|D)efault):/;\nexport const BASE_QWIK_STYLES = `q\\\\:slot{display:contents}q\\\\:fallback,q\\\\:template{display:none}q\\\\:fallback:last-child{display:contents}`;\n//# sourceMappingURL=data:application/json;base64,","export const hashCode = (text, hash = 0) => {\n    if (text.length === 0)\n        return hash;\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzaENvZGUgPSAodGV4dDogc3RyaW5nLCBoYXNoOiBudW1iZXIgPSAwKSA9PiB7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNociA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cbiAgcmV0dXJuIE51bWJlcihNYXRoLmFicyhoYXNoKSkudG9TdHJpbmcoMzYpO1xufTtcbiJdfQ==","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nexport const styleKey = (qStyles, index) => {\n    return `${hashCode(qStyles.getHash())}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join(' ');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9jb21wb25lbnQvcXJsLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHN0MsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBb0IsRUFBRSxLQUFhLEVBQVUsRUFBRTtJQUN0RSxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ25ELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ25ELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ3RELE9BQU8sNEJBQTRCLEdBQUcsT0FBTyxDQUFDO0FBQ2hELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtJQUNwRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcblxuZXhwb3J0IGNvbnN0IHN0eWxlS2V5ID0gKHFTdHlsZXM6IFFSTDxzdHJpbmc+LCBpbmRleDogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGAke2hhc2hDb2RlKHFTdHlsZXMuZ2V0SGFzaCgpKX0tJHtpbmRleH1gO1xufTtcblxuZXhwb3J0IGNvbnN0IHN0eWxlSG9zdCA9IChzdHlsZUlkOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUNvbnRlbnQgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgKyBzdHlsZUlkO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZVNTdHlsZSA9IChzY29wZUlkczogc3RyaW5nW10pID0+IHtcbiAgY29uc3QgdmFsdWUgPSBzY29wZUlkcy5qb2luKCcgJyk7XG4gIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuIl19","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { getDomListeners, getScopeIds } from '../../props/props-on';\nimport { serializeInlineContexts } from '../../use/use-context';\nimport { newInvokeContext, useInvoke } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { QCtxAttr, QScopedStyle } from '../../util/markers';\nimport { isNotNullable, isPromise, promiseAll, then } from '../../util/promises';\nimport { qDev } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { appendHeadStyle, visitJsxNode } from './visitor';\nimport { Host, SkipRerender } from '../jsx/host.public';\nimport { HOST_TYPE, isJSXNode, SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { executeComponent } from '../execute-component';\nimport { serializeSStyle, styleHost } from '../../component/qrl-styles';\nimport { directSetAttribute } from '../fast-calls';\nexport const renderComponent = (rctx, ctx) => {\n    const justMounted = !ctx.$mounted$;\n    if (!ctx.$listeners$) {\n        ctx.$listeners$ = getDomListeners(ctx.$element$);\n    }\n    if (!ctx.$scopeIds$) {\n        ctx.$scopeIds$ = getScopeIds(ctx.$element$);\n    }\n    return then(executeComponent(rctx, ctx), (res) => {\n        if (res) {\n            const hostElement = ctx.$element$;\n            const newCtx = res.rctx;\n            const invocatinContext = newInvokeContext(rctx.$doc$, hostElement, hostElement);\n            invocatinContext.$subscriber$ = hostElement;\n            invocatinContext.$renderCtx$ = newCtx;\n            if (justMounted) {\n                if (ctx.$contexts$) {\n                    directSetAttribute(hostElement, QCtxAttr, serializeInlineContexts(ctx.$contexts$));\n                }\n                if (ctx.$appendStyles$) {\n                    for (const style of ctx.$appendStyles$) {\n                        appendHeadStyle(rctx, hostElement, style);\n                    }\n                }\n                if (ctx.$scopeIds$) {\n                    const value = serializeSStyle(ctx.$scopeIds$);\n                    if (value) {\n                        directSetAttribute(hostElement, QScopedStyle, value);\n                    }\n                    for (const scope of ctx.$scopeIds$) {\n                        hostElement.classList.add(styleHost(scope));\n                    }\n                }\n            }\n            const processedJSXNode = processData(res.node, invocatinContext);\n            return then(processedJSXNode, (processedJSXNode) => {\n                return visitJsxNode(newCtx, hostElement, processedJSXNode, false);\n            });\n        }\n    });\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $children$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$children$ = $children$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const key = node.key != null ? String(node.key) : null;\n    let textType = '';\n    if (node.type === Host) {\n        textType = HOST_TYPE;\n    }\n    else if (node.type === SkipRerender) {\n        textType = SKIP_RENDER_TYPE;\n    }\n    else if (isFunction(node.type)) {\n        const res = invocationContext\n            ? useInvoke(invocationContext, () => node.type(node.props, node.key))\n            : node.type(node.props, node.key);\n        return processData(res, invocationContext);\n    }\n    else if (isString(node.type)) {\n        textType = node.type;\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, node.type);\n    }\n    let children = EMPTY_ARRAY;\n    if (node.props) {\n        const mightPromise = processData(node.props.children, invocationContext);\n        return then(mightPromise, (result) => {\n            if (result !== undefined) {\n                if (isArray(result)) {\n                    children = result;\n                }\n                else {\n                    children = [result];\n                }\n            }\n            return new ProcessedJSXNodeImpl(textType, node.props, children, key);\n        });\n    }\n    return new ProcessedJSXNodeImpl(textType, node.props, children, key);\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return then(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isString(node) || typeof node === 'number') {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { ELEMENT_ID, OnRenderProp, QSlot, QSlotName, QSlotRef, QStyle } from '../../util/markers';\nimport { cleanupContext, getContext, getPropsMutator, normalizeOnProp, tryGetContext, } from '../../props/props';\nimport { addQRLListener, getDomListeners, isOnProp } from '../../props/props-on';\nimport { isArray, isString } from '../../util/types';\nimport { promiseAll, then } from '../../util/promises';\nimport { assertDefined, assertEqual, assertTrue } from '../../assert/assert';\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { qDev } from '../../util/qdev';\nimport { codeToText, qError, QError_hostCanOnlyBeAtRoot, QError_rootNodeMustBeHTML, QError_setProperty, QError_strictHTMLChildren, } from '../../error/error';\nimport { fromCamelToKebabCase } from '../../util/case';\nimport { CONTAINER } from '../../use/use-core';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { HOST_TYPE, SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { assertQrl } from '../../import/qrl-class';\nimport { isElement } from '../../util/element';\nimport { serializeQRLs } from '../../import/qrl';\nimport { renderComponent } from './render-dom';\nimport { ALLOWS_PROPS, copyRenderContext, HOST_PREFIX, SCOPE_PREFIX, setQId, stringifyClass, stringifyStyle, } from '../execute-component';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const visitJsxNode = (ctx, elm, jsxNode, isSvg) => {\n    if (jsxNode === undefined) {\n        return smartUpdateChildren(ctx, elm, [], 'root', isSvg);\n    }\n    if (isArray(jsxNode)) {\n        return smartUpdateChildren(ctx, elm, jsxNode.flat(), 'root', isSvg);\n    }\n    else if (jsxNode.$type$ === HOST_TYPE) {\n        const isSlot = QSlotName in jsxNode.$props$;\n        const hostCtx = getContext(elm);\n        jsxNode.$elm$ = elm;\n        updateProperties(ctx, hostCtx, jsxNode.$props$, isSvg, true);\n        if (isSlot && hostCtx.$component$) {\n            directSetAttribute(elm, QSlotRef, hostCtx.$id$);\n            hostCtx.$component$.$slots$.push(jsxNode);\n        }\n        return smartUpdateChildren(ctx, elm, jsxNode.$children$ || [], isSlot ? 'fallback' : 'root', isSvg);\n    }\n    else {\n        return smartUpdateChildren(ctx, elm, [jsxNode], 'root', isSvg);\n    }\n};\nexport const smartUpdateChildren = (ctx, elm, ch, mode, isSvg) => {\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        if (elm.firstChild !== null) {\n            return;\n        }\n        ch = ch[0].$children$;\n    }\n    const isHead = elm.nodeName === 'HEAD';\n    if (isHead) {\n        mode = 'head';\n    }\n    const oldCh = getChildren(elm, mode);\n    if (qDev) {\n        if (elm.nodeType === 9) {\n            if (ch.length !== 1 || ch[0].$type$ !== 'html') {\n                throw qError(QError_rootNodeMustBeHTML, ch);\n            }\n        }\n        else if (elm.nodeName === 'HTML') {\n            if (ch.length !== 2 || ch[0].$type$ !== 'head' || ch[1].$type$ !== 'body') {\n                throw qError(QError_strictHTMLChildren, ch);\n            }\n        }\n    }\n    if (oldCh.length > 0 && ch.length > 0) {\n        return updateChildren(ctx, elm, oldCh, ch, isSvg, isHead);\n    }\n    else if (ch.length > 0) {\n        return addVnodes(ctx, elm, null, ch, 0, ch.length - 1, isSvg, isHead);\n    }\n    else if (oldCh.length > 0) {\n        return removeVnodes(ctx, oldCh, 0, oldCh.length - 1);\n    }\n};\nexport const updateChildren = (ctx, parentElm, oldCh, newCh, isSvg, isHead) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newStartVnode)) {\n            results.push(patchVnode(ctx, oldStartVnode, newStartVnode, isSvg));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (sameVnode(oldEndVnode, newEndVnode)) {\n            results.push(patchVnode(ctx, oldEndVnode, newEndVnode, isSvg));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            results.push(patchVnode(ctx, oldStartVnode, newEndVnode, isSvg));\n            insertBefore(ctx, parentElm, oldStartVnode, oldEndVnode.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            results.push(patchVnode(ctx, oldEndVnode, newStartVnode, isSvg));\n            insertBefore(ctx, parentElm, oldEndVnode, oldStartVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, isSvg, isHead);\n                results.push(then(newElm, (newElm) => {\n                    insertBefore(ctx, parentElm, newElm, oldStartVnode);\n                }));\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (!isTagName(elmToMove, newStartVnode.$type$)) {\n                    const newElm = createElm(ctx, newStartVnode, isSvg, isHead);\n                    results.push(then(newElm, (newElm) => {\n                        insertBefore(ctx, parentElm, newElm, oldStartVnode);\n                    }));\n                }\n                else {\n                    results.push(patchVnode(ctx, elmToMove, newStartVnode, isSvg));\n                    oldCh[idxInOld] = undefined;\n                    insertBefore(ctx, parentElm, elmToMove, oldStartVnode);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, isSvg, isHead));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        const canRemove = parentElm.nodeName !== 'HEAD';\n        if (canRemove) {\n            wait = then(wait, () => {\n                removeVnodes(ctx, oldCh, oldStartIdx, oldEndIdx);\n            });\n        }\n    }\n    return wait;\n};\nconst isComponentNode = (node) => {\n    return node.$props$ && OnRenderProp in node.$props$;\n};\nconst getCh = (elm, filter) => {\n    return Array.from(elm.childNodes).filter(filter);\n};\nexport const getChildren = (elm, mode) => {\n    switch (mode) {\n        case 'default':\n            return getCh(elm, isNode);\n        case 'slot':\n            return getCh(elm, isChildSlot);\n        case 'root':\n            return getCh(elm, isChildComponent);\n        case 'fallback':\n            return getCh(elm, isFallback);\n        case 'head':\n            return getCh(elm, isHeadChildren);\n    }\n};\nexport const isNode = (elm) => {\n    const type = elm.nodeType;\n    return type === 1 || type === 3;\n};\nconst isFallback = (node) => {\n    return node.nodeName === 'Q:FALLBACK';\n};\nconst isHeadChildren = (node) => {\n    return isElement(node) && (node.hasAttribute('q:head') || node.nodeName === 'TITLE');\n};\nconst isChildSlot = (node) => {\n    return isNode(node) && node.nodeName !== 'Q:FALLBACK' && node.nodeName !== 'Q:TEMPLATE';\n};\nconst isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nconst isChildComponent = (node) => {\n    return isNode(node) && node.nodeName !== 'Q:TEMPLATE';\n};\nexport const splitBy = (input, condition) => {\n    const output = {};\n    for (const item of input) {\n        const key = condition(item);\n        const array = output[key] ?? (output[key] = []);\n        array.push(item);\n    }\n    return output;\n};\nexport const patchVnode = (rctx, elm, vnode, isSvg) => {\n    vnode.$elm$ = elm;\n    const tag = vnode.$type$;\n    if (tag === '#text') {\n        if (elm.data !== vnode.$text$) {\n            setProperty(rctx, elm, 'data', vnode.$text$);\n        }\n        return;\n    }\n    if (tag === HOST_TYPE) {\n        throw qError(QError_hostCanOnlyBeAtRoot);\n    }\n    if (tag === SKIP_RENDER_TYPE) {\n        return;\n    }\n    if (!isSvg) {\n        isSvg = tag === 'svg';\n    }\n    const props = vnode.$props$;\n    const ctx = getContext(elm);\n    const isComponent = isComponentNode(vnode);\n    const isSlot = !isComponent && QSlotName in props;\n    let dirty = updateProperties(rctx, ctx, props, isSvg, false);\n    if (isSvg && vnode.$type$ === 'foreignObject') {\n        isSvg = false;\n    }\n    if (isSlot) {\n        const currentComponent = rctx.$currentComponent$;\n        if (currentComponent) {\n            currentComponent.$slots$.push(vnode);\n        }\n    }\n    const ch = vnode.$children$;\n    if (isComponent) {\n        if (!dirty && !ctx.$renderQrl$ && !ctx.$element$.hasAttribute(ELEMENT_ID)) {\n            setQId(rctx, ctx);\n            ctx.$renderQrl$ = props[OnRenderProp];\n            assertQrl(ctx.$renderQrl$);\n            dirty = true;\n        }\n        const promise = dirty ? renderComponent(rctx, ctx) : undefined;\n        return then(promise, () => {\n            const currentComponent = ctx.$component$;\n            const slotMaps = getSlots(currentComponent, elm);\n            const splittedChidren = splitBy(ch, getSlotName);\n            const promises = [];\n            const slotRctx = copyRenderContext(rctx);\n            slotRctx.$localStack$.push(ctx);\n            // Mark empty slots and remove content\n            Object.entries(slotMaps.slots).forEach(([key, slotEl]) => {\n                if (slotEl && !splittedChidren[key]) {\n                    const oldCh = getChildren(slotEl, 'slot');\n                    if (oldCh.length > 0) {\n                        removeVnodes(slotRctx, oldCh, 0, oldCh.length - 1);\n                    }\n                }\n            });\n            // Mark empty slots and remove content\n            Object.entries(slotMaps.templates).forEach(([key, templateEl]) => {\n                if (templateEl && !splittedChidren[key]) {\n                    removeNode(slotRctx, templateEl);\n                    slotMaps.templates[key] = undefined;\n                }\n            });\n            // Render into slots\n            Object.entries(splittedChidren).forEach(([key, ch]) => {\n                const slotElm = getSlotElement(slotRctx, slotMaps, elm, key);\n                promises.push(smartUpdateChildren(slotRctx, slotElm, ch, 'slot', isSvg));\n            });\n            return then(promiseAll(promises), () => {\n                removeTemplates(slotRctx, slotMaps);\n            });\n        });\n    }\n    const setsInnerHTML = checkInnerHTML(props);\n    if (setsInnerHTML) {\n        if (qDev && ch.length > 0) {\n            logWarn('Node can not have children when innerHTML is set');\n        }\n        return;\n    }\n    const mode = isSlot ? 'fallback' : 'default';\n    return smartUpdateChildren(rctx, elm, ch, mode, isSvg);\n};\nconst addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, isSvg, isHead) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        promises.push(createElm(ctx, ch, isSvg, isHead));\n    }\n    return then(promiseAll(promises), (children) => {\n        for (const child of children) {\n            insertBefore(ctx, parentElm, child, before);\n        }\n    });\n};\nconst removeVnodes = (ctx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            removeNode(ctx, ch);\n        }\n    }\n};\nconst getSlotElement = (ctx, slotMaps, parentEl, slotName) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return slotEl;\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return templateEl;\n    }\n    const template = createTemplate(ctx, slotName);\n    prepend(ctx, parentEl, template);\n    slotMaps.templates[slotName] = template;\n    return template;\n};\nconst createTemplate = (ctx, slotName) => {\n    const template = createElement(ctx, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nconst removeTemplates = (ctx, slotMaps) => {\n    Object.keys(slotMaps.templates).forEach((key) => {\n        const template = slotMaps.templates[key];\n        if (template && slotMaps.slots[key] !== undefined) {\n            removeNode(ctx, template);\n            slotMaps.templates[key] = undefined;\n        }\n    });\n};\nexport const resolveSlotProjection = (ctx, hostElm, before, after) => {\n    Object.entries(before.slots).forEach(([key, slotEl]) => {\n        if (slotEl && !after.slots[key]) {\n            // Slot removed\n            // Move slot to template\n            const template = createTemplate(ctx, key);\n            const slotChildren = getChildren(slotEl, 'slot');\n            template.append(...slotChildren);\n            hostElm.insertBefore(template, hostElm.firstChild);\n            ctx.$operations$.push({\n                $el$: template,\n                $operation$: 'slot-to-template',\n                $args$: slotChildren,\n                $fn$: () => { },\n            });\n        }\n    });\n    Object.entries(after.slots).forEach(([key, slotEl]) => {\n        if (slotEl && !before.slots[key]) {\n            // Slot created\n            // Move template to slot\n            const template = before.templates[key];\n            if (template) {\n                slotEl.append(...getChildren(template, 'default'));\n                template.remove();\n                ctx.$operations$.push({\n                    $el$: slotEl,\n                    $operation$: 'template-to-slot',\n                    $args$: [template],\n                    $fn$: () => { },\n                });\n            }\n        }\n    });\n};\nconst getSlotName = (node) => {\n    return node.$props$?.[QSlot] ?? '';\n};\nconst createElm = (rctx, vnode, isSvg, isHead) => {\n    rctx.$perf$.$visited$++;\n    const tag = vnode.$type$;\n    if (tag === '#text') {\n        return (vnode.$elm$ = createTextNode(rctx, vnode.$text$));\n    }\n    if (tag === HOST_TYPE) {\n        throw qError(QError_hostCanOnlyBeAtRoot);\n    }\n    if (!isSvg) {\n        isSvg = tag === 'svg';\n    }\n    const props = vnode.$props$;\n    const isComponent = isComponentNode(vnode);\n    const isSlot = !isComponent && QSlotName in props;\n    const elm = (vnode.$elm$ = createElement(rctx, tag, isSvg));\n    const ctx = getContext(elm);\n    const hasRef = 'ref' in props;\n    setKey(elm, vnode.$key$);\n    updateProperties(rctx, ctx, props, isSvg, false);\n    if (isHead) {\n        directSetAttribute(elm, 'q:head', '');\n    }\n    if (isSvg && tag === 'foreignObject') {\n        isSvg = false;\n    }\n    if (isComponent || ctx.$listeners$ || hasRef) {\n        setQId(rctx, ctx);\n    }\n    const currentComponent = rctx.$currentComponent$;\n    if (currentComponent) {\n        const scopedIds = currentComponent.$ctx$.$scopeIds$;\n        if (scopedIds) {\n            scopedIds.forEach((styleId) => {\n                elm.classList.add(styleId);\n            });\n        }\n        if (isSlot && !isComponent) {\n            directSetAttribute(elm, QSlotRef, currentComponent.$ctx$.$id$);\n            currentComponent.$slots$.push(vnode);\n        }\n    }\n    let wait;\n    if (isComponent) {\n        // Run mount hook\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        ctx.$renderQrl$ = renderQRL;\n        wait = renderComponent(rctx, ctx);\n    }\n    else {\n        const setsInnerHTML = checkInnerHTML(props);\n        if (setsInnerHTML) {\n            if (qDev && vnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return elm;\n        }\n    }\n    return then(wait, () => {\n        const currentComponent = ctx.$component$;\n        let children = vnode.$children$;\n        if (children.length > 0) {\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotRctx = copyRenderContext(rctx);\n            slotRctx.$localStack$.push(ctx);\n            const slotMap = isComponent ? getSlots(currentComponent, elm) : undefined;\n            const promises = children.map((ch) => createElm(slotRctx, ch, isSvg, false));\n            return then(promiseAll(promises), () => {\n                let parent = elm;\n                for (const node of children) {\n                    if (slotMap) {\n                        parent = getSlotElement(slotRctx, slotMap, elm, getSlotName(node));\n                    }\n                    parent.appendChild(node.$elm$);\n                }\n                return elm;\n            });\n        }\n        return elm;\n    });\n};\nconst getSlots = (componentCtx, hostElm) => {\n    const slots = {};\n    const templates = {};\n    const slotRef = directGetAttribute(hostElm, 'q:id');\n    const query = `[q\\\\:sref=\"${slotRef}\"]`;\n    const existingSlots = Array.from(hostElm.querySelectorAll(query));\n    if (hostElm.matches(query)) {\n        existingSlots.push(hostElm);\n    }\n    const newSlots = componentCtx?.$slots$ ?? EMPTY_ARRAY;\n    const t = Array.from(hostElm.children).filter(isSlotTemplate);\n    // Map slots\n    for (const elm of existingSlots) {\n        slots[directGetAttribute(elm, QSlotName) ?? ''] = elm;\n    }\n    // Map virtual slots\n    for (const vnode of newSlots) {\n        slots[vnode.$props$[QSlotName] ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst handleStyle = (ctx, elm, _, newValue) => {\n    setAttribute(ctx, elm, 'style', stringifyStyle(newValue));\n    return true;\n};\nconst handleClass = (ctx, elm, _, newValue, oldValue) => {\n    if (!oldValue) {\n        oldValue = elm.className;\n    }\n    setAttribute(ctx, elm, 'class', stringifyClass(newValue, oldValue));\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, prop, newValue) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            setProperty(ctx, elm, prop, newValue);\n        }\n    }\n    return true;\n};\nconst dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\nconst setInnerHTML = (ctx, elm, _, newValue) => {\n    if (dangerouslySetInnerHTML in elm) {\n        setProperty(ctx, elm, dangerouslySetInnerHTML, newValue);\n    }\n    else if ('innerHTML' in elm) {\n        setProperty(ctx, elm, 'innerHTML', newValue);\n    }\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    className: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n    innerHTML: noop,\n};\nexport const updateProperties = (rctx, ctx, expectProps, isSvg, isHost) => {\n    const keys = Object.keys(expectProps);\n    if (keys.length === 0) {\n        return false;\n    }\n    let cache = ctx.$cache$;\n    const elm = ctx.$element$;\n    const isCmp = OnRenderProp in expectProps;\n    const qwikProps = isCmp ? getPropsMutator(ctx, rctx.$containerState$) : undefined;\n    for (let key of keys) {\n        if (key === 'children' || key === OnRenderProp) {\n            continue;\n        }\n        const newValue = expectProps[key];\n        if (key === 'ref') {\n            newValue.current = elm;\n            continue;\n        }\n        // Early exit if value didnt change\n        const cacheKey = isHost ? `_host:${key}` : `_:${key}`;\n        if (!cache) {\n            cache = ctx.$cache$ = new Map();\n        }\n        const oldValue = cache.get(cacheKey);\n        if (newValue === oldValue) {\n            continue;\n        }\n        cache.set(cacheKey, newValue);\n        // Check of data- or aria-\n        if (key.startsWith('data-') || key.startsWith('aria-')) {\n            setAttribute(rctx, elm, key, newValue);\n            continue;\n        }\n        if (qwikProps) {\n            const skipProperty = ALLOWS_PROPS.includes(key);\n            const hasPrefix = SCOPE_PREFIX.test(key);\n            if (!skipProperty && !hasPrefix) {\n                // Qwik props\n                qwikProps.set(key, newValue);\n                continue;\n            }\n            const hPrefixed = key.startsWith(HOST_PREFIX);\n            if (hPrefixed) {\n                key = key.slice(HOST_PREFIX.length);\n            }\n        }\n        else if (qDev && key.startsWith(HOST_PREFIX)) {\n            logWarn(`${HOST_PREFIX} prefix can not be used in non components`);\n            continue;\n        }\n        if (isOnProp(key)) {\n            setEvent(ctx, key, newValue);\n            continue;\n        }\n        // Check if its an exception\n        const exception = PROP_HANDLER_MAP[key];\n        if (exception) {\n            if (exception(rctx, elm, key, newValue, oldValue)) {\n                continue;\n            }\n        }\n        // Check if property in prototype\n        if (!isSvg && key in elm) {\n            setProperty(rctx, elm, key, newValue);\n            continue;\n        }\n        // Fallback to render attribute\n        setAttribute(rctx, elm, key, newValue);\n    }\n    if (ctx.$listeners$) {\n        ctx.$listeners$.forEach((value, key) => {\n            setAttribute(rctx, elm, fromCamelToKebabCase(key), serializeQRLs(value, ctx));\n        });\n    }\n    return ctx.$dirty$;\n};\nconst setEvent = (ctx, prop, value) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    if (!ctx.$listeners$) {\n        ctx.$listeners$ = getDomListeners(ctx.$element$);\n    }\n    addQRLListener(ctx, normalizeOnProp(prop.slice(0, -1)), value);\n};\nexport const setAttribute = (ctx, el, prop, value) => {\n    const fn = () => {\n        if (value == null || value === false) {\n            el.removeAttribute(prop);\n        }\n        else {\n            const str = value === true ? '' : String(value);\n            directSetAttribute(el, prop, str);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'set-attribute',\n        $args$: [prop, value],\n        $fn$: fn,\n    });\n};\nconst setProperty = (ctx, node, key, value) => {\n    const fn = () => {\n        try {\n            node[key] = value;\n        }\n        catch (err) {\n            logError(codeToText(QError_setProperty), { node, key, value }, err);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: node,\n        $operation$: 'set-property',\n        $args$: [key, value],\n        $fn$: fn,\n    });\n};\nconst createElement = (ctx, expectTag, isSvg) => {\n    const el = isSvg\n        ? ctx.$doc$.createElementNS(SVG_NS, expectTag)\n        : ctx.$doc$.createElement(expectTag);\n    el[CONTAINER] = ctx.$containerEl$;\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'create-element',\n        $args$: [expectTag],\n        $fn$: () => { },\n    });\n    return el;\n};\nconst insertBefore = (ctx, parent, newChild, refChild) => {\n    const fn = () => {\n        parent.insertBefore(newChild, refChild ? refChild : null);\n    };\n    ctx.$operations$.push({\n        $el$: parent,\n        $operation$: 'insert-before',\n        $args$: [newChild, refChild],\n        $fn$: fn,\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (ctx, hostElement, styleTask) => {\n    const fn = () => {\n        const containerEl = ctx.$containerEl$;\n        const isDoc = ctx.$doc$.documentElement === containerEl && !!ctx.$doc$.head;\n        const style = ctx.$doc$.createElement('style');\n        directSetAttribute(style, QStyle, styleTask.styleId);\n        style.textContent = styleTask.content;\n        if (isDoc) {\n            ctx.$doc$.head.appendChild(style);\n        }\n        else {\n            containerEl.insertBefore(style, containerEl.firstChild);\n        }\n    };\n    ctx.$containerState$.$styleIds$.add(styleTask.styleId);\n    ctx.$operations$.push({\n        $el$: hostElement,\n        $operation$: 'append-style',\n        $args$: [styleTask],\n        $fn$: fn,\n    });\n};\nconst prepend = (ctx, parent, newChild) => {\n    const fn = () => {\n        parent.insertBefore(newChild, parent.firstChild);\n    };\n    ctx.$operations$.push({\n        $el$: parent,\n        $operation$: 'prepend',\n        $args$: [newChild],\n        $fn$: fn,\n    });\n};\nconst removeNode = (ctx, el) => {\n    const fn = () => {\n        const parent = el.parentNode;\n        if (parent) {\n            if (el.nodeType === 1) {\n                cleanupTree(el, ctx.$containerState$.$subsManager$);\n            }\n            parent.removeChild(el);\n        }\n        else if (qDev) {\n            logWarn('Trying to remove component already removed', el);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'remove',\n        $args$: [],\n        $fn$: fn,\n    });\n};\nexport const cleanupTree = (parent, subsManager) => {\n    if (parent.hasAttribute(QSlotName)) {\n        return;\n    }\n    cleanupElement(parent, subsManager);\n    let child = parent.firstElementChild;\n    while (child) {\n        cleanupTree(child, subsManager);\n        child = child.nextElementSibling;\n    }\n};\nconst cleanupElement = (el, subsManager) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        cleanupContext(ctx, subsManager);\n    }\n};\nconst createTextNode = (ctx, text) => {\n    return ctx.$doc$.createTextNode(text);\n};\nexport const executeContextWithSlots = (ctx) => {\n    const before = ctx.$roots$.map((elm) => getSlots(null, elm));\n    executeContext(ctx);\n    const after = ctx.$roots$.map((elm) => getSlots(null, elm));\n    assertEqual(before.length, after.length, 'render: number of q:slots changed during render context execution', before, after);\n    for (let i = 0; i < before.length; i++) {\n        resolveSlotProjection(ctx, ctx.$roots$[i], before[i], after[i]);\n    }\n};\nexport const executeContext = (ctx) => {\n    for (const op of ctx.$operations$) {\n        op.$fn$();\n    }\n};\nexport const printRenderStats = (ctx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of ctx.$operations$) {\n                byOp[op.$operation$] = (byOp[op.$operation$] ?? 0) + 1;\n            }\n            const affectedElements = Array.from(new Set(ctx.$operations$.map((a) => a.$el$)));\n            const stats = {\n                byOp,\n                roots: ctx.$roots$,\n                hostElements: Array.from(ctx.$hostElements$),\n                affectedElements,\n                visitedNodes: ctx.$perf$.$visited$,\n                operations: ctx.$operations$.map((v) => [v.$operation$, v.$el$, ...v.$args$]),\n            };\n            const noOps = ctx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        if (child.nodeType === 1) {\n            const key = getKey(child);\n            if (key != null) {\n                map[key] = i;\n            }\n        }\n    }\n    return map;\n};\nconst KEY_SYMBOL = Symbol('vnode key');\nconst getKey = (el) => {\n    let key = el[KEY_SYMBOL];\n    if (key === undefined) {\n        key = el[KEY_SYMBOL] = directGetAttribute(el, 'q:key');\n    }\n    return key;\n};\nconst setKey = (el, key) => {\n    if (isString(key)) {\n        directSetAttribute(el, 'q:key', key);\n    }\n    el[KEY_SYMBOL] = key;\n};\nconst sameVnode = (elm, vnode2) => {\n    const isElement = elm.nodeType === 1;\n    const type = vnode2.$type$;\n    if (isElement) {\n        const isSameSel = elm.localName === type;\n        if (!isSameSel) {\n            return false;\n        }\n        return getKey(elm) === vnode2.$key$;\n    }\n    return elm.nodeName === type;\n};\nconst isTagName = (elm, tagName) => {\n    if (elm.nodeType === 1) {\n        return elm.localName === tagName;\n    }\n    return elm.nodeName === tagName;\n};\nconst checkInnerHTML = (props) => {\n    return dangerouslySetInnerHTML in props;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../assert/assert';\nimport { parseQRL } from '../import/qrl';\nimport { getContext, resumeIfNeeded } from '../props/props';\nimport { getContainer, getInvokeContext } from './use-core';\nimport { assertQrl } from '../import/qrl-class';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    const hostElement = context.$hostElement$;\n    const qrl = context.$qrl$ ?? parseQRL(decodeURIComponent(String(context.$url$)), hostElement);\n    assertQrl(qrl);\n    if (qrl.$captureRef$ == null) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n        const container = getContainer(el);\n        assertDefined(container, `invoke: cant find parent q:container of`, el);\n        resumeIfNeeded(container);\n        const ctx = getContext(el);\n        qrl.$captureRef$ = qrl.$capture$.map((idx) => qInflate(idx, ctx));\n    }\n    const subscriber = context.$subscriber$;\n    if (subscriber) {\n        return qrl.$captureRef$;\n    }\n    return qrl.$captureRef$;\n};\nconst qInflate = (ref, hostCtx) => {\n    const int = parseInt(ref, 10);\n    const obj = hostCtx.$refMap$[int];\n    assertTrue(hostCtx.$refMap$.length > int, 'out of bounds infrate access', ref);\n    return obj;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQVksY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFaEQsaURBQWlEO0FBQ2pELHlDQUF5QztBQUN6Qyw4Q0FBOEM7QUFDOUM7Ozs7Ozs7OztHQVNHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxHQUE2QixFQUFFO0lBQzVELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFDbkMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUMxQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDOUYsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWYsSUFBSSxHQUFHLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtRQUM1QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsMERBQTBELEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkYsYUFBYSxDQUNYLEdBQUcsQ0FBQyxTQUFTLEVBQ2IsOERBQThELEVBQzlELEdBQUcsQ0FDSixDQUFDO1FBRUYsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLGFBQWEsQ0FBQyxTQUFTLEVBQUUseUNBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFeEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUzQixHQUFHLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxTQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDcEU7SUFDRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0lBQ3hDLElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxHQUFHLENBQUMsWUFBb0IsQ0FBQztLQUNqQztJQUNELE9BQU8sR0FBRyxDQUFDLFlBQW9CLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcsQ0FBQyxHQUFXLEVBQUUsT0FBaUIsRUFBRSxFQUFFO0lBQ2xELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLDhCQUE4QixFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9FLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0VHJ1ZSB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHsgcGFyc2VRUkwgfSBmcm9tICcuLi9pbXBvcnQvcXJsJztcbmltcG9ydCB7IGdldENvbnRleHQsIFFDb250ZXh0LCByZXN1bWVJZk5lZWRlZCB9IGZyb20gJy4uL3Byb3BzL3Byb3BzJztcbmltcG9ydCB7IGdldENvbnRhaW5lciwgZ2V0SW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsIH0gZnJvbSAnLi4vaW1wb3J0L3FybC1jbGFzcyc7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZUxleGljYWxTY29wZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGUgaW5zdGVhZClcbi8qKlxuICogVXNlZCBieSB0aGUgUXdpayBPcHRpbWl6ZXIgdG8gcmVzdG9yZSB0aGUgbGV4aWNhbGx5IHNjb3BlZCB2YXJpYWJsZXMuXG4gKlxuICogVGhpcyBtZXRob2Qgc2hvdWxkIG5vdCBiZSBwcmVzZW50IGluIHRoZSBhcHBsaWNhdGlvbiBzb3VyY2UgY29kZS5cbiAqXG4gKiBOT1RFOiBgdXNlTGV4aWNhbFNjb3BlYCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2tcbiAqIChiZWZvcmUgYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogQGludGVybmFsXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VMZXhpY2FsU2NvcGUgPSA8VkFSUyBleHRlbmRzIGFueVtdPigpOiBWQVJTID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGdldEludm9rZUNvbnRleHQoKTtcbiAgY29uc3QgaG9zdEVsZW1lbnQgPSBjb250ZXh0LiRob3N0RWxlbWVudCQ7XG4gIGNvbnN0IHFybCA9IGNvbnRleHQuJHFybCQgPz8gcGFyc2VRUkwoZGVjb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZXh0LiR1cmwkKSksIGhvc3RFbGVtZW50KTtcbiAgYXNzZXJ0UXJsKHFybCk7XG5cbiAgaWYgKHFybC4kY2FwdHVyZVJlZiQgPT0gbnVsbCkge1xuICAgIGNvbnN0IGVsID0gY29udGV4dC4kZWxlbWVudCQ7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCwgJ2ludm9rZTogZWxlbWVudCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJywgY29udGV4dCk7XG4gICAgYXNzZXJ0RGVmaW5lZChcbiAgICAgIHFybC4kY2FwdHVyZSQsXG4gICAgICAnaW52b2tlOiBxcmwgY2FwdHVyZSBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJyxcbiAgICAgIHFybFxuICAgICk7XG5cbiAgICBjb25zdCBjb250YWluZXIgPSBnZXRDb250YWluZXIoZWwpO1xuICAgIGFzc2VydERlZmluZWQoY29udGFpbmVyLCBgaW52b2tlOiBjYW50IGZpbmQgcGFyZW50IHE6Y29udGFpbmVyIG9mYCwgZWwpO1xuXG4gICAgcmVzdW1lSWZOZWVkZWQoY29udGFpbmVyKTtcbiAgICBjb25zdCBjdHggPSBnZXRDb250ZXh0KGVsKTtcblxuICAgIHFybC4kY2FwdHVyZVJlZiQgPSBxcmwuJGNhcHR1cmUkIS5tYXAoKGlkeCkgPT4gcUluZmxhdGUoaWR4LCBjdHgpKTtcbiAgfVxuICBjb25zdCBzdWJzY3JpYmVyID0gY29udGV4dC4kc3Vic2NyaWJlciQ7XG4gIGlmIChzdWJzY3JpYmVyKSB7XG4gICAgcmV0dXJuIHFybC4kY2FwdHVyZVJlZiQgYXMgVkFSUztcbiAgfVxuICByZXR1cm4gcXJsLiRjYXB0dXJlUmVmJCBhcyBWQVJTO1xufTtcblxuY29uc3QgcUluZmxhdGUgPSAocmVmOiBzdHJpbmcsIGhvc3RDdHg6IFFDb250ZXh0KSA9PiB7XG4gIGNvbnN0IGludCA9IHBhcnNlSW50KHJlZiwgMTApO1xuICBjb25zdCBvYmogPSBob3N0Q3R4LiRyZWZNYXAkW2ludF07XG4gIGFzc2VydFRydWUoaG9zdEN0eC4kcmVmTWFwJC5sZW5ndGggPiBpbnQsICdvdXQgb2YgYm91bmRzIGluZnJhdGUgYWNjZXNzJywgcmVmKTtcbiAgcmV0dXJuIG9iajtcbn07XG4iXX0=","import { assertDefined } from '../../assert/assert';\nimport { executeContextWithSlots, printRenderStats } from './visitor';\nimport { getContext, resumeIfNeeded } from '../../props/props';\nimport { qDev, qTest } from '../../util/qdev';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { getContainer } from '../../use/use-core';\nimport { runSubscriber, WatchFlagsIsDirty, WatchFlagsIsEffect, WatchFlagsIsResource, WatchFlagsIsWatch, } from '../../use/use-watch';\nimport { then } from '../../util/promises';\nimport { codeToText, QError_errorWhileRendering } from '../../error/error';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { isElement } from '../../util/element';\nimport { renderComponent } from './render-dom';\nimport { getContainerState } from '../container';\nimport { createRenderContext } from '../execute-component';\nexport const notifyChange = (subscriber, containerState) => {\n    if (isElement(subscriber)) {\n        notifyRender(subscriber, containerState);\n    }\n    else {\n        notifyWatch(subscriber, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time.\n * This method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The\n * default implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n * @public\n */\nconst notifyRender = (hostElement, containerState) => {\n    if (qDev && !qTest && containerState.$platform$.isServer) {\n        logWarn('Can not rerender in server platform');\n        return undefined;\n    }\n    resumeIfNeeded(containerState.$containerEl$);\n    const ctx = getContext(hostElement);\n    assertDefined(ctx.$renderQrl$, `render: notified host element must have a defined $renderQrl$`, ctx);\n    if (ctx.$dirty$) {\n        return;\n    }\n    ctx.$dirty$ = true;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$hostsStaging$.add(hostElement);\n    }\n    else {\n        containerState.$hostsNext$.add(hostElement);\n        scheduleFrame(containerState);\n    }\n};\nconst notifyWatch = (watch, containerState) => {\n    if (watch.$flags$ & WatchFlagsIsDirty) {\n        return;\n    }\n    watch.$flags$ |= WatchFlagsIsDirty;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$watchStaging$.add(watch);\n    }\n    else {\n        containerState.$watchNext$.add(watch);\n        scheduleFrame(containerState);\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = containerState.$platform$.nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useWatch$()` API. This method\n * is not intended to be used by developers.\n *\n * @internal\n *\n */\nexport const _hW = () => {\n    const [watch] = useLexicalScope();\n    notifyWatch(watch, getContainerState(getContainer(watch.$el$)));\n};\nconst renderMarked = async (containerState) => {\n    const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n    containerState.$hostsNext$.clear();\n    await executeWatchesBefore(containerState);\n    containerState.$hostsStaging$.forEach((host) => {\n        hostsRendering.add(host);\n    });\n    containerState.$hostsStaging$.clear();\n    const doc = getDocument(containerState.$containerEl$);\n    const platform = containerState.$platform$;\n    const renderingQueue = Array.from(hostsRendering);\n    sortNodes(renderingQueue);\n    const ctx = createRenderContext(doc, containerState);\n    for (const el of renderingQueue) {\n        if (!ctx.$hostElements$.has(el)) {\n            ctx.$roots$.push(el);\n            try {\n                await renderComponent(ctx, getContext(el));\n            }\n            catch (e) {\n                logError(codeToText(QError_errorWhileRendering), e);\n            }\n        }\n    }\n    // Early exist, no dom operations\n    if (ctx.$operations$.length === 0) {\n        printRenderStats(ctx);\n        postRendering(containerState, ctx);\n        return ctx;\n    }\n    return platform.raf(() => {\n        executeContextWithSlots(ctx);\n        printRenderStats(ctx);\n        postRendering(containerState, ctx);\n        return ctx;\n    });\n};\nexport const postRendering = async (containerState, ctx) => {\n    await executeWatchesAfter(containerState, (watch, stage) => {\n        if ((watch.$flags$ & WatchFlagsIsEffect) === 0) {\n            return false;\n        }\n        if (stage) {\n            return ctx.$hostElements$.has(watch.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    if (containerState.$hostsNext$.size + containerState.$watchNext$.size > 0) {\n        scheduleFrame(containerState);\n    }\n};\nconst executeWatchesBefore = async (containerState) => {\n    const resourcesPromises = [];\n    const watchPromises = [];\n    const isWatch = (watch) => (watch.$flags$ & WatchFlagsIsWatch) !== 0;\n    const isResourceWatch = (watch) => (watch.$flags$ & WatchFlagsIsResource) !== 0;\n    containerState.$watchNext$.forEach((watch) => {\n        if (isWatch(watch)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(watch.$el$), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n        if (isResourceWatch(watch)) {\n            resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(watch.$el$), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (isWatch(watch)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(watch.$el$), () => watch));\n            }\n            else if (isResourceWatch(watch)) {\n                resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(watch.$el$), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortWatches(resources);\n        resources.forEach((watch) => runSubscriber(watch, containerState));\n    }\n};\nconst executeWatchesAfter = async (containerState, watchPred) => {\n    const watchPromises = [];\n    containerState.$watchNext$.forEach((watch) => {\n        if (watchPred(watch, false)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(watch.$el$), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (watchPred(watch, true)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(watch.$el$), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => (a.compareDocumentPosition(b) & 2 ? 1 : -1));\n};\nconst sortWatches = (watches) => {\n    watches.sort((a, b) => {\n        if (a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(b.$el$) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual } from '../assert/assert';\nimport { getProxyTarget } from '../object/q-object';\nimport { getPlatform } from '../platform/platform';\nimport { notifyChange } from './dom/notify-render';\nconst CONTAINER_STATE = Symbol('ContainerState');\nexport const getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        containerEl[CONTAINER_STATE] = set = {\n            $containerEl$: containerEl,\n            $proxyMap$: new WeakMap(),\n            $subsManager$: null,\n            $platform$: getPlatform(containerEl),\n            $watchNext$: new Set(),\n            $watchStaging$: new Set(),\n            $hostsNext$: new Set(),\n            $hostsStaging$: new Set(),\n            $renderPromise$: undefined,\n            $hostsRendering$: undefined,\n            $envData$: {},\n            $elementIndex$: 0,\n            $styleIds$: new Set(),\n            $mutableProps$: false,\n        };\n        set.$subsManager$ = createSubscriptionManager(set);\n    }\n    return set;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const objToSubs = new Map();\n    const subsToObjs = new Map();\n    const clearSub = (sub) => {\n        const subs = subsToObjs.get(sub);\n        if (subs) {\n            subs.forEach((s) => {\n                s.delete(sub);\n            });\n            subsToObjs.delete(sub);\n            subs.clear();\n        }\n    };\n    const tryGetLocal = (obj) => {\n        assertEqual(getProxyTarget(obj), undefined, 'object can not be be a proxy', obj);\n        return objToSubs.get(obj);\n    };\n    const trackSubToObj = (subscriber, map) => {\n        let set = subsToObjs.get(subscriber);\n        if (!set) {\n            subsToObjs.set(subscriber, (set = new Set()));\n        }\n        set.add(map);\n    };\n    const getLocal = (obj, initialMap) => {\n        let local = tryGetLocal(obj);\n        if (local) {\n            assertEqual(initialMap, undefined, 'subscription map can not be set to an existing object', local);\n        }\n        else {\n            const map = !initialMap ? new Map() : initialMap;\n            map.forEach((_, key) => {\n                trackSubToObj(key, map);\n            });\n            objToSubs.set(obj, (local = {\n                $subs$: map,\n                $addSub$(subscriber, key) {\n                    if (key == null) {\n                        map.set(subscriber, null);\n                    }\n                    else {\n                        let sub = map.get(subscriber);\n                        if (sub === undefined) {\n                            map.set(subscriber, (sub = new Set()));\n                        }\n                        if (sub) {\n                            sub.add(key);\n                        }\n                    }\n                    trackSubToObj(subscriber, map);\n                },\n                $notifySubs$(key) {\n                    map.forEach((value, subscriber) => {\n                        if (value === null || !key || value.has(key)) {\n                            notifyChange(subscriber, containerState);\n                        }\n                    });\n                },\n            }));\n        }\n        return local;\n    };\n    return {\n        $tryGetLocal$: tryGetLocal,\n        $getLocal$: getLocal,\n        $clearSub$: clearSub,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../assert/assert';\nimport { assertQrl, isQrl } from '../import/qrl-class';\nimport { getContext, tryGetContext } from '../props/props';\nimport { getDocument } from '../util/dom';\nimport { isDocument, isElement, isNode } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QStyle } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { createProxy, getOrCreateProxy, getProxyFlags, getProxyTarget, isConnected, isMutable, mutable, shouldSerialize, } from './q-object';\nimport { destroyWatch, WatchFlagsIsDirty, } from '../use/use-watch';\nimport { emitEvent } from '../util/event';\nimport { qError, QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, } from '../error/error';\nimport { isArray, isObject, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { isResourceReturn } from '../use/use-resource';\nimport { createParser, serializeValue } from './serializers';\nimport { getContainerState } from '../render/container';\nimport { getQId } from '../render/execute-component';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n/**\n * Serialize the current state of the application into DOM\n *\n * @alpha\n */\n// </docs>\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const data = await pauseFromContainer(containerEl);\n    const script = doc.createElement('script');\n    directSetAttribute(script, 'type', 'qwik/json');\n    script.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(script);\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    return data;\n};\nexport const moveStyles = (containerEl, containerState) => {\n    const head = containerEl.ownerDocument.head;\n    containerEl.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n        containerState.$styleIds$.add(el.getAttribute(QStyle));\n        head.appendChild(el);\n    });\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping hydration because parent element is not q:container');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (!script) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    script.remove();\n    const containerState = getContainerState(containerEl);\n    moveStyles(containerEl, containerState);\n    const meta = JSON.parse(unescapeText(script.textContent || '{}'));\n    // Collect all elements\n    const elements = new Map();\n    const getObject = (id) => {\n        return getObjectImpl(id, elements, meta.objs, containerState);\n    };\n    let maxId = 0;\n    getNodesInScope(containerEl, hasQId).forEach((el) => {\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const ctx = getContext(el);\n        ctx.$id$ = id;\n        ctx.$mounted$ = true;\n        elements.set(ELEMENT_ID_PREFIX + id, el);\n        maxId = Math.max(maxId, strToInt(id));\n    });\n    containerState.$elementIndex$ = ++maxId;\n    const parser = createParser(getObject, containerState, doc);\n    // Revive proxies with subscriptions into the proxymap\n    reviveValues(meta.objs, meta.subs, getObject, containerState, parser);\n    // Rebuild target objects\n    for (const obj of meta.objs) {\n        reviveNestedObjects(obj, getObject, parser);\n    }\n    Object.entries(meta.ctx).forEach(([elementID, ctxMeta]) => {\n        const el = getObject(elementID);\n        assertDefined(el, `resume: cant find dom node for id`, elementID);\n        const ctx = getContext(el);\n        const qobj = ctxMeta.r;\n        const seq = ctxMeta.s;\n        const host = ctxMeta.h;\n        const contexts = ctxMeta.c;\n        const watches = ctxMeta.w;\n        if (qobj) {\n            ctx.$refMap$.push(...qobj.split(' ').map((part) => getObject(part)));\n        }\n        if (seq) {\n            ctx.$seq$ = seq.split(' ').map((part) => getObject(part));\n        }\n        if (watches) {\n            ctx.$watches$ = watches.split(' ').map((part) => getObject(part));\n        }\n        if (contexts) {\n            contexts.split(' ').map((part) => {\n                const [key, value] = part.split('=');\n                if (!ctx.$contexts$) {\n                    ctx.$contexts$ = new Map();\n                }\n                ctx.$contexts$.set(key, getObject(value));\n            });\n        }\n        // Restore sequence scoping\n        if (host) {\n            const [props, renderQrl] = host.split(' ');\n            assertDefined(props, `resume: props missing in host metadata`, host);\n            assertDefined(renderQrl, `resume: renderQRL missing in host metadata`, host);\n            ctx.$props$ = getObject(props);\n            ctx.$renderQrl$ = getObject(renderQrl);\n        }\n    });\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst hasContext = (el) => {\n    return !!tryGetContext(el);\n};\nexport const pauseFromContainer = async (containerEl) => {\n    const containerState = getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasContext).map(tryGetContext);\n    return _pauseFromContexts(contexts, containerState);\n};\n/**\n * @internal\n */\nexport const _pauseFromContexts = async (elements, containerState) => {\n    const elementToIndex = new Map();\n    const collector = createCollector(containerState);\n    const listeners = [];\n    for (const ctx of elements) {\n        if (ctx.$listeners$) {\n            ctx.$listeners$.forEach((qrls, key) => {\n                qrls.forEach((qrl) => {\n                    listeners.push({\n                        key,\n                        qrl,\n                        el: ctx.$element$,\n                    });\n                });\n            });\n        }\n        for (const watch of ctx.$watches$) {\n            collector.$watches$.push(watch);\n        }\n    }\n    // No listeners implies static page\n    if (listeners.length === 0) {\n        return {\n            state: {\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            listeners: [],\n            pendingContent: [],\n            mode: 'static',\n        };\n    }\n    // Listeners becomes the app roots\n    for (const listener of listeners) {\n        assertQrl(listener.qrl);\n        const captured = listener.qrl.$captureRef$;\n        if (captured) {\n            for (const obj of captured) {\n                await collectValue(obj, collector, true);\n            }\n        }\n        const ctx = tryGetContext(listener.el);\n        for (const obj of ctx.$refMap$) {\n            await collectValue(obj, collector, true);\n        }\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const ctx of elements) {\n            await collectProps(ctx.$element$, ctx.$props$, collector);\n            if (ctx.$contexts$) {\n                for (const item of ctx.$contexts$.values()) {\n                    await collectValue(item, collector, false);\n                }\n            }\n        }\n    }\n    // Convert objSet to array\n    const objs = Array.from(new Set(collector.$objMap$.values()));\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            if (el.isConnected) {\n                id = getQId(el);\n                if (!id) {\n                    console.warn('Missing ID', el);\n                }\n                else {\n                    id = ELEMENT_ID_PREFIX + id;\n                }\n            }\n            else {\n                id = null;\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isMutable(obj)) {\n            obj = obj.v;\n            suffix = '%';\n        }\n        if (isPromise(obj)) {\n            obj = getPromiseValue(obj);\n            suffix += '~';\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            if (!target && isElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return elID + suffix;\n                }\n                return null;\n            }\n        }\n        if (collector.$objMap$.has(obj)) {\n            const value = collector.$objMap$.get(obj);\n            const id = objToId.get(value);\n            assertTrue(typeof id === 'number', 'Can not find ID for object');\n            return intToStr(id) + suffix;\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            throw qError(QError_missingObjectId, obj);\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    objs.forEach((obj) => {\n        const flags = getProxyFlags(containerState.$proxyMap$.get(obj));\n        if (flags === undefined) {\n            return;\n        }\n        const subsObj = [];\n        if (flags > 0) {\n            subsObj.push({\n                subscriber: '$',\n                data: flags,\n            });\n        }\n        const subs = containerState.$subsManager$.$tryGetLocal$(obj)?.$subs$;\n        if (subs) {\n            subs.forEach((set, key) => {\n                if (isElement(key)) {\n                    if (!collector.$elements$.includes(key)) {\n                        return;\n                    }\n                }\n                subsObj.push({\n                    subscriber: key,\n                    data: set ? Array.from(set) : null,\n                });\n            });\n        }\n        if (subsObj.length > 0) {\n            subsMap.set(obj, subsObj);\n        }\n    });\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, count);\n        count++;\n    }\n    // Serialize object subscriptions\n    const subs = objs\n        .map((obj) => {\n        const sub = subsMap.get(obj);\n        if (!sub) {\n            return null;\n        }\n        const subsObj = {};\n        sub.forEach(({ subscriber, data }) => {\n            if (subscriber === '$') {\n                subsObj[subscriber] = data;\n            }\n            else {\n                const id = getObjId(subscriber);\n                if (id !== null) {\n                    subsObj[id] = data;\n                }\n            }\n        });\n        return subsObj;\n    })\n        .filter(isNotNullable);\n    // Serialize objects\n    const convertedObjs = objs.map((obj) => {\n        const value = serializeValue(obj, getObjId, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        switch (typeof obj) {\n            case 'object':\n                if (obj === null) {\n                    return null;\n                }\n                if (isArray(obj)) {\n                    return obj.map(mustGetObjId);\n                }\n                if (isSerializableObject(obj)) {\n                    const output = {};\n                    Object.entries(obj).forEach(([key, value]) => {\n                        output[key] = mustGetObjId(value);\n                    });\n                    return output;\n                }\n                break;\n            case 'string':\n            case 'number':\n            case 'boolean':\n                return obj;\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n    const meta = {};\n    // Write back to the dom\n    elements.forEach((ctx) => {\n        const node = ctx.$element$;\n        assertDefined(ctx, `pause: missing context for dom node`, node);\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const watches = ctx.$watches$;\n        const renderQrl = ctx.$renderQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = collector.$elements$.includes(node);\n        let add = false;\n        if (ref.length > 0) {\n            const value = ref.map(mustGetObjId).join(' ');\n            if (value) {\n                metaValue.r = value;\n                add = true;\n            }\n        }\n        if (canRender) {\n            if (elementCaptured && props) {\n                const objs = [props];\n                if (renderQrl) {\n                    objs.push(renderQrl);\n                }\n                const value = objs.map(mustGetObjId).join(' ');\n                if (value) {\n                    metaValue.h = value;\n                    add = true;\n                }\n            }\n            if (watches.length > 0) {\n                const value = watches.map(getObjId).filter(isNotNullable).join(' ');\n                if (value) {\n                    metaValue.w = value;\n                    add = true;\n                }\n            }\n            if (elementCaptured && seq.length > 0) {\n                const value = seq.map(mustGetObjId).join(' ');\n                if (value) {\n                    metaValue.s = value;\n                    add = true;\n                }\n            }\n            if (contexts) {\n                const serializedContexts = [];\n                contexts.forEach((value, key) => {\n                    serializedContexts.push(`${key}=${mustGetObjId(value)}`);\n                });\n                const value = serializedContexts.join(' ');\n                if (value) {\n                    metaValue.c = value;\n                    add = true;\n                }\n            }\n        }\n        if (add) {\n            const elementID = getElementID(node);\n            assertDefined(elementID, `pause: can not generate ID for dom node`, node);\n            meta[elementID] = metaValue;\n        }\n    });\n    const pendingContent = [];\n    for (const watch of collector.$watches$) {\n        if (qDev) {\n            if (watch.$flags$ & WatchFlagsIsDirty) {\n                logWarn('Serializing dirty watch. Looks like an internal error.');\n            }\n            if (!isConnected(watch)) {\n                logWarn('Serializing disconneted watch. Looks like an internal error.');\n            }\n        }\n        destroyWatch(watch);\n    }\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.tagName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        pendingContent,\n        objs,\n        listeners,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const getQwikJSON = (parentElm) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, 'type') === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const nodes = [];\n    if (predicate(parent)) {\n        nodes.push(parent);\n    }\n    walkNodes(nodes, parent, predicate);\n    return nodes;\n};\nexport const walkNodes = (nodes, parent, predicate) => {\n    let child = parent.firstElementChild;\n    while (child) {\n        if (!isContainer(child)) {\n            if (predicate(child)) {\n                nodes.push(child);\n            }\n            walkNodes(nodes, child, predicate);\n        }\n        child = child.nextElementSibling;\n    }\n};\nconst reviveValues = (objs, subs, getObject, containerState, parser) => {\n    for (let i = 0; i < objs.length; i++) {\n        const value = objs[i];\n        if (isString(value)) {\n            objs[i] = parser.prepare(value);\n        }\n    }\n    for (let i = 0; i < subs.length; i++) {\n        const value = objs[i];\n        const sub = subs[i];\n        if (sub) {\n            const converted = new Map();\n            let flags = 0;\n            Object.entries(sub).forEach((entry) => {\n                if (entry[0] === '$') {\n                    flags = entry[1];\n                    return;\n                }\n                const el = getObject(entry[0]);\n                if (!el) {\n                    logWarn('QWIK can not revive subscriptions because of missing element ID', entry, value);\n                    return;\n                }\n                const set = entry[1] === null ? null : new Set(entry[1]);\n                converted.set(el, set);\n            });\n            createProxy(value, containerState, flags, converted);\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                const value = obj[i];\n                if (typeof value == 'string') {\n                    obj[i] = getObject(value);\n                }\n                else {\n                    reviveNestedObjects(value, getObject, parser);\n                }\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (typeof value == 'string') {\n                        obj[key] = getObject(value);\n                    }\n                    else {\n                        reviveNestedObjects(value, getObject, parser);\n                    }\n                }\n            }\n        }\n    }\n};\nconst OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '%': (obj) => {\n        return mutable(obj);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n};\nconst getObjectImpl = (id, elements, objs, containerState) => {\n    if (id.startsWith(ELEMENT_ID_PREFIX)) {\n        assertTrue(elements.has(id), `missing element for id:`, id);\n        return elements.get(id);\n    }\n    const index = strToInt(id);\n    assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n    let obj = objs[index];\n    for (let i = id.length - 1; i >= 0; i--) {\n        const code = id[i];\n        const transform = OBJECT_TRANSFORMS[code];\n        if (!transform) {\n            break;\n        }\n        obj = transform(obj, containerState);\n    }\n    return obj;\n};\nconst collectProps = async (el, props, collector) => {\n    const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(getProxyTarget(props))?.$subs$;\n    if (subs && subs.has(el)) {\n        // The host element read the props\n        await collectElement(el, collector);\n    }\n};\nconst createCollector = (containerState) => {\n    return {\n        $seen$: new Set(),\n        $seenLeaks$: new Set(),\n        $objMap$: new Map(),\n        $elements$: [],\n        $watches$: [],\n        $containerState$: containerState,\n    };\n};\nconst collectElement = async (el, collector) => {\n    if (collector.$elements$.includes(el)) {\n        return;\n    }\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        collector.$elements$.push(el);\n        if (ctx.$props$) {\n            await collectValue(ctx.$props$, collector, false);\n        }\n        if (ctx.$renderQrl$) {\n            await collectValue(ctx.$renderQrl$, collector, false);\n        }\n        for (const obj of ctx.$seq$) {\n            await collectValue(obj, collector, false);\n        }\n        for (const obj of ctx.$refMap$) {\n            await collectValue(obj, collector, false);\n        }\n        for (const obj of ctx.$watches$) {\n            await collectValue(obj, collector, false);\n        }\n        if (ctx.$contexts$) {\n            for (const obj of ctx.$contexts$.values()) {\n                await collectValue(obj, collector, false);\n            }\n        }\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nconst collectSubscriptions = async (target, collector) => {\n    const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(target)?.$subs$;\n    if (subs) {\n        if (collector.$seen$.has(subs)) {\n            return;\n        }\n        collector.$seen$.add(subs);\n        for (const key of Array.from(subs.keys())) {\n            if (isElement(key)) {\n                await collectElement(key, collector);\n            }\n            else {\n                await collectValue(key, collector, true);\n            }\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        promise[PROMISE_VALUE] = value;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    assertTrue(PROMISE_VALUE in promise, 'pause: promise was not resolved previously', promise);\n    return promise[PROMISE_VALUE];\n};\nconst collectValue = async (obj, collector, leaks) => {\n    const input = obj;\n    const seen = leaks ? collector.$seenLeaks$ : collector.$seen$;\n    if (seen.has(obj)) {\n        return;\n    }\n    seen.add(obj);\n    if (!shouldSerialize(obj) || obj === undefined) {\n        collector.$objMap$.set(obj, undefined);\n        return;\n    }\n    if (obj != null) {\n        // Handle QRL\n        if (isQrl(obj)) {\n            collector.$objMap$.set(obj, obj);\n            if (obj.$captureRef$) {\n                for (const item of obj.$captureRef$) {\n                    await collectValue(item, collector, leaks);\n                }\n            }\n            return;\n        }\n        // Handle Objets\n        if (typeof obj === 'object') {\n            // Handle promises\n            if (isPromise(obj)) {\n                const resolved = await resolvePromise(obj);\n                await collectValue(resolved, collector, leaks);\n                return;\n            }\n            const target = getProxyTarget(obj);\n            // Handle dom nodes\n            if (!target && isNode(obj)) {\n                if (obj.nodeType === 9) {\n                    collector.$objMap$.set(obj, obj);\n                }\n                else if (obj.nodeType !== 1) {\n                    throw qError(QError_verifySerializable, obj);\n                }\n                return;\n            }\n            // If proxy collect subscriptions\n            if (target) {\n                if (leaks) {\n                    await collectSubscriptions(target, collector);\n                }\n                obj = target;\n                if (seen.has(obj)) {\n                    return;\n                }\n                seen.add(obj);\n                if (isResourceReturn(obj)) {\n                    collector.$objMap$.set(target, target);\n                    await collectValue(obj.promise, collector, leaks);\n                    await collectValue(obj.resolved, collector, leaks);\n                    return;\n                }\n            }\n            collector.$objMap$.set(obj, obj);\n            if (isArray(obj)) {\n                for (let i = 0; i < obj.length; i++) {\n                    await collectValue(input[i], collector, leaks);\n                }\n            }\n            else {\n                for (const key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        await collectValue(input[key], collector, leaks);\n                    }\n                }\n            }\n            return;\n        }\n    }\n    collector.$objMap$.set(obj, obj);\n};\nexport const isContainer = (el) => {\n    return el.hasAttribute(QContainerAttr);\n};\nconst hasQId = (el) => {\n    return el.hasAttribute(ELEMENT_ID);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\n//# sourceMappingURL=data:application/json;base64,","import { getProxyTarget, noSerialize, unwrapProxy } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { newInvokeContext, useInvoke } from './use-core';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { delay, safeCall, then } from '../util/promises';\nimport { getDocument } from '../util/dom';\nimport { isFunction, isObject } from '../util/types';\nimport { isServer } from '../platform/platform';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined, assertEqual } from '../assert/assert';\nimport { assertQrl, createQRL } from '../import/qrl-class';\nimport { codeToText, qError, QError_canNotMountUseServerMount, QError_trackUseStore, } from '../error/error';\nimport { useOn } from './use-on';\nimport { intToStr, strToInt } from '../object/store';\nimport { _hW } from '../render/dom/notify-render';\nimport { useSequentialScope } from './use-sequential-scope';\nexport const WatchFlagsIsEffect = 1 << 0;\nexport const WatchFlagsIsWatch = 1 << 1;\nexport const WatchFlagsIsDirty = 1 << 2;\nexport const WatchFlagsIsCleanup = 1 << 3;\nexport const WatchFlagsIsResource = 1 << 4;\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <Host>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatchQrl = (qrl, opts) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (!get) {\n        assertQrl(qrl);\n        const el = ctx.$hostElement$;\n        const containerState = ctx.$renderCtx$.$containerState$;\n        const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsWatch, i, el, qrl, undefined);\n        set(true);\n        getContext(el).$watches$.push(watch);\n        const previousWait = ctx.$waitOn$.slice();\n        ctx.$waitOn$.push(Promise.all(previousWait).then(() => runSubscriber(watch, containerState)));\n        const isServer = containerState.$platform$.isServer;\n        if (isServer) {\n            useRunWatch(watch, opts?.eagerness);\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <Host>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatch$ = /*#__PURE__*/ implicit$FirstArg(useWatchQrl);\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <Host>{store.count}</Host>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffectQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (!get) {\n        assertQrl(qrl);\n        const el = ctx.$hostElement$;\n        const watch = new Watch(WatchFlagsIsEffect, i, el, qrl, undefined);\n        set(true);\n        getContext(el).$watches$.push(watch);\n        useRunWatch(watch, opts?.eagerness ?? 'visible');\n        const doc = ctx.$doc$;\n        if (doc['qO']) {\n            doc['qO'].observe(el);\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <Host>{store.count}</Host>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffect$ = /*#__PURE__*/ implicit$FirstArg(useClientEffectQrl);\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <Host>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </Host>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (isServer(ctx.$doc$)) {\n        ctx.$waitOn$.push(mountQrl());\n        set(true);\n    }\n    else {\n        throw qError(QError_canNotMountUseServerMount, ctx.$hostElement$);\n    }\n};\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <Host>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </Host>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMount$ = /*#__PURE__*/ implicit$FirstArg(useServerMountQrl);\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The temperature is: ${store.temp}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    ctx.$waitOn$.push(mountQrl());\n    set(true);\n};\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The temperature is: ${store.temp}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMount$ = /*#__PURE__*/ implicit$FirstArg(useMountQrl);\nexport const isResourceWatch = (watch) => {\n    return !!watch.$resource$;\n};\nexport const runSubscriber = async (watch, containerState) => {\n    assertEqual(!!(watch.$flags$ & WatchFlagsIsDirty), true, 'Resource is not dirty', watch);\n    if (isResourceWatch(watch)) {\n        await runResource(watch, containerState);\n    }\n    else {\n        await runWatch(watch, containerState);\n    }\n};\nexport const runResource = (watch, containerState, waitOn) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const el = watch.$el$;\n    const doc = getDocument(el);\n    const invokationContext = newInvokeContext(doc, el, el, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.$invokeFn$(el, invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const cleanups = [];\n    const resource = watch.$resource$;\n    assertDefined(resource, 'useResource: when running a resource, \"watch.r\" must be a defined.', watch);\n    const track = (obj, prop) => {\n        const target = getProxyTarget(obj);\n        if (target) {\n            const manager = subsManager.$getLocal$(target);\n            manager.$addSub$(watch, prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else {\n            return obj;\n        }\n    };\n    const resourceTarget = unwrapProxy(resource);\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n        previous: resourceTarget.resolved,\n    };\n    let resolve;\n    let reject;\n    // Execute mutation inside empty invokation\n    useInvoke(invokationContext, () => {\n        resource.state = 'pending';\n        resource.resolved = undefined;\n        resource.promise = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        });\n    });\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n        reject('cancelled');\n    });\n    let done = false;\n    const promise = safeCall(() => then(waitOn, () => watchFn(opts)), (value) => {\n        if (!done) {\n            done = true;\n            resource.state = 'resolved';\n            resource.resolved = value;\n            resource.error = undefined;\n            resolve(value);\n        }\n        return;\n    }, (reason) => {\n        if (!done) {\n            done = true;\n            resource.state = 'rejected';\n            resource.resolved = undefined;\n            resource.error = noSerialize(reason);\n            reject(reason);\n        }\n        return;\n    });\n    const timeout = resourceTarget.timeout;\n    if (timeout) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (!done) {\n                    done = true;\n                    resource.state = 'rejected';\n                    resource.resolved = undefined;\n                    resource.error = 'timeout';\n                    cleanupWatch(watch);\n                    reject('timeout');\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nexport const runWatch = (watch, containerState) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const el = watch.$el$;\n    const doc = getDocument(el);\n    const invokationContext = newInvokeContext(doc, el, el, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.$invokeFn$(el, invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const track = (obj, prop) => {\n        const target = getProxyTarget(obj);\n        if (target) {\n            const manager = subsManager.$getLocal$(target);\n            manager.$addSub$(watch, prop);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => watchFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        logError(reason);\n    });\n};\nexport const cleanupWatch = (watch) => {\n    const destroy = watch.$destroy$;\n    if (destroy) {\n        watch.$destroy$ = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyWatch = (watch) => {\n    if (watch.$flags$ & WatchFlagsIsCleanup) {\n        watch.$flags$ &= ~WatchFlagsIsCleanup;\n        const cleanup = watch.$qrl$.$invokeFn$(watch.$el$);\n        cleanup();\n    }\n    else {\n        cleanupWatch(watch);\n    }\n};\nconst useRunWatch = (watch, eagerness) => {\n    if (eagerness === 'load') {\n        useOn('qinit', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'visible') {\n        useOn('qvisible', getWatchHandlerQrl(watch));\n    }\n};\nconst getWatchHandlerQrl = (watch) => {\n    const watchQrl = watch.$qrl$;\n    const watchHandler = createQRL(watchQrl.$chunk$, '_hW', _hW, null, null, [watch], watchQrl.$symbol$);\n    return watchHandler;\n};\nexport const isWatchCleanup = (obj) => {\n    return isSubscriberDescriptor(obj) && !!(obj.$flags$ & WatchFlagsIsCleanup);\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Watch;\n};\nexport const serializeWatch = (watch, getObjId) => {\n    let value = `${intToStr(watch.$flags$)} ${intToStr(watch.$index$)} ${getObjId(watch.$qrl$)} ${getObjId(watch.$el$)}`;\n    if (isResourceWatch(watch)) {\n        value += ` ${getObjId(watch.$resource$)}`;\n    }\n    return value;\n};\nexport const parseWatch = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Watch(strToInt(flags), strToInt(index), el, qrl, resource);\n};\nexport class Watch {\n    constructor($flags$, $index$, $el$, $qrl$, $resource$) {\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$resource$ = $resource$;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { createProxy, getProxyTarget } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { $ } from '../import/qrl.public';\nimport { assertQrl } from '../import/qrl-class';\nimport { runResource, WatchFlagsIsDirty, WatchFlagsIsResource, Watch, } from './use-watch';\nimport { assertDefined } from '../assert/assert';\nimport { Fragment, jsx } from '../render/jsx/jsx-runtime';\nimport { qDev } from '../util/qdev';\nimport { isServer } from '../platform/platform';\nimport { getInvokeContext } from './use-core';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n/**\n * @public\n */\nexport const useResourceQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    assertQrl(qrl);\n    const containerState = ctx.$renderCtx$.$containerState$;\n    const resource = createResourceReturn(containerState, opts);\n    const el = ctx.$hostElement$;\n    const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsResource, i, el, qrl, resource);\n    const previousWait = Promise.all(ctx.$waitOn$.slice());\n    runResource(watch, containerState, previousWait);\n    getContext(el).$watches$.push(watch);\n    set(resource);\n    return resource;\n};\n/**\n * @public\n */\nexport const useResource$ = (generatorFn) => {\n    return useResourceQrl($(generatorFn));\n};\n/**\n * @public\n */\nexport const Resource = (props) => {\n    const isBrowser = !qDev || !useIsServer();\n    if (isBrowser) {\n        if (props.onRejected) {\n            props.resource.promise.catch(() => { });\n            if (props.resource.state === 'rejected') {\n                return props.onRejected(props.resource.error);\n            }\n        }\n        if (props.onPending) {\n            const state = props.resource.state;\n            if (state === 'pending') {\n                return props.onPending();\n            }\n            else if (state === 'resolved') {\n                return props.onResolved(props.resource.resolved);\n            }\n        }\n    }\n    const promise = props.resource.promise.then(props.onResolved, props.onRejected);\n    // if (isServer) {\n    //   const onPending = props.onPending;\n    //   if (props.ssrWait && onPending) {\n    //     promise = Promise.race([\n    //       delay(props.ssrWait).then(() => {\n    //         getInternalResource(props.resource).dirty = true;\n    //         return onPending();\n    //       }),\n    //       promise,\n    //     ]);\n    //   }\n    // }\n    // Resource path\n    return jsx(Fragment, {\n        children: promise,\n    });\n};\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        promise: undefined,\n        resolved: undefined,\n        error: undefined,\n        state: 'pending',\n        timeout: opts?.timeout,\n    };\n    return resource;\n};\nexport const createResourceReturn = (containerState, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.promise = initialPromise;\n    const resource = createProxy(result, containerState, 0, undefined);\n    return resource;\n};\nexport const useIsServer = () => {\n    const ctx = getInvokeContext();\n    assertDefined(ctx.$doc$, 'doc must be defined', ctx);\n    return isServer(ctx.$doc$);\n};\nexport const getInternalResource = (resource) => {\n    return getProxyTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && obj.__brand === 'resource';\n};\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource.state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource.resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2`;\n    }\n};\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn(undefined);\n    result.promise = Promise.resolve();\n    if (first === '0') {\n        result.state = 'resolved';\n        result.resolved = id;\n    }\n    else if (first === '1') {\n        result.state = 'pending';\n        result.promise = new Promise(() => { });\n    }\n    else if (first === '2') {\n        result.state = 'rejected';\n        result.promise = Promise.reject();\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,","import { componentQrl, isQwikComponent, } from '../component/component.public';\nimport { parseQRL, stringifyQRL } from '../import/qrl';\nimport { isQrl } from '../import/qrl-class';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseWatch, serializeWatch, } from '../use/use-watch';\nimport { isDocument } from '../util/element';\nconst UndefinedSerializer = {\n    test: (obj) => obj === undefined,\n    prepare: () => undefined,\n};\nconst QRLSerializer = {\n    test: (v) => isQrl(v),\n    serialize: (obj, getObjId, containerState) => {\n        return stringifyQRL(obj, {\n            $platform$: containerState.$platform$,\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    fill: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst DocumentSerializer = {\n    test: (v) => isDocument(v),\n    prepare: (_, _c, doc) => {\n        return doc;\n    },\n};\nconst ResourceSerializer = {\n    test: (v) => isResourceReturn(v),\n    serialize: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    prepare: (data) => {\n        return parseResourceReturn(data);\n    },\n    fill: (resource, getObject) => {\n        if (resource.state === 'resolved') {\n            resource.resolved = getObject(resource.resolved);\n            resource.promise = Promise.resolve(resource.resolved);\n        }\n    },\n};\nconst WatchSerializer = {\n    test: (v) => isSubscriberDescriptor(v),\n    serialize: (obj, getObjId) => serializeWatch(obj, getObjId),\n    prepare: (data) => parseWatch(data),\n    fill: (watch, getObject) => {\n        watch.$el$ = getObject(watch.$el$);\n        watch.$qrl$ = getObject(watch.$qrl$);\n        if (watch.$resource$) {\n            watch.$resource$ = getObject(watch.$resource$);\n        }\n    },\n};\nconst URLSerializer = {\n    test: (v) => v instanceof URL,\n    serialize: (obj) => obj.href,\n    prepare: (data) => new URL(data),\n};\nconst DateSerializer = {\n    test: (v) => v instanceof Date,\n    serialize: (obj) => obj.toISOString(),\n    prepare: (data) => new Date(data),\n};\nconst RegexSerializer = {\n    test: (v) => v instanceof RegExp,\n    serialize: (obj) => `${obj.flags} ${obj.source}`,\n    prepare: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n};\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = {\n    test: (obj) => isQwikComponent(obj),\n    serialize: (obj, getObjId, containerState) => {\n        const [qrl, options] = obj[SERIALIZABLE_STATE];\n        const optionsJSON = JSON.stringify(options);\n        return (stringifyQRL(qrl, {\n            $platform$: containerState.$platform$,\n            $getObjId$: getObjId,\n        }) + (optionsJSON === '{}' ? '' : optionsJSON));\n    },\n    prepare: (data, containerState) => {\n        const optionsIndex = data.indexOf('{');\n        const qrlString = optionsIndex == -1 ? data : data.slice(0, optionsIndex);\n        const options = optionsIndex == -1 ? {} : JSON.parse(data.slice(optionsIndex));\n        const qrl = parseQRL(qrlString, containerState.$containerEl$);\n        return componentQrl(qrl, options);\n    },\n    fill: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst PureFunctionSerializer = {\n    test: (obj) => typeof obj === 'function' && obj.__qwik_serializable__ !== undefined,\n    serialize: (obj) => {\n        return obj.toString();\n    },\n    prepare: (data) => {\n        const fn = new Function('return ' + data)();\n        fn.__qwik_serializable__ = true;\n        return fn;\n    },\n    fill: undefined,\n};\nconst serializers = [\n    UndefinedSerializer,\n    QRLSerializer,\n    DocumentSerializer,\n    ResourceSerializer,\n    WatchSerializer,\n    URLSerializer,\n    RegexSerializer,\n    DateSerializer,\n    ComponentSerializer,\n    PureFunctionSerializer,\n];\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, containerState) => {\n    for (let i = 0; i < serializers.length; i++) {\n        const s = serializers[i];\n        if (s.test(obj)) {\n            let value = String.fromCharCode(i);\n            if (s.serialize) {\n                value += s.serialize(obj, getObjID, containerState);\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\nexport const createParser = (getObject, containerState, doc) => {\n    const map = new Map();\n    return {\n        prepare(data) {\n            for (let i = 0; i < serializers.length; i++) {\n                const s = serializers[i];\n                const prefix = String.fromCodePoint(i);\n                if (data.startsWith(prefix)) {\n                    const value = s.prepare(data.slice(prefix.length), containerState, doc);\n                    if (s.fill) {\n                        map.set(value, s);\n                    }\n                    return value;\n                }\n            }\n            return data;\n        },\n        fill(obj) {\n            const serializer = map.get(obj);\n            if (serializer) {\n                serializer.fill(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertTrue } from '../assert/assert';\nimport { qError, QError_immutableProps, QError_onlyLiteralWrapped, QError_onlyObjectWrapped, QError_verifySerializable, } from '../error/error';\nimport { isQrl } from '../import/qrl-class';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { isDocument, isElement, isNode } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { tryGetContext } from '../props/props';\nimport { RenderEvent } from '../util/markers';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { isPromise } from '../util/promises';\nimport { canSerialize } from './serializers';\nexport const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\n/**\n * Creates a proxy that notifies of any writes.\n */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    return createProxy(target, containerState, flags, undefined);\n};\nexport const createProxy = (target, containerState, flags, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!containerState.$proxyMap$.has(target), 'Proxy was already created', target);\n    if (!isObject(target)) {\n        throw qError(QError_onlyObjectWrapped, target);\n    }\n    if (target.constructor !== Object && !isArray(target)) {\n        throw qError(QError_onlyLiteralWrapped, target);\n    }\n    const manager = containerState.$subsManager$.$getLocal$(target, subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager, flags));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nconst QOjectTargetSymbol = Symbol();\nconst QOjectFlagsSymbol = Symbol();\nclass ReadWriteProxyHandler {\n    constructor($containerState$, $manager$, $flags$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n        this.$flags$ = $flags$;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol)\n                return target;\n            if (prop === QOjectFlagsSymbol)\n                return this.$flags$;\n            return target[prop];\n        }\n        let subscriber;\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        let value = target[prop];\n        if (isMutable(value)) {\n            value = value.v;\n        }\n        else if (immutable) {\n            subscriber = null;\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$(subscriber, isA ? undefined : prop);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            verifySerializable(unwrappedNewValue);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$, prop);\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        if (oldValue !== unwrappedNewValue) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol)\n            return true;\n        if (property === QOjectFlagsSymbol)\n            return true;\n        return Object.prototype.hasOwnProperty.call(target, property);\n    }\n    ownKeys(target) {\n        let subscriber = null;\n        const invokeCtx = tryGetInvokeContext();\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (subscriber) {\n            this.$manager$.$addSub$(subscriber);\n        }\n        return Object.getOwnPropertyNames(target);\n    }\n}\nconst wrap = (value, containerState) => {\n    if (isQrl(value)) {\n        return value;\n    }\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (isNode(nakedValue)) {\n            return value;\n        }\n        if (!shouldSerialize(nakedValue)) {\n            return value;\n        }\n        if (qDev) {\n            verifySerializable(value);\n        }\n        const proxy = containerState.$proxyMap$.get(value);\n        return proxy ? proxy : getOrCreateProxy(value, containerState, QObjectRecursive);\n    }\n    else {\n        return value;\n    }\n};\nexport const verifySerializable = (value) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen);\n};\nconst _verifySerializable = (value, seen) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        switch (typeof unwrapped) {\n            case 'object':\n                if (isPromise(unwrapped))\n                    return value;\n                if (isElement(unwrapped))\n                    return value;\n                if (isDocument(unwrapped))\n                    return value;\n                if (isArray(unwrapped)) {\n                    for (const item of unwrapped) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const item of Object.values(unwrapped)) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        throw qError(QError_verifySerializable, unwrapped);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this\n * is a runtime error as Store wants to eagerly report when a non-serializable property is\n * assigned to it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.builder.io/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\nexport const immutable = (input) => {\n    return Object.freeze(input);\n};\n// <docs markdown=\"../readme.md#mutable\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#mutable instead)\n/**\n * Mark property as mutable.\n *\n * Qwik assumes that all bindings in components are immutable by default. This is done for two\n * reasons:\n *\n * 1. JSX does not allow Qwik runtime to know if a binding is static or mutable.\n *    `<Example valueA={123} valueB={exp}>` At runtime there is no way to know if `valueA` is\n * immutable.\n * 2. If Qwik assumes that properties are immutable, then it can do a better job data-shaking the\n * amount of code that needs to be serialized to the client.\n *\n * Because Qwik assumes that bindings are immutable by default, it needs a way for a developer to\n * let it know that binding is mutable. `mutable()` function serves that purpose.\n * `<Example valueA={123} valueB={mutable(exp)}>`. In this case, the Qwik runtime can correctly\n * recognize that the `Example` props are mutable and need to be serialized.\n *\n * See: [Mutable Props Tutorial](http://qwik.builder.io/tutorial/props/mutable) for an example\n *\n * @alpha\n */\n// </docs>\nexport const mutable = (v) => {\n    return {\n        [MUTABLE]: true,\n        v,\n    };\n};\nexport const isConnected = (sub) => {\n    if (isElement(sub)) {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n    else {\n        return isConnected(sub.$el$);\n    }\n};\nconst MUTABLE = Symbol('mutable');\nexport const isMutable = (v) => {\n    return isObject(v) && v[MUTABLE] === true;\n};\n/**\n * @alpha\n */\nexport const unwrapProxy = (proxy) => {\n    return getProxyTarget(proxy) ?? proxy;\n};\nexport const getProxyTarget = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectTargetSymbol];\n    }\n    return undefined;\n};\nexport const getProxyFlags = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectFlagsSymbol];\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,","import { createProxy, getProxyTarget, isMutable, mutable, QObjectImmutable, } from '../object/q-object';\nimport { resumeContainer } from '../object/store';\nimport { QContainerAttr } from '../util/markers';\nimport { destroyWatch } from '../use/use-watch';\nimport { pauseContainer } from '../object/store';\nimport { qDev } from '../util/qdev';\nimport { logError } from '../util/log';\nimport { isQrl } from '../import/qrl-class';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertDefined } from '../assert/assert';\nimport { codeToText, QError_immutableJsxProps } from '../error/error';\nimport { getContainer } from '../use/use-core';\nimport { getContainerState } from '../render/container';\nconst Q_CTX = '__ctx__';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qDev) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: getContainerState(containerEl),\n    };\n};\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (element) => {\n    let ctx = tryGetContext(element);\n    if (!ctx) {\n        element[Q_CTX] = ctx = {\n            $dirty$: false,\n            $mounted$: false,\n            $id$: '',\n            $element$: element,\n            $cache$: null,\n            $refMap$: [],\n            $seq$: [],\n            $watches$: [],\n            $scopeIds$: null,\n            $appendStyles$: null,\n            $props$: null,\n            $renderQrl$: null,\n            $component$: null,\n            $listeners$: null,\n            $contexts$: null,\n        };\n    }\n    return ctx;\n};\nexport const cleanupContext = (ctx, subsManager) => {\n    const el = ctx.$element$;\n    ctx.$watches$.forEach((watch) => {\n        subsManager.$clearSub$(watch);\n        destroyWatch(watch);\n    });\n    if (ctx.$renderQrl$) {\n        subsManager.$clearSub$(el);\n    }\n    if (ctx.$cache$) {\n        ctx.$cache$.clear();\n        ctx.$cache$ = null;\n    }\n    ctx.$component$ = null;\n    ctx.$renderQrl$ = null;\n    ctx.$seq$.length = 0;\n    ctx.$watches$.length = 0;\n    ctx.$dirty$ = false;\n    ctx.$refMap$.length = 0;\n    el[Q_CTX] = undefined;\n};\nconst PREFIXES = ['document:on', 'window:on', 'on'];\nconst SCOPED = ['on-document', 'on-window', 'on'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = prop.slice(1);\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return `${scope}:${prop}`;\n};\nexport const createProps = (target, containerState) => {\n    return createProxy(target, containerState, QObjectImmutable);\n};\nexport const getPropsMutator = (ctx, containerState) => {\n    let props = ctx.$props$;\n    if (!ctx.$props$) {\n        ctx.$props$ = props = createProps({}, containerState);\n    }\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    const manager = containerState.$subsManager$.$getLocal$(target);\n    return {\n        set(prop, value) {\n            const didSet = prop in target;\n            let oldValue = target[prop];\n            let mut = false;\n            if (isMutable(oldValue)) {\n                oldValue = oldValue.v;\n            }\n            if (containerState.$mutableProps$) {\n                mut = true;\n                if (isMutable(value)) {\n                    value = value.v;\n                    target[prop] = value;\n                }\n                else {\n                    target[prop] = mutable(value);\n                }\n            }\n            else {\n                target[prop] = value;\n                if (isMutable(value)) {\n                    value = value.v;\n                    mut = true;\n                }\n            }\n            if (oldValue !== value) {\n                if (qDev) {\n                    if (didSet && !mut && !isQrl(value)) {\n                        const displayName = ctx.$renderQrl$?.getSymbol() ?? ctx.$element$.localName;\n                        logError(codeToText(QError_immutableJsxProps), `If you need to change a value of a passed in prop, please wrap the prop with \"mutable()\" <${displayName} ${prop}={mutable(...)}>`, '\\n - Component:', displayName, '\\n - Prop:', prop, '\\n - Old value:', oldValue, '\\n - New value:', value);\n                    }\n                }\n                manager.$notifySubs$(prop);\n            }\n        },\n    };\n};\n/**\n * @internal\n */\nexport const _useMutableProps = (element, mutable) => {\n    const ctx = getContainer(element);\n    getContainerState(ctx).$mutableProps$ = mutable;\n};\n//# sourceMappingURL=data:application/json;base64,","import { tryGetContext } from '../props/props';\nimport { isElement } from './element';\nimport { qDev } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // eslint-disable-next-line no-console\n    console.error('%cQWIK ERROR', STYLE, err.message, ...printParams(optionalParams), err.stack);\n    return err;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = logError(message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nexport const logWarn = (message, ...optionalParams) => {\n    // eslint-disable-next-line no-console\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$renderQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxLQUFLLEdBQUcsSUFBSTtJQUNoQixDQUFDLENBQUMsNEZBQTRGO0lBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFUCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDbEUsTUFBTSxHQUFHLEdBQUcsT0FBTyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRSxzQ0FBc0M7SUFDdEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdGLE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ3pFLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsR0FBRyxjQUFjLENBQUMsQ0FBQztJQUNqRCx1Q0FBdUM7SUFDdkMsUUFBUSxDQUFDO0lBQ1QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDakUsc0NBQXNDO0lBQ3RDLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0tBQzdFO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUNyRSxJQUFJLElBQUksRUFBRTtRQUNSLHNDQUFzQztRQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7S0FDekU7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLFdBQVcsR0FBRyxDQUFDLGNBQXFCLEVBQUUsRUFBRTtJQUM1QyxJQUFJLElBQUksRUFBRTtRQUNSLE9BQU8sY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixPQUFPLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4QjtZQUNELE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sY0FBYyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBVyxFQUFFLEVBQUU7SUFDbkMsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sUUFBUSxHQUFZLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUM1QyxPQUFPLE9BQU8sS0FBSyxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUVyRixPQUFPO1FBQ0wsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPO1FBQ25CLFNBQVMsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRTtRQUN4QyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDbEMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHO0tBQ2hDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0cnlHZXRDb250ZXh0IH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSAnLi9lbGVtZW50JztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuL3FkZXYnO1xuXG5jb25zdCBTVFlMRSA9IHFEZXZcbiAgPyBgYmFja2dyb3VuZDogIzU2NENFMDsgY29sb3I6IHdoaXRlOyBwYWRkaW5nOiAycHggM3B4OyBib3JkZXItcmFkaXVzOiAycHg7IGZvbnQtc2l6ZTogMC44ZW07YFxuICA6ICcnO1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3IgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVyciA9IG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciA/IG1lc3NhZ2UgOiBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoJyVjUVdJSyBFUlJPUicsIFNUWUxFLCBlcnIubWVzc2FnZSwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpLCBlcnIuc3RhY2spO1xuICByZXR1cm4gZXJyO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvZ0Vycm9yQW5kU3RvcCA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgY29uc3QgZXJyID0gbG9nRXJyb3IobWVzc2FnZSwgLi4ub3B0aW9uYWxQYXJhbXMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVidWdnZXJcbiAgZGVidWdnZXI7XG4gIHJldHVybiBlcnI7XG59O1xuXG5leHBvcnQgY29uc3QgbG9nV2FybiA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgaWYgKHFEZXYpIHtcbiAgICBjb25zb2xlLndhcm4oJyVjUVdJSyBXQVJOJywgU1RZTEUsIG1lc3NhZ2UsIC4uLnByaW50UGFyYW1zKG9wdGlvbmFsUGFyYW1zKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBsb2dEZWJ1ZyA9IChtZXNzYWdlPzogc3RyaW5nLCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZGVidWcoJyVjUVdJSycsIFNUWUxFLCBtZXNzYWdlLCAuLi5wcmludFBhcmFtcyhvcHRpb25hbFBhcmFtcykpO1xuICB9XG59O1xuXG5jb25zdCBwcmludFBhcmFtcyA9IChvcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICByZXR1cm4gb3B0aW9uYWxQYXJhbXMubWFwKChwKSA9PiB7XG4gICAgICBpZiAoaXNFbGVtZW50KHApKSB7XG4gICAgICAgIHJldHVybiBwcmludEVsZW1lbnQocCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcDtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gb3B0aW9uYWxQYXJhbXM7XG59O1xuXG5jb25zdCBwcmludEVsZW1lbnQgPSAoZWw6IEVsZW1lbnQpID0+IHtcbiAgY29uc3QgY3R4ID0gdHJ5R2V0Q29udGV4dChlbCk7XG4gIGNvbnN0IGlzU2VydmVyOiBib29sZWFuID0gLyojX19QVVJFX18qLyAoKCkgPT5cbiAgICB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgISFwcm9jZXNzLnZlcnNpb25zICYmICEhcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSgpO1xuXG4gIHJldHVybiB7XG4gICAgdGFnTmFtZTogZWwudGFnTmFtZSxcbiAgICByZW5kZXJRUkw6IGN0eD8uJHJlbmRlclFybCQ/LmdldFN5bWJvbCgpLFxuICAgIGVsZW1lbnQ6IGlzU2VydmVyID8gdW5kZWZpbmVkIDogZWwsXG4gICAgY3R4OiBpc1NlcnZlciA/IHVuZGVmaW5lZCA6IGN0eCxcbiAgfTtcbn07XG4iXX0=","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_canNotMountUseServerMount = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    return logErrorAndStop(text, ...parts);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute',\n            'Can not serialize a HTML Node that is not an Element',\n            'Rruntime but no instance found on element.',\n            'Only primitive and object literals can be serialized',\n            'Crash while rendering',\n            'You can render over a existing q:container. Skipping render().',\n            'Set property',\n            \"Only function's and 'string's are supported.\",\n            \"Only objects can be wrapped in 'QObject'\",\n            `Only objects literals can be wrapped in 'QObject'`,\n            'QRL is not a function',\n            'Dynamic import not found',\n            'Unknown type argument',\n            'not found state for useContext',\n            \"Invoking 'use*()' method outside of invocation context.\",\n            'Cant access renderCtx for existing context',\n            'Cant access document for existing context',\n            'props are inmutable',\n            '<Host> component can only be used at the root of a Qwik component$()',\n            'Props are immutable by default.',\n            'use- method must be called only at the root level of a component$()',\n            'Container is already paused. Skipping',\n            'Components using useServerMount() can only be mounted in the server, if you need your component to be mounted in the client, use \"useMount$()\" instead',\n            'When rendering directly on top of Document, the root node must be a <html>',\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>',\n            'Invalid JSXNode type. It must be either a function or a string. Found:',\n            'Tracking value changes can only be done to useStore() objects and component props',\n            'Missing Object ID for captured object',\n            'The provided Context reference is not a valid context created by createContext()', // 27\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { verifySerializable } from '../object/q-object';\nimport { getPlatform } from '../platform/platform';\nimport { newInvokeContext, useInvoke } from '../use/use-core';\nimport { then } from '../util/promises';\nimport { qDev } from '../util/qdev';\nimport { isFunction } from '../util/types';\nimport { stringifyQRL } from './qrl';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev) {\n        verifySerializable(captureRef);\n    }\n    let cachedEl;\n    const setContainer = (el) => {\n        if (!cachedEl) {\n            cachedEl = el;\n        }\n    };\n    const resolve = async (el) => {\n        if (el) {\n            setContainer(el);\n        }\n        if (symbolRef) {\n            return symbolRef;\n        }\n        if (symbolFn) {\n            return (symbolRef = symbolFn().then((module) => (symbolRef = module[symbol])));\n        }\n        else {\n            if (!cachedEl) {\n                throw new Error(`QRL '${chunk}#${symbol || 'default'}' does not have an attached container`);\n            }\n            const symbol2 = getPlatform(cachedEl).importSymbol(cachedEl, chunk, symbol);\n            return (symbolRef = then(symbol2, (ref) => {\n                return (symbolRef = ref);\n            }));\n        }\n    };\n    const resolveLazy = (el) => {\n        return isFunction(symbolRef) ? symbolRef : resolve(el);\n    };\n    const invokeFn = (el, currentCtx, beforeFn) => {\n        return ((...args) => {\n            const fn = resolveLazy(el);\n            return then(fn, (fn) => {\n                if (isFunction(fn)) {\n                    const baseContext = currentCtx ?? newInvokeContext();\n                    const context = {\n                        ...baseContext,\n                        $qrl$: QRL,\n                    };\n                    if (beforeFn) {\n                        beforeFn();\n                    }\n                    return useInvoke(context, fn, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        });\n    };\n    const invoke = async function (...args) {\n        const fn = invokeFn();\n        const result = await fn(...args);\n        return result;\n    };\n    const QRL = invoke;\n    const methods = {\n        getSymbol: () => refSymbol ?? symbol,\n        getHash: () => getSymbolHash(refSymbol ?? symbol),\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        get $capture$() {\n            return capture;\n        },\n        set $capture$(v) {\n            capture = v;\n        },\n        get $captureRef$() {\n            return captureRef;\n        },\n        set $captureRef$(v) {\n            captureRef = v;\n        },\n        $invokeFn$: invokeFn,\n        $copy$() {\n            return createQRL(chunk, symbol, symbolRef, symbolFn, null, captureRef, refSymbol);\n        },\n        $serialize$(options) {\n            return stringifyQRL(QRL, options);\n        },\n    };\n    return Object.assign(invoke, methods);\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport const isSameQRL = (a, b) => {\n    return a.getHash() === b.getHash();\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { getDocument } from '../util/dom';\nimport { logError } from '../util/log';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { codeToText, qError, QError_dynamicImportFailed, QError_runtimeQrlNoElement, QError_unknownTypeArgument, } from '../error/error';\nimport { qTest } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nlet runtimeSymbolId = 0;\nconst RUNTIME_QRL = '/runtimeQRL';\nconst INLINED_QRL = '/inlinedQRL';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @see `QRL`, `$(...)`\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - a set of lexically scoped variables to capture.\n * @alpha\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    let chunk;\n    let symbolFn = null;\n    if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        let match;\n        const srcCode = String(chunkOrFn);\n        if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n            chunk = match[2];\n        }\n        else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n            const ref = 'QWIK-SELF';\n            const frames = new Error(ref).stack.split('\\n');\n            const start = frames.findIndex((f) => f.includes(ref));\n            const frame = frames[start + 2];\n            match = frame.match(EXTRACT_FILE_NAME);\n            if (!match) {\n                chunk = 'main';\n            }\n            else {\n                chunk = match[1];\n            }\n        }\n        else {\n            throw qError(QError_dynamicImportFailed, srcCode);\n        }\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    // Unwrap subscribers\n    const qrl = createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n    const ctx = tryGetInvokeContext();\n    if (ctx && ctx.$element$) {\n        qrl.$setContainer$(ctx.$element$);\n    }\n    return qrl;\n};\nexport const runtimeQrl = (symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQRL(RUNTIME_QRL, 's' + runtimeSymbolId++, symbol, null, null, lexicalScopeCapture, null);\n};\n/**\n * @alpha\n */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(INLINED_QRL, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\nexport const stringifyQRL = (qrl, opts = {}) => {\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = opts.$platform$;\n    const element = opts.$element$;\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    const parts = [chunk];\n    if (symbol && symbol !== 'default') {\n        if (chunk === RUNTIME_QRL && qTest) {\n            symbol = '_';\n        }\n        parts.push('#', symbol);\n    }\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (opts.$getObjId$) {\n        if (captureRef && captureRef.length) {\n            const capture = captureRef.map(opts.$getObjId$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n    }\n    else if (capture && capture.length > 0) {\n        parts.push(`[${capture.join(' ')}]`);\n    }\n    const qrlString = parts.join('');\n    if (qrl.$chunk$ === RUNTIME_QRL && element) {\n        const qrls = element.__qrls__ || (element.__qrls__ = new Set());\n        qrls.add(qrl);\n    }\n    return qrlString;\n};\nexport const serializeQRLs = (existingQRLs, ctx) => {\n    const opts = {\n        $platform$: getPlatform(ctx.$element$),\n        $element$: ctx.$element$,\n    };\n    return existingQRLs.map((qrl) => stringifyQRL(qrl, opts)).join('\\n');\n};\nexport const qrlToUrl = (element, qrl) => {\n    return new URL(stringifyQRL(qrl), getDocument(element).baseURI);\n};\n/**\n * `./chunk#symbol[captures]\n */\nexport const parseQRL = (qrl, el) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    if (chunk === RUNTIME_QRL) {\n        logError(codeToText(QError_runtimeQrlNoElement), qrl);\n    }\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (el) {\n        iQrl.$setContainer$(el);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\n//# sourceMappingURL=data:application/json;base64,","import { runtimeQrl } from './qrl';\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n * import { importedFn } from './import/example';\n * import { createContext, useContext, useContextProvider } from './use/use-context';\n * import { useRef } from './use/use-ref';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(importedFn); // importedFn is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => importedFn()); // importedFn is importable\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n */\n// </docs>\nexport const $ = (expression) => {\n    return runtimeQrl(expression);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\nimport { OnRenderProp } from '../util/markers';\nimport { jsx } from '../render/jsx/jsx-runtime';\nimport { SERIALIZABLE_STATE } from '../object/serializers';\nimport { qTest } from '../util/qdev';\nconst ELEMENTS_SKIP_KEY = ['html', 'body', 'head'];\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (onRenderQrl, options = {}) => {\n    const tagName = options.tagName ?? 'div';\n    const skipKey = ELEMENTS_SKIP_KEY.includes(tagName);\n    // Return a QComponent Factory function.\n    function QwikComponent(props, key) {\n        const finalTag = props['host:tagName'] ?? tagName;\n        const hash = qTest ? 'sX' : onRenderQrl.getHash();\n        const finalKey = skipKey ? undefined : hash + ':' + (key ? key : '');\n        return jsx(finalTag, { [OnRenderProp]: onRenderQrl, ...props }, finalKey);\n    }\n    QwikComponent[SERIALIZABLE_STATE] = [onRenderQrl, options];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount, options) => {\n    return componentQrl($(onMount), options);\n};\n//# sourceMappingURL=data:application/json;base64,","/* eslint-disable */\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { JSXNodeImpl } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * @public\n */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : EMPTY_ARRAY,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    return new JSXNodeImpl(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFrQixFQUFFLEdBQVMsRUFBTyxFQUFFO0lBQ3BFLG9GQUFvRjtJQUNwRixJQUFJLENBQUMsR0FBRztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxDQUFDLENBQ2YsSUFBVSxFQUNWLEtBQW1CLEVBQ25CLEdBQUcsUUFBZTtJQUVsQixpREFBaUQ7SUFDakQsMENBQTBDO0lBQzFDLDZFQUE2RTtJQUM3RSwwREFBMEQ7SUFFMUQsTUFBTSxlQUFlLEdBQVE7UUFDM0IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDdEUsQ0FBQztJQUVGLElBQUksR0FBUSxDQUFDO0lBQ2IsSUFBSSxDQUFNLENBQUM7SUFFWCxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDZixJQUFJLENBQUMsSUFBSSxLQUFLO1lBQUUsR0FBRyxHQUFJLEtBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQ25ELGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlsL2ZseXdlaWdodCc7XG5pbXBvcnQgeyBKU1hOb2RlSW1wbCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuQXJyYXkgPSA8VD4oYXJyYXk6IChUIHwgVFtdKVtdLCBkc3Q/OiBUW10pOiBUW10gPT4ge1xuICAvLyBZZXMgdGhpcyBmdW5jdGlvbiBpcyBqdXN0IEFycmF5LmZsYXQsIGJ1dCB3ZSBuZWVkIHRvIHJ1biBvbiBvbGQgdmVyc2lvbnMgb2YgTm9kZS5cbiAgaWYgKCFkc3QpIGRzdCA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXkpIHtcbiAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgZmxhdHRlbkFycmF5KGl0ZW0sIGRzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoPFRZUEUgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxQUk9QUz4sIFBST1BTIGV4dGVuZHMge30gPSB7fT4oXG4gIHR5cGU6IFRZUEUsXG4gIHByb3BzOiBQUk9QUyB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBhbnlbXVxuKTogSlNYTm9kZTxUWVBFPiB7XG4gIC8vIFVzaW5nIGxlZ2FjeSBoKCkganN4IHRyYW5zZm9ybSBhbmQgbW9ycGhpbmcgaXRcbiAgLy8gc28gaXQgY2FuIHVzZSB0aGUgbW9kZXJuIHZkb20gc3RydWN0dXJlXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvYmxvZy8yMDIwLzA5LzIyL2ludHJvZHVjaW5nLXRoZS1uZXctanN4LXRyYW5zZm9ybS5odG1sXG4gIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy90c2NvbmZpZyNqc3hJbXBvcnRTb3VyY2VcblxuICBjb25zdCBub3JtYWxpemVkUHJvcHM6IGFueSA9IHtcbiAgICBjaGlsZHJlbjogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBmbGF0dGVuQXJyYXkoY2hpbGRyZW4pIDogRU1QVFlfQVJSQVksXG4gIH07XG5cbiAgbGV0IGtleTogYW55O1xuICBsZXQgaTogYW55O1xuXG4gIGZvciAoaSBpbiBwcm9wcykge1xuICAgIGlmIChpID09ICdrZXknKSBrZXkgPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gICAgZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IEpTWE5vZGVJbXBsKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5KTtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBoIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBOb2RlLCBkYXRhOiBhbnkpOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGNoaWxkcmVuOiBBcnJheTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGRhdGE6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChcbiAgICB0eXBlOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIGNoaWxkcmVuOiBBcnJheTxKU1hOb2RlPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPlxuICApOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHNlbDogYW55LCBkYXRhOiBhbnkgfCBudWxsLCBjaGlsZHJlbjogSlNYTm9kZTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuXG4gIGV4cG9ydCBuYW1lc3BhY2UgSlNYIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBRd2lrSlNYLkVsZW1lbnQge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBRd2lrSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNFbGVtZW50cyB7fVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHtcbiAgICAgIGNoaWxkcmVuPzogYW55O1xuICAgIH1cbiAgfVxufVxuIl19","import { QSlot, QSlotName } from '../../util/markers';\nimport { isArray } from '../../util/types';\nimport { jsx } from './jsx-runtime';\n/**\n * @public\n */\nexport const Slot = (props) => {\n    const hasChildren = isArray(props.children) ? props.children.length > 0 : props.children != null;\n    const name = props.name ?? '';\n    const tagName = props.as ?? QSlot;\n    const newChildrem = !hasChildren\n        ? []\n        : jsx('q:fallback', {\n            children: props.children,\n        });\n    return jsx(tagName, {\n        [QSlotName]: name,\n        children: newChildrem,\n    }, name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3BDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUlaLENBQUMsS0FBSyxFQUFFLEVBQUU7SUFDYixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO0lBRWpHLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQzlCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLElBQUksS0FBSyxDQUFDO0lBQ2xDLE1BQU0sV0FBVyxHQUFHLENBQUMsV0FBVztRQUM5QixDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFO1lBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUN6QixDQUFDLENBQUM7SUFFUCxPQUFPLEdBQUcsQ0FDUixPQUFPLEVBQ1A7UUFDRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLElBQUk7UUFDakIsUUFBUSxFQUFFLFdBQVc7S0FDdEIsRUFDRCxJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFFTbG90LCBRU2xvdE5hbWUgfSBmcm9tICcuLi8uLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaXNBcnJheSB9IGZyb20gJy4uLy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnLi9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgU2xvdDogRnVuY3Rpb25Db21wb25lbnQ8e1xuICBuYW1lPzogc3RyaW5nO1xuICBhcz86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBhbnk7XG59PiA9IChwcm9wcykgPT4ge1xuICBjb25zdCBoYXNDaGlsZHJlbiA9IGlzQXJyYXkocHJvcHMuY2hpbGRyZW4pID8gcHJvcHMuY2hpbGRyZW4ubGVuZ3RoID4gMCA6IHByb3BzLmNoaWxkcmVuICE9IG51bGw7XG5cbiAgY29uc3QgbmFtZSA9IHByb3BzLm5hbWUgPz8gJyc7XG4gIGNvbnN0IHRhZ05hbWUgPSBwcm9wcy5hcyA/PyBRU2xvdDtcbiAgY29uc3QgbmV3Q2hpbGRyZW0gPSAhaGFzQ2hpbGRyZW5cbiAgICA/IFtdXG4gICAgOiBqc3goJ3E6ZmFsbGJhY2snLCB7XG4gICAgICAgIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbixcbiAgICAgIH0pO1xuXG4gIHJldHVybiBqc3goXG4gICAgdGFnTmFtZSxcbiAgICB7XG4gICAgICBbUVNsb3ROYW1lXTogbmFtZSxcbiAgICAgIGNoaWxkcmVuOiBuZXdDaGlsZHJlbSxcbiAgICB9LFxuICAgIG5hbWVcbiAgKTtcbn07XG4iXX0=","/**\n * QWIK_VERSION\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBSSxVQUFrQixDQUFDLFlBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFFXSUtfVkVSU0lPTlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IChnbG9iYWxUaGlzIGFzIGFueSkuUVdJS19WRVJTSU9OIGFzIHN0cmluZztcbiJdfQ==","import { isDocument } from '../../util/element';\nimport { executeContext, printRenderStats } from './visitor';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { visitJsxNode } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { qDev, qTest } from '../../util/qdev';\nimport { version } from '../../version';\nimport { QContainerAttr } from '../../util/markers';\nimport { logWarn } from '../../util/log';\nimport { appendQwikDevTools } from '../../props/props';\nimport { qError, QError_cannotRenderOverExistingContainer } from '../../error/error';\nimport { directSetAttribute } from '../fast-calls';\nimport { processData } from './render-dom';\nimport { getContainerState } from '../container';\nimport { postRendering } from './notify-render';\nimport { BASE_QWIK_STYLES, createRenderContext } from '../execute-component';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means\n * it always tries to reuse what is already in the DOM (rather then destroy and\n * recreate content.)\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When\n *     possible the rendering will try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @alpha\n */\nexport const render = async (parent, jsxNode, opts) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        throw qError(QError_cannotRenderOverExistingContainer, containerEl);\n    }\n    injectQContainer(containerEl);\n    const containerState = getContainerState(containerEl);\n    const envData = opts?.envData;\n    if (envData) {\n        Object.assign(containerState.$envData$, envData);\n    }\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = renderRoot(parent, jsxNode, doc, containerState, containerEl);\n    const renderCtx = await containerState.$renderPromise$;\n    const allowRerender = opts?.allowRerender ?? true;\n    if (allowRerender) {\n        await postRendering(containerState, renderCtx);\n    }\n    else {\n        containerState.$hostsRendering$ = undefined;\n        containerState.$renderPromise$ = undefined;\n        const next = containerState.$hostsNext$.size +\n            containerState.$hostsStaging$.size +\n            containerState.$watchNext$.size +\n            containerState.$watchStaging$.size;\n        if (next > 0) {\n            logWarn('State changed and a rerender is required, skipping');\n        }\n    }\n};\nconst renderRoot = async (parent, jsxNode, doc, containerState, containerEl) => {\n    const ctx = createRenderContext(doc, containerState);\n    ctx.$roots$.push(parent);\n    const processedNodes = await processData(jsxNode);\n    await visitJsxNode(ctx, parent, processedNodes, false);\n    executeContext(ctx);\n    if (!qTest) {\n        injectQwikSlotCSS(parent);\n    }\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n        printRenderStats(ctx);\n    }\n    return ctx;\n};\nexport const injectQwikSlotCSS = (docOrElm) => {\n    const doc = getDocument(docOrElm);\n    const isDoc = isDocument(docOrElm);\n    const style = doc.createElement('style');\n    directSetAttribute(style, 'id', 'qwik/base-styles');\n    style.textContent = BASE_QWIK_STYLES;\n    if (isDoc) {\n        docOrElm.head.appendChild(style);\n    }\n    else {\n        docOrElm.insertBefore(style, docOrElm.firstChild);\n    }\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version || '');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL3JlbmRlci5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDN0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsTUFBTSxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDM0MsT0FBTyxFQUFrQixpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFVN0U7Ozs7Ozs7Ozs7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Q0FBQyxRQUE0QixFQUFFLEVBQUU7SUFDaEUsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztJQUNwRCxLQUFLLENBQUMsV0FBVyxHQUFHLGdCQUFnQixDQUFDO0lBQ3JDLElBQUksS0FBSyxFQUFFO1FBQ1QsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbEM7U0FBTTtRQUNMLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNuRDtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLFFBQTRCLEVBQVcsRUFBRTtJQUNsRSxPQUFPLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQ3BFLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsV0FBb0IsRUFBRSxFQUFFO0lBQ3ZELGtCQUFrQixDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzVELGtCQUFrQixDQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDN0QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEb2N1bWVudCB9IGZyb20gJy4uLy4uL3V0aWwvZWxlbWVudCc7XG5pbXBvcnQgeyBleGVjdXRlQ29udGV4dCwgcHJpbnRSZW5kZXJTdGF0cyB9IGZyb20gJy4vdmlzaXRvcic7XG5pbXBvcnQgeyBpc0pTWE5vZGUsIGpzeCB9IGZyb20gJy4uL2pzeC9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEpTWE5vZGUsIEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vanN4L3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB7IHZpc2l0SnN4Tm9kZSB9IGZyb20gJy4vdmlzaXRvcic7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB7IHFEZXYsIHFUZXN0IH0gZnJvbSAnLi4vLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi8uLi92ZXJzaW9uJztcbmltcG9ydCB7IFFDb250YWluZXJBdHRyIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IGxvZ1dhcm4gfSBmcm9tICcuLi8uLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBhcHBlbmRRd2lrRGV2VG9vbHMgfSBmcm9tICcuLi8uLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBxRXJyb3IsIFFFcnJvcl9jYW5ub3RSZW5kZXJPdmVyRXhpc3RpbmdDb250YWluZXIgfSBmcm9tICcuLi8uLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBkaXJlY3RTZXRBdHRyaWJ1dGUgfSBmcm9tICcuLi9mYXN0LWNhbGxzJztcbmltcG9ydCB7IHByb2Nlc3NEYXRhIH0gZnJvbSAnLi9yZW5kZXItZG9tJztcbmltcG9ydCB7IENvbnRhaW5lclN0YXRlLCBnZXRDb250YWluZXJTdGF0ZSB9IGZyb20gJy4uL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBwb3N0UmVuZGVyaW5nIH0gZnJvbSAnLi9ub3RpZnktcmVuZGVyJztcbmltcG9ydCB7IEJBU0VfUVdJS19TVFlMRVMsIGNyZWF0ZVJlbmRlckNvbnRleHQgfSBmcm9tICcuLi9leGVjdXRlLWNvbXBvbmVudCc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyB7XG4gIGFsbG93UmVyZW5kZXI/OiBib29sZWFuO1xuICBlbnZEYXRhPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuLyoqXG4gKiBSZW5kZXIgSlNYLlxuICpcbiAqIFVzZSB0aGlzIG1ldGhvZCB0byByZW5kZXIgSlNYLiBUaGlzIGZ1bmN0aW9uIGRvZXMgcmVjb25jaWxpbmcgd2hpY2ggbWVhbnNcbiAqIGl0IGFsd2F5cyB0cmllcyB0byByZXVzZSB3aGF0IGlzIGFscmVhZHkgaW4gdGhlIERPTSAocmF0aGVyIHRoZW4gZGVzdHJveSBhbmRcbiAqIHJlY3JlYXRlIGNvbnRlbnQuKVxuICpcbiAqIEBwYXJhbSBwYXJlbnQgLSBFbGVtZW50IHdoaWNoIHdpbGwgYWN0IGFzIGEgcGFyZW50IHRvIGBqc3hOb2RlYC4gV2hlblxuICogICAgIHBvc3NpYmxlIHRoZSByZW5kZXJpbmcgd2lsbCB0cnkgdG8gcmV1c2UgZXhpc3Rpbmcgbm9kZXMuXG4gKiBAcGFyYW0ganN4Tm9kZSAtIEpTWCB0byByZW5kZXJcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgcmVuZGVyID0gYXN5bmMgKFxuICBwYXJlbnQ6IEVsZW1lbnQgfCBEb2N1bWVudCxcbiAganN4Tm9kZTogSlNYTm9kZTx1bmtub3duPiB8IEZ1bmN0aW9uQ29tcG9uZW50PGFueT4sXG4gIG9wdHM/OiBSZW5kZXJPcHRpb25zXG4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgLy8gSWYgaW5wdXQgaXMgbm90IEpTWCwgY29udmVydCBpdFxuICBpZiAoIWlzSlNYTm9kZShqc3hOb2RlKSkge1xuICAgIGpzeE5vZGUgPSBqc3goanN4Tm9kZSwgbnVsbCk7XG4gIH1cbiAgY29uc3QgZG9jID0gZ2V0RG9jdW1lbnQocGFyZW50KTtcbiAgY29uc3QgY29udGFpbmVyRWwgPSBnZXRFbGVtZW50KHBhcmVudCk7XG4gIGlmIChxRGV2ICYmIGNvbnRhaW5lckVsLmhhc0F0dHJpYnV0ZShRQ29udGFpbmVyQXR0cikpIHtcbiAgICB0aHJvdyBxRXJyb3IoUUVycm9yX2Nhbm5vdFJlbmRlck92ZXJFeGlzdGluZ0NvbnRhaW5lciwgY29udGFpbmVyRWwpO1xuICB9XG4gIGluamVjdFFDb250YWluZXIoY29udGFpbmVyRWwpO1xuXG4gIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gZ2V0Q29udGFpbmVyU3RhdGUoY29udGFpbmVyRWwpO1xuICBjb25zdCBlbnZEYXRhID0gb3B0cz8uZW52RGF0YTtcbiAgaWYgKGVudkRhdGEpIHtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRhaW5lclN0YXRlLiRlbnZEYXRhJCwgZW52RGF0YSk7XG4gIH1cbiAgY29udGFpbmVyU3RhdGUuJGhvc3RzUmVuZGVyaW5nJCA9IG5ldyBTZXQoKTtcbiAgY29udGFpbmVyU3RhdGUuJHJlbmRlclByb21pc2UkID0gcmVuZGVyUm9vdChwYXJlbnQsIGpzeE5vZGUsIGRvYywgY29udGFpbmVyU3RhdGUsIGNvbnRhaW5lckVsKTtcblxuICBjb25zdCByZW5kZXJDdHggPSBhd2FpdCBjb250YWluZXJTdGF0ZS4kcmVuZGVyUHJvbWlzZSQ7XG4gIGNvbnN0IGFsbG93UmVyZW5kZXIgPSBvcHRzPy5hbGxvd1JlcmVuZGVyID8/IHRydWU7XG4gIGlmIChhbGxvd1JlcmVuZGVyKSB7XG4gICAgYXdhaXQgcG9zdFJlbmRlcmluZyhjb250YWluZXJTdGF0ZSwgcmVuZGVyQ3R4KTtcbiAgfSBlbHNlIHtcbiAgICBjb250YWluZXJTdGF0ZS4kaG9zdHNSZW5kZXJpbmckID0gdW5kZWZpbmVkO1xuICAgIGNvbnRhaW5lclN0YXRlLiRyZW5kZXJQcm9taXNlJCA9IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IG5leHQgPVxuICAgICAgY29udGFpbmVyU3RhdGUuJGhvc3RzTmV4dCQuc2l6ZSArXG4gICAgICBjb250YWluZXJTdGF0ZS4kaG9zdHNTdGFnaW5nJC5zaXplICtcbiAgICAgIGNvbnRhaW5lclN0YXRlLiR3YXRjaE5leHQkLnNpemUgK1xuICAgICAgY29udGFpbmVyU3RhdGUuJHdhdGNoU3RhZ2luZyQuc2l6ZTtcbiAgICBpZiAobmV4dCA+IDApIHtcbiAgICAgIGxvZ1dhcm4oJ1N0YXRlIGNoYW5nZWQgYW5kIGEgcmVyZW5kZXIgaXMgcmVxdWlyZWQsIHNraXBwaW5nJyk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCByZW5kZXJSb290ID0gYXN5bmMgKFxuICBwYXJlbnQ6IEVsZW1lbnQgfCBEb2N1bWVudCxcbiAganN4Tm9kZTogSlNYTm9kZTx1bmtub3duPiB8IEZ1bmN0aW9uQ29tcG9uZW50PGFueT4sXG4gIGRvYzogRG9jdW1lbnQsXG4gIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSxcbiAgY29udGFpbmVyRWw6IEVsZW1lbnRcbikgPT4ge1xuICBjb25zdCBjdHggPSBjcmVhdGVSZW5kZXJDb250ZXh0KGRvYywgY29udGFpbmVyU3RhdGUpO1xuICBjdHguJHJvb3RzJC5wdXNoKHBhcmVudCBhcyBFbGVtZW50KTtcblxuICBjb25zdCBwcm9jZXNzZWROb2RlcyA9IGF3YWl0IHByb2Nlc3NEYXRhKGpzeE5vZGUpO1xuICBhd2FpdCB2aXNpdEpzeE5vZGUoY3R4LCBwYXJlbnQgYXMgRWxlbWVudCwgcHJvY2Vzc2VkTm9kZXMsIGZhbHNlKTtcblxuICBleGVjdXRlQ29udGV4dChjdHgpO1xuICBpZiAoIXFUZXN0KSB7XG4gICAgaW5qZWN0UXdpa1Nsb3RDU1MocGFyZW50KTtcbiAgfVxuXG4gIGlmIChxRGV2KSB7XG4gICAgYXBwZW5kUXdpa0RldlRvb2xzKGNvbnRhaW5lckVsKTtcbiAgICBwcmludFJlbmRlclN0YXRzKGN0eCk7XG4gIH1cbiAgcmV0dXJuIGN0eDtcbn07XG5leHBvcnQgY29uc3QgaW5qZWN0UXdpa1Nsb3RDU1MgPSAoZG9jT3JFbG06IERvY3VtZW50IHwgRWxlbWVudCkgPT4ge1xuICBjb25zdCBkb2MgPSBnZXREb2N1bWVudChkb2NPckVsbSk7XG4gIGNvbnN0IGlzRG9jID0gaXNEb2N1bWVudChkb2NPckVsbSk7XG4gIGNvbnN0IHN0eWxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIGRpcmVjdFNldEF0dHJpYnV0ZShzdHlsZSwgJ2lkJywgJ3F3aWsvYmFzZS1zdHlsZXMnKTtcbiAgc3R5bGUudGV4dENvbnRlbnQgPSBCQVNFX1FXSUtfU1RZTEVTO1xuICBpZiAoaXNEb2MpIHtcbiAgICBkb2NPckVsbS5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICBkb2NPckVsbS5pbnNlcnRCZWZvcmUoc3R5bGUsIGRvY09yRWxtLmZpcnN0Q2hpbGQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0RWxlbWVudCA9IChkb2NPckVsbTogRG9jdW1lbnQgfCBFbGVtZW50KTogRWxlbWVudCA9PiB7XG4gIHJldHVybiBpc0RvY3VtZW50KGRvY09yRWxtKSA/IGRvY09yRWxtLmRvY3VtZW50RWxlbWVudCA6IGRvY09yRWxtO1xufTtcblxuZXhwb3J0IGNvbnN0IGluamVjdFFDb250YWluZXIgPSAoY29udGFpbmVyRWw6IEVsZW1lbnQpID0+IHtcbiAgZGlyZWN0U2V0QXR0cmlidXRlKGNvbnRhaW5lckVsLCAncTp2ZXJzaW9uJywgdmVyc2lvbiB8fCAnJyk7XG4gIGRpcmVjdFNldEF0dHJpYnV0ZShjb250YWluZXJFbCwgUUNvbnRhaW5lckF0dHIsICdyZXN1bWVkJyk7XG59O1xuIl19","import { isNotNullable, isPromise, then } from '../../util/promises';\nimport { newInvokeContext, useInvoke } from '../../use/use-core';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { getContext, getPropsMutator, normalizeOnProp } from '../../props/props';\nimport { ALLOWS_PROPS, BASE_QWIK_STYLES, copyRenderContext, createRenderContext, executeComponent, getNextIndex, HOST_PREFIX, joinClasses, SCOPE_PREFIX, stringifyStyle, } from '../execute-component';\nimport { ELEMENT_ID, OnRenderProp, QCtxAttr, QScopedStyle, QSlot, QSlotName, QSlotRef, QStyle, } from '../../util/markers';\nimport { Host, SSRComment } from '../jsx/host.public';\nimport { qDev } from '../../util/qdev';\nimport { logWarn } from '../../util/log';\nimport { addQRLListener, isOnProp } from '../../props/props-on';\nimport { version } from '../../version';\nimport { serializeInlineContexts } from '../../use/use-context';\nimport { fromCamelToKebabCase } from '../../util/case';\nimport { serializeQRLs } from '../../import/qrl';\nimport { qError, QError_rootNodeMustBeHTML } from '../../error/error';\nimport { getContainerState } from '../container';\nimport { assertDefined } from '../../assert/assert';\nimport { serializeSStyle, styleHost } from '../../component/qrl-styles';\n/**\n * @alpha\n */\nexport const renderSSR = async (doc, node, opts) => {\n    const root = opts.fragmentTagName ?? 'html';\n    const containerEl = doc.createElement(root);\n    const containerState = getContainerState(containerEl);\n    const rctx = createRenderContext(doc, containerState);\n    const ssrCtx = {\n        rctx,\n        $contexts$: [],\n        projectedChildren: undefined,\n        projectedContext: undefined,\n        hostCtx: undefined,\n        invocationContext: undefined,\n        headNodes: [getBaseStyles()],\n    };\n    const beforeContent = opts.beforeContent;\n    const beforeClose = opts.beforeClose;\n    if (beforeContent) {\n        ssrCtx.headNodes.push(...beforeContent);\n    }\n    const containerAttributes = {\n        'q:container': 'paused',\n        'q:version': version ?? 'dev',\n        'q:render': 'ssr',\n    };\n    if (opts.base) {\n        containerAttributes['q:base'] = opts.base;\n    }\n    if (opts.url) {\n        containerState.$envData$['url'] = opts.url;\n    }\n    if (opts.envData) {\n        Object.assign(containerState.$envData$, opts.envData);\n    }\n    if (opts.fragmentTagName) {\n        node = jsx(root, {\n            ...containerAttributes,\n            children: [...ssrCtx.headNodes, node],\n        });\n        await renderNode(node, ssrCtx, opts.stream, 0, (stream) => {\n            const result = beforeClose?.(ssrCtx.$contexts$, containerState);\n            if (result) {\n                return processData(result, ssrCtx, stream, 0, undefined);\n            }\n        });\n    }\n    else {\n        const elCtx = getContext(containerEl);\n        await renderRootNode(node, elCtx, containerAttributes, ssrCtx, opts.stream, 0, () => beforeClose?.(ssrCtx.$contexts$, containerState));\n    }\n};\nexport const renderRootNode = (node, elCtx, containerAttributes, ssrCtx, stream, flags, beforeClose) => {\n    if (isArray(node)) {\n        if (node.length !== 1) {\n            throw qError(QError_rootNodeMustBeHTML, node);\n        }\n        return renderRootNode(node[0], elCtx, containerAttributes, ssrCtx, stream, flags, beforeClose);\n    }\n    if (typeof node.type === 'string') {\n        if (node.type !== 'html') {\n            throw qError(QError_rootNodeMustBeHTML, node);\n        }\n        return renderNodeElement(node, elCtx, containerAttributes, undefined, ssrCtx, stream, flags, beforeClose);\n    }\n    else {\n        const result = node.type(node.props, node.key);\n        return renderRootNode(result, elCtx, containerAttributes, ssrCtx, stream, flags, beforeClose);\n    }\n};\nconst IS_HOST = 1 << 0;\nconst IS_HEAD = 1 << 1;\nconst IS_RAW_CONTENT = 1 << 2;\nexport const renderNodeFunction = (node, ssrCtx, stream, flags, beforeClose) => {\n    const res = ssrCtx.invocationContext\n        ? useInvoke(ssrCtx.invocationContext, () => node.type(node.props, node.key))\n        : node.type(node.props, node.key);\n    return processData(res, ssrCtx, stream, flags, beforeClose);\n};\nexport const renderNodeElement = (node, elCtx, extraAttributes, extraNodes, ssrCtx, stream, flags, beforeClose) => {\n    const key = node.key != null ? String(node.key) : null;\n    const props = node.props;\n    const textType = node.type;\n    const renderQrl = props[OnRenderProp];\n    const hasRef = 'ref' in props;\n    const isHost = flags & IS_HOST;\n    const insideHead = flags & IS_HEAD;\n    const attributes = updateProperties(ssrCtx.rctx, elCtx, props);\n    const hasEvents = elCtx.$listeners$;\n    if (key != null) {\n        attributes['q:key'] = key;\n    }\n    if (isHost || hasRef || hasEvents) {\n        const newID = getNextIndex(ssrCtx.rctx);\n        attributes[ELEMENT_ID] = newID;\n        elCtx.$id$ = newID;\n        ssrCtx.$contexts$.push(elCtx);\n    }\n    if (insideHead) {\n        attributes['q:head'] = '';\n    }\n    if (extraAttributes) {\n        Object.assign(attributes, extraAttributes);\n    }\n    if (isHost) {\n        if (elCtx.$contexts$) {\n            attributes[QCtxAttr] = serializeInlineContexts(elCtx.$contexts$);\n        }\n    }\n    else {\n        if (ssrCtx.hostCtx) {\n            attributes['class'] = joinClasses(ssrCtx.hostCtx.$scopeIds$, attributes['class']);\n        }\n    }\n    if (elCtx.$listeners$) {\n        elCtx.$listeners$.forEach((value, key) => {\n            attributes[fromCamelToKebabCase(key)] = serializeQRLs(value, elCtx);\n        });\n    }\n    if (renderQrl) {\n        elCtx.$renderQrl$ = renderQrl;\n        return renderSSRComponent(ssrCtx, stream, elCtx, node, attributes, flags, beforeClose);\n    }\n    const slotName = props[QSlotName];\n    const isSlot = typeof slotName === 'string';\n    if (isSlot) {\n        assertDefined(ssrCtx.hostCtx?.$id$, 'hostId must be defined for a slot');\n        attributes[QSlotRef] = ssrCtx.hostCtx.$id$;\n    }\n    if (renderNodeElementSync(textType, attributes, stream)) {\n        return;\n    }\n    // Reset HOST flags\n    flags = 0;\n    if (textType === 'head') {\n        flags |= IS_HEAD;\n    }\n    if (hasRawContent[textType]) {\n        flags |= IS_RAW_CONTENT;\n    }\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = processData(props.children, ssrCtx, stream, flags);\n    return then(promise, () => {\n        // If head inject base styles\n        if (textType === 'head') {\n            ssrCtx.headNodes.forEach((node) => {\n                renderNodeElementSync(node.type, node.props, stream);\n            });\n        }\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(`</${textType}>`);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            const content = ssrCtx.projectedChildren?.[slotName];\n            if (content) {\n                ssrCtx.projectedChildren[slotName] = undefined;\n                promise = processData(content, ssrCtx.projectedContext, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = then(promise, () => then(beforeClose(stream), (jsx) => {\n                return processData(jsx, ssrCtx, stream, flags);\n            }));\n        }\n        return then(promise, () => {\n            stream.write(`</${textType}>`);\n        });\n    });\n};\nexport const renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write(`<${tagName}`);\n    Object.entries(attributes).forEach(([key, value]) => {\n        if (key !== 'dangerouslySetInnerHTML' && key !== 'children') {\n            if (key === 'class' && !value) {\n                return;\n            }\n            const chunk = value === '' ? ` ${key}` : ` ${key}=\"${escapeAttr(value)}\"`;\n            stream.write(chunk);\n        }\n    });\n    stream.write(`>`);\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return true;\n    }\n    // Render innerHTML\n    const innerHTML = attributes.dangerouslySetInnerHTML;\n    if (innerHTML) {\n        stream.write(innerHTML);\n        stream.write(`</${tagName}>`);\n        return true;\n    }\n    return false;\n};\nexport const mergeChildren = (a, b) => {\n    const output = [];\n    if (a) {\n        if (isArray(a)) {\n            output.push(...a);\n        }\n        else {\n            output.push(a);\n        }\n    }\n    if (b) {\n        if (isArray(b)) {\n            output.push(...b);\n        }\n        else {\n            output.push(b);\n        }\n    }\n    return output;\n};\nexport const renderSSRComponent = (ssrCtx, stream, elCtx, node, attributes, flags, beforeClose) => {\n    return then(executeComponent(ssrCtx.rctx, elCtx), (res) => {\n        if (res) {\n            const hostElement = elCtx.$element$;\n            const newCtx = res.rctx;\n            let children = node.props.children;\n            if (children) {\n                if (isArray(children)) {\n                    if (children.filter(isNotNullable).length === 0) {\n                        children = undefined;\n                    }\n                }\n                else {\n                    children = [children];\n                }\n            }\n            const invocationContext = newInvokeContext(newCtx.$doc$, hostElement, hostElement);\n            invocationContext.$subscriber$ = hostElement;\n            invocationContext.$renderCtx$ = newCtx;\n            const projectedContext = {\n                ...ssrCtx,\n                rctx: copyRenderContext(newCtx),\n            };\n            const newSSrContext = {\n                ...ssrCtx,\n                projectedChildren: splitProjectedChildren(children, ssrCtx),\n                projectedContext,\n                rctx: newCtx,\n                invocationContext,\n            };\n            const extraNodes = [];\n            const styleClasses = [];\n            if (elCtx.$appendStyles$) {\n                for (const style of elCtx.$appendStyles$) {\n                    extraNodes.push(jsx('style', {\n                        [QStyle]: style.styleId,\n                        dangerouslySetInnerHTML: style.content,\n                    }));\n                }\n            }\n            if (elCtx.$scopeIds$) {\n                for (const styleId of elCtx.$scopeIds$) {\n                    styleClasses.push(styleHost(styleId));\n                }\n                const value = serializeSStyle(elCtx.$scopeIds$);\n                if (value) {\n                    attributes[QScopedStyle] = value;\n                }\n            }\n            const processedNode = jsx(node.type, {\n                ...attributes,\n                class: joinClasses(attributes['class'], styleClasses),\n            });\n            if (res.node) {\n                if (res.node.type === Host) {\n                    processedNode.props = {\n                        ...attributes,\n                        ...res.node.props,\n                        class: joinClasses(processedNode.props.class, res.node.props.class),\n                    };\n                }\n                else {\n                    processedNode.props['children'] = res.node;\n                }\n            }\n            flags |= IS_HOST;\n            newSSrContext.hostCtx = elCtx;\n            return renderNodeElement(processedNode, elCtx, undefined, extraNodes, newSSrContext, stream, flags, (stream) => {\n                return then(renderQTemplates(newSSrContext, stream), () => {\n                    return beforeClose?.(stream);\n                });\n            });\n        }\n    });\n};\nconst renderQTemplates = (ssrContext, stream) => {\n    const projectedChildren = ssrContext.projectedChildren;\n    if (projectedChildren) {\n        const nodes = Object.keys(projectedChildren).map((slotName) => {\n            const value = projectedChildren[slotName];\n            if (value) {\n                return jsx('q:template', {\n                    [QSlot]: slotName,\n                    hidden: '',\n                    'aria-hidden': 'true',\n                    children: value,\n                });\n            }\n        });\n        return processData(nodes, ssrContext, stream, 0, undefined);\n    }\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] ?? '';\n        }\n        let array = slotMap[slotName];\n        if (!array) {\n            slotMap[slotName] = array = [];\n        }\n        array.push(child);\n    }\n    return slotMap;\n};\nexport const renderNode = (node, ssrCtx, stream, flags, beforeClose) => {\n    if (node.type === SSRComment) {\n        stream.write(`<!--${node.props.data ?? ''}-->`);\n    }\n    else if (typeof node.type === 'string') {\n        const elCtx = getContext(ssrCtx.rctx.$doc$.createElement(node.type));\n        return renderNodeElement(node, elCtx, undefined, undefined, ssrCtx, stream, flags, beforeClose);\n    }\n    else {\n        return renderNodeFunction(node, ssrCtx, stream, flags, beforeClose);\n    }\n};\nexport const processData = (node, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isJSXNode(node)) {\n        return renderNode(node, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, ssrCtx, stream, flags, beforeClose));\n    }\n    else if (isArray(node)) {\n        node = _flatVirtualChildren(node, ssrCtx);\n        return walkChildren(node, ssrCtx, stream, flags);\n    }\n    else if (isString(node) || typeof node === 'number') {\n        if ((flags & IS_RAW_CONTENT) !== 0) {\n            stream.write(String(node));\n        }\n        else {\n            stream.write(escape(String(node)));\n        }\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n    }\n};\nfunction walkChildren(children, ssrContext, stream, flags) {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, ssrContext, stream, flags);\n    }\n    if (children.length === 1) {\n        return processData(children[0], ssrContext, stream, flags);\n    }\n    if (children.length === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = {\n            write(chunk) {\n                if (currentIndex === index) {\n                    stream.write(chunk);\n                }\n                else {\n                    buffer.push(chunk);\n                }\n            },\n        };\n        return then(processData(child, ssrContext, localStream, flags), () => {\n            return then(prevPromise, () => {\n                currentIndex++;\n                if (buffers.length > currentIndex) {\n                    buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n                }\n            });\n        });\n    }, undefined);\n}\nexport const flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nexport const _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) && isFunction(children.type) && children.type !== SSRComment) {\n        const fn = children.type;\n        const res = ssrCtx.invocationContext\n            ? useInvoke(ssrCtx.invocationContext, () => fn(children.props, children.key))\n            : fn(children.props, children.key);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst updateProperties = (rctx, ctx, expectProps) => {\n    const attributes = {};\n    if (!expectProps) {\n        return attributes;\n    }\n    const keys = Object.keys(expectProps);\n    if (keys.length === 0) {\n        return attributes;\n    }\n    const elm = ctx.$element$;\n    const isCmp = OnRenderProp in expectProps;\n    const qwikProps = isCmp ? getPropsMutator(ctx, rctx.$containerState$) : undefined;\n    for (let key of keys) {\n        if (key === 'children' || key === OnRenderProp) {\n            continue;\n        }\n        const newValue = expectProps[key];\n        if (key === 'ref') {\n            newValue.current = elm;\n            continue;\n        }\n        // Early exit if value didnt change\n        // Check of data- or aria-\n        if (key.startsWith('data-') || key.startsWith('aria-')) {\n            attributes[key] = newValue;\n            continue;\n        }\n        if (qwikProps) {\n            const skipProperty = ALLOWS_PROPS.includes(key);\n            const hasPrefix = SCOPE_PREFIX.test(key);\n            if (!skipProperty && !hasPrefix) {\n                // Qwik props\n                qwikProps.set(key, newValue);\n                continue;\n            }\n            const hPrefixed = key.startsWith(HOST_PREFIX);\n            if (hPrefixed) {\n                key = key.slice(HOST_PREFIX.length);\n            }\n        }\n        else if (qDev && key.startsWith(HOST_PREFIX)) {\n            logWarn(`${HOST_PREFIX} prefix can not be used in non components`);\n            continue;\n        }\n        if (isOnProp(key)) {\n            const attributeName = normalizeOnProp(key.slice(0, -1));\n            addQRLListener(ctx, attributeName, newValue);\n            continue;\n        }\n        // Check if its an exception\n        setProperty(attributes, key, newValue);\n    }\n    return attributes;\n};\nfunction setProperty(attributes, prop, value) {\n    if (value != null && value !== false) {\n        prop = processPropKey(prop);\n        const attrValue = processPropValue(prop, value, attributes[prop]);\n        if (attrValue !== null) {\n            attributes[prop] = attrValue;\n        }\n    }\n}\nfunction processPropKey(prop) {\n    if (prop === 'className') {\n        return 'class';\n    }\n    return prop;\n}\nfunction processPropValue(prop, value, prevValue) {\n    if (prop === 'class') {\n        const str = joinClasses(value, prevValue);\n        return str === '' ? null : str;\n    }\n    if (prop === 'style') {\n        return stringifyStyle(value);\n    }\n    if (value === false || value == null) {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    return String(value);\n}\nconst hasRawContent = {\n    style: true,\n    script: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nexport const escape = (s) => {\n    return s.replace(/[&<>\\u00A0]/g, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            case '\\u00A0':\n                return '&nbsp;';\n            default:\n                return '';\n        }\n    });\n};\nexport const escapeAttr = (s) => {\n    const toEscape = /[&\"\\u00A0]/g;\n    if (!toEscape.test(s)) {\n        // nothing to do, fast path\n        return s;\n    }\n    else {\n        return s.replace(toEscape, (c) => {\n            switch (c) {\n                case '&':\n                    return '&amp;';\n                case '\"':\n                    return '&quot;';\n                case '\\u00A0':\n                    return '&nbsp;';\n                default:\n                    return '';\n            }\n        });\n    }\n};\nconst getBaseStyles = () => {\n    return jsx('style', {\n        id: 'qwik/base-styles',\n        dangerouslySetInnerHTML: BASE_QWIK_STYLES,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { useInvokeContext } from './use-core';\n// <docs markdown=\"../readme.md#useHostElement\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useHostElement instead)\n/**\n * Retrieves the Host Element of the current component.\n *\n * NOTE: `useHostElement` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * ```tsx\n * const Section = component$(\n *   () => {\n *     const hostElement = useHostElement();\n *     console.log(hostElement); // hostElement is a HTMLSectionElement\n *\n *     return <Host>I am a section</Host>;\n *   },\n *   {\n *     tagName: 'section',\n *   }\n * );\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useHostElement = () => {\n    const ctx = useInvokeContext();\n    return ctx.$hostElement$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWhvc3QtZWxlbWVudC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1ob3N0LWVsZW1lbnQucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUU5QyxnREFBZ0Q7QUFDaEQseUNBQXlDO0FBQ3pDLDZDQUE2QztBQUM3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxHQUFZLEVBQUU7SUFDMUMsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUM7QUFDM0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlSW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VIb3N0RWxlbWVudFwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VIb3N0RWxlbWVudCBpbnN0ZWFkKVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIEhvc3QgRWxlbWVudCBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuXG4gKlxuICogTk9URTogYHVzZUhvc3RFbGVtZW50YCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2tcbiAqIChiZWZvcmUgYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBTZWN0aW9uID0gY29tcG9uZW50JChcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnN0IGhvc3RFbGVtZW50ID0gdXNlSG9zdEVsZW1lbnQoKTtcbiAqICAgICBjb25zb2xlLmxvZyhob3N0RWxlbWVudCk7IC8vIGhvc3RFbGVtZW50IGlzIGEgSFRNTFNlY3Rpb25FbGVtZW50XG4gKlxuICogICAgIHJldHVybiA8SG9zdD5JIGFtIGEgc2VjdGlvbjwvSG9zdD47XG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0YWdOYW1lOiAnc2VjdGlvbicsXG4gKiAgIH1cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBAYWxwaGFcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZUhvc3RFbGVtZW50ID0gKCk6IEVsZW1lbnQgPT4ge1xuICBjb25zdCBjdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIHJldHVybiBjdHguJGhvc3RFbGVtZW50JDtcbn07XG4iXX0=","import { useInvokeContext } from './use-core';\n// <docs markdown=\"../readme.md#useDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useDocument instead)\n/**\n * Retrieves the document of the current element. It's important to use this method instead of\n * accessing `document` directly because during SSR, the global document might not exist.\n *\n * NOTE: `useDocument` method can only be used in the synchronous portion of the callback (before\n * any `await` statements.)\n *\n * @alpha\n */\n// </docs>\nexport const useDocument = () => {\n    const ctx = useInvokeContext();\n    return ctx.$doc$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWRvY3VtZW50LnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWRvY3VtZW50LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFOUMsNkNBQTZDO0FBQzdDLHlDQUF5QztBQUN6QywwQ0FBMEM7QUFDMUM7Ozs7Ozs7O0dBUUc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQWEsRUFBRTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZURvY3VtZW50XCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZURvY3VtZW50IGluc3RlYWQpXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgZG9jdW1lbnQgb2YgdGhlIGN1cnJlbnQgZWxlbWVudC4gSXQncyBpbXBvcnRhbnQgdG8gdXNlIHRoaXMgbWV0aG9kIGluc3RlYWQgb2ZcbiAqIGFjY2Vzc2luZyBgZG9jdW1lbnRgIGRpcmVjdGx5IGJlY2F1c2UgZHVyaW5nIFNTUiwgdGhlIGdsb2JhbCBkb2N1bWVudCBtaWdodCBub3QgZXhpc3QuXG4gKlxuICogTk9URTogYHVzZURvY3VtZW50YCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2sgKGJlZm9yZVxuICogYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VEb2N1bWVudCA9ICgpOiBEb2N1bWVudCA9PiB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgcmV0dXJuIGN0eC4kZG9jJDtcbn07XG4iXX0=","import { createProxy, QObjectRecursive } from '../object/q-object';\nimport { isFunction } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has\n * a unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ## Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <Host>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </Host>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const value = isFunction(initialState) ? initialState() : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = ctx.$renderCtx$.$containerState$;\n        const recursive = opts?.recursive ?? false;\n        const flags = recursive ? QObjectRecursive : 0;\n        const newStore = createProxy(value, containerState, flags, undefined);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQVU1RCwwQ0FBMEM7QUFDMUMseUNBQXlDO0FBQ3pDLHVDQUF1QztBQUN2Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBERztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsWUFBbUMsRUFDbkMsSUFBc0IsRUFDZixFQUFFO0lBQ1QsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLEVBQVMsQ0FBQztJQUN0RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBQ0QsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBRSxZQUF5QixFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUNyRixJQUFJLElBQUksRUFBRSxRQUFRLEtBQUssS0FBSyxFQUFFO1FBQzVCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNYLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE1BQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUM7UUFDeEQsTUFBTSxTQUFTLEdBQUcsSUFBSSxFQUFFLFNBQVMsSUFBSSxLQUFLLENBQUM7UUFDM0MsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0RSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDZCxPQUFPLFFBQVEsQ0FBQztLQUNqQjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVByb3h5LCBRT2JqZWN0UmVjdXJzaXZlIH0gZnJvbSAnLi4vb2JqZWN0L3Etb2JqZWN0JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTdG9yZU9wdGlvbnMge1xuICByZWN1cnNpdmU/OiBib29sZWFuO1xuICByZWFjdGl2ZT86IGJvb2xlYW47XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVN0b3JlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVN0b3JlIGluc3RlYWQpXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgUXdpayBjYW4gdHJhY2sgYWNyb3NzIHNlcmlhbGl6YXRpb25zLlxuICpcbiAqIFVzZSBgdXNlU3RvcmVgIHRvIGNyZWF0ZSBhIHN0YXRlIGZvciB5b3VyIGFwcGxpY2F0aW9uLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIGEgcHJveHkgdGhhdCBoYXNcbiAqIGEgdW5pcXVlIElELiBUaGUgSUQgb2YgdGhlIG9iamVjdCBpcyB1c2VkIGluIHRoZSBgUVJMYHMgdG8gcmVmZXIgdG8gdGhlIHN0b3JlLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBFeGFtcGxlIHNob3dpbmcgaG93IGB1c2VTdG9yZWAgaXMgdXNlZCBpbiBDb3VudGVyIGV4YW1wbGUgdG8ga2VlcCB0cmFjayBvZiB0aGUgY291bnQuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBTdG9yZXMgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZUNvdW50ZXIoMSk7XG4gKlxuICogICAvLyBSZWFjdGl2aXR5IGhhcHBlbnMgZXZlbiBmb3IgbmVzdGVkIG9iamVjdHMgYW5kIGFycmF5c1xuICogICBjb25zdCB1c2VyRGF0YSA9IHVzZVN0b3JlKHtcbiAqICAgICBuYW1lOiAnTWFudScsXG4gKiAgICAgYWRkcmVzczoge1xuICogICAgICAgYWRkcmVzczogJycsXG4gKiAgICAgICBjaXR5OiAnJyxcbiAqICAgICB9LFxuICogICAgIG9yZ3M6IFtdLFxuICogICB9KTtcbiAqXG4gKiAgIC8vIHVzZVN0b3JlKCkgY2FuIGFsc28gYWNjZXB0IGEgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBpbml0aWFsIHZhbHVlXG4gKiAgIGNvbnN0IHN0YXRlID0gdXNlU3RvcmUoKCkgPT4ge1xuICogICAgIHJldHVybiB7XG4gKiAgICAgICB2YWx1ZTogZXhwZW5zaXZlSW5pdGlhbFZhbHVlKCksXG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxIb3N0PlxuICogICAgICAgPGRpdj5Db3VudGVyOiB7Y291bnRlci52YWx1ZX08L2Rpdj5cbiAqICAgICAgIDxDaGlsZCB1c2VyRGF0YT17dXNlckRhdGF9IHN0YXRlPXtzdGF0ZX0gLz5cbiAqICAgICA8L0hvc3Q+XG4gKiAgICk7XG4gKiB9KTtcbiAqXG4gKiBmdW5jdGlvbiB1c2VDb3VudGVyKHN0ZXA6IG51bWJlcikge1xuICogICAvLyBNdWx0aXBsZSBzdG9yZXMgY2FuIGJlIGNyZWF0ZWQgaW4gY3VzdG9tIGhvb2tzIGZvciBjb252ZW5pZW5jZSBhbmQgY29tcG9zYWJpbGl0eVxuICogICBjb25zdCBjb3VudGVyU3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgdmFsdWU6IDAsXG4gKiAgIH0pO1xuICogICB1c2VDbGllbnRFZmZlY3QkKCgpID0+IHtcbiAqICAgICAvLyBPbmx5IHJ1bnMgaW4gdGhlIGNsaWVudFxuICogICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICogICAgICAgY291bnRlclN0b3JlLnZhbHVlICs9IHN0ZXA7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiAgIHJldHVybiBjb3VudGVyU3RvcmU7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IDxTVEFURSBleHRlbmRzIG9iamVjdD4oXG4gIGluaXRpYWxTdGF0ZTogU1RBVEUgfCAoKCkgPT4gU1RBVEUpLFxuICBvcHRzPzogVXNlU3RvcmVPcHRpb25zXG4pOiBTVEFURSA9PiB7XG4gIGNvbnN0IHsgZ2V0LCBzZXQsIGN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNUQVRFPigpO1xuICBpZiAoZ2V0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0O1xuICB9XG4gIGNvbnN0IHZhbHVlID0gaXNGdW5jdGlvbihpbml0aWFsU3RhdGUpID8gKGluaXRpYWxTdGF0ZSBhcyBGdW5jdGlvbikoKSA6IGluaXRpYWxTdGF0ZTtcbiAgaWYgKG9wdHM/LnJlYWN0aXZlID09PSBmYWxzZSkge1xuICAgIHNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gY3R4LiRyZW5kZXJDdHgkLiRjb250YWluZXJTdGF0ZSQ7XG4gICAgY29uc3QgcmVjdXJzaXZlID0gb3B0cz8ucmVjdXJzaXZlID8/IGZhbHNlO1xuICAgIGNvbnN0IGZsYWdzID0gcmVjdXJzaXZlID8gUU9iamVjdFJlY3Vyc2l2ZSA6IDA7XG4gICAgY29uc3QgbmV3U3RvcmUgPSBjcmVhdGVQcm94eSh2YWx1ZSwgY29udGFpbmVyU3RhdGUsIGZsYWdzLCB1bmRlZmluZWQpO1xuICAgIHNldChuZXdTdG9yZSk7XG4gICAgcmV0dXJuIG5ld1N0b3JlO1xuICB9XG59O1xuIl19","import { useStore } from './use-store.public';\n// <docs markdown=\"../readme.md#useRef\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useRef instead)\n/**\n * It's a very thin wrapper around `useStore()`, including the proper type signature to be passed\n * to the `ref` property in JSX.\n *\n * ```tsx\n * export function useRef<T = Element>(current?: T): Ref<T> {\n *   return useStore({ current });\n * }\n * ```\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const input = useRef<HTMLInputElement>();\n *\n *   useClientEffect$(({ track }) => {\n *     const el = track(input, 'current')!;\n *     el.focus();\n *   });\n *\n *   return (\n *     <Host>\n *       <input type=\"text\" ref={input} />\n *     </Host>\n *   );\n * });\n *\n * ```\n *\n * @public\n */\n// </docs>\nexport const useRef = (current) => {\n    return useStore({ current });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFTOUMsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0ErQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQThCLE9BQVcsRUFBVSxFQUFFO0lBQ3pFLE9BQU8sUUFBUSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJy4vdXNlLXN0b3JlLnB1YmxpYyc7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlZjxUPiB7XG4gIGN1cnJlbnQ6IFQgfCB1bmRlZmluZWQ7XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlZlwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZWYgaW5zdGVhZClcbi8qKlxuICogSXQncyBhIHZlcnkgdGhpbiB3cmFwcGVyIGFyb3VuZCBgdXNlU3RvcmUoKWAsIGluY2x1ZGluZyB0aGUgcHJvcGVyIHR5cGUgc2lnbmF0dXJlIHRvIGJlIHBhc3NlZFxuICogdG8gdGhlIGByZWZgIHByb3BlcnR5IGluIEpTWC5cbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiB1c2VSZWY8VCA9IEVsZW1lbnQ+KGN1cnJlbnQ/OiBUKTogUmVmPFQ+IHtcbiAqICAgcmV0dXJuIHVzZVN0b3JlKHsgY3VycmVudCB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBpbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PigpO1xuICpcbiAqICAgdXNlQ2xpZW50RWZmZWN0JCgoeyB0cmFjayB9KSA9PiB7XG4gKiAgICAgY29uc3QgZWwgPSB0cmFjayhpbnB1dCwgJ2N1cnJlbnQnKSE7XG4gKiAgICAgZWwuZm9jdXMoKTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxIb3N0PlxuICogICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPXtpbnB1dH0gLz5cbiAqICAgICA8L0hvc3Q+XG4gKiAgICk7XG4gKiB9KTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VSZWYgPSA8VCBleHRlbmRzIEVsZW1lbnQgPSBFbGVtZW50PihjdXJyZW50PzogVCk6IFJlZjxUPiA9PiB7XG4gIHJldHVybiB1c2VTdG9yZSh7IGN1cnJlbnQgfSk7XG59O1xuIl19","import { useInvokeContext } from './use-core';\n/**\n * @alpha\n */\nexport function useEnvData(key, defaultValue) {\n    const ctx = useInvokeContext();\n    return ctx.$renderCtx$.$containerState$.$envData$[key] ?? defaultValue;\n}\n/**\n * @alpha\n * @deprecated Please use `useEnvData` instead.\n */\nexport const useUserContext = useEnvData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBWTlDOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXLEVBQUUsWUFBa0I7SUFDeEQsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFlBQVksQ0FBQztBQUN6RSxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVudkRhdGE8VD4oa2V5OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRW52RGF0YTxULCBCID0gVD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogQik6IFQgfCBCO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlRW52RGF0YShrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogYW55KSB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgcmV0dXJuIGN0eC4kcmVuZGVyQ3R4JC4kY29udGFpbmVyU3RhdGUkLiRlbnZEYXRhJFtrZXldID8/IGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBAYWxwaGFcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYHVzZUVudkRhdGFgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VVc2VyQ29udGV4dCA9IHVzZUVudkRhdGE7XG4iXX0=","import { ComponentStylesPrefixContent } from '../util/markers';\nexport function scopeStylesheet(css, scopeId) {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = MODE.selector;\n    let lastCh = 0;\n    while (idx < end) {\n        let ch = css.charCodeAt(idx++);\n        if (ch === CHAR.BACKSLASH) {\n            idx++;\n            ch = CHAR.A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const [expectLastCh, expectCh, newMode] = arcs[i];\n            if (expectLastCh === lastCh ||\n                expectLastCh === CHAR.ANY ||\n                (expectLastCh === CHAR.IDENT && isIdent(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === CHAR.ANY ||\n                    (expectCh === CHAR.NOT_IDENT_AND_NOT_DOT && !isIdent(ch) && ch !== CHAR.DOT)) {\n                    if (newMode === MODE.EXIT) {\n                        mode = stack.pop() || MODE.selector;\n                    }\n                    else if (mode === newMode) {\n                        flush(idx - 1);\n                        out.push('.', ComponentStylesPrefixContent, scopeId);\n                    }\n                    else {\n                        stack.push(mode);\n                        mode = newMode;\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        lastIdx = idx;\n    }\n}\nfunction isIdent(ch) {\n    return ((ch >= CHAR._0 && ch <= CHAR._9) ||\n        (ch >= CHAR.A && ch <= CHAR.Z) ||\n        (ch >= CHAR.a && ch <= CHAR.z) ||\n        ch === CHAR.UNDERSCORE ||\n        ch === CHAR.DASH);\n}\nvar MODE;\n(function (MODE) {\n    MODE[MODE[\"selector\"] = 0] = \"selector\";\n    MODE[MODE[\"media\"] = 1] = \"media\";\n    MODE[MODE[\"body\"] = 2] = \"body\";\n    MODE[MODE[\"stringSingle\"] = 3] = \"stringSingle\";\n    MODE[MODE[\"stringDouble\"] = 4] = \"stringDouble\";\n    MODE[MODE[\"commentMultiline\"] = 5] = \"commentMultiline\";\n    MODE[MODE[\"EXIT\"] = 6] = \"EXIT\";\n})(MODE || (MODE = {}));\nvar CHAR;\n(function (CHAR) {\n    CHAR[CHAR[\"ANY\"] = 0] = \"ANY\";\n    CHAR[CHAR[\"IDENT\"] = 1] = \"IDENT\";\n    CHAR[CHAR[\"NOT_IDENT_AND_NOT_DOT\"] = 2] = \"NOT_IDENT_AND_NOT_DOT\";\n    CHAR[CHAR[\"SPACE\"] = 32] = \"SPACE\";\n    CHAR[CHAR[\"FORWARD_SLASH\"] = 47] = \"FORWARD_SLASH\";\n    CHAR[CHAR[\"DOUBLE_QUOTE\"] = 34] = \"DOUBLE_QUOTE\";\n    CHAR[CHAR[\"SINGLE_QUOTE\"] = 39] = \"SINGLE_QUOTE\";\n    CHAR[CHAR[\"STAR\"] = 42] = \"STAR\";\n    CHAR[CHAR[\"DASH\"] = 45] = \"DASH\";\n    CHAR[CHAR[\"DOT\"] = 46] = \"DOT\";\n    CHAR[CHAR[\"AT\"] = 64] = \"AT\";\n    CHAR[CHAR[\"A\"] = 65] = \"A\";\n    CHAR[CHAR[\"Z\"] = 90] = \"Z\";\n    CHAR[CHAR[\"_0\"] = 48] = \"_0\";\n    CHAR[CHAR[\"_9\"] = 57] = \"_9\";\n    CHAR[CHAR[\"BACKSLASH\"] = 92] = \"BACKSLASH\";\n    CHAR[CHAR[\"UNDERSCORE\"] = 95] = \"UNDERSCORE\";\n    CHAR[CHAR[\"a\"] = 97] = \"a\";\n    CHAR[CHAR[\"z\"] = 122] = \"z\";\n    CHAR[CHAR[\"OPEN_BRACE\"] = 123] = \"OPEN_BRACE\";\n    CHAR[CHAR[\"CLOSE_BRACE\"] = 125] = \"CLOSE_BRACE\";\n})(CHAR || (CHAR = {}));\nconst STATE_MACHINE = [\n    [\n        [CHAR.IDENT, CHAR.NOT_IDENT_AND_NOT_DOT, MODE.selector],\n        [CHAR.ANY, CHAR.AT, MODE.media],\n        [CHAR.ANY, CHAR.OPEN_BRACE, MODE.body],\n        [CHAR.FORWARD_SLASH, CHAR.STAR, MODE.commentMultiline],\n    ] /*selector*/,\n    [\n        [CHAR.ANY, CHAR.CLOSE_BRACE, MODE.EXIT],\n        [CHAR.FORWARD_SLASH, CHAR.STAR, MODE.commentMultiline],\n        [CHAR.ANY, CHAR.OPEN_BRACE, MODE.selector],\n        [CHAR.FORWARD_SLASH, CHAR.STAR, MODE.commentMultiline],\n    ] /*media*/,\n    [\n        [CHAR.ANY, CHAR.CLOSE_BRACE, MODE.EXIT],\n        [CHAR.ANY, CHAR.SINGLE_QUOTE, MODE.stringSingle],\n        [CHAR.ANY, CHAR.DOUBLE_QUOTE, MODE.stringDouble],\n        [CHAR.FORWARD_SLASH, CHAR.STAR, MODE.commentMultiline],\n    ] /*body*/,\n    [[CHAR.ANY, CHAR.SINGLE_QUOTE, MODE.EXIT]] /*stringSingle*/,\n    [[CHAR.ANY, CHAR.DOUBLE_QUOTE, MODE.EXIT]] /*stringDouble*/,\n    [[CHAR.STAR, CHAR.FORWARD_SLASH, MODE.EXIT]] /*commentMultiline*/,\n];\n//# sourceMappingURL=data:application/json;base64,","import { styleContent, styleKey } from '../component/qrl-styles';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { scopeStylesheet } from '../style/scoped-stylesheet';\nimport { getContext } from '../props/props';\nimport { hasStyle } from '../render/execute-component';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, (str) => str, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    _useStyles(styles, scopeStylesheet, true);\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get === true) {\n        return;\n    }\n    set(true);\n    const renderCtx = ctx.$renderCtx$;\n    const styleId = styleKey(styleQrl, i);\n    const hostElement = ctx.$hostElement$;\n    const containerState = renderCtx.$containerState$;\n    const elCtx = getContext(ctx.$hostElement$);\n    if (!elCtx.$appendStyles$) {\n        elCtx.$appendStyles$ = [];\n    }\n    if (!elCtx.$scopeIds$) {\n        elCtx.$scopeIds$ = [];\n    }\n    if (scoped) {\n        elCtx.$scopeIds$.push(styleContent(styleId));\n    }\n    if (!hasStyle(containerState, styleId)) {\n        containerState.$styleIds$.add(styleId);\n        ctx.$waitOn$.push(styleQrl.resolve(hostElement).then((styleText) => {\n            elCtx.$appendStyles$.push({\n                styleId,\n                content: transform(styleText, styleId),\n            });\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,"],"names":["isNode","processData","updateProperties","setProperty"],"mappings":"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;IACd,QAAQ,IAAI,CAAC,YAAY,WAAW,EAAE;IACtC,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,OAAO,IAAI,CAAC,IAAI,MAAM,IAAI,CAAC,EAAE;IACtE,YAAY,OAAO,CAAC,CAAC,4CAA4C,CAAC,CAAC,CAAC;IACpE,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,SAAS;IACT,QAAQ,OAAO,CAAC,YAAY,WAAW,CAAC;IACxC,KAAK;IACL,CAAC,CAAC;IACF;IACA;IACA;AACY,UAAC,QAAQ,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC;;ICnCzC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,aAAa,GAAG,CAAC,IAAI,KAAK;IACvC,IAAI,OAAO,MAAM,CAAC,MAAM,CAAC;IACzB,QAAQ,EAAE,EAAE,oBAAoB,CAAC,IAAI,CAAC;IACtC,KAAK,CAAC,CAAC;IACP,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,kBAAkB,GAAG,CAAC,OAAO,EAAE,QAAQ,KAAK;IACzD,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE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ACA;AACY,UAAC,gBAAgB,iBAAiB,iBAAiB,CAAC,kBAAkB,EAAE;IACpF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,iBAAiB,GAAG,CAAC,QAAQ,KAAK;IAC/C,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;IACnD,IAAI,IAAI,GAAG,EAAE;IACb,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IAC7B,QAAQ,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IACtC,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;IAClB,KAAK;IACL,SAAS;IACT,QAAQ,MAAM,MAAM,CAAC,gCAAgC,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC;IAC1E,KAAK;IACL,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB,EAAE;IAClF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,WAAW,GAAG,CAAC,QAAQ,KAAK;IACzC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;IACnD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"}