{"version":3,"file":"core.cjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/testing/html.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-document.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/host.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/render-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/cursor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-watch.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props-obj-map.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/assert/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/q-object.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-host-element.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js"],"sourcesContent":["/*#__PURE__*/ ((gbl) => {\n    // ensures unit tests have globalThis on Node10\n    // this will be removed from production builds\n    if (typeof globalThis === 'undefined') {\n        gbl.globalThis = gbl;\n    }\n})(typeof global !== 'undefined'\n    ? global\n    : typeof window !== 'undefined'\n        ? window\n        : typeof self !== 'undefined'\n            ? self\n            : {});\n// minification can replace the `globalThis.qDev` with `false`\n// which will remove all dev code within from the build\nexport const qDev = globalThis.qDev !== false;\nexport const qTest = globalThis.describe !== undefined;\nexport const qGlobal = globalThis;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtJQUMxQiwrQ0FBK0M7SUFDL0MsOENBQThDO0lBQzlDLElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxFQUFFO1FBQ3JDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO0tBQ3RCO0FBQ0gsQ0FBQyxDQUFDLENBQ0EsT0FBTyxNQUFNLEtBQUssV0FBVztJQUMzQixDQUFDLENBQUMsTUFBTTtJQUNSLENBQUMsQ0FBQyxPQUFPLE1BQU0sS0FBSyxXQUFXO1FBQy9CLENBQUMsQ0FBQyxNQUFNO1FBQ1IsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFdBQVc7WUFDN0IsQ0FBQyxDQUFDLElBQUk7WUFDTixDQUFDLENBQUMsRUFBRSxDQUNQLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsdURBQXVEO0FBQ3ZELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBSSxVQUFrQixDQUFDLElBQUksS0FBSyxLQUFLLENBQUM7QUFDdkQsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFJLFVBQWtCLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQztBQUNoRSxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsVUFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qI19fUFVSRV9fKi8gKChnYmw6IGFueSkgPT4ge1xuICAvLyBlbnN1cmVzIHVuaXQgdGVzdHMgaGF2ZSBnbG9iYWxUaGlzIG9uIE5vZGUxMFxuICAvLyB0aGlzIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBnYmwuZ2xvYmFsVGhpcyA9IGdibDtcbiAgfVxufSkoXG4gIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnXG4gICAgPyBnbG9iYWxcbiAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xuICAgID8gc2VsZlxuICAgIDoge31cbik7XG5cbi8vIG1pbmlmaWNhdGlvbiBjYW4gcmVwbGFjZSB0aGUgYGdsb2JhbFRoaXMucURldmAgd2l0aCBgZmFsc2VgXG4vLyB3aGljaCB3aWxsIHJlbW92ZSBhbGwgZGV2IGNvZGUgd2l0aGluIGZyb20gdGhlIGJ1aWxkXG5leHBvcnQgY29uc3QgcURldiA9IChnbG9iYWxUaGlzIGFzIGFueSkucURldiAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSAoZ2xvYmFsVGhpcyBhcyBhbnkpLmRlc2NyaWJlICE9PSB1bmRlZmluZWQ7XG5leHBvcnQgY29uc3QgcUdsb2JhbCA9IGdsb2JhbFRoaXMgYXMgYW55O1xuIl19","import { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n    Error.stackTraceLimit = 9999;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRTVCLElBQUksSUFBSSxFQUFFO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA5OTk5O1xufVxuIl19","import { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    const error = `${text} ${parts.join(' ')}`;\n    debugger; // eslint-disable-line no-debugger\n    return new Error(error);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute',\n            'Can not serialize a HTML Node that is not an Element',\n            'Rruntime but no instance found on element.',\n            'Only primitive and object literals can be serialized',\n            'Crash while rendering',\n            'You can render over a existing q:container. Skipping render().',\n            'Set property',\n            \"Only function's and 'string's are supported.\",\n            \"Only objects can be wrapped in 'QObject'\",\n            `Only objects literals can be wrapped in 'QObject'`,\n            'QRL is not a function',\n            'Dynamic import not found',\n            'Unknown type argument',\n            'not found state for useContext',\n            \"Invoking 'use*()' method outside of invocation context.\",\n            'Cant access renderCtx for existing context',\n            'Cant access document for existing context',\n            'props are inmutable',\n            '<Host> component can only be used at the root of a Qwik component$()',\n            'Props are immutable by default.',\n            'use- method must be called only at the root level of a component$()',\n            'Container is already paused. Skipping',\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvZXJyb3IvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxDQUFDLENBQUM7QUFDOUMsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLENBQUMseURBQXlEO0FBQ3RHLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLENBQUMsQ0FBQyxDQUFDLG1FQUFtRTtBQUNoSCxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxpRUFBaUU7QUFDN0csTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO0FBQ3JFLE1BQU0sQ0FBQyxNQUFNLHdDQUF3QyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtFQUFrRTtBQUM3SCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0I7QUFDckQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQUMsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUFHLEVBQUUsQ0FBQztBQUNqRCxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEVBQUUsQ0FBQztBQUN4QyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxFQUFFLENBQUM7QUFDN0MsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsRUFBRSxDQUFDO0FBQzNDLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBRyxFQUFFLENBQUM7QUFFaEQsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsSUFBWSxFQUFFLEdBQUcsS0FBWSxFQUFTLEVBQUU7SUFDN0QsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLE1BQU0sS0FBSyxHQUFHLEdBQUcsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUMzQyxRQUFRLENBQUMsQ0FBQyxrQ0FBa0M7SUFDNUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUNqRCxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sR0FBRyxHQUFHO1lBQ1YseUNBQXlDO1lBQ3pDLHNEQUFzRDtZQUN0RCw0Q0FBNEM7WUFDNUMsc0RBQXNEO1lBQ3RELHVCQUF1QjtZQUN2QixnRUFBZ0U7WUFDaEUsY0FBYztZQUNkLDhDQUE4QztZQUM5QywwQ0FBMEM7WUFDMUMsbURBQW1EO1lBQ25ELHVCQUF1QjtZQUN2QiwwQkFBMEI7WUFDMUIsdUJBQXVCO1lBQ3ZCLGdDQUFnQztZQUNoQyx5REFBeUQ7WUFDekQsNENBQTRDO1lBQzVDLDJDQUEyQztZQUMzQyxxQkFBcUI7WUFDckIsc0VBQXNFO1lBQ3RFLGlDQUFpQztZQUNqQyxxRUFBcUU7WUFDckUsdUNBQXVDO1NBQ3hDLENBQUM7UUFDRixPQUFPLFFBQVEsSUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztLQUM1QztTQUFNO1FBQ0wsT0FBTyxRQUFRLElBQUksR0FBRyxDQUFDO0tBQ3hCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmV4cG9ydCBjb25zdCBRRXJyb3Jfc3RyaW5naWZ5Q2xhc3NPclN0eWxlID0gMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY2Fubm90U2VyaWFsaXplTm9kZSA9IDE7IC8vICdDYW4gbm90IHNlcmlhbGl6ZSBhIEhUTUwgTm9kZSB0aGF0IGlzIG5vdCBhbiBFbGVtZW50J1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ydW50aW1lUXJsTm9FbGVtZW50ID0gMjsgLy8gYFEtRVJST1I6ICcke3FybH0nIGlzIHJ1bnRpbWUgYnV0IG5vIGluc3RhbmNlIGZvdW5kIG9uIGVsZW1lbnQuYFxuZXhwb3J0IGNvbnN0IFFFcnJvcl92ZXJpZnlTZXJpYWxpemFibGUgPSAzOyAvLyAnT25seSBwcmltaXRpdmUgYW5kIG9iamVjdCBsaXRlcmFscyBjYW4gYmUgc2VyaWFsaXplZCcsIHZhbHVlLFxuZXhwb3J0IGNvbnN0IFFFcnJvcl9lcnJvcldoaWxlUmVuZGVyaW5nID0gNDsgLy8gQ3Jhc2ggd2hpbGUgcmVuZGVyaW5nXG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbm5vdFJlbmRlck92ZXJFeGlzdGluZ0NvbnRhaW5lciA9IDU7IC8vJ1lvdSBjYW4gcmVuZGVyIG92ZXIgYSBleGlzdGluZyBxOmNvbnRhaW5lci4gU2tpcHBpbmcgcmVuZGVyKCkuJ1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zZXRQcm9wZXJ0eSA9IDY7IC8vJ1NldCBwcm9wZXJ0eSdcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsT3JFcnJvciA9IDc7XG5leHBvcnQgY29uc3QgUUVycm9yX29ubHlPYmplY3RXcmFwcGVkID0gODtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfb25seUxpdGVyYWxXcmFwcGVkID0gOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsSXNOb3RGdW5jdGlvbiA9IDEwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9keW5hbWljSW1wb3J0RmFpbGVkID0gMTE7XG5leHBvcnQgY29uc3QgUUVycm9yX3Vua25vd25UeXBlQXJndW1lbnQgPSAxMjtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfbm90Rm91bmRDb250ZXh0ID0gMTM7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZU1ldGhvZE91dHNpZGVDb250ZXh0ID0gMTQ7XG5leHBvcnQgY29uc3QgUUVycm9yX21pc3NpbmdSZW5kZXJDdHggPSAxNTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ0RvYyA9IDE2O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9pbW11dGFibGVQcm9wcyA9IDE3O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ob3N0Q2FuT25seUJlQXRSb290ID0gMTg7XG5leHBvcnQgY29uc3QgUUVycm9yX2ltbXV0YWJsZUpzeFByb3BzID0gMTk7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZUludm9rZUNvbnRleHQgPSAyMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY29udGFpbmVyQWxyZWFkeVBhdXNlZCA9IDIxO1xuXG5leHBvcnQgY29uc3QgcUVycm9yID0gKGNvZGU6IG51bWJlciwgLi4ucGFydHM6IGFueVtdKTogRXJyb3IgPT4ge1xuICBjb25zdCB0ZXh0ID0gY29kZVRvVGV4dChjb2RlKTtcbiAgY29uc3QgZXJyb3IgPSBgJHt0ZXh0fSAke3BhcnRzLmpvaW4oJyAnKX1gO1xuICBkZWJ1Z2dlcjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1kZWJ1Z2dlclxuICByZXR1cm4gbmV3IEVycm9yKGVycm9yKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjb2RlVG9UZXh0ID0gKGNvZGU6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgY29uc3QgTUFQID0gW1xuICAgICAgJ0Vycm9yIHdoaWxlIHNlcmlhbGl6aW5nIGNsYXNzIGF0dHJpYnV0ZScsIC8vIDBcbiAgICAgICdDYW4gbm90IHNlcmlhbGl6ZSBhIEhUTUwgTm9kZSB0aGF0IGlzIG5vdCBhbiBFbGVtZW50JywgLy8gMVxuICAgICAgJ1JydW50aW1lIGJ1dCBubyBpbnN0YW5jZSBmb3VuZCBvbiBlbGVtZW50LicsIC8vIDJcbiAgICAgICdPbmx5IHByaW1pdGl2ZSBhbmQgb2JqZWN0IGxpdGVyYWxzIGNhbiBiZSBzZXJpYWxpemVkJywgLy8gM1xuICAgICAgJ0NyYXNoIHdoaWxlIHJlbmRlcmluZycsIC8vIDRcbiAgICAgICdZb3UgY2FuIHJlbmRlciBvdmVyIGEgZXhpc3RpbmcgcTpjb250YWluZXIuIFNraXBwaW5nIHJlbmRlcigpLicsIC8vIDVcbiAgICAgICdTZXQgcHJvcGVydHknLCAvLyA2XG4gICAgICBcIk9ubHkgZnVuY3Rpb24ncyBhbmQgJ3N0cmluZydzIGFyZSBzdXBwb3J0ZWQuXCIsIC8vIDdcbiAgICAgIFwiT25seSBvYmplY3RzIGNhbiBiZSB3cmFwcGVkIGluICdRT2JqZWN0J1wiLCAvLyA4XG4gICAgICBgT25seSBvYmplY3RzIGxpdGVyYWxzIGNhbiBiZSB3cmFwcGVkIGluICdRT2JqZWN0J2AsIC8vIDlcbiAgICAgICdRUkwgaXMgbm90IGEgZnVuY3Rpb24nLCAvLyAxMFxuICAgICAgJ0R5bmFtaWMgaW1wb3J0IG5vdCBmb3VuZCcsIC8vIDExXG4gICAgICAnVW5rbm93biB0eXBlIGFyZ3VtZW50JywgLy8gMTJcbiAgICAgICdub3QgZm91bmQgc3RhdGUgZm9yIHVzZUNvbnRleHQnLCAvLyAxM1xuICAgICAgXCJJbnZva2luZyAndXNlKigpJyBtZXRob2Qgb3V0c2lkZSBvZiBpbnZvY2F0aW9uIGNvbnRleHQuXCIsIC8vIDE0XG4gICAgICAnQ2FudCBhY2Nlc3MgcmVuZGVyQ3R4IGZvciBleGlzdGluZyBjb250ZXh0JywgLy8gMTVcbiAgICAgICdDYW50IGFjY2VzcyBkb2N1bWVudCBmb3IgZXhpc3RpbmcgY29udGV4dCcsIC8vIDE2XG4gICAgICAncHJvcHMgYXJlIGlubXV0YWJsZScsIC8vIDE3XG4gICAgICAnPEhvc3Q+IGNvbXBvbmVudCBjYW4gb25seSBiZSB1c2VkIGF0IHRoZSByb290IG9mIGEgUXdpayBjb21wb25lbnQkKCknLCAvLyAxOFxuICAgICAgJ1Byb3BzIGFyZSBpbW11dGFibGUgYnkgZGVmYXVsdC4nLCAvLyAxOVxuICAgICAgJ3VzZS0gbWV0aG9kIG11c3QgYmUgY2FsbGVkIG9ubHkgYXQgdGhlIHJvb3QgbGV2ZWwgb2YgYSBjb21wb25lbnQkKCknLFxuICAgICAgJ0NvbnRhaW5lciBpcyBhbHJlYWR5IHBhdXNlZC4gU2tpcHBpbmcnLFxuICAgIF07XG4gICAgcmV0dXJuIGBDb2RlKCR7Y29kZX0pOiAke01BUFtjb2RlXSA/PyAnJ31gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgQ29kZSgke2NvZGV9KWA7XG4gIH1cbn07XG4iXX0=","export function isTemplate(node) {\n    const tagName = (node && node.tagName) || '';\n    return tagName.toUpperCase() == 'TEMPLATE';\n}\nexport function prettyHtml(element, prefix = '') {\n    const lines = [];\n    lines.push(prefix, '<', element.localName);\n    const attrs = element.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n        const attr = attrs[i];\n        lines.push('\\n', prefix, '    ', attr.name, '=\"', attr.value, '\"');\n    }\n    lines.push('>');\n    let child = isTemplate(element) ? element.content.firstChild : element.firstChild;\n    while (child) {\n        if (isElement(child)) {\n            lines.push('\\n', prettyHtml(child, prefix + '  '));\n        }\n        else {\n            lines.push('\\n', prefix, child.textContent);\n        }\n        child = child.nextSibling;\n    }\n    lines.push('\\n', prefix, '</', element.localName, '>');\n    return lines.join('');\n}\nexport function isElement(value) {\n    return isNode(value) && value.nodeType == 1;\n}\nexport function isNode(value) {\n    return value && typeof value.nodeType == 'number';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvdGVzdGluZy9odG1sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBNkI7SUFDdEQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUssSUFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUQsT0FBTyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksVUFBVSxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQW9CLEVBQUUsU0FBaUIsRUFBRTtJQUNsRSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDcEU7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEYsT0FBTyxLQUFLLEVBQUU7UUFDWixJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7S0FDM0I7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQVU7SUFDbEMsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUM7QUFDOUMsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsS0FBVTtJQUMvQixPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDO0FBQ3BELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNUZW1wbGF0ZShub2RlOiBOb2RlIHwgbnVsbCB8IHVuZGVmaW5lZCk6IG5vZGUgaXMgSFRNTFRlbXBsYXRlRWxlbWVudCB7XG4gIGNvbnN0IHRhZ05hbWUgPSAobm9kZSAmJiAobm9kZSBhcyBFbGVtZW50KS50YWdOYW1lKSB8fCAnJztcbiAgcmV0dXJuIHRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSAnVEVNUExBVEUnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldHR5SHRtbChlbGVtZW50OiBIVE1MRWxlbWVudCwgcHJlZml4OiBzdHJpbmcgPSAnJyk6IGFueSB7XG4gIGNvbnN0IGxpbmVzID0gW107XG4gIGxpbmVzLnB1c2gocHJlZml4LCAnPCcsIGVsZW1lbnQubG9jYWxOYW1lKTtcbiAgY29uc3QgYXR0cnMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhdHRyID0gYXR0cnNbaV07XG4gICAgbGluZXMucHVzaCgnXFxuJywgcHJlZml4LCAnICAgICcsIGF0dHIubmFtZSwgJz1cIicsIGF0dHIudmFsdWUsICdcIicpO1xuICB9XG4gIGxpbmVzLnB1c2goJz4nKTtcbiAgbGV0IGNoaWxkID0gaXNUZW1wbGF0ZShlbGVtZW50KSA/IGVsZW1lbnQuY29udGVudC5maXJzdENoaWxkIDogZWxlbWVudC5maXJzdENoaWxkO1xuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoaXNFbGVtZW50KGNoaWxkKSkge1xuICAgICAgbGluZXMucHVzaCgnXFxuJywgcHJldHR5SHRtbChjaGlsZCwgcHJlZml4ICsgJyAgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lcy5wdXNoKCdcXG4nLCBwcmVmaXgsIGNoaWxkLnRleHRDb250ZW50KTtcbiAgICB9XG4gICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgfVxuICBsaW5lcy5wdXNoKCdcXG4nLCBwcmVmaXgsICc8LycsIGVsZW1lbnQubG9jYWxOYW1lLCAnPicpO1xuICByZXR1cm4gbGluZXMuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEhUTUxFbGVtZW50IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT0gMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTm9kZSh2YWx1ZTogYW55KTogdmFsdWUgaXMgTm9kZSB7XG4gIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUubm9kZVR5cGUgPT0gJ251bWJlcic7XG59XG4iXX0=","import { assertDefined } from '../assert/assert';\nexport const getDocument = (node) => {\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc);\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFVLEVBQVksRUFBRTtJQUNsRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFdBQVcsRUFBRTtRQUNuQyxPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLEVBQUU7UUFDdkIsT0FBTyxJQUFnQixDQUFDO0tBQ3pCO0lBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUMvQixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkIsT0FBTyxHQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnREZWZpbmVkIH0gZnJvbSAnLi4vYXNzZXJ0L2Fzc2VydCc7XG5cbmV4cG9ydCBjb25zdCBnZXREb2N1bWVudCA9IChub2RlOiBOb2RlKTogRG9jdW1lbnQgPT4ge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBub2RlIGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MpO1xuICByZXR1cm4gZG9jITtcbn07XG4iXX0=","export const isNode = (value) => {\n    return value && typeof value.nodeType == 'number';\n};\nexport const isDocument = (value) => {\n    return value && value.nodeType == 9;\n};\nexport const isElement = (value) => {\n    return isNode(value) && value.nodeType === 1;\n};\nexport const isText = (value) => {\n    return isNode(value) && value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return isNode(value) && value.nodeType === 9;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sS0FBSyxJQUFJLE9BQU8sS0FBSyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUM7QUFDcEQsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBVSxFQUFxQixFQUFFO0lBQzFELE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLEtBQVUsRUFBb0IsRUFBRTtJQUN4RCxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztBQUMvQyxDQUFDLENBQUM7QUFDRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVSxFQUFvQixFQUFFO0lBQ3hELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQy9DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc05vZGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09ICdudW1iZXInO1xufTtcbmV4cG9ydCBjb25zdCBpc0RvY3VtZW50ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBEb2N1bWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5ub2RlVHlwZSA9PSA5O1xufTtcbmV4cG9ydCBjb25zdCBpc0VsZW1lbnQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gaXNOb2RlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMTtcbn07XG5leHBvcnQgY29uc3QgaXNUZXh0ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBUZXh0ID0+IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDM7XG59O1xuZXhwb3J0IGNvbnN0IGlzQ29tbWVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgQ29tbWVudCA9PiB7XG4gIHJldHVybiBpc05vZGUodmFsdWUpICYmIHZhbHVlLm5vZGVUeXBlID09PSA5O1xufTtcbiJdfQ==","/**\n * State factory of the component.\n */\nexport const OnMount = 'on:qmount';\n/**\n * State factory of the component.\n */\nexport const QHostAttr = 'q:host';\nexport const OnRenderProp = 'q:renderFn';\n/**\n * State factory of the component.\n */\nexport const QHostSelector = '[q\\\\:host]';\n/**\n * State factory of the component.\n */\nexport const OnUnmount = 'on:qunmount';\n/**\n * State factory of the component.\n */\nexport const OnResume = 'on:qinit';\n/**\n * Component Styles.\n */\nexport const ComponentScopedStyles = 'q:sstyle';\n/**\n * Unscoped Component Styles.\n */\nexport const ComponentUnscopedStyles = 'q:ustyle';\n/**\n * Component style host prefix\n */\nexport const ComponentStylesPrefixHost = '💎';\n/**\n * Component style content prefix\n */\nexport const ComponentStylesPrefixContent = '⭐️';\n/**\n * Prefix used to identify on listeners.\n */\nexport const EventPrefix = 'on:';\n/**\n * Attribute used to mark that an event listener is attached.\n */\nexport const EventAny = 'on:.';\n/**\n * `<some-element q:slot=\"...\">`\n */\nexport const QSlot = 'q:slot';\nexport const QCtxAttr = 'q:ctx';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const RenderEvent = 'qRender';\n/**\n * `<q:slot name=\"...\">`\n */\nexport const QSlotName = 'name';\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const ELEMENT_ID_Q_PROPS_PREFIX = '&';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsV0FBVyxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQztBQUNsQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQztBQUUxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUM7QUFFdkM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsVUFBVSxDQUFDO0FBRWhEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsVUFBVSxDQUFDO0FBRWxEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBRTlCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUM7QUFFaEMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQztBQUU1QyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsU0FBUyxDQUFDO0FBQ3JDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUNyQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uTW91bnQgPSAnb246cW1vdW50JztcblxuLyoqXG4gKiBTdGF0ZSBmYWN0b3J5IG9mIHRoZSBjb21wb25lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBRSG9zdEF0dHIgPSAncTpob3N0JztcbmV4cG9ydCBjb25zdCBPblJlbmRlclByb3AgPSAncTpyZW5kZXJGbic7XG5cbi8qKlxuICogU3RhdGUgZmFjdG9yeSBvZiB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgY29uc3QgUUhvc3RTZWxlY3RvciA9ICdbcVxcXFw6aG9zdF0nO1xuXG4vKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uVW5tb3VudCA9ICdvbjpxdW5tb3VudCc7XG5cbi8qKlxuICogU3RhdGUgZmFjdG9yeSBvZiB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgY29uc3QgT25SZXN1bWUgPSAnb246cWluaXQnO1xuXG4vKipcbiAqIENvbXBvbmVudCBTdHlsZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTY29wZWRTdHlsZXMgPSAncTpzc3R5bGUnO1xuXG4vKipcbiAqIFVuc2NvcGVkIENvbXBvbmVudCBTdHlsZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRVbnNjb3BlZFN0eWxlcyA9ICdxOnVzdHlsZSc7XG5cbi8qKlxuICogQ29tcG9uZW50IHN0eWxlIGhvc3QgcHJlZml4XG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTdHlsZXNQcmVmaXhIb3N0ID0gJ/Cfko4nO1xuXG4vKipcbiAqIENvbXBvbmVudCBzdHlsZSBjb250ZW50IHByZWZpeFxuICovXG5leHBvcnQgY29uc3QgQ29tcG9uZW50U3R5bGVzUHJlZml4Q29udGVudCA9ICfirZDvuI8nO1xuXG4vKipcbiAqIFByZWZpeCB1c2VkIHRvIGlkZW50aWZ5IG9uIGxpc3RlbmVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IEV2ZW50UHJlZml4ID0gJ29uOic7XG5cbi8qKlxuICogQXR0cmlidXRlIHVzZWQgdG8gbWFyayB0aGF0IGFuIGV2ZW50IGxpc3RlbmVyIGlzIGF0dGFjaGVkLlxuICovXG5leHBvcnQgY29uc3QgRXZlbnRBbnkgPSAnb246Lic7XG4vKipcbiAqIGA8c29tZS1lbGVtZW50IHE6c2xvdD1cIi4uLlwiPmBcbiAqL1xuZXhwb3J0IGNvbnN0IFFTbG90ID0gJ3E6c2xvdCc7XG5cbmV4cG9ydCBjb25zdCBRQ3R4QXR0ciA9ICdxOmN0eCc7XG5cbmV4cG9ydCBjb25zdCBRQ29udGFpbmVyQXR0ciA9ICdxOmNvbnRhaW5lcic7XG5cbmV4cG9ydCBjb25zdCBRQ29udGFpbmVyU2VsZWN0b3IgPSAnW3FcXFxcOmNvbnRhaW5lcl0nO1xuXG5leHBvcnQgY29uc3QgUmVuZGVyRXZlbnQgPSAncVJlbmRlcic7XG4vKipcbiAqIGA8cTpzbG90IG5hbWU9XCIuLi5cIj5gXG4gKi9cbmV4cG9ydCBjb25zdCBRU2xvdE5hbWUgPSAnbmFtZSc7XG5leHBvcnQgY29uc3QgUVNsb3RJbmVydE5hbWUgPSAnXFx1MDAwMCc7XG5cbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEID0gJ3E6aWQnO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfU0VMRUNUT1IgPSAnW3FcXFxcOmlkXSc7XG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRF9QUkVGSVggPSAnIyc7XG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRF9RX1BST1BTX1BSRUZJWCA9ICcmJztcbiJdfQ==","/**\n * @private\n */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxDQUFNLEVBQVksRUFBRTtJQUMzQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBTSxFQUFjLEVBQUU7SUFDNUMsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBZSxFQUFFO0lBQzlDLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQy9CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQU0sRUFBaUIsRUFBRTtJQUNsRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLFVBQVUsQ0FBQztBQUNqQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBpc0h0bWxFbGVtZW50ID0gKG5vZGU6IGFueSk6IG5vZGUgaXMgRWxlbWVudCA9PiB7XG4gIHJldHVybiBub2RlID8gbm9kZS5ub2RlVHlwZSA9PT0gMSA6IGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzT2JqZWN0ID0gKHY6IGFueSk6IHYgaXMgYW55ID0+IHtcbiAgcmV0dXJuIHYgJiYgdHlwZW9mIHYgPT09ICdvYmplY3QnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQXJyYXkgPSAodjogYW55KTogdiBpcyBhbnlbXSA9PiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHYpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU3RyaW5nID0gKHY6IGFueSk6IHYgaXMgc3RyaW5nID0+IHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnc3RyaW5nJztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uID0gKHY6IGFueSk6IHYgaXMgRnVuY3Rpb24gPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdmdW5jdGlvbic7XG59O1xuXG4vKipcbiAqIFR5cGUgcmVwcmVzZW50aW5nIGEgdmFsdWUgd2hpY2ggaXMgZWl0aGVyIHJlc29sdmUgb3IgYSBwcm9taXNlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBWYWx1ZU9yUHJvbWlzZTxUPiA9IFQgfCBQcm9taXNlPFQ+O1xuIl19","import { isArray, isObject } from '../util/types';\nimport { assertDefined } from '../assert/assert';\nimport { QContainerSelector, QHostAttr, RenderEvent } from '../util/markers';\nimport { getDocument } from '../util/dom';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nlet _context;\nexport const CONTAINER = Symbol('container');\nexport const isStyleTask = (obj) => {\n    return isObject(obj) && obj.type === 'style';\n};\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            const element = context[0];\n            const hostElement = getHostElement(element);\n            assertDefined(element);\n            return (document.__q_context__ = newInvokeContext(getDocument(element), hostElement, element, context[1], context[2]));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = getInvokeContext();\n    if (ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$);\n    assertDefined(ctx.$waitOn$);\n    assertDefined(ctx.$renderCtx$);\n    assertDefined(ctx.$doc$);\n    assertDefined(ctx.$subscriber$);\n    return ctx;\n};\nexport const useInvoke = (context, fn, ...args) => {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(null, args);\n    }\n    finally {\n        const currentCtx = _context;\n        _context = previousContext;\n        if (currentCtx.$waitOn$ && currentCtx.$waitOn$.length > 0) {\n            // eslint-disable-next-line no-unsafe-finally\n            return Promise.all(currentCtx.$waitOn$).then(() => returnValue);\n        }\n    }\n    return returnValue;\n};\nexport const newInvokeContext = (doc, hostElement, element, event, url) => {\n    return {\n        $seq$: 0,\n        $doc$: doc,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $url$: url || null,\n        $qrl$: undefined,\n    };\n};\n/**\n * @alpha\n */\nexport const useWaitOn = (promise) => {\n    const ctx = useInvokeContext();\n    ctx.$waitOn$.push(promise);\n};\nexport const getHostElement = (el) => {\n    let foundSlot = false;\n    let node = el;\n    while (node) {\n        const isHost = node.hasAttribute(QHostAttr);\n        const isSlot = node.tagName === 'Q:SLOT';\n        if (isHost) {\n            if (!foundSlot) {\n                break;\n            }\n            else {\n                foundSlot = false;\n            }\n        }\n        if (isSlot) {\n            foundSlot = true;\n        }\n        node = node.parentElement;\n    }\n    return node;\n};\nexport const getContainer = (el) => {\n    let container = el[CONTAINER];\n    if (!container) {\n        container = el.closest(QContainerSelector);\n        el[CONTAINER] = container;\n    }\n    return container;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWNvcmUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUVsRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSTFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQTBCakcsSUFBSSxRQUFtQyxDQUFDO0FBRXhDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFN0MsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsR0FBUSxFQUFzQixFQUFFO0lBQzFELE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDO0FBQy9DLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLEdBQThCLEVBQUU7SUFDakUsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLE1BQU0sT0FBTyxHQUFHLE9BQU8sUUFBUSxLQUFLLFdBQVcsSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUN0RixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNwQixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0IsTUFBTSxXQUFX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QUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDN0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsRUFBVyxFQUFrQixFQUFFO0lBQzVELElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN0QixJQUFJLElBQUksR0FBbUIsRUFBRSxDQUFDO0lBQzlCLE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM1QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQztRQUN6QyxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ2QsTUFBTTthQUNQO2lCQUFNO2dCQUNMLFNBQVMsR0FBRyxLQUFLLENBQUM7YUFDbkI7U0FDRjtRQUNELElBQUksTUFBTSxFQUFFO1lBQ1YsU0FBUyxHQUFHLElBQUksQ0FBQztTQUNsQjtRQUNELElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0tBQzNCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFXLEVBQWtCLEVBQUU7SUFDMUQsSUFBSSxTQUFTLEdBQUksRUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDZCxTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzFDLEVBQVUsQ0FBQyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7S0FDcEM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc0FycmF5LCBpc09iamVjdCwgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgUHJvcHMgfSBmcm9tICcuLi9wcm9wcy9wcm9wcy5wdWJsaWMnO1xuaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRG9jdW1lbnQgfSBmcm9tICcuLi9kb2N1bWVudCc7XG5pbXBvcnQgeyBRQ29udGFpbmVyU2VsZWN0b3IsIFFIb3N0QXR0ciwgUmVuZGVyRXZlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi91dGlsL2RvbSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcbmltcG9ydCB0eXBlIHsgU3Vic2NyaWJlciB9IGZyb20gJy4vdXNlLXN1YnNjcmliZXInO1xuaW1wb3J0IHR5cGUgeyBSZW5kZXJDb250ZXh0IH0gZnJvbSAnLi4vcmVuZGVyL2N1cnNvcic7XG5pbXBvcnQgeyBxRXJyb3IsIFFFcnJvcl91c2VJbnZva2VDb250ZXh0LCBRRXJyb3JfdXNlTWV0aG9kT3V0c2lkZUNvbnRleHQgfSBmcm9tICcuLi9lcnJvci9lcnJvcic7XG5cbmRlY2xhcmUgY29uc3QgZG9jdW1lbnQ6IFF3aWtEb2N1bWVudDtcblxuZXhwb3J0IGludGVyZmFjZSBTdHlsZUFwcGVuZCB7XG4gIHR5cGU6ICdzdHlsZSc7XG4gIHN0eWxlSWQ6IHN0cmluZztcbiAgY29udGVudDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludm9rZUNvbnRleHQge1xuICAkdXJsJDogVVJMIHwgbnVsbDtcbiAgJHNlcSQ6IG51bWJlcjtcbiAgJGRvYyQ/OiBEb2N1bWVudDtcbiAgJGhvc3RFbGVtZW50JD86IEVsZW1lbnQ7XG4gICRlbGVtZW50JD86IEVsZW1lbnQ7XG4gICRldmVudCQ6IGFueTtcbiAgJHFybCQ/OiBRUkw8YW55PjtcbiAgJHdhaXRPbiQ/OiBWYWx1ZU9yUHJvbWlzZTxhbnk+W107XG4gICRwcm9wcyQ/OiBQcm9wcztcbiAgJHN1YnNjcmliZXIkPzogU3Vic2NyaWJlciB8IG51bGw7XG4gICRyZW5kZXJDdHgkPzogUmVuZGVyQ29udGV4dDtcbn1cblxuZXhwb3J0IHR5cGUgUmVuZGVySW52b2tlQ29udGV4dCA9IFJlcXVpcmVkPEludm9rZUNvbnRleHQ+O1xuXG5sZXQgX2NvbnRleHQ6IEludm9rZUNvbnRleHQgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBDT05UQUlORVIgPSBTeW1ib2woJ2NvbnRhaW5lcicpO1xuXG5leHBvcnQgY29uc3QgaXNTdHlsZVRhc2sgPSAob2JqOiBhbnkpOiBvYmogaXMgU3R5bGVBcHBlbmQgPT4ge1xuICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBvYmoudHlwZSA9PT0gJ3N0eWxlJztcbn07XG5cbmV4cG9ydCBjb25zdCB0cnlHZXRJbnZva2VDb250ZXh0ID0gKCk6IEludm9rZUNvbnRleHQgfCB1bmRlZmluZWQgPT4ge1xuICBpZiAoIV9jb250ZXh0KSB7XG4gICAgY29uc3QgY29udGV4dCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuX19xX2NvbnRleHRfXztcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KGNvbnRleHQpKSB7XG4gICAgICBjb25zdCBlbGVtZW50ID0gY29udGV4dFswXTtcbiAgICAgIGNvbnN0IGhvc3RFbGVtZW50ID0gZ2V0SG9zdEVsZW1lbnQoZWxlbWVudCkhO1xuICAgICAgYXNzZXJ0RGVmaW5lZChlbGVtZW50KTtcbiAgICAgIHJldHVybiAoZG9jdW1lbnQuX19xX2NvbnRleHRfXyA9IG5ld0ludm9rZUNvbnRleHQoXG4gICAgICAgIGdldERvY3VtZW50KGVsZW1lbnQpLFxuICAgICAgICBob3N0RWxlbWVudCxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgY29udGV4dFsxXSxcbiAgICAgICAgY29udGV4dFsyXVxuICAgICAgKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0IGFzIEludm9rZUNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIF9jb250ZXh0O1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEludm9rZUNvbnRleHQgPSAoKTogSW52b2tlQ29udGV4dCA9PiB7XG4gIGNvbnN0IGN0eCA9IHRyeUdldEludm9rZUNvbnRleHQoKTtcbiAgaWYgKCFjdHgpIHtcbiAgICB0aHJvdyBxRXJyb3IoUUVycm9yX3VzZU1ldGhvZE91dHNpZGVDb250ZXh0KTtcbiAgfVxuICByZXR1cm4gY3R4O1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUludm9rZUNvbnRleHQgPSAoKTogUmVuZGVySW52b2tlQ29udGV4dCA9PiB7XG4gIGNvbnN0IGN0eCA9IGdldEludm9rZUNvbnRleHQoKTtcbiAgaWYgKGN0eC4kZXZlbnQkICE9PSBSZW5kZXJFdmVudCkge1xuICAgIHRocm93IHFFcnJvcihRRXJyb3JfdXNlSW52b2tlQ29udGV4dCk7XG4gIH1cbiAgYXNzZXJ0RGVmaW5lZChjdHguJGhvc3RFbGVtZW50JCk7XG4gIGFzc2VydERlZmluZWQoY3R4LiR3YWl0T24kKTtcbiAgYXNzZXJ0RGVmaW5lZChjdHguJHJlbmRlckN0eCQpO1xuICBhc3NlcnREZWZpbmVkKGN0eC4kZG9jJCk7XG4gIGFzc2VydERlZmluZWQoY3R4LiRzdWJzY3JpYmVyJCk7XG5cbiAgcmV0dXJuIGN0eCBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlSW52b2tlID0gPEFSR1MgZXh0ZW5kcyBhbnlbXSA9IGFueVtdLCBSRVQgPSBhbnk+KFxuICBjb250ZXh0OiBJbnZva2VDb250ZXh0LFxuICBmbjogKC4uLmFyZ3M6IEFSR1MpID0+IFJFVCxcbiAgLi4uYXJnczogQVJHU1xuKTogVmFsdWVPclByb21pc2U8UkVUPiA9PiB7XG4gIGNvbnN0IHByZXZpb3VzQ29udGV4dCA9IF9jb250ZXh0O1xuICBsZXQgcmV0dXJuVmFsdWU6IFJFVDtcbiAgdHJ5IHtcbiAgICBfY29udGV4dCA9IGNvbnRleHQ7XG4gICAgcmV0dXJuVmFsdWUgPSBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjb25zdCBjdXJyZW50Q3R4ID0gX2NvbnRleHQhO1xuICAgIF9jb250ZXh0ID0gcHJldmlvdXNDb250ZXh0O1xuICAgIGlmIChjdXJyZW50Q3R4LiR3YWl0T24kICYmIGN1cnJlbnRDdHguJHdhaXRPbiQubGVuZ3RoID4gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwoY3VycmVudEN0eC4kd2FpdE9uJCkudGhlbigoKSA9PiByZXR1cm5WYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBuZXdJbnZva2VDb250ZXh0ID0gKFxuICBkb2M/OiBEb2N1bWVudCxcbiAgaG9zdEVsZW1lbnQ/OiBFbGVtZW50LFxuICBlbGVtZW50PzogRWxlbWVudCxcbiAgZXZlbnQ/OiBhbnksXG4gIHVybD86IFVSTFxuKTogSW52b2tlQ29udGV4dCA9PiB7XG4gIHJldHVybiB7XG4gICAgJHNlcSQ6IDAsXG4gICAgJGRvYyQ6IGRvYyxcbiAgICAkaG9zdEVsZW1lbnQkOiBob3N0RWxlbWVudCxcbiAgICAkZWxlbWVudCQ6IGVsZW1lbnQsXG4gICAgJGV2ZW50JDogZXZlbnQsXG4gICAgJHVybCQ6IHVybCB8fCBudWxsLFxuICAgICRxcmwkOiB1bmRlZmluZWQsXG4gIH07XG59O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgdXNlV2FpdE9uID0gKHByb21pc2U6IFZhbHVlT3JQcm9taXNlPGFueT4pOiB2b2lkID0+IHtcbiAgY29uc3QgY3R4ID0gdXNlSW52b2tlQ29udGV4dCgpO1xuICBjdHguJHdhaXRPbiQucHVzaChwcm9taXNlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRIb3N0RWxlbWVudCA9IChlbDogRWxlbWVudCk6IEVsZW1lbnQgfCBudWxsID0+IHtcbiAgbGV0IGZvdW5kU2xvdCA9IGZhbHNlO1xuICBsZXQgbm9kZTogRWxlbWVudCB8IG51bGwgPSBlbDtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBjb25zdCBpc0hvc3QgPSBub2RlLmhhc0F0dHJpYnV0ZShRSG9zdEF0dHIpO1xuICAgIGNvbnN0IGlzU2xvdCA9IG5vZGUudGFnTmFtZSA9PT0gJ1E6U0xPVCc7XG4gICAgaWYgKGlzSG9zdCkge1xuICAgICAgaWYgKCFmb3VuZFNsb3QpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3VuZFNsb3QgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzU2xvdCkge1xuICAgICAgZm91bmRTbG90ID0gdHJ1ZTtcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDb250YWluZXIgPSAoZWw6IEVsZW1lbnQpOiBFbGVtZW50IHwgbnVsbCA9PiB7XG4gIGxldCBjb250YWluZXIgPSAoZWwgYXMgYW55KVtDT05UQUlORVJdO1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIGNvbnRhaW5lciA9IGVsLmNsb3Nlc3QoUUNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICAoZWwgYXMgYW55KVtDT05UQUlORVJdID0gY29udGFpbmVyO1xuICB9XG4gIHJldHVybiBjb250YWluZXI7XG59O1xuIl19","export const isPromise = (value) => {\n    return value instanceof Promise;\n};\nexport const then = (promise, thenFn, rejectFn) => {\n    return isPromise(promise) ? promise.then(thenFn, rejectFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsT0FBTyxLQUFLLFlBQVksT0FBTyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUNsQixPQUEwQixFQUMxQixNQUE4QyxFQUM5QyxRQUE0QixFQUNULEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBYyxDQUFDLENBQUM7QUFDN0YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQ3hCLFFBQVcsRUFDa0QsRUFBRTtJQUMvRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQzlCO0lBQ0QsT0FBTyxRQUFlLENBQUM7QUFDekIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUksQ0FBSSxFQUF1QixFQUFFO0lBQzVELE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFByb21pc2VUcmVlPFQ+ID0gVCB8IFByb21pc2U8VD4gfCBQcm9taXNlPFRbXT4gfCBBcnJheTxQcm9taXNlVHJlZTxUPj47XG5cbmV4cG9ydCBjb25zdCBpc1Byb21pc2UgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFByb21pc2U8YW55PiA9PiB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2U7XG59O1xuXG5leHBvcnQgY29uc3QgdGhlbiA9IDxULCBCPihcbiAgcHJvbWlzZTogVmFsdWVPclByb21pc2U8VD4sXG4gIHRoZW5GbjogKGFyZzogQXdhaXRlZDxUPikgPT4gVmFsdWVPclByb21pc2U8Qj4sXG4gIHJlamVjdEZuPzogKGVycjogYW55KSA9PiBhbnlcbik6IFZhbHVlT3JQcm9taXNlPEI+ID0+IHtcbiAgcmV0dXJuIGlzUHJvbWlzZShwcm9taXNlKSA/IHByb21pc2UudGhlbih0aGVuRm4gYXMgYW55LCByZWplY3RGbikgOiB0aGVuRm4ocHJvbWlzZSBhcyBhbnkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGwgPSA8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXSB8IFtdPihcbiAgcHJvbWlzZXM6IFRcbik6IFZhbHVlT3JQcm9taXNlPHsgLXJlYWRvbmx5IFtQIGluIGtleW9mIFRdOiBBd2FpdGVkPFRbUF0+IH0+ID0+IHtcbiAgY29uc3QgaGFzUHJvbWlzZSA9IHByb21pc2VzLnNvbWUoaXNQcm9taXNlKTtcbiAgaWYgKGhhc1Byb21pc2UpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICB9XG4gIHJldHVybiBwcm9taXNlcyBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb3ROdWxsYWJsZSA9IDxUPih2OiBUKTogdiBpcyBOb25OdWxsYWJsZTxUPiA9PiB7XG4gIHJldHVybiB2ICE9IG51bGw7XG59O1xuIl19","import { createProxy, QObjectRecursive } from '../object/q-object';\nimport { useInvokeContext } from './use-core';\nimport { getContext } from '../props/props';\nimport { isFunction } from '../util/types';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has\n * a unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ## Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <Host>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </Host>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const containerState = ctx.$renderCtx$.$containerState$;\n    const value = isFunction(initialState) ? initialState() : initialState;\n    const recursive = opts?.recursive ?? false;\n    const flags = recursive ? QObjectRecursive : 0;\n    const newStore = createProxy(value, containerState, flags, undefined);\n    set(newStore);\n    return newStore;\n};\n// <docs markdown=\"../readme.md#useRef\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useRef instead)\n/**\n * It's a very thin wrapper around `useStore()`, including the proper type signature to be passed\n * to the `ref` property in JSX.\n *\n * ```tsx\n * export function useRef<T = Element>(current?: T): Ref<T> {\n *   return useStore({ current });\n * }\n * ```\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const input = useRef<HTMLInputElement>();\n *\n *   useClientEffect$((track) => {\n *     const el = track(input, 'current')!;\n *     el.focus();\n *   });\n *\n *   return (\n *     <Host>\n *       <input type=\"text\" ref={input} />\n *     </Host>\n *   );\n * });\n *\n * ```\n *\n * @public\n */\n// </docs>\nexport const useRef = (current) => {\n    return useStore({ current });\n};\n/**\n * @alpha\n */\nexport const useSequentialScope = () => {\n    const ctx = useInvokeContext();\n    const i = ctx.$seq$;\n    const hostElement = ctx.$hostElement$;\n    const elementCtx = getContext(hostElement);\n    ctx.$seq$++;\n    const set = (value) => {\n        elementCtx.$seq$[i] = value;\n    };\n    return {\n        get: elementCtx.$seq$[i],\n        set,\n        i,\n        ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkUsT0FBTyxFQUF1QixnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU0zQywwQ0FBMEM7QUFDMUMseUNBQXlDO0FBQ3pDLHVDQUF1QztBQUN2Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBERztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FDdEIsWUFBbUMsRUFDbkMsSUFBc0IsRUFDZixFQUFFO0lBQ1QsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLEVBQVMsQ0FBQztJQUN0RCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBQ0QsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztJQUN4RCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFFLFlBQXlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3JGLE1BQU0sU0FBUyxHQUFHLElBQUksRUFBRSxTQUFTLElBQUksS0FBSyxDQUFDO0lBQzNDLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2QsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBU0Ysd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0ErQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQWMsT0FBVyxFQUFVLEVBQUU7SUFDekQsT0FBTyxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQy9CLENBQUMsQ0FBQztBQVNGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDcEIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUN0QyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDM0MsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ1osTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFRLEVBQUUsRUFBRTtRQUN2QixVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDLENBQUM7SUFDRixPQUFPO1FBQ0wsR0FBRyxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLEdBQUc7UUFDSCxDQUFDO1FBQ0QsR0FBRztLQUNKLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVQcm94eSwgUU9iamVjdFJlY3Vyc2l2ZSB9IGZyb20gJy4uL29iamVjdC9xLW9iamVjdCc7XG5pbXBvcnQgeyBSZW5kZXJJbnZva2VDb250ZXh0LCB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZVN0b3JlT3B0aW9ucyB7XG4gIHJlY3Vyc2l2ZT86IGJvb2xlYW47XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVN0b3JlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVN0b3JlIGluc3RlYWQpXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgUXdpayBjYW4gdHJhY2sgYWNyb3NzIHNlcmlhbGl6YXRpb25zLlxuICpcbiAqIFVzZSBgdXNlU3RvcmVgIHRvIGNyZWF0ZSBhIHN0YXRlIGZvciB5b3VyIGFwcGxpY2F0aW9uLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIGEgcHJveHkgdGhhdCBoYXNcbiAqIGEgdW5pcXVlIElELiBUaGUgSUQgb2YgdGhlIG9iamVjdCBpcyB1c2VkIGluIHRoZSBgUVJMYHMgdG8gcmVmZXIgdG8gdGhlIHN0b3JlLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBFeGFtcGxlIHNob3dpbmcgaG93IGB1c2VTdG9yZWAgaXMgdXNlZCBpbiBDb3VudGVyIGV4YW1wbGUgdG8ga2VlcCB0cmFjayBvZiB0aGUgY291bnQuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBTdG9yZXMgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3QgY291bnRlciA9IHVzZUNvdW50ZXIoMSk7XG4gKlxuICogICAvLyBSZWFjdGl2aXR5IGhhcHBlbnMgZXZlbiBmb3IgbmVzdGVkIG9iamVjdHMgYW5kIGFycmF5c1xuICogICBjb25zdCB1c2VyRGF0YSA9IHVzZVN0b3JlKHtcbiAqICAgICBuYW1lOiAnTWFudScsXG4gKiAgICAgYWRkcmVzczoge1xuICogICAgICAgYWRkcmVzczogJycsXG4gKiAgICAgICBjaXR5OiAnJyxcbiAqICAgICB9LFxuICogICAgIG9yZ3M6IFtdLFxuICogICB9KTtcbiAqXG4gKiAgIC8vIHVzZVN0b3JlKCkgY2FuIGFsc28gYWNjZXB0IGEgZnVuY3Rpb24gdG8gY2FsY3VsYXRlIHRoZSBpbml0aWFsIHZhbHVlXG4gKiAgIGNvbnN0IHN0YXRlID0gdXNlU3RvcmUoKCkgPT4ge1xuICogICAgIHJldHVybiB7XG4gKiAgICAgICB2YWx1ZTogZXhwZW5zaXZlSW5pdGlhbFZhbHVlKCksXG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxIb3N0PlxuICogICAgICAgPGRpdj5Db3VudGVyOiB7Y291bnRlci52YWx1ZX08L2Rpdj5cbiAqICAgICAgIDxDaGlsZCB1c2VyRGF0YT17dXNlckRhdGF9IHN0YXRlPXtzdGF0ZX0gLz5cbiAqICAgICA8L0hvc3Q+XG4gKiAgICk7XG4gKiB9KTtcbiAqXG4gKiBmdW5jdGlvbiB1c2VDb3VudGVyKHN0ZXA6IG51bWJlcikge1xuICogICAvLyBNdWx0aXBsZSBzdG9yZXMgY2FuIGJlIGNyZWF0ZWQgaW4gY3VzdG9tIGhvb2tzIGZvciBjb252ZW5pZW5jZSBhbmQgY29tcG9zYWJpbGl0eVxuICogICBjb25zdCBjb3VudGVyU3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgdmFsdWU6IDAsXG4gKiAgIH0pO1xuICogICB1c2VDbGllbnRFZmZlY3QkKCgpID0+IHtcbiAqICAgICAvLyBPbmx5IHJ1bnMgaW4gdGhlIGNsaWVudFxuICogICAgIGNvbnN0IHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICogICAgICAgY291bnRlclN0b3JlLnZhbHVlICs9IHN0ZXA7XG4gKiAgICAgfSwgNTAwKTtcbiAqICAgICByZXR1cm4gKCkgPT4ge1xuICogICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gKiAgICAgfTtcbiAqICAgfSk7XG4gKiAgIHJldHVybiBjb3VudGVyU3RvcmU7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IDxTVEFURSBleHRlbmRzIG9iamVjdD4oXG4gIGluaXRpYWxTdGF0ZTogU1RBVEUgfCAoKCkgPT4gU1RBVEUpLFxuICBvcHRzPzogVXNlU3RvcmVPcHRpb25zXG4pOiBTVEFURSA9PiB7XG4gIGNvbnN0IHsgZ2V0LCBzZXQsIGN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNUQVRFPigpO1xuICBpZiAoZ2V0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0O1xuICB9XG4gIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gY3R4LiRyZW5kZXJDdHgkLiRjb250YWluZXJTdGF0ZSQ7XG4gIGNvbnN0IHZhbHVlID0gaXNGdW5jdGlvbihpbml0aWFsU3RhdGUpID8gKGluaXRpYWxTdGF0ZSBhcyBGdW5jdGlvbikoKSA6IGluaXRpYWxTdGF0ZTtcbiAgY29uc3QgcmVjdXJzaXZlID0gb3B0cz8ucmVjdXJzaXZlID8/IGZhbHNlO1xuICBjb25zdCBmbGFncyA9IHJlY3Vyc2l2ZSA/IFFPYmplY3RSZWN1cnNpdmUgOiAwO1xuICBjb25zdCBuZXdTdG9yZSA9IGNyZWF0ZVByb3h5KHZhbHVlLCBjb250YWluZXJTdGF0ZSwgZmxhZ3MsIHVuZGVmaW5lZCk7XG4gIHNldChuZXdTdG9yZSk7XG4gIHJldHVybiBuZXdTdG9yZTtcbn07XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVmPFQ+IHtcbiAgY3VycmVudD86IFQ7XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlZlwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZWYgaW5zdGVhZClcbi8qKlxuICogSXQncyBhIHZlcnkgdGhpbiB3cmFwcGVyIGFyb3VuZCBgdXNlU3RvcmUoKWAsIGluY2x1ZGluZyB0aGUgcHJvcGVyIHR5cGUgc2lnbmF0dXJlIHRvIGJlIHBhc3NlZFxuICogdG8gdGhlIGByZWZgIHByb3BlcnR5IGluIEpTWC5cbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiB1c2VSZWY8VCA9IEVsZW1lbnQ+KGN1cnJlbnQ/OiBUKTogUmVmPFQ+IHtcbiAqICAgcmV0dXJuIHVzZVN0b3JlKHsgY3VycmVudCB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBpbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PigpO1xuICpcbiAqICAgdXNlQ2xpZW50RWZmZWN0JCgodHJhY2spID0+IHtcbiAqICAgICBjb25zdCBlbCA9IHRyYWNrKGlucHV0LCAnY3VycmVudCcpITtcbiAqICAgICBlbC5mb2N1cygpO1xuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPEhvc3Q+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiByZWY9e2lucHV0fSAvPlxuICogICAgIDwvSG9zdD5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVJlZiA9IDxUID0gRWxlbWVudD4oY3VycmVudD86IFQpOiBSZWY8VD4gPT4ge1xuICByZXR1cm4gdXNlU3RvcmUoeyBjdXJyZW50IH0pO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW50aWFsU2NvcGU8VD4ge1xuICByZWFkb25seSBnZXQ6IFQgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHNldDogKHY6IFQpID0+IHZvaWQ7XG4gIHJlYWRvbmx5IGk6IG51bWJlcjtcbiAgcmVhZG9ubHkgY3R4OiBSZW5kZXJJbnZva2VDb250ZXh0O1xufVxuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgdXNlU2VxdWVudGlhbFNjb3BlID0gPFQ+KCk6IFNlcXVlbnRpYWxTY29wZTxUPiA9PiB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgY29uc3QgaSA9IGN0eC4kc2VxJDtcbiAgY29uc3QgaG9zdEVsZW1lbnQgPSBjdHguJGhvc3RFbGVtZW50JDtcbiAgY29uc3QgZWxlbWVudEN0eCA9IGdldENvbnRleHQoaG9zdEVsZW1lbnQpO1xuICBjdHguJHNlcSQrKztcbiAgY29uc3Qgc2V0ID0gKHZhbHVlOiBUKSA9PiB7XG4gICAgZWxlbWVudEN0eC4kc2VxJFtpXSA9IHZhbHVlO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGdldDogZWxlbWVudEN0eC4kc2VxJFtpXSxcbiAgICBzZXQsXG4gICAgaSxcbiAgICBjdHgsXG4gIH07XG59O1xuIl19","import { getContainer } from '../use/use-core';\nimport { getDocument } from '../util/dom';\nimport { isObject } from '../util/types';\nexport const createPlatform = (doc) => {\n    const moduleCache = new Map();\n    return {\n        isServer: false,\n        importSymbol(element, url, symbolName) {\n            const urlDoc = toUrl(doc, element, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            const mod = moduleCache.get(importURL);\n            if (mod) {\n                return mod[symbolName];\n            }\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                mod = findModule(mod);\n                moduleCache.set(importURL, mod);\n                return mod[symbolName];\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol() {\n            return undefined;\n        },\n    };\n};\nconst findModule = (module) => {\n    return Object.values(module).find(isModule) || module;\n};\nconst isModule = (module) => {\n    return isObject(module) && module[Symbol.toStringTag] === 'Module';\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *    - `Element` use `base.ownerDocument.baseURI`\n *    - `Document` use `base.baseURI`\n *    - `string` use `base` as is\n *    - `QConfig` use `base.baseURI`\n * @param url - relative URL\n * @returns fully qualified URL.\n */\nexport const toUrl = (doc, element, url) => {\n    const containerEl = getContainer(element);\n    const base = new URL(containerEl?.getAttribute('q:base') ?? doc.baseURI, doc.baseURI);\n    return new URL(url, base);\n};\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @alpha\n */\n// </docs>\nexport const setPlatform = (doc, plt) => (doc[DocumentPlatform] = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings\n * from symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but\n * is specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform`\n * is associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @alpha\n */\n// </docs>\nexport const getPlatform = (docOrNode) => {\n    const doc = getDocument(docOrNode);\n    return doc[DocumentPlatform] || (doc[DocumentPlatform] = createPlatform(doc));\n};\nconst DocumentPlatform = /*#__PURE__*/ Symbol();\n//# sourceMappingURL=data:application/json;base64,","import { useInvokeContext } from './use-core';\n// <docs markdown=\"../readme.md#useDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useDocument instead)\n/**\n * Retrieves the document of the current element. It's important to use this method instead of\n * accessing `document` directly because during SSR, the global document might not exist.\n *\n * NOTE: `useDocument` method can only be used in the synchronous portion of the callback (before\n * any `await` statements.)\n *\n * @alpha\n */\n// </docs>\nexport const useDocument = () => {\n    const ctx = useInvokeContext();\n    return ctx.$doc$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWRvY3VtZW50LnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWRvY3VtZW50LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFOUMsNkNBQTZDO0FBQzdDLHlDQUF5QztBQUN6QywwQ0FBMEM7QUFDMUM7Ozs7Ozs7O0dBUUc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEdBQWEsRUFBRTtJQUN4QyxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZURvY3VtZW50XCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZURvY3VtZW50IGluc3RlYWQpXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgZG9jdW1lbnQgb2YgdGhlIGN1cnJlbnQgZWxlbWVudC4gSXQncyBpbXBvcnRhbnQgdG8gdXNlIHRoaXMgbWV0aG9kIGluc3RlYWQgb2ZcbiAqIGFjY2Vzc2luZyBgZG9jdW1lbnRgIGRpcmVjdGx5IGJlY2F1c2UgZHVyaW5nIFNTUiwgdGhlIGdsb2JhbCBkb2N1bWVudCBtaWdodCBub3QgZXhpc3QuXG4gKlxuICogTk9URTogYHVzZURvY3VtZW50YCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2sgKGJlZm9yZVxuICogYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VEb2N1bWVudCA9ICgpOiBEb2N1bWVudCA9PiB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgcmV0dXJuIGN0eC4kZG9jJDtcbn07XG4iXX0=","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBmcm9tQ2FtZWxUb0tlYmFiQ2FzZSA9ICh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gdGV4dC5yZXBsYWNlKC8oW0EtWl0pL2csICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufTtcbiJdfQ==","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQVcsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDN0UsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQVcsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUM5RCxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGRpcmVjdFNldEF0dHJpYnV0ZSA9IChlbDogRWxlbWVudCwgcHJvcDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEdldEF0dHJpYnV0ZSA9IChlbDogRWxlbWVudCwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7XG59O1xuIl19","import { getPlatform } from '../platform/platform';\nimport { parseQRL, stringifyQRL } from '../import/qrl';\nimport { isSameQRL } from '../import/qrl-class';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { setAttribute } from '../render/cursor';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { isArray } from '../util/types';\nconst ON_PROP_REGEX = /^(window:|document:|)on([A-Z]|-.).*\\$$/;\nexport const isOnProp = (prop) => {\n    return ON_PROP_REGEX.test(prop);\n};\nexport const qPropWriteQRL = (rctx, ctx, prop, value) => {\n    if (!value) {\n        return;\n    }\n    if (!ctx.$listeners$) {\n        ctx.$listeners$ = getDomListeners(ctx.$element$);\n    }\n    const kebabProp = fromCamelToKebabCase(prop);\n    const existingListeners = ctx.$listeners$.get(kebabProp) || [];\n    const newQRLs = isArray(value) ? value : [value];\n    for (const value of newQRLs) {\n        const cp = value.$copy$();\n        cp.$setContainer$(ctx.$element$);\n        const capture = cp.$capture$;\n        if (capture == null) {\n            // we need to serialize the lexical scope references\n            const captureRef = cp.$captureRef$;\n            cp.$capture$ =\n                captureRef && captureRef.length\n                    ? captureRef.map((ref) => String(ctx.$refMap$.$add$(ref)))\n                    : EMPTY_ARRAY;\n        }\n        // Important we modify the array as it is cached.\n        for (let i = 0; i < existingListeners.length; i++) {\n            const qrl = existingListeners[i];\n            if (isSameQRL(qrl, cp)) {\n                existingListeners.splice(i, 1);\n                i--;\n            }\n        }\n        existingListeners.push(cp);\n    }\n    ctx.$listeners$.set(kebabProp, existingListeners);\n    const newValue = serializeQRLs(existingListeners, ctx);\n    if (directGetAttribute(ctx.$element$, kebabProp) !== newValue) {\n        setAttribute(rctx, ctx.$element$, kebabProp, newValue);\n    }\n};\nexport const getDomListeners = (el) => {\n    const attributes = el.attributes;\n    const listeners = new Map();\n    for (let i = 0; i < attributes.length; i++) {\n        const attr = attributes.item(i);\n        if (attr.name.startsWith('on:') ||\n            attr.name.startsWith('on-window:') ||\n            attr.name.startsWith('on-document:')) {\n            let array = listeners.get(attr.name);\n            if (!array) {\n                listeners.set(attr.name, (array = []));\n            }\n            array.push(parseQRL(attr.value, el));\n        }\n    }\n    return listeners;\n};\nconst serializeQRLs = (existingQRLs, ctx) => {\n    const opts = {\n        $platform$: getPlatform(ctx.$element$),\n        $element$: ctx.$element$,\n    };\n    return existingQRLs.map((qrl) => stringifyQRL(qrl, opts)).join('\\n');\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * Place at the root of the component View to allow binding of attributes on the Host element.\n *\n * ```\n * <Host someAttr={someExpr} someAttrStatic=\"value\">\n *   View content implementation.\n * </Host>\n * ```\n *\n * Qwik requires that components have [docs/HOST_ELEMENTS.ts] so that it is possible to have\n * asynchronous loading point. Host element is not owned by the component. At times it is\n * desirable for the component to render additional attributes on the host element. `<Host>`\n * servers that purpose.\n * @public\n */\nexport const Host = { __brand__: 'host' };\n/**\n * @public\n */\nexport const SkipRerender = { __brand__: 'skip' };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9zdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9ob3N0LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBbUQsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFTLENBQUM7QUFFakc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQTBCLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIVE1MQXR0cmlidXRlcyB9IGZyb20gJy4vdHlwZXMvanN4LWdlbmVyYXRlZCc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5cbi8qKlxuICogUGxhY2UgYXQgdGhlIHJvb3Qgb2YgdGhlIGNvbXBvbmVudCBWaWV3IHRvIGFsbG93IGJpbmRpbmcgb2YgYXR0cmlidXRlcyBvbiB0aGUgSG9zdCBlbGVtZW50LlxuICpcbiAqIGBgYFxuICogPEhvc3Qgc29tZUF0dHI9e3NvbWVFeHByfSBzb21lQXR0clN0YXRpYz1cInZhbHVlXCI+XG4gKiAgIFZpZXcgY29udGVudCBpbXBsZW1lbnRhdGlvbi5cbiAqIDwvSG9zdD5cbiAqIGBgYFxuICpcbiAqIFF3aWsgcmVxdWlyZXMgdGhhdCBjb21wb25lbnRzIGhhdmUgW2RvY3MvSE9TVF9FTEVNRU5UUy50c10gc28gdGhhdCBpdCBpcyBwb3NzaWJsZSB0byBoYXZlXG4gKiBhc3luY2hyb25vdXMgbG9hZGluZyBwb2ludC4gSG9zdCBlbGVtZW50IGlzIG5vdCBvd25lZCBieSB0aGUgY29tcG9uZW50LiBBdCB0aW1lcyBpdCBpc1xuICogZGVzaXJhYmxlIGZvciB0aGUgY29tcG9uZW50IHRvIHJlbmRlciBhZGRpdGlvbmFsIGF0dHJpYnV0ZXMgb24gdGhlIGhvc3QgZWxlbWVudC4gYDxIb3N0PmBcbiAqIHNlcnZlcnMgdGhhdCBwdXJwb3NlLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgSG9zdDogRnVuY3Rpb25Db21wb25lbnQ8SFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+PiA9IHsgX19icmFuZF9fOiAnaG9zdCcgfSBhcyBhbnk7XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgU2tpcFJlcmVuZGVyOiBGdW5jdGlvbkNvbXBvbmVudDx7fT4gPSB7IF9fYnJhbmRfXzogJ3NraXAnIH0gYXMgYW55O1xuIl19","import { qDev } from '../../util/qdev';\nimport { Host, SkipRerender } from './host.public';\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { isNotNullable, isPromise, promiseAll, then } from '../../util/promises';\nimport { useInvoke } from '../../use/use-core';\n/**\n * @public\n */\nexport const jsx = (type, props, key) => {\n    return new JSXNodeImpl(type, props, key);\n};\nexport const HOST_TYPE = ':host';\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, key = null) {\n        this.type = type;\n        this.props = props;\n        this.key = key;\n    }\n}\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $children$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$children$ = $children$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const key = node.key != null ? String(node.key) : null;\n    let textType = '';\n    if (node.type === Host) {\n        textType = HOST_TYPE;\n    }\n    else if (node.type === SkipRerender) {\n        textType = SKIP_RENDER_TYPE;\n    }\n    else if (isFunction(node.type)) {\n        const res = invocationContext\n            ? useInvoke(invocationContext, () => node.type(node.props, node.key))\n            : node.type(node.props, node.key);\n        return processData(res, invocationContext);\n    }\n    else if (isString(node.type)) {\n        textType = node.type;\n    }\n    let children = EMPTY_ARRAY;\n    if (node.props) {\n        const mightPromise = processData(node.props.children, invocationContext);\n        return then(mightPromise, (result) => {\n            if (result !== undefined) {\n                if (isArray(result)) {\n                    children = result;\n                }\n                else {\n                    children = [result];\n                }\n            }\n            return new ProcessedJSXNodeImpl(textType, node.props, children, key);\n        });\n    }\n    return new ProcessedJSXNodeImpl(textType, node.props, children, key);\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return then(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isString(node) || typeof node === 'number') {\n        const newNode = new ProcessedJSXNodeImpl('#text', null, EMPTY_ARRAY, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else {\n        logWarn('Unvalid node, skipping');\n        return undefined;\n    }\n};\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === JSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"JSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\n/**\n * @public\n */\nexport const Fragment = (props) => props.children;\nexport { jsx as jsxs, jsx as jsxDEV };\n//# sourceMappingURL=data:application/json;base64,","import { getContext } from '../props/props';\nimport { isArray } from '../util/types';\nimport { smartUpdateChildren, updateProperties } from './cursor';\nimport { HOST_TYPE } from './jsx/jsx-runtime';\nexport const visitJsxNode = (ctx, elm, jsxNode, isSvg) => {\n    if (jsxNode === undefined) {\n        return smartUpdateChildren(ctx, elm, [], 'root', isSvg);\n    }\n    if (isArray(jsxNode)) {\n        return smartUpdateChildren(ctx, elm, jsxNode.flat(), 'root', isSvg);\n    }\n    else if (jsxNode.$type$ === HOST_TYPE) {\n        updateProperties(ctx, getContext(elm), jsxNode.$props$, isSvg);\n        return smartUpdateChildren(ctx, elm, jsxNode.$children$ || [], 'root', isSvg);\n    }\n    else {\n        return smartUpdateChildren(ctx, elm, [jsxNode], 'root', isSvg);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9yZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxPQUFPLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBaUIsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRzlDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUMxQixHQUFrQixFQUNsQixHQUFZLEVBQ1osT0FBMEQsRUFDMUQsS0FBYyxFQUNRLEVBQUU7SUFDeEIsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFO1FBQ3pCLE9BQU8sbUJBQW1CLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQ3pEO0lBQ0QsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDckU7U0FBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1FBQ3ZDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMvRCxPQUFPLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQy9FO1NBQU07UUFDTCxPQUFPLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDaEU7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgaXNBcnJheSwgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IFJlbmRlckNvbnRleHQsIHNtYXJ0VXBkYXRlQ2hpbGRyZW4sIHVwZGF0ZVByb3BlcnRpZXMgfSBmcm9tICcuL2N1cnNvcic7XG5pbXBvcnQgdHlwZSB7IFByb2Nlc3NlZEpTWE5vZGUgfSBmcm9tICcuL2pzeC90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBIT1NUX1RZUEUgfSBmcm9tICcuL2pzeC9qc3gtcnVudGltZSc7XG5leHBvcnQgdHlwZSBDb21wb25lbnRSZW5kZXJRdWV1ZSA9IFByb21pc2U8SFRNTEVsZW1lbnRbXT5bXTtcblxuZXhwb3J0IGNvbnN0IHZpc2l0SnN4Tm9kZSA9IChcbiAgY3R4OiBSZW5kZXJDb250ZXh0LFxuICBlbG06IEVsZW1lbnQsXG4gIGpzeE5vZGU6IFByb2Nlc3NlZEpTWE5vZGUgfCBQcm9jZXNzZWRKU1hOb2RlW10gfCB1bmRlZmluZWQsXG4gIGlzU3ZnOiBib29sZWFuXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmIChqc3hOb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gc21hcnRVcGRhdGVDaGlsZHJlbihjdHgsIGVsbSwgW10sICdyb290JywgaXNTdmcpO1xuICB9XG4gIGlmIChpc0FycmF5KGpzeE5vZGUpKSB7XG4gICAgcmV0dXJuIHNtYXJ0VXBkYXRlQ2hpbGRyZW4oY3R4LCBlbG0sIGpzeE5vZGUuZmxhdCgpLCAncm9vdCcsIGlzU3ZnKTtcbiAgfSBlbHNlIGlmIChqc3hOb2RlLiR0eXBlJCA9PT0gSE9TVF9UWVBFKSB7XG4gICAgdXBkYXRlUHJvcGVydGllcyhjdHgsIGdldENvbnRleHQoZWxtKSwganN4Tm9kZS4kcHJvcHMkLCBpc1N2Zyk7XG4gICAgcmV0dXJuIHNtYXJ0VXBkYXRlQ2hpbGRyZW4oY3R4LCBlbG0sIGpzeE5vZGUuJGNoaWxkcmVuJCB8fCBbXSwgJ3Jvb3QnLCBpc1N2Zyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNtYXJ0VXBkYXRlQ2hpbGRyZW4oY3R4LCBlbG0sIFtqc3hOb2RlXSwgJ3Jvb3QnLCBpc1N2Zyk7XG4gIH1cbn07XG4iXX0=","export const hashCode = (text, hash = 0) => {\n    if (text.length === 0)\n        return hash;\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzaENvZGUgPSAodGV4dDogc3RyaW5nLCBoYXNoOiBudW1iZXIgPSAwKSA9PiB7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNociA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cbiAgcmV0dXJuIE51bWJlcihNYXRoLmFicyhoYXNoKSkudG9TdHJpbmcoMzYpO1xufTtcbiJdfQ==","import { ComponentStylesPrefixContent, ComponentStylesPrefixHost } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\n/**\n * @public\n */\nexport const styleKey = (qStyles, index) => {\n    return `${hashCode(qStyles.getHash())}-${index}`;\n};\n/**\n * @public\n */\nexport const styleHost = (styleId) => {\n    return ComponentStylesPrefixHost + styleId;\n};\n/**\n * @public\n */\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9jb21wb25lbnQvcXJsLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMxRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHN0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFvQixFQUFFLEtBQWEsRUFBVSxFQUFFO0lBQ3RFLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDbkQsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxPQUFlLEVBQVUsRUFBRTtJQUNuRCxPQUFPLHlCQUF5QixHQUFHLE9BQU8sQ0FBQztBQUM3QyxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ3RELE9BQU8sNEJBQTRCLEdBQUcsT0FBTyxDQUFDO0FBQ2hELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQsIENvbXBvbmVudFN0eWxlc1ByZWZpeEhvc3QgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBzdHlsZUtleSA9IChxU3R5bGVzOiBRUkw8c3RyaW5nPiwgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgJHtoYXNoQ29kZShxU3R5bGVzLmdldEhhc2goKSl9LSR7aW5kZXh9YDtcbn07XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc3R5bGVIb3N0ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhIb3N0ICsgc3R5bGVJZDtcbn07XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3Qgc3R5bGVDb250ZW50ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ICsgc3R5bGVJZDtcbn07XG4iXX0=","import { assertDefined } from '../assert/assert';\nimport { copyRenderContext } from './cursor';\nimport { visitJsxNode } from './render';\nimport { ComponentScopedStyles, RenderEvent } from '../util/markers';\nimport { promiseAll, then } from '../util/promises';\nimport { styleContent, styleHost } from '../component/qrl-styles';\nimport { newInvokeContext } from '../use/use-core';\nimport { processData } from './jsx/jsx-runtime';\nimport { logDebug, logError } from '../util/log';\nimport { isFunction } from '../util/types';\nimport { directGetAttribute } from './fast-calls';\nexport const renderComponent = (rctx, ctx) => {\n    ctx.$dirty$ = false;\n    const hostElement = ctx.$element$;\n    const onRenderQRL = ctx.$renderQrl$;\n    assertDefined(onRenderQRL);\n    const props = ctx.$props$;\n    assertDefined(props);\n    // Component is not dirty any more\n    rctx.$containerState$.$hostsStaging$.delete(hostElement);\n    const newCtx = copyRenderContext(rctx);\n    // Invoke render hook\n    const invocatinContext = newInvokeContext(rctx.$doc$, hostElement, hostElement, RenderEvent);\n    invocatinContext.$subscriber$ = hostElement;\n    invocatinContext.$renderCtx$ = newCtx;\n    const waitOn = (invocatinContext.$waitOn$ = []);\n    // Clean current subscription before render\n    rctx.$containerState$.$subsManager$.$clearSub$(hostElement);\n    // Resolve render function\n    const onRenderFn = onRenderQRL.$invokeFn$(rctx.$containerEl$, invocatinContext);\n    try {\n        // Execution of the render function\n        const renderPromise = onRenderFn(props);\n        // Wait for results\n        return then(renderPromise, (jsxNode) => {\n            rctx.$hostElements$.add(hostElement);\n            const waitOnPromise = promiseAll(waitOn);\n            return then(waitOnPromise, () => {\n                if (isFunction(jsxNode)) {\n                    ctx.$dirty$ = false;\n                    jsxNode = jsxNode();\n                }\n                else if (ctx.$dirty$) {\n                    logDebug('Dropping render. State changed during render.');\n                    return renderComponent(rctx, ctx);\n                }\n                let componentCtx = ctx.$component$;\n                if (!componentCtx) {\n                    componentCtx = ctx.$component$ = {\n                        $hostElement$: hostElement,\n                        $slots$: [],\n                        $styleHostClass$: undefined,\n                        $styleClass$: undefined,\n                        $styleId$: undefined,\n                    };\n                    const scopedStyleId = directGetAttribute(hostElement, ComponentScopedStyles) ?? undefined;\n                    if (scopedStyleId) {\n                        componentCtx.$styleId$ = scopedStyleId;\n                        componentCtx.$styleHostClass$ = styleHost(scopedStyleId);\n                        componentCtx.$styleClass$ = styleContent(scopedStyleId);\n                        hostElement.classList.add(componentCtx.$styleHostClass$);\n                    }\n                }\n                componentCtx.$slots$ = [];\n                newCtx.$contexts$.push(ctx);\n                newCtx.$currentComponent$ = componentCtx;\n                const invocatinContext = newInvokeContext(rctx.$doc$, hostElement, hostElement);\n                invocatinContext.$subscriber$ = hostElement;\n                invocatinContext.$renderCtx$ = newCtx;\n                const processedJSXNode = processData(jsxNode, invocatinContext);\n                return then(processedJSXNode, (processedJSXNode) => {\n                    return visitJsxNode(newCtx, hostElement, processedJSXNode, false);\n                });\n            });\n        }, (err) => {\n            logError(err);\n        });\n    }\n    catch (err) {\n        logError(err);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { OnRenderProp, QHostAttr, QSlot } from '../util/markers';\nimport { cleanupContext, getContext, getPropsMutator, setEvent, tryGetContext, } from '../props/props';\nimport { isOnProp } from '../props/props-on';\nimport { isArray, isString } from '../util/types';\nimport { renderComponent } from './render-component';\nimport { promiseAll, then } from '../util/promises';\nimport { assertDefined, assertEqual } from '../assert/assert';\nimport { intToStr } from '../object/store';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { logDebug, logError, logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { codeToText, qError, QError_hostCanOnlyBeAtRoot, QError_setProperty, QError_stringifyClassOrStyle, } from '../error/error';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { CONTAINER, isStyleTask } from '../use/use-core';\nimport { getDocument } from '../util/dom';\nimport { directGetAttribute, directSetAttribute } from './fast-calls';\nimport { HOST_TYPE, SKIP_RENDER_TYPE } from './jsx/jsx-runtime';\nimport { assertQrl } from '../import/qrl-class';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const smartUpdateChildren = (ctx, elm, ch, mode, isSvg) => {\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        if (elm.firstChild !== null) {\n            return;\n        }\n        ch = ch[0].$children$;\n    }\n    const oldCh = getChildren(elm, mode);\n    if (qDev) {\n        if (elm.nodeType === 9) {\n            assertEqual(ch.length, 1);\n            assertEqual(ch[0].$type$, 'html');\n        }\n        else if (elm.nodeName === 'HTML') {\n            assertEqual(ch.length, 2);\n            assertEqual(ch[0].$type$, 'head');\n            assertEqual(ch[1].$type$, 'body');\n        }\n    }\n    if (oldCh.length > 0 && ch.length > 0) {\n        return updateChildren(ctx, elm, oldCh, ch, isSvg);\n    }\n    else if (ch.length > 0) {\n        return addVnodes(ctx, elm, null, ch, 0, ch.length - 1, isSvg);\n    }\n    else if (oldCh.length > 0) {\n        return removeVnodes(ctx, oldCh, 0, oldCh.length - 1);\n    }\n};\nexport const updateChildren = (ctx, parentElm, oldCh, newCh, isSvg) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newStartVnode)) {\n            results.push(patchVnode(ctx, oldStartVnode, newStartVnode, isSvg));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (sameVnode(oldEndVnode, newEndVnode)) {\n            results.push(patchVnode(ctx, oldEndVnode, newEndVnode, isSvg));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newEndVnode)) {\n            // Vnode moved right\n            results.push(patchVnode(ctx, oldStartVnode, newEndVnode, isSvg));\n            insertBefore(ctx, parentElm, oldStartVnode, oldEndVnode.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldEndVnode, newStartVnode)) {\n            // Vnode moved left\n            results.push(patchVnode(ctx, oldEndVnode, newStartVnode, isSvg));\n            insertBefore(ctx, parentElm, oldEndVnode, oldStartVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, isSvg);\n                results.push(then(newElm, (newElm) => {\n                    insertBefore(ctx, parentElm, newElm, oldStartVnode);\n                }));\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (!isTagName(elmToMove, newStartVnode.$type$)) {\n                    const newElm = createElm(ctx, newStartVnode, isSvg);\n                    results.push(then(newElm, (newElm) => {\n                        insertBefore(ctx, parentElm, newElm, oldStartVnode);\n                    }));\n                }\n                else {\n                    results.push(patchVnode(ctx, elmToMove, newStartVnode, isSvg));\n                    oldCh[idxInOld] = undefined;\n                    insertBefore(ctx, parentElm, elmToMove, oldStartVnode);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, isSvg));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        const canRemove = parentElm.nodeName !== 'HEAD';\n        if (canRemove) {\n            wait = then(wait, () => {\n                removeVnodes(ctx, oldCh, oldStartIdx, oldEndIdx);\n            });\n        }\n    }\n    return wait;\n};\nconst isComponentNode = (node) => {\n    return node.$props$ && OnRenderProp in node.$props$;\n};\nconst getCh = (elm, filter) => {\n    return Array.from(elm.childNodes).filter(filter);\n};\nexport const getChildren = (elm, mode) => {\n    switch (mode) {\n        case 'default':\n            return getCh(elm, isNode);\n        case 'slot':\n            return getCh(elm, isChildSlot);\n        case 'root':\n            return getCh(elm, isChildComponent);\n        case 'fallback':\n            return getCh(elm, isFallback);\n    }\n};\nexport const isNode = (elm) => {\n    const type = elm.nodeType;\n    return type === 1 || type === 3;\n};\nconst isFallback = (node) => {\n    return node.nodeName === 'Q:FALLBACK';\n};\nconst isChildSlot = (node) => {\n    return isNode(node) && node.nodeName !== 'Q:FALLBACK' && node.nodeName !== 'Q:TEMPLATE';\n};\nconst isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nconst isChildComponent = (node) => {\n    return isNode(node) && node.nodeName !== 'Q:TEMPLATE';\n};\nconst splitBy = (input, condition) => {\n    const output = {};\n    for (const item of input) {\n        const key = condition(item);\n        const array = output[key] ?? (output[key] = []);\n        array.push(item);\n    }\n    return output;\n};\nexport const patchVnode = (rctx, elm, vnode, isSvg) => {\n    vnode.$elm$ = elm;\n    const tag = vnode.$type$;\n    if (tag === '#text') {\n        if (elm.data !== vnode.$text$) {\n            setProperty(rctx, elm, 'data', vnode.$text$);\n        }\n        return;\n    }\n    if (tag === HOST_TYPE) {\n        throw qError(QError_hostCanOnlyBeAtRoot);\n    }\n    if (tag === SKIP_RENDER_TYPE) {\n        return;\n    }\n    if (!isSvg) {\n        isSvg = tag === 'svg';\n    }\n    const props = vnode.$props$;\n    const ctx = getContext(elm);\n    const isSlot = tag === QSlot;\n    let dirty = updateProperties(rctx, ctx, props, isSvg);\n    if (isSvg && vnode.$type$ === 'foreignObject') {\n        isSvg = false;\n    }\n    else if (isSlot) {\n        const currentComponent = rctx.$currentComponent$;\n        if (currentComponent) {\n            currentComponent.$slots$.push(vnode);\n        }\n    }\n    const isComponent = isComponentNode(vnode);\n    const ch = vnode.$children$;\n    if (isComponent) {\n        if (!dirty && !ctx.$renderQrl$ && !ctx.$element$.hasAttribute(QHostAttr)) {\n            setAttribute(rctx, ctx.$element$, QHostAttr, '');\n            ctx.$renderQrl$ = props[OnRenderProp];\n            assertQrl(ctx.$renderQrl$);\n            dirty = true;\n        }\n        const promise = dirty ? renderComponent(rctx, ctx) : undefined;\n        return then(promise, () => {\n            const slotMaps = getSlots(ctx.$component$, elm);\n            const splittedChidren = splitBy(ch, getSlotName);\n            const promises = [];\n            const slotRctx = copyRenderContext(rctx);\n            slotRctx.$contexts$.push(ctx);\n            // Mark empty slots and remove content\n            Object.entries(slotMaps.slots).forEach(([key, slotEl]) => {\n                if (slotEl && !splittedChidren[key]) {\n                    const oldCh = getChildren(slotEl, 'slot');\n                    if (oldCh.length > 0) {\n                        removeVnodes(slotRctx, oldCh, 0, oldCh.length - 1);\n                    }\n                }\n            });\n            // Mark empty slots and remove content\n            Object.entries(slotMaps.templates).forEach(([key, templateEl]) => {\n                if (templateEl && !splittedChidren[key]) {\n                    removeNode(slotRctx, templateEl);\n                    slotMaps.templates[key] = undefined;\n                }\n            });\n            // Render into slots\n            Object.entries(splittedChidren).forEach(([key, ch]) => {\n                const slotElm = getSlotElement(slotRctx, slotMaps, elm, key);\n                promises.push(smartUpdateChildren(slotRctx, slotElm, ch, 'slot', isSvg));\n            });\n            return then(promiseAll(promises), () => {\n                removeTemplates(slotRctx, slotMaps);\n            });\n        });\n    }\n    const setsInnerHTML = checkInnerHTML(props);\n    if (setsInnerHTML) {\n        if (qDev && ch.length > 0) {\n            logWarn('Node can not have children when innerHTML is set');\n        }\n        return;\n    }\n    const mode = isSlot ? 'fallback' : 'default';\n    return smartUpdateChildren(rctx, elm, ch, mode, isSvg);\n};\nconst addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, isSvg) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch);\n        promises.push(createElm(ctx, ch, isSvg));\n    }\n    return then(promiseAll(promises), (children) => {\n        for (const child of children) {\n            insertBefore(ctx, parentElm, child, before);\n        }\n    });\n};\nconst removeVnodes = (ctx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            removeNode(ctx, ch);\n        }\n    }\n};\nlet refCount = 0;\nconst RefSymbol = Symbol();\nconst setSlotRef = (ctx, hostElm, slotEl) => {\n    let ref = hostElm[RefSymbol] ?? directGetAttribute(hostElm, 'q:sref');\n    if (ref === null) {\n        ref = intToStr(refCount++);\n        hostElm[RefSymbol] = ref;\n        setAttribute(ctx, hostElm, 'q:sref', ref);\n    }\n    directSetAttribute(slotEl, 'q:sref', ref);\n};\nconst getSlotElement = (ctx, slotMaps, parentEl, slotName) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return slotEl;\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return templateEl;\n    }\n    const template = createTemplate(ctx, slotName);\n    prepend(ctx, parentEl, template);\n    slotMaps.templates[slotName] = template;\n    return template;\n};\nconst createTemplate = (ctx, slotName) => {\n    const template = createElement(ctx, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nconst removeTemplates = (ctx, slotMaps) => {\n    Object.keys(slotMaps.templates).forEach((key) => {\n        const template = slotMaps.templates[key];\n        if (template && slotMaps.slots[key] !== undefined) {\n            removeNode(ctx, template);\n            slotMaps.templates[key] = undefined;\n        }\n    });\n};\nexport const resolveSlotProjection = (ctx, hostElm, before, after) => {\n    Object.entries(before.slots).forEach(([key, slotEl]) => {\n        if (slotEl && !after.slots[key]) {\n            // Slot removed\n            // Move slot to template\n            const template = createTemplate(ctx, key);\n            const slotChildren = getChildren(slotEl, 'slot');\n            template.append(...slotChildren);\n            hostElm.insertBefore(template, hostElm.firstChild);\n            ctx.$operations$.push({\n                $el$: template,\n                $operation$: 'slot-to-template',\n                $args$: slotChildren,\n                $fn$: () => { },\n            });\n        }\n    });\n    Object.entries(after.slots).forEach(([key, slotEl]) => {\n        if (slotEl && !before.slots[key]) {\n            // Slot created\n            // Move template to slot\n            const template = before.templates[key];\n            if (template) {\n                slotEl.append(...getChildren(template, 'default'));\n                template.remove();\n                ctx.$operations$.push({\n                    $el$: slotEl,\n                    $operation$: 'template-to-slot',\n                    $args$: [template],\n                    $fn$: () => { },\n                });\n            }\n        }\n    });\n};\nconst getSlotName = (node) => {\n    return node.$props$?.[QSlot] ?? '';\n};\nconst createElm = (rctx, vnode, isSvg) => {\n    rctx.$perf$.$visited$++;\n    const tag = vnode.$type$;\n    if (tag === '#text') {\n        return (vnode.$elm$ = createTextNode(rctx, vnode.$text$));\n    }\n    if (tag === HOST_TYPE) {\n        throw qError(QError_hostCanOnlyBeAtRoot);\n    }\n    if (!isSvg) {\n        isSvg = tag === 'svg';\n    }\n    const props = vnode.$props$;\n    const elm = (vnode.$elm$ = createElement(rctx, tag, isSvg));\n    const isComponent = isComponentNode(vnode);\n    const ctx = getContext(elm);\n    setKey(elm, vnode.$key$);\n    updateProperties(rctx, ctx, props, isSvg);\n    if (isSvg && tag === 'foreignObject') {\n        isSvg = false;\n    }\n    const currentComponent = rctx.$currentComponent$;\n    if (currentComponent) {\n        const styleTag = currentComponent.$styleClass$;\n        if (styleTag) {\n            classlistAdd(rctx, elm, styleTag);\n        }\n        if (tag === QSlot || tag === 'html') {\n            setSlotRef(rctx, currentComponent.$hostElement$, elm);\n            currentComponent.$slots$.push(vnode);\n        }\n    }\n    let wait;\n    if (isComponent) {\n        // Run mount hook\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        ctx.$renderQrl$ = renderQRL;\n        directSetAttribute(ctx.$element$, QHostAttr, '');\n        wait = renderComponent(rctx, ctx);\n    }\n    else {\n        const setsInnerHTML = checkInnerHTML(props);\n        if (setsInnerHTML) {\n            if (qDev && vnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return elm;\n        }\n    }\n    return then(wait, () => {\n        let children = vnode.$children$;\n        if (children.length > 0) {\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotRctx = copyRenderContext(rctx);\n            slotRctx.$contexts$.push(ctx);\n            const slotMap = isComponent ? getSlots(ctx.$component$, elm) : undefined;\n            const promises = children.map((ch) => createElm(slotRctx, ch, isSvg));\n            return then(promiseAll(promises), () => {\n                let parent = elm;\n                for (const node of children) {\n                    if (slotMap) {\n                        parent = getSlotElement(slotRctx, slotMap, elm, getSlotName(node));\n                    }\n                    parent.appendChild(node.$elm$);\n                }\n                return elm;\n            });\n        }\n        return elm;\n    });\n};\nconst getSlots = (componentCtx, hostElm) => {\n    if (hostElm.localName === 'html') {\n        return { slots: { '': hostElm }, templates: {} };\n    }\n    const slots = {};\n    const templates = {};\n    const slotRef = directGetAttribute(hostElm, 'q:sref');\n    const existingSlots = Array.from(hostElm.querySelectorAll(`q\\\\:slot[q\\\\:sref=\"${slotRef}\"]`));\n    const newSlots = componentCtx?.$slots$ ?? EMPTY_ARRAY;\n    const t = Array.from(hostElm.children).filter(isSlotTemplate);\n    // Map slots\n    for (const elm of existingSlots) {\n        slots[directGetAttribute(elm, 'name') ?? ''] = elm;\n    }\n    // Map virtual slots\n    for (const vnode of newSlots) {\n        slots[vnode.$props$?.name ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst handleStyle = (ctx, elm, _, newValue) => {\n    setAttribute(ctx, elm, 'style', stringifyClassOrStyle(newValue, false));\n    return true;\n};\nconst handleClass = (ctx, elm, _, newValue) => {\n    setAttribute(ctx, elm, 'class', stringifyClassOrStyle(newValue, true));\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, prop, newValue) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            setProperty(ctx, elm, prop, newValue);\n        }\n    }\n    return true;\n};\nconst dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\nconst setInnerHTML = (ctx, elm, _, newValue) => {\n    if (dangerouslySetInnerHTML in elm) {\n        setProperty(ctx, elm, dangerouslySetInnerHTML, newValue);\n    }\n    else if ('innerHTML' in elm) {\n        setProperty(ctx, elm, 'innerHTML', newValue);\n    }\n    return true;\n};\nconst PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    className: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n};\nconst ALLOWS_PROPS = ['class', 'className', 'style', 'id', QSlot];\nconst HOST_PREFIX = 'host:';\nconst SCOPE_PREFIX = /^(host|window|document|prevent(d|D)efault):/;\nexport const updateProperties = (rctx, ctx, expectProps, isSvg) => {\n    if (!expectProps) {\n        return false;\n    }\n    const elm = ctx.$element$;\n    const isCmp = OnRenderProp in expectProps;\n    const qwikProps = isCmp ? getPropsMutator(ctx, rctx.$containerState$) : undefined;\n    for (let key of Object.keys(expectProps)) {\n        if (key === 'children' || key === OnRenderProp) {\n            continue;\n        }\n        const newValue = expectProps[key];\n        if (key === 'ref') {\n            newValue.current = elm;\n            continue;\n        }\n        // Early exit if value didnt change\n        const oldValue = ctx.$cache$.get(key);\n        if (newValue === oldValue) {\n            continue;\n        }\n        ctx.$cache$.set(key, newValue);\n        // Check of data- or aria-\n        if (key.startsWith('data-') || key.startsWith('aria-')) {\n            setAttribute(rctx, elm, key, newValue);\n            continue;\n        }\n        if (qwikProps) {\n            const skipProperty = ALLOWS_PROPS.includes(key);\n            const hasPrefix = SCOPE_PREFIX.test(key);\n            if (!skipProperty && !hasPrefix) {\n                // Qwik props\n                qwikProps.set(key, newValue);\n                continue;\n            }\n            const hPrefixed = key.startsWith(HOST_PREFIX);\n            if (hPrefixed) {\n                key = key.slice(HOST_PREFIX.length);\n            }\n        }\n        else if (qDev && key.startsWith(HOST_PREFIX)) {\n            logWarn(`${HOST_PREFIX} prefix can not be used in non components`);\n            continue;\n        }\n        if (isOnProp(key)) {\n            setEvent(rctx, ctx, key, newValue);\n            continue;\n        }\n        // Check if its an exception\n        const exception = PROP_HANDLER_MAP[key];\n        if (exception) {\n            if (exception(rctx, elm, key, newValue, oldValue)) {\n                continue;\n            }\n        }\n        // Check if property in prototype\n        if (!isSvg && key in elm) {\n            setProperty(rctx, elm, key, newValue);\n            continue;\n        }\n        // Fallback to render attribute\n        setAttribute(rctx, elm, key, newValue);\n    }\n    return ctx.$dirty$;\n};\nexport const createRenderContext = (doc, containerState, containerEl) => {\n    const ctx = {\n        $doc$: doc,\n        $containerState$: containerState,\n        $containerEl$: containerEl,\n        $hostElements$: new Set(),\n        $operations$: [],\n        $roots$: [],\n        $contexts$: [],\n        $currentComponent$: undefined,\n        $perf$: {\n            $visited$: 0,\n        },\n    };\n    return ctx;\n};\nexport const copyRenderContext = (ctx) => {\n    const newCtx = {\n        ...ctx,\n        $contexts$: [...ctx.$contexts$],\n    };\n    return newCtx;\n};\nexport const setAttribute = (ctx, el, prop, value) => {\n    const fn = () => {\n        if (value == null || value === false) {\n            el.removeAttribute(prop);\n        }\n        else {\n            const str = value === true ? '' : String(value);\n            directSetAttribute(el, prop, str);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'set-attribute',\n        $args$: [prop, value],\n        $fn$: fn,\n    });\n};\nexport const classlistAdd = (ctx, el, hostStyleTag) => {\n    const fn = () => {\n        el.classList.add(hostStyleTag);\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'classlist-add',\n        $args$: [hostStyleTag],\n        $fn$: fn,\n    });\n};\nconst setProperty = (ctx, node, key, value) => {\n    const fn = () => {\n        try {\n            node[key] = value;\n        }\n        catch (err) {\n            logError(codeToText(QError_setProperty), { node, key, value }, err);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: node,\n        $operation$: 'set-property',\n        $args$: [key, value],\n        $fn$: fn,\n    });\n};\nconst createElement = (ctx, expectTag, isSvg) => {\n    const el = isSvg\n        ? ctx.$doc$.createElementNS(SVG_NS, expectTag)\n        : ctx.$doc$.createElement(expectTag);\n    el[CONTAINER] = ctx.$containerEl$;\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'create-element',\n        $args$: [expectTag],\n        $fn$: () => { },\n    });\n    return el;\n};\nconst insertBefore = (ctx, parent, newChild, refChild) => {\n    const fn = () => {\n        parent.insertBefore(newChild, refChild ? refChild : null);\n    };\n    ctx.$operations$.push({\n        $el$: parent,\n        $operation$: 'insert-before',\n        $args$: [newChild, refChild],\n        $fn$: fn,\n    });\n    return newChild;\n};\nexport const appendStyle = (ctx, hostElement, styleTask) => {\n    const fn = () => {\n        const containerEl = ctx.$containerEl$;\n        const stylesParent = ctx.$doc$.documentElement === containerEl ? ctx.$doc$.head ?? containerEl : containerEl;\n        const style = ctx.$doc$.createElement('style');\n        directSetAttribute(style, 'q:style', styleTask.styleId);\n        style.textContent = styleTask.content;\n        stylesParent.insertBefore(style, stylesParent.firstChild);\n    };\n    ctx.$operations$.push({\n        $el$: hostElement,\n        $operation$: 'append-style',\n        $args$: [styleTask],\n        $fn$: fn,\n    });\n};\nexport const hasStyle = (ctx, styleId) => {\n    const containerEl = ctx.$containerEl$;\n    const doc = getDocument(containerEl);\n    const hasOperation = ctx.$operations$.some((op) => {\n        if (op.$operation$ === 'append-style') {\n            const s = op.$args$[0];\n            if (isStyleTask(s)) {\n                return s.styleId === styleId;\n            }\n        }\n        return false;\n    });\n    if (hasOperation) {\n        return true;\n    }\n    const stylesParent = doc.documentElement === containerEl ? doc.head ?? containerEl : containerEl;\n    return !!stylesParent.querySelector(`style[q\\\\:style=\"${styleId}\"]`);\n};\nconst prepend = (ctx, parent, newChild) => {\n    const fn = () => {\n        parent.insertBefore(newChild, parent.firstChild);\n    };\n    ctx.$operations$.push({\n        $el$: parent,\n        $operation$: 'prepend',\n        $args$: [newChild],\n        $fn$: fn,\n    });\n};\nconst removeNode = (ctx, el) => {\n    const fn = () => {\n        const parent = el.parentNode;\n        if (parent) {\n            if (el.nodeType === 1) {\n                cleanupTree(el, ctx.$containerState$.$subsManager$);\n            }\n            parent.removeChild(el);\n        }\n        else if (qDev) {\n            logWarn('Trying to remove component already removed', el);\n        }\n    };\n    ctx.$operations$.push({\n        $el$: el,\n        $operation$: 'remove',\n        $args$: [],\n        $fn$: fn,\n    });\n};\nexport const cleanupTree = (parent, subsManager) => {\n    if (parent.nodeName === 'Q:SLOT') {\n        return;\n    }\n    if (parent.hasAttribute(QHostAttr)) {\n        cleanupElement(parent, subsManager);\n    }\n    let child = parent.firstElementChild;\n    while (child) {\n        cleanupTree(child, subsManager);\n        child = child.nextElementSibling;\n    }\n};\nconst cleanupElement = (el, subsManager) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        cleanupContext(ctx, subsManager);\n    }\n};\nconst createTextNode = (ctx, text) => {\n    return ctx.$doc$.createTextNode(text);\n};\nexport const executeContextWithSlots = (ctx) => {\n    const before = ctx.$roots$.map((elm) => getSlots(undefined, elm));\n    executeContext(ctx);\n    const after = ctx.$roots$.map((elm) => getSlots(undefined, elm));\n    assertEqual(before.length, after.length);\n    for (let i = 0; i < before.length; i++) {\n        resolveSlotProjection(ctx, ctx.$roots$[i], before[i], after[i]);\n    }\n};\nexport const executeContext = (ctx) => {\n    for (const op of ctx.$operations$) {\n        op.$fn$();\n    }\n};\nexport const printRenderStats = (ctx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of ctx.$operations$) {\n                byOp[op.$operation$] = (byOp[op.$operation$] ?? 0) + 1;\n            }\n            const affectedElements = Array.from(new Set(ctx.$operations$.map((a) => a.$el$)));\n            const stats = {\n                byOp,\n                roots: ctx.$roots$,\n                hostElements: Array.from(ctx.$hostElements$),\n                affectedElements,\n                visitedNodes: ctx.$perf$.$visited$,\n                operations: ctx.$operations$.map((v) => [v.$operation$, v.$el$, ...v.$args$]),\n            };\n            const noOps = ctx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        if (child.nodeType === 1) {\n            const key = getKey(child);\n            if (key != null) {\n                map[key] = i;\n            }\n        }\n    }\n    return map;\n};\nconst KEY_SYMBOL = Symbol('vnode key');\nconst getKey = (el) => {\n    let key = el[KEY_SYMBOL];\n    if (key === undefined) {\n        key = el[KEY_SYMBOL] = directGetAttribute(el, 'q:key');\n    }\n    return key;\n};\nconst setKey = (el, key) => {\n    if (isString(key)) {\n        directSetAttribute(el, 'q:key', key);\n    }\n    el[KEY_SYMBOL] = key;\n};\nconst sameVnode = (elm, vnode2) => {\n    const isElement = elm.nodeType === 1;\n    const type = vnode2.$type$;\n    if (isElement) {\n        const isSameSel = elm.localName === type;\n        if (!isSameSel) {\n            return false;\n        }\n        return getKey(elm) === vnode2.$key$;\n    }\n    return elm.nodeName === type;\n};\nconst isTagName = (elm, tagName) => {\n    if (elm.nodeType === 1) {\n        return elm.localName === tagName;\n    }\n    return elm.nodeName === tagName;\n};\nconst checkInnerHTML = (props) => {\n    return props && ('innerHTML' in props || dangerouslySetInnerHTML in props);\n};\nexport const stringifyClassOrStyle = (obj, isClass) => {\n    if (obj == null)\n        return '';\n    if (typeof obj == 'object') {\n        let text = '';\n        let sep = '';\n        if (isArray(obj)) {\n            if (!isClass) {\n                throw qError(QError_stringifyClassOrStyle, obj, 'style');\n            }\n            for (let i = 0; i < obj.length; i++) {\n                text += sep + obj[i];\n                sep = ' ';\n            }\n        }\n        else {\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        text += isClass\n                            ? value\n                                ? sep + key\n                                : ''\n                            : sep + fromCamelToKebabCase(key) + ':' + value;\n                        sep = isClass ? ' ' : ';';\n                    }\n                }\n            }\n        }\n        return text;\n    }\n    return String(obj);\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertEqual } from '../assert/assert';\nimport { parseQRL } from '../import/qrl';\nimport { getContext, resumeIfNeeded } from '../props/props';\nimport { getContainer, getInvokeContext } from './use-core';\nimport { assertQrl } from '../import/qrl-class';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @public\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    const hostElement = context.$hostElement$;\n    const qrl = context.$qrl$ ?? parseQRL(decodeURIComponent(String(context.$url$)), hostElement);\n    assertQrl(qrl);\n    if (qrl.$captureRef$ == null) {\n        const el = context.$element$;\n        assertDefined(el);\n        assertDefined(qrl.$capture$);\n        resumeIfNeeded(getContainer(el));\n        const ctx = getContext(el);\n        qrl.$captureRef$ = qrl.$capture$.map((idx) => qInflate(idx, ctx));\n    }\n    const subscriber = context.$subscriber$;\n    if (subscriber) {\n        return qrl.$captureRef$;\n    }\n    return qrl.$captureRef$;\n};\nconst qInflate = (ref, hostCtx) => {\n    const int = parseInt(ref, 10);\n    const obj = hostCtx.$refMap$.$get$(int);\n    assertEqual(hostCtx.$refMap$.$array$.length > int, true);\n    return obj;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxVQUFVLEVBQVksY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFaEQsaURBQWlEO0FBQ2pELHlDQUF5QztBQUN6Qyw4Q0FBOEM7QUFDOUM7Ozs7Ozs7OztHQVNHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxHQUE2QixFQUFFO0lBQzVELE1BQU0sT0FBTyxHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFDbkMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUMxQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxJQUFJLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDOUYsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRWYsSUFBSSxHQUFHLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtRQUM1QixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBVSxDQUFDO1FBQzlCLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQixhQUFhLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFFLENBQUMsQ0FBQztRQUNsQyxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFM0IsR0FBRyxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUMsU0FBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3BFO0lBQ0QsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUN4QyxJQUFJLFVBQVUsRUFBRTtRQUNkLE9BQU8sR0FBRyxDQUFDLFlBQW9CLENBQUM7S0FDakM7SUFDRCxPQUFPLEdBQUcsQ0FBQyxZQUFvQixDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBVyxFQUFFLE9BQWlCLEVBQUUsRUFBRTtJQUNsRCxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0RXF1YWwgfSBmcm9tICcuLi9hc3NlcnQvYXNzZXJ0JztcbmltcG9ydCB7IHBhcnNlUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybCc7XG5pbXBvcnQgeyBnZXRDb250ZXh0LCBRQ29udGV4dCwgcmVzdW1lSWZOZWVkZWQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBnZXRDb250YWluZXIsIGdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlIGluc3RlYWQpXG4vKipcbiAqIFVzZWQgYnkgdGhlIFF3aWsgT3B0aW1pemVyIHRvIHJlc3RvcmUgdGhlIGxleGljYWxseSBzY29wZWQgdmFyaWFibGVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgcHJlc2VudCBpbiB0aGUgYXBwbGljYXRpb24gc291cmNlIGNvZGUuXG4gKlxuICogTk9URTogYHVzZUxleGljYWxTY29wZWAgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIHN5bmNocm9ub3VzIHBvcnRpb24gb2YgdGhlIGNhbGxiYWNrXG4gKiAoYmVmb3JlIGFueSBgYXdhaXRgIHN0YXRlbWVudHMuKVxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZUxleGljYWxTY29wZSA9IDxWQVJTIGV4dGVuZHMgYW55W10+KCk6IFZBUlMgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gZ2V0SW52b2tlQ29udGV4dCgpO1xuICBjb25zdCBob3N0RWxlbWVudCA9IGNvbnRleHQuJGhvc3RFbGVtZW50JDtcbiAgY29uc3QgcXJsID0gY29udGV4dC4kcXJsJCA/PyBwYXJzZVFSTChkZWNvZGVVUklDb21wb25lbnQoU3RyaW5nKGNvbnRleHQuJHVybCQpKSwgaG9zdEVsZW1lbnQpO1xuICBhc3NlcnRRcmwocXJsKTtcblxuICBpZiAocXJsLiRjYXB0dXJlUmVmJCA9PSBudWxsKSB7XG4gICAgY29uc3QgZWwgPSBjb250ZXh0LiRlbGVtZW50JCE7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCk7XG4gICAgYXNzZXJ0RGVmaW5lZChxcmwuJGNhcHR1cmUkKTtcbiAgICByZXN1bWVJZk5lZWRlZChnZXRDb250YWluZXIoZWwpISk7XG4gICAgY29uc3QgY3R4ID0gZ2V0Q29udGV4dChlbCk7XG5cbiAgICBxcmwuJGNhcHR1cmVSZWYkID0gcXJsLiRjYXB0dXJlJCEubWFwKChpZHgpID0+IHFJbmZsYXRlKGlkeCwgY3R4KSk7XG4gIH1cbiAgY29uc3Qgc3Vic2NyaWJlciA9IGNvbnRleHQuJHN1YnNjcmliZXIkO1xuICBpZiAoc3Vic2NyaWJlcikge1xuICAgIHJldHVybiBxcmwuJGNhcHR1cmVSZWYkIGFzIFZBUlM7XG4gIH1cbiAgcmV0dXJuIHFybC4kY2FwdHVyZVJlZiQgYXMgVkFSUztcbn07XG5cbmNvbnN0IHFJbmZsYXRlID0gKHJlZjogc3RyaW5nLCBob3N0Q3R4OiBRQ29udGV4dCkgPT4ge1xuICBjb25zdCBpbnQgPSBwYXJzZUludChyZWYsIDEwKTtcbiAgY29uc3Qgb2JqID0gaG9zdEN0eC4kcmVmTWFwJC4kZ2V0JChpbnQpO1xuICBhc3NlcnRFcXVhbChob3N0Q3R4LiRyZWZNYXAkLiRhcnJheSQubGVuZ3RoID4gaW50LCB0cnVlKTtcbiAgcmV0dXJuIG9iajtcbn07XG4iXX0=","import { assertDefined } from '../assert/assert';\nimport { QContainerAttr, QHostAttr } from '../util/markers';\nimport { createRenderContext, executeContextWithSlots, printRenderStats, } from './cursor';\nimport { getContext, resumeIfNeeded } from '../props/props';\nimport { qDev, qTest } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { getDocument } from '../util/dom';\nimport { renderComponent } from './render-component';\nimport { logError, logWarn } from '../util/log';\nimport { getContainer } from '../use/use-core';\nimport { runWatch, WatchFlagsIsDirty, WatchFlagsIsEffect, WatchFlagsIsWatch, } from '../use/use-watch';\nimport { createSubscriptionManager } from '../object/q-object';\nimport { then } from '../util/promises';\nimport { codeToText, QError_errorWhileRendering } from '../error/error';\nimport { directGetAttribute } from './fast-calls';\nimport { useLexicalScope } from '../use/use-lexical-scope.public';\nimport { isElement } from '../util/element';\nconst CONTAINER_STATE = Symbol('ContainerState');\nexport const getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        containerEl[CONTAINER_STATE] = set = {\n            $proxyMap$: new WeakMap(),\n            $subsManager$: createSubscriptionManager(),\n            $platform$: getPlatform(containerEl),\n            $watchNext$: new Set(),\n            $watchStaging$: new Set(),\n            $hostsNext$: new Set(),\n            $hostsStaging$: new Set(),\n            $renderPromise$: undefined,\n            $hostsRendering$: undefined,\n        };\n    }\n    return set;\n};\nexport const notifyChange = (subscriber) => {\n    if (isElement(subscriber)) {\n        notifyRender(subscriber);\n    }\n    else {\n        notifyWatch(subscriber);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time.\n * This method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The\n * default implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n * @public\n */\nconst notifyRender = async (hostElement) => {\n    assertDefined(directGetAttribute(hostElement, QHostAttr));\n    const containerEl = getContainer(hostElement);\n    assertDefined(containerEl);\n    const state = getContainerState(containerEl);\n    if (qDev &&\n        !qTest &&\n        state.$platform$.isServer &&\n        directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        logWarn('Can not rerender in server platform');\n        return undefined;\n    }\n    resumeIfNeeded(containerEl);\n    const ctx = getContext(hostElement);\n    assertDefined(ctx.$renderQrl$);\n    if (ctx.$dirty$) {\n        return state.$renderPromise$;\n    }\n    ctx.$dirty$ = true;\n    const activeRendering = state.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        state.$hostsStaging$.add(hostElement);\n        return state.$renderPromise$.then((ctx) => {\n            if (state.$hostsNext$.has(hostElement)) {\n                // TODO\n                return state.$renderPromise$;\n            }\n            else {\n                return ctx;\n            }\n        });\n    }\n    else {\n        state.$hostsNext$.add(hostElement);\n        return scheduleFrame(containerEl, state);\n    }\n};\nconst notifyWatch = (watch) => {\n    const containerEl = getContainer(watch.el);\n    const state = getContainerState(containerEl);\n    watch.f |= WatchFlagsIsDirty;\n    const activeRendering = state.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        state.$watchStaging$.add(watch);\n    }\n    else {\n        state.$watchNext$.add(watch);\n        scheduleFrame(containerEl, state);\n    }\n};\nconst scheduleFrame = (containerEl, containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = containerState.$platform$.nextTick(() => renderMarked(containerEl, containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useWatch$()` API. This method\n * is not intended to be used by developers.\n * @alpha\n */\nexport const handleWatch = () => {\n    const [watch] = useLexicalScope();\n    notifyWatch(watch);\n};\nconst renderMarked = async (containerEl, containerState) => {\n    const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n    containerState.$hostsNext$.clear();\n    await executeWatches(containerState, (watch) => {\n        return (watch.f & WatchFlagsIsWatch) !== 0;\n    });\n    containerState.$hostsStaging$.forEach((host) => {\n        hostsRendering.add(host);\n    });\n    containerState.$hostsStaging$.clear();\n    const doc = getDocument(containerEl);\n    const platform = containerState.$platform$;\n    const renderingQueue = Array.from(hostsRendering);\n    sortNodes(renderingQueue);\n    const ctx = createRenderContext(doc, containerState, containerEl);\n    for (const el of renderingQueue) {\n        if (!ctx.$hostElements$.has(el)) {\n            ctx.$roots$.push(el);\n            try {\n                await renderComponent(ctx, getContext(el));\n            }\n            catch (e) {\n                logError(codeToText(QError_errorWhileRendering), e);\n            }\n        }\n    }\n    // Early exist, no dom operations\n    if (ctx.$operations$.length === 0) {\n        printRenderStats(ctx);\n        postRendering(containerEl, containerState, ctx);\n        return ctx;\n    }\n    return platform.raf(() => {\n        executeContextWithSlots(ctx);\n        printRenderStats(ctx);\n        postRendering(containerEl, containerState, ctx);\n        return ctx;\n    });\n};\nconst postRendering = async (containerEl, containerState, ctx) => {\n    await executeWatches(containerState, (watch, stage) => {\n        if ((watch.f & WatchFlagsIsEffect) === 0) {\n            return false;\n        }\n        if (stage) {\n            return ctx.$hostElements$.has(watch.el);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    if (containerState.$hostsNext$.size + containerState.$watchNext$.size > 0) {\n        scheduleFrame(containerEl, containerState);\n    }\n};\nconst executeWatches = async (containerState, watchPred) => {\n    const watchPromises = [];\n    containerState.$watchNext$.forEach((watch) => {\n        if (watchPred(watch, false)) {\n            watchPromises.push(then(watch.qrl.$resolveLazy$(watch.el), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (watchPred(watch, true)) {\n                watchPromises.push(then(watch.qrl.$resolveLazy$(watch.el), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runWatch(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => (a.compareDocumentPosition(b) & 2 ? 1 : -1));\n};\nconst sortWatches = (watches) => {\n    watches.sort((a, b) => {\n        if (a.el === b.el) {\n            return a.i < b.i ? -1 : 1;\n        }\n        return (a.el.compareDocumentPosition(b.el) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which\n * ends in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `onRender($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - a function that should have its first argument automatically `$`.\n * @alpha\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUU5QyxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaFxuICogZW5kcyBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGVzZSBmdW5jdGlvbiBjYWxscyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAtIGBjb21wb25lbnQkKCgpID0+IHsuLi59KWAgaXMgc2FtZSBhcyBgb25SZW5kZXIoJCgoKSA9PiB7Li4ufSkpYFxuICpcbiAqIGBgYHRzeFxuICogZXhwb3J0IGZ1bmN0aW9uIG15QXBpKGNhbGxiYWNrOiBRUkw8KCkgPT4gdm9pZD4pOiB2b2lkIHtcbiAqICAgLy8gLi4uXG4gKiB9XG4gKlxuICogZXhwb3J0IGNvbnN0IG15QXBpJCA9IGltcGxpY2l0JEZpcnN0QXJnKG15QXBpKTtcbiAqIC8vIHR5cGUgb2YgbXlBcGkkOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkXG4gKlxuICogLy8gY2FuIGJlIHVzZWQgYXM6XG4gKiBteUFwaSQoKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIHdpbGwgYmUgdHJhbnNwaWxlZCB0bzpcbiAqIC8vIEZJTEU6IDxjdXJyZW50IGZpbGU+XG4gKiBteUFwaShxcmwoJy4vY2h1bmstYWJjLmpzJywgJ2NhbGxiYWNrJykpO1xuICpcbiAqIC8vIEZJTEU6IGNodW5rLWFiYy5qc1xuICogZXhwb3J0IGNvbnN0IGNhbGxiYWNrID0gKCkgPT4gY29uc29sZS5sb2coJ2NhbGxiYWNrJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZm4gLSBhIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGhhdmUgaXRzIGZpcnN0IGFyZ3VtZW50IGF1dG9tYXRpY2FsbHkgYCRgLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCRGaXJzdEFyZyA9IDxGSVJTVCwgUkVTVCBleHRlbmRzIGFueVtdLCBSRVQ+KFxuICBmbjogKGZpcnN0OiBRUkw8RklSU1Q+LCAuLi5yZXN0OiBSRVNUKSA9PiBSRVRcbik6ICgoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKSA9PiBSRVQpID0+IHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChmaXJzdDogRklSU1QsIC4uLnJlc3Q6IFJFU1QpOiBSRVQge1xuICAgIHJldHVybiBmbi5jYWxsKG51bGwsICQoZmlyc3QpLCAuLi5yZXN0KTtcbiAgfTtcbn07XG4iXX0=","import { assertQrl } from '../import/qrl-class';\nimport { getContext } from '../props/props';\nimport { qPropWriteQRL } from '../props/props-on';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-store.public';\nimport { WatchFlagsIsCleanup } from './use-watch';\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * It can be used to release resources, abort network requests, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resouces, abort network requets, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanupQrl = (unmountFn) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (!get) {\n        assertQrl(unmountFn);\n        const el = ctx.$hostElement$;\n        const watch = {\n            qrl: unmountFn,\n            el,\n            f: WatchFlagsIsCleanup,\n            i,\n        };\n        set(true);\n        getContext(el).$watches$.push(watch);\n    }\n};\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * A lazy-loadable reference to a component's cleanup hook.\n *\n * Invoked when the component is destroyed (removed from render tree), or paused as part of the\n * SSR serialization.\n *\n * It can be used to release resources, abort network requests, stop timers...\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useCleanup$(() => {\n *     // Executed after SSR (pause) or when the component gets removed from the DOM.\n *     // Can be used to release resouces, abort network requets, stop timers...\n *     console.log('component is destroyed');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useCleanup$ = /*#__PURE__*/ implicit$FirstArg(useCleanupQrl);\n// <docs markdown=\"../readme.md#useResume\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResume instead)\n/**\n * A lazy-loadable reference to a component's on resume hook.\n *\n * The hook is eagerly invoked when the application resumes on the client. Because it is called\n * eagerly, this allows the component to resume even if no user interaction has taken place.\n *\n * Only called in the client.\n * Only called once.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useResume$(() => {\n *     // Eagerly invoked when the application resumes on the client\n *     console.log('called once in client');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @see `useVisible`, `useClientEffect`\n *\n * @alpha\n */\n// </docs>\nexport const useResumeQrl = (resumeFn, options = {}) => useOn(options.run == 'load' ? 'qinit' : 'qvisible', resumeFn);\n// <docs markdown=\"../readme.md#useResume\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResume instead)\n/**\n * A lazy-loadable reference to a component's on resume hook.\n *\n * The hook is eagerly invoked when the application resumes on the client. Because it is called\n * eagerly, this allows the component to resume even if no user interaction has taken place.\n *\n * Only called in the client.\n * Only called once.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   useResume$(() => {\n *     // Eagerly invoked when the application resumes on the client\n *     console.log('called once in client');\n *   });\n *   return <div>Hello world</div>;\n * });\n * ```\n *\n * @see `useVisible`, `useClientEffect`\n *\n * @alpha\n */\n// </docs>\nexport const useResume$ = /*#__PURE__*/ implicit$FirstArg(useResumeQrl);\n// <docs markdown=\"../readme.md#useVisible\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisible instead)\n/**\n * A lazy-loadable reference to a component's on the visible hook.\n *\n * The hook is lazily invoked when the component becomes visible in the browser viewport.\n *\n * Only called in the client.\n * Only called once.\n *\n * @see `useResume`, `useClientEffect`\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     isVisible: false,\n *   });\n *   useVisible$(() => {\n *     // Invoked once when the component is visible in the browser's viewport\n *     console.log('called once in client when visible');\n *     store.isVisible = true;\n *   });\n *   return <div>{store.isVisible}</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useVisibleQrl = (resumeFn) => useOn('qvisible', resumeFn);\n// <docs markdown=\"../readme.md#useVisible\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useVisible instead)\n/**\n * A lazy-loadable reference to a component's on the visible hook.\n *\n * The hook is lazily invoked when the component becomes visible in the browser viewport.\n *\n * Only called in the client.\n * Only called once.\n *\n * @see `useResume`, `useClientEffect`\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     isVisible: false,\n *   });\n *   useVisible$(() => {\n *     // Invoked once when the component is visible in the browser's viewport\n *     console.log('called once in client when visible');\n *     store.isVisible = true;\n *   });\n *   return <div>{store.isVisible}</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useVisible$ = /*#__PURE__*/ implicit$FirstArg(useVisibleQrl);\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<Host>` is a better\n * idea.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * @alpha\n */\n// </docs>\nexport const useOn = (event, eventQrl) => _useOn(`on:${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <Host>Profit!</Host>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => _useOn(`on-window:${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <Host>Profit!</Host>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => _useOn(`on-window:${event}`, eventQrl);\nconst _useOn = (eventName, eventQrl) => {\n    const invokeCtx = useInvokeContext();\n    const ctx = getContext(invokeCtx.$hostElement$);\n    assertQrl(eventQrl);\n    qPropWriteQRL(invokeCtx.$renderCtx$, ctx, eventName, eventQrl);\n};\n//# sourceMappingURL=data:application/json;base64,","import { getProxyTarget, noSerialize } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { newInvokeContext } from './use-core';\nimport { logDebug, logError } from '../util/log';\nimport { then } from '../util/promises';\nimport { useSequentialScope } from './use-store.public';\nimport { getDocument } from '../util/dom';\nimport { isFunction, isObject } from '../util/types';\nimport { getPlatform } from '../platform/platform';\nimport { useDocument } from './use-document.public';\nimport { handleWatch } from '../render/notify-render';\nimport { useResumeQrl, useVisibleQrl } from './use-on';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined } from '../assert/assert';\nimport { assertQrl, createQrl } from '../import/qrl-class';\nexport const WatchFlagsIsEffect = 1 << 0;\nexport const WatchFlagsIsWatch = 1 << 1;\nexport const WatchFlagsIsDirty = 1 << 2;\nexport const WatchFlagsIsCleanup = 1 << 3;\nexport const isWatchDescriptor = (obj) => {\n    return isObject(obj) && 'qrl' in obj && 'f' in obj;\n};\nexport const isWatchCleanup = (obj) => {\n    return isWatchDescriptor(obj) && !!(obj.f & WatchFlagsIsCleanup);\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$((track) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$((track) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <Host>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatchQrl = (qrl, opts) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (!get) {\n        assertQrl(qrl);\n        const el = ctx.$hostElement$;\n        const containerState = ctx.$renderCtx$.$containerState$;\n        const watch = {\n            qrl,\n            el,\n            f: WatchFlagsIsDirty | WatchFlagsIsWatch,\n            i,\n        };\n        set(true);\n        getContext(el).$watches$.push(watch);\n        ctx.$waitOn$.push(Promise.resolve().then(() => runWatch(watch, containerState)));\n        const isServer = containerState.$platform$.isServer;\n        if (isServer) {\n            useRunWatch(watch, opts?.run);\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ## Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$((track) => {\n *     const count = track(store, 'count');\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$((track) => {\n *     const doubleCount = track(store, 'doubleCount');\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <Host>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatch$ = /*#__PURE__*/ implicit$FirstArg(useWatchQrl);\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <Host>{store.count}</Host>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffectQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (!get) {\n        assertQrl(qrl);\n        const el = ctx.$hostElement$;\n        const watch = {\n            qrl,\n            el,\n            f: WatchFlagsIsEffect,\n            i,\n        };\n        set(true);\n        getContext(el).$watches$.push(watch);\n        useRunWatch(watch, opts?.run ?? 'visible');\n        const doc = ctx.$doc$;\n        if (doc['qO']) {\n            doc['qO'].observe(el);\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <Host>{store.count}</Host>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffect$ = /*#__PURE__*/ implicit$FirstArg(useClientEffectQrl);\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <Host>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </Host>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useClientMount` `useMount`\n * @public\n */\n// </docs>\nexport const useServerMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (!get) {\n        set(true);\n        const isServer = getPlatform(ctx.$doc$).isServer;\n        if (isServer) {\n            ctx.$waitOn$.push(mountQrl());\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <Host>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </Host>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useClientMount` `useMount`\n * @public\n */\n// </docs>\nexport const useServerMount$ = /*#__PURE__*/ implicit$FirstArg(useServerMountQrl);\n// <docs markdown=\"../readme.md#useClientMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientMount instead)\n/**\n * Register's a client mount hook that runs only in the client when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     hash: '',\n *   });\n *\n *   useClientMount$(async () => {\n *     // This code will ONLY run once in the client, when the component is mounted\n *     store.hash = document.location.hash;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The url hash is: ${store.hash}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useMount`\n *\n * @public\n */\n// </docs>\nexport const useClientMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (!get) {\n        set(true);\n        const isServer = getPlatform(useDocument()).isServer;\n        if (!isServer) {\n            ctx.$waitOn$.push(mountQrl());\n        }\n    }\n};\n// <docs markdown=\"../readme.md#useClientMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientMount instead)\n/**\n * Register's a client mount hook that runs only in the client when the component is first\n * mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     hash: '',\n *   });\n *\n *   useClientMount$(async () => {\n *     // This code will ONLY run once in the client, when the component is mounted\n *     store.hash = document.location.hash;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The url hash is: ${store.hash}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useMount`\n *\n * @public\n */\n// </docs>\nexport const useClientMount$ = /*#__PURE__*/ implicit$FirstArg(useClientMountQrl);\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The temperature is: ${store.temp}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useClientMount`\n * @public\n */\n// </docs>\nexport const useMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (!get) {\n        set(true);\n        ctx.$waitOn$.push(mountQrl());\n    }\n};\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ## Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <Host>\n *       <p>The temperature is: ${store.temp}</p>\n *     </Host>\n *   );\n * });\n * ```\n *\n * @see `useServerMount` `useClientMount`\n * @public\n */\n// </docs>\nexport const useMount$ = /*#__PURE__*/ implicit$FirstArg(useMountQrl);\nexport const runWatch = (watch, containerState) => {\n    if (!(watch.f & WatchFlagsIsDirty)) {\n        logDebug('Watch is not dirty, skipping run', watch);\n        return Promise.resolve(watch);\n    }\n    watch.f &= ~WatchFlagsIsDirty;\n    const promise = new Promise((resolve) => {\n        then(watch.running, () => {\n            cleanupWatch(watch);\n            const el = watch.el;\n            const doc = getDocument(el);\n            const invokationContext = newInvokeContext(doc, el, el, 'WatchEvent');\n            const { $subsManager$: subsManager } = containerState;\n            const watchFn = watch.qrl.$invokeFn$(el, invokationContext, () => {\n                subsManager.$clearSub$(watch);\n            });\n            const track = (obj, prop) => {\n                const target = getProxyTarget(obj);\n                assertDefined(target, 'Expected a Proxy object to track');\n                const manager = subsManager.$getLocal$(target);\n                manager.$addSub$(watch, prop);\n                if (prop) {\n                    return obj[prop];\n                }\n                else {\n                    return obj;\n                }\n            };\n            return then(watchFn(track), (returnValue) => {\n                if (isFunction(returnValue)) {\n                    watch.destroy = noSerialize(returnValue);\n                }\n                resolve(watch);\n            });\n        });\n    });\n    watch.running = noSerialize(promise);\n    return promise;\n};\nexport const cleanupWatch = (watch) => {\n    const destroy = watch.destroy;\n    if (destroy) {\n        watch.destroy = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyWatch = (watch) => {\n    if (watch.f & WatchFlagsIsCleanup) {\n        watch.f &= ~WatchFlagsIsCleanup;\n        const cleanup = watch.qrl.$invokeFn$(watch.el);\n        cleanup();\n    }\n    else {\n        cleanupWatch(watch);\n    }\n};\nconst useRunWatch = (watch, run) => {\n    if (run === 'load') {\n        useResumeQrl(getWatchHandlerQrl(watch));\n    }\n    else if (run === 'visible') {\n        useVisibleQrl(getWatchHandlerQrl(watch));\n    }\n};\nconst getWatchHandlerQrl = (watch) => {\n    const watchQrl = watch.qrl;\n    assertQrl(watchQrl);\n    const watchHandler = createQrl(watchQrl.$chunk$, 'handleWatch', handleWatch, null, null, [watch], watchQrl.$symbol$);\n    return watchHandler;\n};\n//# sourceMappingURL=data:application/json;base64,","export const emitEvent = (el, eventName, detail, bubbles) => {\n    if (el && typeof CustomEvent === 'function') {\n        el.dispatchEvent(new CustomEvent(eventName, {\n            detail,\n            bubbles: bubbles,\n            composed: bubbles,\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLEVBQUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLEVBQUU7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsTUFBTTtZQUNOLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1pdEV2ZW50ID0gKFxuICBlbDogRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGRldGFpbDogYW55LFxuICBidWJibGVzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKGVsICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbCxcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgY29tcG9zZWQ6IGJ1YmJsZXMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0=","import { assertDefined, assertEqual } from '../assert/assert';\nimport { parseQRL, stringifyQRL } from '../import/qrl';\nimport { isQrl } from '../import/qrl-class';\nimport { getContext, tryGetContext } from '../props/props';\nimport { getDocument } from '../util/dom';\nimport { isDocument, isElement, isNode } from '../util/element';\nimport { logDebug, logError, logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { createProxy, getOrCreateProxy, getProxyFlags, getProxyTarget, isConnected, isMutable, mutable, shouldSerialize, } from './q-object';\nimport { destroyWatch, WatchFlagsIsDirty } from '../use/use-watch';\nimport { emitEvent } from '../util/event';\nimport { getContainerState } from '../render/notify-render';\nimport { codeToText, qError, QError_cannotSerializeNode, QError_containerAlreadyPaused, } from '../error/error';\nimport { isArray, isObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isNotNullable, isPromise } from '../util/promises';\nexport const UNDEFINED_PREFIX = '\\u0010';\nexport const QRL_PREFIX = '\\u0011';\nexport const DOCUMENT_PREFIX = '\\u0012';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n/**\n * Serialize the current state of the application into DOM\n *\n * @alpha\n */\n// </docs>\nexport const pauseContainer = async (elmOrDoc) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = containerEl === doc.documentElement ? doc.body : containerEl;\n    const data = await pauseState(containerEl);\n    const script = doc.createElement('script');\n    directSetAttribute(script, 'type', 'qwik/json');\n    script.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(script);\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    return data;\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping hydration because parent element is not q:container');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (!script) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    script.remove();\n    const containerState = getContainerState(containerEl);\n    const meta = JSON.parse(unescapeText(script.textContent || '{}'));\n    // Collect all elements\n    const elements = new Map();\n    const getObject = (id) => {\n        return getObjectImpl(id, elements, meta.objs, containerState);\n    };\n    getNodesInScope(containerEl, hasQId).forEach((el) => {\n        const id = directGetAttribute(el, ELEMENT_ID);\n        elements.set(ELEMENT_ID_PREFIX + id, el);\n    });\n    // Revive proxies with subscriptions into the proxymap\n    reviveValues(meta.objs, meta.subs, getObject, containerState, parentJSON);\n    // Rebuild target objects\n    for (const obj of meta.objs) {\n        reviveNestedObjects(obj, getObject);\n    }\n    Object.entries(meta.ctx).forEach(([elementID, ctxMeta]) => {\n        const el = getObject(elementID);\n        assertDefined(el);\n        const ctx = getContext(el);\n        const qobj = ctxMeta.r;\n        const seq = ctxMeta.s;\n        const host = ctxMeta.h;\n        const contexts = ctxMeta.c;\n        const watches = ctxMeta.w;\n        if (qobj) {\n            ctx.$refMap$.$array$.push(...qobj.split(' ').map((part) => getObject(part)));\n        }\n        if (seq) {\n            ctx.$seq$ = seq.split(' ').map((part) => getObject(part));\n        }\n        if (watches) {\n            ctx.$watches$ = watches.split(' ').map((part) => getObject(part));\n        }\n        if (contexts) {\n            contexts.split(' ').map((part) => {\n                const [key, value] = part.split('=');\n                if (!ctx.$contexts$) {\n                    ctx.$contexts$ = new Map();\n                }\n                ctx.$contexts$.set(key, getObject(value));\n            });\n        }\n        // Restore sequence scoping\n        if (host) {\n            const [props, renderQrl] = host.split(' ');\n            assertDefined(props);\n            assertDefined(renderQrl);\n            ctx.$props$ = getObject(props);\n            ctx.$renderQrl$ = getObject(renderQrl);\n        }\n    });\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst hasContext = (el) => {\n    return !!tryGetContext(el);\n};\nexport const pauseState = async (containerEl) => {\n    const containerState = getContainerState(containerEl);\n    const doc = getDocument(containerEl);\n    const elementToIndex = new Map();\n    const collector = createCollector(doc, containerState);\n    // Collect all qObjected around the DOM\n    const elements = getNodesInScope(containerEl, hasContext);\n    for (const node of elements) {\n        const ctx = tryGetContext(node);\n        await collectProps(node, ctx.$props$, collector);\n        if (ctx.$contexts$) {\n            for (const item of ctx.$contexts$.values()) {\n                await collectValue(item, collector);\n            }\n        }\n        if (ctx.$listeners$) {\n            for (const listeners of ctx.$listeners$.values()) {\n                for (const l of listeners) {\n                    const captured = l.$captureRef$;\n                    if (captured) {\n                        for (const obj of captured) {\n                            await collectValue(obj, collector);\n                        }\n                    }\n                }\n            }\n        }\n        for (const watch of ctx.$watches$) {\n            collector.$watches$.push(watch);\n        }\n        for (const obj of ctx.$refMap$.$array$) {\n            await collectValue(obj, collector);\n        }\n    }\n    // Convert objSet to array\n    const objs = Array.from(collector.$objSet$);\n    const objToId = new Map();\n    const hasSubscriptions = (a) => {\n        const flags = getProxyFlags(containerState.$proxyMap$.get(a));\n        if (typeof flags === 'number' && flags > 0) {\n            return true;\n        }\n        const manager = containerState.$subsManager$.$tryGetLocal$(a);\n        if (manager) {\n            return manager.$subs$.size > 0;\n        }\n        return false;\n    };\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            if (el.isConnected) {\n                id = intToStr(elementToIndex.size);\n                directSetAttribute(el, ELEMENT_ID, id);\n                id = ELEMENT_ID_PREFIX + id;\n            }\n            else {\n                id = null;\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isMutable(obj)) {\n            obj = obj.v;\n            suffix = '%';\n        }\n        if (isObject(obj)) {\n            if (isPromise(obj)) {\n                obj = getPromiseValue(obj);\n                suffix += '~';\n            }\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n            }\n            const id = objToId.get(normalizeObj(target ?? obj, doc));\n            if (id !== undefined) {\n                return intToStr(id) + suffix;\n            }\n            if (!target && isNode(obj)) {\n                if (obj.nodeType === 1) {\n                    return getElementID(obj) + suffix;\n                }\n                else {\n                    logError(codeToText(QError_cannotSerializeNode), obj);\n                    return null;\n                }\n            }\n        }\n        else {\n            const id = objToId.get(normalizeObj(obj, doc));\n            if (id !== undefined) {\n                return intToStr(id) + suffix;\n            }\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const id = getObjId(obj);\n        assertDefined(id);\n        return id;\n    };\n    const serialize = (value) => {\n        return getObjId(value) ?? value;\n    };\n    let count = 0;\n    objs.sort((a, b) => {\n        const isProxyA = hasSubscriptions(a) ? 0 : 1;\n        const isProxyB = hasSubscriptions(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    for (const obj of objs) {\n        objToId.set(obj, count);\n        count++;\n    }\n    const subs = objs\n        .map((obj) => {\n        const flags = getProxyFlags(containerState.$proxyMap$.get(obj));\n        if (flags === undefined) {\n            return null;\n        }\n        const subs = containerState.$subsManager$.$tryGetLocal$(obj)?.$subs$;\n        if ((subs && subs.size > 0) || flags !== 0) {\n            const subsObj = {};\n            if (flags > 0) {\n                subsObj['$'] = flags;\n            }\n            subs &&\n                subs.forEach((set, key) => {\n                    const id = getObjId(key);\n                    if (id !== null) {\n                        subsObj[id] = set ? Array.from(set) : null;\n                    }\n                });\n            return subsObj;\n        }\n        else {\n            return null;\n        }\n    })\n        .filter(isNotNullable);\n    const qrlSerializeOptions = {\n        $platform$: containerState.$platform$,\n        $getObjId$: getObjId,\n    };\n    const convertedObjs = objs.map((obj) => {\n        if (isQrl(obj)) {\n            return QRL_PREFIX + stringifyQRL(obj, qrlSerializeOptions);\n        }\n        if (isObject(obj)) {\n            if (isArray(obj)) {\n                return obj.map(serialize);\n            }\n            const output = {};\n            Object.entries(obj).forEach(([key, value]) => {\n                output[key] = serialize(value);\n            });\n            return output;\n        }\n        return obj;\n    });\n    const listeners = [];\n    const meta = {};\n    // Write back to the dom\n    elements.forEach((node) => {\n        const ctx = getContext(node);\n        assertDefined(ctx);\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const watches = ctx.$watches$;\n        const renderQrl = ctx.$renderQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = collector.$elements$.includes(node);\n        let add = false;\n        if (ref.$array$.length > 0) {\n            const value = ref.$array$.map((obj) => mustGetObjId(obj)).join(' ');\n            if (value) {\n                metaValue.r = value;\n                add = true;\n            }\n        }\n        if (elementCaptured && props) {\n            const objs = [props];\n            if (renderQrl) {\n                objs.push(renderQrl);\n            }\n            const value = objs.map((obj) => mustGetObjId(obj)).join(' ');\n            if (value) {\n                metaValue.h = value;\n                add = true;\n            }\n        }\n        if (watches.length > 0) {\n            const value = watches\n                .map((watch) => getObjId(watch))\n                .filter(isNotNullable)\n                .join(' ');\n            if (value) {\n                metaValue.w = value;\n                add = true;\n            }\n        }\n        if (elementCaptured && seq.length > 0) {\n            const value = seq.map((obj) => mustGetObjId(obj)).join(' ');\n            if (value) {\n                metaValue.s = value;\n                add = true;\n            }\n        }\n        if (contexts) {\n            const serializedContexts = [];\n            contexts.forEach((value, key) => {\n                serializedContexts.push(`${key}=${mustGetObjId(value)}`);\n            });\n            const value = serializedContexts.join(' ');\n            if (value) {\n                metaValue.c = value;\n                add = true;\n            }\n        }\n        if (add) {\n            const elementID = getElementID(node);\n            assertDefined(elementID);\n            meta[elementID] = metaValue;\n        }\n        if (ctx.$listeners$) {\n            ctx.$listeners$.forEach((qrls, key) => {\n                qrls.forEach((qrl) => {\n                    listeners.push({\n                        key,\n                        qrl,\n                    });\n                });\n            });\n        }\n    });\n    for (const watch of collector.$watches$) {\n        destroyWatch(watch);\n        if (qDev) {\n            if (watch.f & WatchFlagsIsDirty) {\n                logWarn('Serializing dirty watch. Looks like an internal error.');\n            }\n            if (!isConnected(watch)) {\n                logWarn('Serializing disconneted watch. Looks like an internal error.');\n            }\n        }\n    }\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (getDocument(el) !== doc) {\n                logWarn('element from different document', value, el.tagName);\n            }\n            if (!value) {\n                logWarn('unconnected element', el.tagName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        listeners,\n    };\n};\nexport const getQwikJSON = (parentElm) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, 'type') === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const nodes = [];\n    walkNodes(nodes, parent, predicate);\n    return nodes;\n};\nexport const walkNodes = (nodes, parent, predicate) => {\n    let child = parent.firstElementChild;\n    while (child) {\n        if (!isContainer(child)) {\n            if (predicate(child)) {\n                nodes.push(child);\n            }\n            walkNodes(nodes, child, predicate);\n        }\n        child = child.nextElementSibling;\n    }\n};\nconst reviveValues = (objs, subs, getObject, containerState, containerEl) => {\n    for (let i = 0; i < objs.length; i++) {\n        const value = objs[i];\n        if (isString(value)) {\n            if (value === UNDEFINED_PREFIX) {\n                objs[i] = undefined;\n            }\n            else if (value === DOCUMENT_PREFIX) {\n                objs[i] = getDocument(containerEl);\n            }\n            else if (value.startsWith(QRL_PREFIX)) {\n                objs[i] = parseQRL(value.slice(1), containerEl);\n            }\n        }\n        else {\n            const sub = subs[i];\n            if (sub) {\n                const converted = new Map();\n                let flags = 0;\n                Object.entries(sub).forEach((entry) => {\n                    if (entry[0] === '$') {\n                        flags = entry[1];\n                        return;\n                    }\n                    const el = getObject(entry[0]);\n                    if (!el) {\n                        logWarn('QWIK can not revive subscriptions because of missing element ID', entry, value);\n                        return;\n                    }\n                    const set = entry[1] === null ? null : new Set(entry[1]);\n                    converted.set(el, set);\n                });\n                createProxy(value, containerState, flags, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject) => {\n    if (isQrl(obj)) {\n        if (obj.$capture$ && obj.$capture$.length > 0) {\n            obj.$captureRef$ = obj.$capture$.map(getObject);\n            obj.$capture$ = null;\n        }\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                const value = obj[i];\n                if (typeof value == 'string') {\n                    obj[i] = getObject(value);\n                }\n                else {\n                    reviveNestedObjects(value, getObject);\n                }\n            }\n        }\n        else if (Object.getPrototypeOf(obj) === Object.prototype) {\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (typeof value == 'string') {\n                        obj[key] = getObject(value);\n                    }\n                    else {\n                        reviveNestedObjects(value, getObject);\n                    }\n                }\n            }\n        }\n    }\n};\nconst OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '%': (obj) => {\n        return mutable(obj);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n};\nconst getObjectImpl = (id, elements, objs, containerState) => {\n    if (id.startsWith(ELEMENT_ID_PREFIX)) {\n        assertEqual(elements.has(id), true);\n        return elements.get(id);\n    }\n    const index = strToInt(id);\n    assertEqual(objs.length > index, true);\n    let obj = objs[index];\n    for (let i = id.length - 1; i >= 0; i--) {\n        const code = id[i];\n        const transform = OBJECT_TRANSFORMS[code];\n        if (!transform) {\n            break;\n        }\n        obj = transform(obj, containerState);\n    }\n    return obj;\n};\nconst normalizeObj = (obj, doc) => {\n    if (obj === doc) {\n        return DOCUMENT_PREFIX;\n    }\n    if (obj === undefined || !shouldSerialize(obj)) {\n        return UNDEFINED_PREFIX;\n    }\n    return getProxyTarget(obj) ?? obj;\n};\nconst collectValue = async (obj, collector) => {\n    const handled = await collectQObjects(obj, collector);\n    if (!handled) {\n        collector.$objSet$.add(normalizeObj(obj, collector.$doc$));\n    }\n};\nconst collectProps = async (el, props, collector) => {\n    const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(getProxyTarget(props))?.$subs$;\n    if (subs && subs.has(el)) {\n        // The host element read the props\n        await collectElement(el, collector);\n    }\n};\nconst createCollector = (doc, containerState) => {\n    return {\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $elements$: [],\n        $watches$: [],\n        $containerState$: containerState,\n        $doc$: doc,\n    };\n};\nconst collectQrl = async (obj, collector) => {\n    if (collector.$seen$.has(obj)) {\n        return true;\n    }\n    collector.$seen$.add(obj);\n    collector.$objSet$.add(normalizeObj(obj, collector.$doc$));\n    if (obj.$captureRef$) {\n        for (const item of obj.$captureRef$) {\n            await collectValue(item, collector);\n        }\n    }\n};\nconst collectElement = async (el, collector) => {\n    if (collector.$seen$.has(el)) {\n        return;\n    }\n    collector.$seen$.add(el);\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        collector.$elements$.push(el);\n        if (ctx.$props$) {\n            await collectValue(ctx.$props$, collector);\n        }\n        if (ctx.$renderQrl$) {\n            await collectValue(ctx.$renderQrl$, collector);\n        }\n        for (const obj of ctx.$seq$) {\n            await collectValue(obj, collector);\n        }\n        for (const obj of ctx.$refMap$.$array$) {\n            await collectValue(obj, collector);\n        }\n        for (const obj of ctx.$watches$) {\n            await collectValue(obj, collector);\n        }\n        if (ctx.$contexts$) {\n            for (const obj of ctx.$contexts$.values()) {\n                await collectValue(obj, collector);\n            }\n        }\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nconst collectSubscriptions = async (subs, collector) => {\n    if (collector.$seen$.has(subs)) {\n        return;\n    }\n    collector.$seen$.add(subs);\n    for (const key of Array.from(subs.keys())) {\n        if (isElement(key)) {\n            await collectElement(key, collector);\n        }\n        else {\n            await collectValue(key, collector);\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        promise[PROMISE_VALUE] = value;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    assertEqual(PROMISE_VALUE in promise, true);\n    return promise[PROMISE_VALUE];\n};\nconst collectQObjects = async (input, collector) => {\n    let obj = input;\n    if (obj != null) {\n        if (isQrl(obj)) {\n            await collectQrl(obj, collector);\n            return true;\n        }\n        if (typeof obj === 'object') {\n            if (isPromise(obj)) {\n                if (collector.$seen$.has(obj)) {\n                    return true;\n                }\n                collector.$seen$.add(obj);\n                obj = await resolvePromise(obj);\n                await collectValue(obj, collector);\n                return true;\n            }\n            const target = getProxyTarget(obj);\n            if (!target && isNode(obj)) {\n                if (obj.nodeType === 1) {\n                    return true;\n                }\n                return false;\n            }\n            const subs = collector.$containerState$.$subsManager$.$tryGetLocal$(target)?.$subs$;\n            if (subs) {\n                await collectSubscriptions(subs, collector);\n            }\n            obj = normalizeObj(obj, collector.$doc$);\n        }\n        if (typeof obj === 'object') {\n            if (collector.$seen$.has(obj)) {\n                return true;\n            }\n            collector.$seen$.add(obj);\n            collector.$objSet$.add(obj);\n            if (isArray(obj)) {\n                for (let i = 0; i < obj.length; i++) {\n                    await collectQObjects(input[i], collector);\n                }\n            }\n            else {\n                for (const key in obj) {\n                    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                        await collectQObjects(input[key], collector);\n                    }\n                }\n            }\n            return true;\n        }\n        if (isString(obj)) {\n            collector.$objSet$.add(obj);\n            return true;\n        }\n    }\n    return false;\n};\nexport const isContainer = (el) => {\n    return el.hasAttribute(QContainerAttr);\n};\nconst hasQId = (el) => {\n    return el.hasAttribute(ELEMENT_ID);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\n//# sourceMappingURL=data:application/json;base64,","export const newQObjectMap = () => {\n    const array = [];\n    return {\n        $array$: array,\n        $get$(index) {\n            return array[index];\n        },\n        $indexOf$(obj) {\n            const index = array.indexOf(obj);\n            return index === -1 ? undefined : index;\n        },\n        $add$(object) {\n            const index = array.indexOf(object);\n            if (index === -1) {\n                array.push(object);\n                return array.length - 1;\n            }\n            return index;\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHMtb2JqLW1hcC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9wcm9wcy9wcm9wcy1vYmotbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxHQUFlLEVBQUU7SUFDNUMsTUFBTSxLQUFLLEdBQW1CLEVBQUUsQ0FBQztJQUNqQyxPQUFPO1FBQ0wsT0FBTyxFQUFFLEtBQUs7UUFDZCxLQUFLLENBQUMsS0FBYTtZQUNqQixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixDQUFDO1FBQ0QsU0FBUyxDQUFDLEdBQVc7WUFDbkIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQyxPQUFPLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDMUMsQ0FBQztRQUNELEtBQUssQ0FBQyxNQUFvQjtZQUN4QixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3BDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNuQixPQUFPLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO2FBQ3pCO1lBQ0QsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0tBQ1ksQ0FBQztBQUNsQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFFPYmplY3QgfSBmcm9tICcuLi9vYmplY3QvcS1vYmplY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFFPYmplY3RNYXAge1xuICAkYWRkJChxT2JqZWN0OiBRT2JqZWN0PGFueT4pOiBudW1iZXI7XG4gICRnZXQkKGluZGV4OiBudW1iZXIpOiBRT2JqZWN0PGFueT4gfCB1bmRlZmluZWQ7XG4gICRpbmRleE9mJChvYmplY3Q6IFFPYmplY3Q8YW55Pik6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgJGFycmF5JDogUU9iamVjdDxhbnk+W107XG59XG5cbmV4cG9ydCBjb25zdCBuZXdRT2JqZWN0TWFwID0gKCk6IFFPYmplY3RNYXAgPT4ge1xuICBjb25zdCBhcnJheTogUU9iamVjdDxhbnk+W10gPSBbXTtcbiAgcmV0dXJuIHtcbiAgICAkYXJyYXkkOiBhcnJheSxcbiAgICAkZ2V0JChpbmRleDogbnVtYmVyKTogUU9iamVjdDxhbnk+IHwgdW5kZWZpbmVkIHtcbiAgICAgIHJldHVybiBhcnJheVtpbmRleF07XG4gICAgfSxcbiAgICAkaW5kZXhPZiQob2JqOiBzdHJpbmcpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgICAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKG9iaik7XG4gICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gdW5kZWZpbmVkIDogaW5kZXg7XG4gICAgfSxcbiAgICAkYWRkJChvYmplY3Q6IFFPYmplY3Q8YW55Pikge1xuICAgICAgY29uc3QgaW5kZXggPSBhcnJheS5pbmRleE9mKG9iamVjdCk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIGFycmF5LnB1c2gob2JqZWN0KTtcbiAgICAgICAgcmV0dXJuIGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgfSBhcyBRT2JqZWN0TWFwO1xufTtcbiJdfQ==","import { createProxy, getProxyTarget, isMutable, QObjectImmutable, } from '../object/q-object';\nimport { resumeContainer } from '../object/store';\nimport { newQObjectMap } from './props-obj-map';\nimport { qPropWriteQRL } from './props-on';\nimport { QContainerAttr } from '../util/markers';\nimport { $ } from '../import/qrl.public';\nimport { destroyWatch } from '../use/use-watch';\nimport { pauseContainer } from '../object/store';\nimport { getContainerState } from '../render/notify-render';\nimport { qDev } from '../util/qdev';\nimport { logError } from '../util/log';\nimport { isQrl } from '../import/qrl-class';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertDefined, assertEqual } from '../assert/assert';\nimport { codeToText, QError_immutableJsxProps } from '../error/error';\nimport { isArray } from '../util/types';\nconst Q_CTX = '__ctx__';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qDev) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: getContainerState(containerEl),\n    };\n};\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (element) => {\n    let ctx = tryGetContext(element);\n    if (!ctx) {\n        const cache = new Map();\n        element[Q_CTX] = ctx = {\n            $element$: element,\n            $cache$: cache,\n            $refMap$: newQObjectMap(),\n            $dirty$: false,\n            $seq$: [],\n            $watches$: [],\n            $props$: undefined,\n            $renderQrl$: undefined,\n            $component$: undefined,\n        };\n    }\n    return ctx;\n};\nexport const cleanupContext = (ctx, subsManager) => {\n    const el = ctx.$element$;\n    ctx.$watches$.forEach((watch) => {\n        subsManager.$clearSub$(watch);\n        destroyWatch(watch);\n    });\n    if (ctx.$renderQrl$) {\n        subsManager.$clearSub$(el);\n    }\n    ctx.$component$ = undefined;\n    ctx.$renderQrl$ = undefined;\n    ctx.$seq$.length = 0;\n    ctx.$watches$.length = 0;\n    ctx.$cache$.clear();\n    ctx.$dirty$ = false;\n    ctx.$refMap$.$array$.length = 0;\n    el[Q_CTX] = undefined;\n};\nconst PREFIXES = ['document:on', 'window:on', 'on'];\nconst SCOPED = ['on-window', 'on-window', 'on'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = prop.slice(1);\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return `${scope}:${prop}`;\n};\nexport const setEvent = (rctx, ctx, prop, value) => {\n    assertEqual(prop.endsWith('$'), true);\n    const qrl = isArray(value) ? value.map(ensureQrl) : ensureQrl(value);\n    qPropWriteQRL(rctx, ctx, normalizeOnProp(prop.slice(0, -1)), qrl);\n};\nconst ensureQrl = (value) => {\n    return isQrl(value) ? value : $(value);\n};\nexport const createProps = (target, containerState) => {\n    return createProxy(target, containerState, QObjectImmutable);\n};\nexport const getPropsMutator = (ctx, containerState) => {\n    let props = ctx.$props$;\n    if (!ctx.$props$) {\n        ctx.$props$ = props = createProps({}, containerState);\n    }\n    const target = getProxyTarget(props);\n    assertDefined(target);\n    const manager = containerState.$subsManager$.$getLocal$(target);\n    return {\n        set(prop, value) {\n            const didSet = prop in target;\n            let oldValue = target[prop];\n            let mut = false;\n            if (isMutable(oldValue)) {\n                oldValue = oldValue.v;\n            }\n            target[prop] = value;\n            if (isMutable(value)) {\n                value = value.v;\n                mut = true;\n            }\n            if (oldValue !== value) {\n                if (qDev) {\n                    if (didSet && !mut && !isQrl(value)) {\n                        const displayName = ctx.$renderQrl$?.getSymbol() ?? ctx.$element$.localName;\n                        logError(codeToText(QError_immutableJsxProps), `If you need to change a value of a passed in prop, please wrap the prop with \"mutable()\" <${displayName} ${prop}={mutable(...)}>`, '\\n - Component:', displayName, '\\n - Prop:', prop, '\\n - Old value:', oldValue, '\\n - New value:', value);\n                    }\n                }\n                manager.$notifySubs$(prop);\n            }\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { isElement } from '../../testing/html';\nimport { tryGetContext } from '../props/props';\nimport { QHostAttr } from './markers';\nimport { qDev } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // eslint-disable-next-line no-console\n    console.error('%cQWIK ERROR', STYLE, err, ...printParams(optionalParams));\n    return err;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    logError(message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n};\nexport const logWarn = (message, ...optionalParams) => {\n    // eslint-disable-next-line no-console\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isComponent = el.hasAttribute(QHostAttr);\n    return {\n        isComponent,\n        tagName: el.tagName,\n        renderQRL: ctx?.$renderQrl$?.getSymbol(),\n        element: el,\n        ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sS0FBSyxHQUFHLElBQUk7SUFDaEIsQ0FBQyxDQUFDLDRGQUE0RjtJQUM5RixDQUFDLENBQUMsRUFBRSxDQUFDO0FBRVAsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ2xFLE1BQU0sR0FBRyxHQUFHLE9BQU8sWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDcEUsc0NBQXNDO0lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUMxRSxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUN6RSxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7SUFDckMsdUNBQXVDO0lBQ3ZDLFFBQVEsQ0FBQztBQUNYLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUNqRSxzQ0FBc0M7SUFDdEMsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7S0FDN0U7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ3JFLElBQUksSUFBSSxFQUFFO1FBQ1Isc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztLQUN6RTtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLENBQUMsY0FBcUIsRUFBRSxFQUFFO0lBQzVDLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hCLE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxjQUFjLENBQUM7QUFDeEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFXLEVBQUUsRUFBRTtJQUNuQyxNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvQyxPQUFPO1FBQ0wsV0FBVztRQUNYLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTztRQUNuQixTQUFTLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUU7UUFDeEMsT0FBTyxFQUFFLEVBQUU7UUFDWCxHQUFHO0tBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gJy4uLy4uL3Rlc3RpbmcvaHRtbCc7XG5pbXBvcnQgeyB0cnlHZXRDb250ZXh0IH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgUUhvc3RBdHRyIH0gZnJvbSAnLi9tYXJrZXJzJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuL3FkZXYnO1xuXG5jb25zdCBTVFlMRSA9IHFEZXZcbiAgPyBgYmFja2dyb3VuZDogIzU2NENFMDsgY29sb3I6IHdoaXRlOyBwYWRkaW5nOiAycHggM3B4OyBib3JkZXItcmFkaXVzOiAycHg7IGZvbnQtc2l6ZTogMC44ZW07YFxuICA6ICcnO1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3IgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVyciA9IG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvciA/IG1lc3NhZ2UgOiBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGNvbnNvbGUuZXJyb3IoJyVjUVdJSyBFUlJPUicsIFNUWUxFLCBlcnIsIC4uLnByaW50UGFyYW1zKG9wdGlvbmFsUGFyYW1zKSk7XG4gIHJldHVybiBlcnI7XG59O1xuXG5leHBvcnQgY29uc3QgbG9nRXJyb3JBbmRTdG9wID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBsb2dFcnJvcihtZXNzYWdlLCAuLi5vcHRpb25hbFBhcmFtcyk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1kZWJ1Z2dlclxuICBkZWJ1Z2dlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dXYXJuID0gKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICBpZiAocURldikge1xuICAgIGNvbnNvbGUud2FybignJWNRV0lLIFdBUk4nLCBTVFlMRSwgbWVzc2FnZSwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGxvZ0RlYnVnID0gKG1lc3NhZ2U/OiBzdHJpbmcsIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBpZiAocURldikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5kZWJ1ZygnJWNRV0lLJywgU1RZTEUsIG1lc3NhZ2UsIC4uLnByaW50UGFyYW1zKG9wdGlvbmFsUGFyYW1zKSk7XG4gIH1cbn07XG5cbmNvbnN0IHByaW50UGFyYW1zID0gKG9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4ge1xuICBpZiAocURldikge1xuICAgIHJldHVybiBvcHRpb25hbFBhcmFtcy5tYXAoKHApID0+IHtcbiAgICAgIGlmIChpc0VsZW1lbnQocCkpIHtcbiAgICAgICAgcmV0dXJuIHByaW50RWxlbWVudChwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBvcHRpb25hbFBhcmFtcztcbn07XG5cbmNvbnN0IHByaW50RWxlbWVudCA9IChlbDogRWxlbWVudCkgPT4ge1xuICBjb25zdCBjdHggPSB0cnlHZXRDb250ZXh0KGVsKTtcbiAgY29uc3QgaXNDb21wb25lbnQgPSBlbC5oYXNBdHRyaWJ1dGUoUUhvc3RBdHRyKTtcbiAgcmV0dXJuIHtcbiAgICBpc0NvbXBvbmVudCxcbiAgICB0YWdOYW1lOiBlbC50YWdOYW1lLFxuICAgIHJlbmRlclFSTDogY3R4Py4kcmVuZGVyUXJsJD8uZ2V0U3ltYm9sKCksXG4gICAgZWxlbWVudDogZWwsXG4gICAgY3R4LFxuICB9O1xufTtcbiJdfQ==","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { isString } from '../util/types';\nexport const assertDefined = (value, text) => {\n    if (qDev) {\n        if (value != null)\n            return;\n        throw logErrorAndStop(text || 'Expected defined value');\n    }\n};\nexport const assertNotPromise = (value, text) => {\n    if (qDev) {\n        if (!(value instanceof Promise))\n            return;\n        throw logErrorAndStop(text || 'Expected defined value.');\n    }\n};\nexport const assertDefinedAndNotPromise = (value, text) => {\n    if (qDev) {\n        assertDefined(value, text);\n        assertNotPromise(value, text);\n    }\n};\nexport const assertInstanceOf = (value, type, text) => {\n    if (qDev) {\n        if (value instanceof type)\n            return;\n        throw logErrorAndStop(text || `Expected value '${value}' to be instance of '${type}' but was '${typeOf(value)}'.`);\n    }\n};\nexport const assertString = (value, text) => {\n    if (qDev) {\n        if (isString(value))\n            return;\n        throw logErrorAndStop(text || `Expected value '${value}' to be 'string' but was '${typeOf(value)}'.`);\n    }\n};\nexport const assertNotEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 !== value2)\n            return;\n        throw logErrorAndStop(text || `Expected '${value1}' !== '${value2}'.`);\n    }\n};\nexport const assertEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 === value2)\n            return;\n        throw logErrorAndStop(text || `Expected '${value1}' === '${value2}'.`);\n    }\n};\nexport const assertLessOrEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 <= value2)\n            return;\n        throw logErrorAndStop(text || `Expected '${value1}' <= '${value2}'.`);\n    }\n};\nexport const assertLess = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 < value2)\n            return;\n        throw logErrorAndStop(text || `Expected '${value1}' < '${value2}'.`);\n    }\n};\nexport const assertGreaterOrEqual = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 >= value2)\n            return;\n        throw logErrorAndStop(text || `Expected '${value1}' >= '${value2}'.`);\n    }\n};\nexport const assertGreater = (value1, value2, text) => {\n    if (qDev) {\n        if (value1 > value2)\n            return;\n        throw logErrorAndStop(text || `Expected '${value1}' > '${value2}'.`);\n    }\n};\nconst typeOf = (value) => {\n    if (value === null)\n        return 'null';\n    const type = typeof value;\n    if (type === 'object') {\n        return value?.constructor?.name || '<unknown>';\n    }\n    else {\n        return type;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Fzc2VydC9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQUMsS0FBVSxFQUFFLElBQWEsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxLQUFLLElBQUksSUFBSTtZQUFFLE9BQU87UUFDMUIsTUFBTSxlQUFlLENBQUMsSUFBSSxJQUFJLHdCQUF3QixDQUFDLENBQUM7S0FDekQ7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEtBQVUsRUFBRSxJQUFhLEVBQUUsRUFBRTtJQUM1RCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxPQUFPLENBQUM7WUFBRSxPQUFPO1FBQ3hDLE1BQU0sZUFBZSxDQUFDLElBQUksSUFBSSx5QkFBeUIsQ0FBQyxDQUFDO0tBQzFEO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxLQUFVLEVBQUUsSUFBYSxFQUFFLEVBQUU7SUFDdEUsSUFBSSxJQUFJLEVBQUU7UUFDUixhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzNCLGdCQUFnQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMvQjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsS0FBVSxFQUFFLElBQVMsRUFBRSxJQUFhLEVBQUUsRUFBRTtJQUN2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O0lBQzFCLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUNyQixPQUFPLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxJQUFJLFdBQVcsQ0FBQztLQUNoRDtTQUFNO1FBQ0wsT0FBTyxJQUFJLENBQUM7S0FDYjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ0Vycm9yQW5kU3RvcCB9IGZyb20gJy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGFzc2VydERlZmluZWQgPSAodmFsdWU6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQgfHwgJ0V4cGVjdGVkIGRlZmluZWQgdmFsdWUnKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydE5vdFByb21pc2UgPSAodmFsdWU6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCB8fCAnRXhwZWN0ZWQgZGVmaW5lZCB2YWx1ZS4nKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydERlZmluZWRBbmROb3RQcm9taXNlID0gKHZhbHVlOiBhbnksIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBhc3NlcnREZWZpbmVkKHZhbHVlLCB0ZXh0KTtcbiAgICBhc3NlcnROb3RQcm9taXNlKHZhbHVlLCB0ZXh0KTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydEluc3RhbmNlT2YgPSAodmFsdWU6IGFueSwgdHlwZTogYW55LCB0ZXh0Pzogc3RyaW5nKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgdHlwZSkgcmV0dXJuO1xuICAgIHRocm93IGxvZ0Vycm9yQW5kU3RvcChcbiAgICAgIHRleHQgfHwgYEV4cGVjdGVkIHZhbHVlICcke3ZhbHVlfScgdG8gYmUgaW5zdGFuY2Ugb2YgJyR7dHlwZX0nIGJ1dCB3YXMgJyR7dHlwZU9mKHZhbHVlKX0nLmBcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXNzZXJ0U3RyaW5nID0gKHZhbHVlOiBhbnksIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKFxuICAgICAgdGV4dCB8fCBgRXhwZWN0ZWQgdmFsdWUgJyR7dmFsdWV9JyB0byBiZSAnc3RyaW5nJyBidXQgd2FzICcke3R5cGVPZih2YWx1ZSl9Jy5gXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydE5vdEVxdWFsID0gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgIT09IHZhbHVlMikgcmV0dXJuO1xuICAgIHRocm93IGxvZ0Vycm9yQW5kU3RvcCh0ZXh0IHx8IGBFeHBlY3RlZCAnJHt2YWx1ZTF9JyAhPT0gJyR7dmFsdWUyfScuYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhc3NlcnRFcXVhbCA9ICh2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUxID09PSB2YWx1ZTIpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCB8fCBgRXhwZWN0ZWQgJyR7dmFsdWUxfScgPT09ICcke3ZhbHVlMn0nLmApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXNzZXJ0TGVzc09yRXF1YWwgPSAodmFsdWUxOiBhbnksIHZhbHVlMjogYW55LCB0ZXh0Pzogc3RyaW5nKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA8PSB2YWx1ZTIpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCB8fCBgRXhwZWN0ZWQgJyR7dmFsdWUxfScgPD0gJyR7dmFsdWUyfScuYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBhc3NlcnRMZXNzID0gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPCB2YWx1ZTIpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCB8fCBgRXhwZWN0ZWQgJyR7dmFsdWUxfScgPCAnJHt2YWx1ZTJ9Jy5gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGFzc2VydEdyZWF0ZXJPckVxdWFsID0gKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgdGV4dD86IHN0cmluZykgPT4ge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPj0gdmFsdWUyKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQgfHwgYEV4cGVjdGVkICcke3ZhbHVlMX0nID49ICcke3ZhbHVlMn0nLmApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXNzZXJ0R3JlYXRlciA9ICh2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIHRleHQ/OiBzdHJpbmcpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUxID4gdmFsdWUyKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQgfHwgYEV4cGVjdGVkICcke3ZhbHVlMX0nID4gJyR7dmFsdWUyfScuYCk7XG4gIH1cbn07XG5cbmNvbnN0IHR5cGVPZiA9ICh2YWx1ZTogYW55KSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHZhbHVlPy5jb25zdHJ1Y3Rvcj8ubmFtZSB8fCAnPHVua25vd24+JztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufTtcbiJdfQ==","import { assertEqual } from '../assert/assert';\nimport { qError, QError_immutableProps, QError_onlyLiteralWrapped, QError_onlyObjectWrapped, QError_verifySerializable, } from '../error/error';\nimport { isQrl } from '../import/qrl-class';\nimport { notifyChange } from '../render/notify-render';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { isDocument, isElement, isNode } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { tryGetContext } from '../props/props';\nimport { RenderEvent } from '../util/markers';\nimport { isArray, isFunction, isObject } from '../util/types';\nimport { isPromise } from '../util/promises';\nexport const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\n/**\n * Creates a proxy that notifies of any writes.\n */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    return createProxy(target, containerState, flags, undefined);\n};\nexport const createProxy = (target, containerState, flags, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location');\n    assertEqual(containerState.$proxyMap$.has(target), false, 'Proxy was already created');\n    if (!isObject(target)) {\n        throw qError(QError_onlyObjectWrapped, target);\n    }\n    if (target.constructor !== Object && !isArray(target)) {\n        throw qError(QError_onlyLiteralWrapped, target);\n    }\n    const manager = containerState.$subsManager$.$getLocal$(target, subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager, flags));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nconst QOjectTargetSymbol = Symbol();\nconst QOjectFlagsSymbol = Symbol();\nexport const createSubscriptionManager = () => {\n    const objToSubs = new Map();\n    const subsToObjs = new Map();\n    const clearSub = (sub) => {\n        const subs = subsToObjs.get(sub);\n        if (subs) {\n            subs.forEach((s) => {\n                s.delete(sub);\n            });\n            subsToObjs.delete(sub);\n            subs.clear();\n        }\n    };\n    const tryGetLocal = (obj) => {\n        assertEqual(getProxyTarget(obj), undefined);\n        return objToSubs.get(obj);\n    };\n    const trackSubToObj = (subscriber, map) => {\n        let set = subsToObjs.get(subscriber);\n        if (!set) {\n            subsToObjs.set(subscriber, (set = new Set()));\n        }\n        set.add(map);\n    };\n    const getLocal = (obj, initialMap) => {\n        let local = tryGetLocal(obj);\n        if (local) {\n            assertEqual(initialMap, undefined);\n        }\n        else {\n            const map = !initialMap ? new Map() : initialMap;\n            map.forEach((_, key) => {\n                trackSubToObj(key, map);\n            });\n            objToSubs.set(obj, (local = {\n                $subs$: map,\n                $addSub$(subscriber, key) {\n                    if (key == null) {\n                        map.set(subscriber, null);\n                    }\n                    else {\n                        let sub = map.get(subscriber);\n                        if (sub === undefined) {\n                            map.set(subscriber, (sub = new Set()));\n                        }\n                        if (sub) {\n                            sub.add(key);\n                        }\n                    }\n                    trackSubToObj(subscriber, map);\n                },\n                $notifySubs$(key) {\n                    map.forEach((value, subscriber) => {\n                        if (value === null || !key) {\n                            notifyChange(subscriber);\n                        }\n                        else if (value.has(key)) {\n                            notifyChange(subscriber);\n                        }\n                    });\n                },\n            }));\n        }\n        return local;\n    };\n    return {\n        $tryGetLocal$: tryGetLocal,\n        $getLocal$: getLocal,\n        $clearSub$: clearSub,\n    };\n};\nclass ReadWriteProxyHandler {\n    constructor($containerState$, $manager$, $flags$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n        this.$flags$ = $flags$;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol)\n                return target;\n            if (prop === QOjectFlagsSymbol)\n                return this.$flags$;\n            return target[prop];\n        }\n        let subscriber;\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        let value = target[prop];\n        if (isMutable(value)) {\n            value = value.v;\n        }\n        else if (immutable) {\n            subscriber = null;\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$(subscriber, isA ? undefined : prop);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const immutable = (this.$flags$ & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (this.$flags$ & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            verifySerializable(unwrappedNewValue);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$, prop);\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        if (oldValue !== unwrappedNewValue) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol)\n            return true;\n        if (property === QOjectFlagsSymbol)\n            return true;\n        return Object.prototype.hasOwnProperty.call(target, property);\n    }\n    ownKeys(target) {\n        let subscriber = null;\n        const invokeCtx = tryGetInvokeContext();\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (subscriber) {\n            this.$manager$.$addSub$(subscriber);\n        }\n        return Object.getOwnPropertyNames(target);\n    }\n}\nconst wrap = (value, containerState) => {\n    if (isQrl(value)) {\n        return value;\n    }\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (isNode(nakedValue)) {\n            return value;\n        }\n        if (!shouldSerialize(nakedValue)) {\n            return value;\n        }\n        if (qDev) {\n            verifySerializable(value);\n        }\n        const proxy = containerState.$proxyMap$.get(value);\n        return proxy ? proxy : getOrCreateProxy(value, containerState, QObjectRecursive);\n    }\n    else {\n        return value;\n    }\n};\nexport const verifySerializable = (value) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen);\n};\nconst _verifySerializable = (value, seen) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (isQrl(unwrapped)) {\n            return value;\n        }\n        switch (typeof unwrapped) {\n            case 'object':\n                if (isArray(unwrapped)) {\n                    for (const item of unwrapped) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                if (Object.getPrototypeOf(unwrapped) === Object.prototype) {\n                    for (const item of Object.values(unwrapped)) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                if (isPromise(unwrapped))\n                    return value;\n                if (isElement(unwrapped))\n                    return value;\n                if (isDocument(unwrapped))\n                    return value;\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        throw qError(QError_verifySerializable, unwrapped);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this\n * is a runtime error as Store wants to eagerly report when a non-serializable property is\n * assigned to it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.builder.io/tutorial/store/no-serialize)\n *\n * @alpha\n */\n// </docs>\nexport const noSerialize = (input) => {\n    noSerializeSet.add(input);\n    return input;\n};\n// <docs markdown=\"../readme.md#immutable\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#immutable instead)\n/**\n * Mark an object as immutable, preventing Qwik from creating subscriptions on that object.\n *\n * Qwik automatically creates subscriptions on store objects created by `useStore()`. By marking\n * an object as `immutable`, it hints to Qwik that the properties of this object will not change,\n * and therefore there is no need to create subscriptions for those objects.\n *\n * @alpha\n */\n// </docs>\nexport const immutable = (input) => {\n    return Object.freeze(input);\n};\n// <docs markdown=\"../readme.md#mutable\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#mutable instead)\n/**\n * Mark property as mutable.\n *\n * Qwik assumes that all bindings in components are immutable by default. This is done for two\n * reasons:\n *\n * 1. JSX does not allow Qwik runtime to know if a binding is static or mutable.\n *    `<Example valueA={123} valueB={exp}>` At runtime there is no way to know if `valueA` is\n * immutable.\n * 2. If Qwik assumes that properties are immutable, then it can do a better job data-shaking the\n * amount of code that needs to be serialized to the client.\n *\n * Because Qwik assumes that bindings are immutable by default, it needs a way for a developer to\n * let it know that binding is mutable. `mutable()` function serves that purpose.\n * `<Example valueA={123} valueB={mutable(exp)}>`. In this case, the Qwik runtime can correctly\n * recognize that the `Example` props are mutable and need to be serialized.\n *\n * See: [Mutable Props Tutorial](http://qwik.builder.io/tutorial/props/mutable) for an example\n *\n * @alpha\n */\n// </docs>\nexport const mutable = (v) => {\n    return {\n        [MUTABLE]: true,\n        v,\n    };\n};\nexport const isConnected = (sub) => {\n    if (isElement(sub)) {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n    else {\n        return isConnected(sub.el);\n    }\n};\nconst MUTABLE = Symbol('mutable');\nexport const isMutable = (v) => {\n    return isObject(v) && v[MUTABLE] === true;\n};\n/**\n * @alpha\n */\nexport const unwrapProxy = (proxy) => {\n    return getProxyTarget(proxy) ?? proxy;\n};\nexport const getProxyTarget = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectTargetSymbol];\n    }\n    return undefined;\n};\nexport const getProxyFlags = (obj) => {\n    if (isObject(obj)) {\n        return obj[QOjectFlagsSymbol];\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicS1vYmplY3QuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvb2JqZWN0L3Etb2JqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQ0wsTUFBTSxFQUNOLHFCQUFxQixFQUNyQix5QkFBeUIsRUFDekIsd0JBQXdCLEVBQ3hCLHlCQUF5QixHQUMxQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM1QyxPQUFPLEVBQWtCLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdEMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFLN0MsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXZDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FDOUIsTUFBUyxFQUNULGNBQThCLEVBQzlCLEtBQUssR0FBRyxDQUFDLEVBQ04sRUFBRTtJQUNMLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BELElBQUksS0FBSyxFQUFFO1FBQ1QsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQy9ELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUN6QixNQUFTLEVBQ1QsY0FBOEIsRUFDOUIsS0FBYSxFQUNiLElBQWdDLEVBQzdCLEVBQUU7SUFDTCxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO0lBQzlFLFdBQVcsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztJQUV2RixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3JCLE1BQU0sTUFBTSxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ2hEO0lBQ0QsSUFBSSxNQUFNLENBQUMsV0FBVyxLQUFLLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNyRCxNQUFNLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNqRDtJQUVELE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RSxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FDckIsTUFBTSxFQUNOLElBQUkscUJBQXFCLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FDOUMsQ0FBQztJQUNkLGNBQWMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QyxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDcEMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQW9CbkMsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsR0FBd0IsRUFBRTtJQUNqRSxNQUFNLFNBQVMsR0FBdUIsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUNoRCxNQUFNLFVBQVUsR0FBOEIsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUV4RCxNQUFNLFFBQVEsR0FBRyxDQUFDLEdBQWUsRUFBRSxFQUFFO1FBQ25DLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakMsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pCLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDaEIsQ0FBQyxDQUFDLENBQUM7WUFDSCxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFRLEVBQUUsRUFBRTtRQUMvQixXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7SUFFRixNQUFNLGFBQWEsR0FBRyxDQUFDLFVBQXNCLEVBQUUsR0FBa0IsRUFBRSxFQUFFO1FBQ25FLElBQUksR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQztJQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsR0FBUSxFQUFFLFVBQTBCLEVBQUUsRUFBRTtRQUN4RCxJQUFJLEtBQUssR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxLQUFLLEVBQUU7WUFDVCxXQUFXLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3BDO2FBQU07WUFDTCxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUUsSUFBSSxHQUFHLEVBQW9CLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUNwRSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNyQixhQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsU0FBUyxDQUFDLEdBQUcsQ0FDWCxHQUFHLEVBQ0gsQ0FBQyxLQUFLLEdBQUc7Z0JBQ1AsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsUUFBUSxDQUFDLFVBQXNCLEVBQUUsR0FBWTtvQkFDM0MsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO3dCQUNmLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO3FCQUMzQjt5QkFBTTt3QkFDTCxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUM5QixJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7NEJBQ3JCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO3lCQUN4Qzt3QkFDRCxJQUFJLEdBQUcsRUFBRTs0QkFDUCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUNkO3FCQUNGO29CQUNELGFBQWEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLENBQUM7Z0JBQ0QsWUFBWSxDQUFDLEdBQVk7b0JBQ3ZCLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLEVBQUU7d0JBQ2hDLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTs0QkFDMUIsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3lCQUMxQjs2QkFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUU7NEJBQ3pCLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzt5QkFDMUI7b0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQzthQUNGLENBQUMsQ0FDSCxDQUFDO1NBQ0g7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztJQUVGLE9BQU87UUFDTCxhQUFhLEVBQUUsV0FBVztRQUMxQixVQUFVLEVBQUUsUUFBUTtRQUNwQixVQUFVLEVBQUUsUUFBUTtLQUNyQixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxxQkFBcUI7SUFDekIsWUFDVSxnQkFBZ0MsRUFDaEMsU0FBbUMsRUFDbkMsT0FBZTtRQUZmLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBZ0I7UUFDaEMsY0FBUyxHQUFULFNBQVMsQ0FBMEI7UUFDbkMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtJQUN0QixDQUFDO0lBRUosR0FBRyxDQUFDLE1BQWtCLEVBQUUsSUFBcUI7UUFDM0MsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDNUIsSUFBSSxJQUFJLEtBQUssa0JBQWtCO2dCQUFFLE9BQU8sTUFBTSxDQUFDO1lBQy9DLElBQUksSUFBSSxLQUFLLGlCQUFpQjtnQkFBRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDcEQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7UUFDRCxJQUFJLFVBQXlDLENBQUM7UUFDOUMsTUFBTSxTQUFTLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztRQUN4QyxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFELElBQUksU0FBUyxFQUFFO1lBQ2IsVUFBVSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7U0FDckM7UUFDRCxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekIsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEIsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDakI7YUFBTSxJQUFJLFNBQVMsRUFBRTtZQUNwQixVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ25CO1FBQ0QsSUFBSSxVQUFVLEVBQUU7WUFDZCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3RDtRQUNELE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDaEUsQ0FBQztJQUVELEdBQUcsQ0FBQyxNQUFrQixFQUFFLElBQXFCLEVBQUUsUUFBYTtRQUMxRCxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDO1lBQ3hCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUQsSUFBSSxTQUFTLEVBQUU7WUFDYixNQUFNLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsTUFBTSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFELE1BQU0saUJBQWlCLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUN2RSxJQUFJLElBQUksRUFBRTtZQUNSLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLENBQUM7WUFDdEMsTUFBTSxTQUFTLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztZQUN4QyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRTtnQkFDbEQsT0FBTyxDQUNMLDJHQUEyRyxFQUMzRyxTQUFTLENBQUMsYUFBYSxFQUN2QixJQUFJLENBQ0wsQ0FBQzthQUNIO1NBQ0Y7UUFDRCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUIsSUFBSSxHQUFHLEVBQUU7WUFDUCxNQUFNLENBQUMsSUFBVyxDQUFDLEdBQUcsaUJBQWlCLENBQUM7WUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUM5QixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksUUFBUSxLQUFLLGlCQUFpQixFQUFFO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxpQkFBaUIsQ0FBQztZQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELEdBQUcsQ0FBQyxNQUFrQixFQUFFLFFBQXlCO1FBQy9DLElBQUksUUFBUSxLQUFLLGtCQUFrQjtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ2pELElBQUksUUFBUSxLQUFLLGlCQUFpQjtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRWhELE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQWtCO1FBQ3hCLElBQUksVUFBVSxHQUFrQyxJQUFJLENBQUM7UUFDckQsTUFBTSxTQUFTLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztRQUN4QyxJQUFJLFNBQVMsRUFBRTtZQUNiLFVBQVUsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDO1NBQ3JDO1FBQ0QsSUFBSSxVQUFVLEVBQUU7WUFDZCxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNyQztRQUNELE9BQU8sTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDRjtBQUVELE1BQU0sSUFBSSxHQUFHLENBQUksS0FBUSxFQUFFLGNBQThCLEVBQUssRUFBRTtJQUM5RCxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNoQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbkIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxVQUFVLEtBQUssS0FBSyxFQUFFO1lBQ3hCLDBCQUEwQjtZQUMxQixPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksSUFBSSxFQUFFO1lBQ1Isa0JBQWtCLENBQUksS0FBSyxDQUFDLENBQUM7U0FDOUI7UUFDRCxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFZLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixDQUFDLENBQUM7S0FDekY7U0FBTTtRQUNMLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFJLEtBQVEsRUFBSyxFQUFFO0lBQ25ELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdkIsT0FBTyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxtQkFBbUIsR0FBRyxDQUFJLEtBQVEsRUFBRSxJQUFjLEVBQUssRUFBRTtJQUM3RCxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDckMsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO1FBQ3JCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxJQUFJLGVBQWUsQ0FBQyxTQUFTLENBQUMsRUFBRTtRQUM5QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDdkIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEIsSUFBSSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELFFBQVEsT0FBTyxTQUFTLEVBQUU7WUFDeEIsS0FBSyxRQUFRO2dCQUNYLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFO29CQUN0QixLQUFLLE1BQU0sSUFBSSxJQUFJLFNBQVMsRUFBRTt3QkFDNUIsbUJBQW1CLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO3FCQUNqQztvQkFDRCxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssTUFBTSxDQUFDLFNBQVMsRUFBRTtvQkFDekQsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO3dCQUMzQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7cUJBQ2pDO29CQUNELE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQztvQkFBRSxPQUFPLEtBQUssQ0FBQztnQkFDdkMsSUFBSSxTQUFTLENBQUMsU0FBUyxDQUFDO29CQUFFLE9BQU8sS0FBSyxDQUFDO2dCQUN2QyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUM7b0JBQUUsT0FBTyxLQUFLLENBQUM7Z0JBQ3hDLE1BQU07WUFDUixLQUFLLFNBQVMsQ0FBQztZQUNmLEtBQUssUUFBUSxDQUFDO1lBQ2QsS0FBSyxRQUFRO2dCQUNYLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBQ0QsTUFBTSxNQUFNLENBQUMseUJBQXlCLEVBQUUsU0FBUyxDQUFDLENBQUM7S0FDcEQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQztBQUNGLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxJQUFJLE9BQU8sRUFBTyxDQUFDO0FBRXhELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLEdBQVEsRUFBVyxFQUFFO0lBQ25ELElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNwQyxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNqQztJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBT0YsNkNBQTZDO0FBQzdDLHlDQUF5QztBQUN6QywwQ0FBMEM7QUFDMUM7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFlLEtBQVEsRUFBa0IsRUFBRTtJQUNwRSxjQUFjLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLE9BQU8sS0FBWSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUVGLDJDQUEyQztBQUMzQyx5Q0FBeUM7QUFDekMsd0NBQXdDO0FBQ3hDOzs7Ozs7OztHQVFHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFlLEtBQVEsRUFBZSxFQUFFO0lBQy9ELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM5QixDQUFDLENBQUM7QUFFRix5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDLHNDQUFzQztBQUN0Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUksQ0FBSSxFQUFxQixFQUFFO0lBQ3BELE9BQU87UUFDTCxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUk7UUFDZixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQWUsRUFBVyxFQUFFO0lBQ3RELElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2xCLE9BQU8sQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDO0tBQ2hEO1NBQU07UUFDTCxPQUFPLFdBQVcsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDNUI7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7QUFzQmxDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLENBQU0sRUFBNEIsRUFBRTtJQUM1RCxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDO0FBQzVDLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUksS0FBUSxFQUFLLEVBQUU7SUFDNUMsT0FBTyxjQUFjLENBQUksS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDO0FBQzNDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUEwQixHQUFNLEVBQWlCLEVBQUU7SUFDL0UsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDakIsT0FBUSxHQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQztLQUN6QztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUEwQixHQUFNLEVBQXNCLEVBQUU7SUFDbkYsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDakIsT0FBUSxHQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztLQUN4QztJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydEVxdWFsIH0gZnJvbSAnLi4vYXNzZXJ0L2Fzc2VydCc7XG5pbXBvcnQge1xuICBxRXJyb3IsXG4gIFFFcnJvcl9pbW11dGFibGVQcm9wcyxcbiAgUUVycm9yX29ubHlMaXRlcmFsV3JhcHBlZCxcbiAgUUVycm9yX29ubHlPYmplY3RXcmFwcGVkLFxuICBRRXJyb3JfdmVyaWZ5U2VyaWFsaXphYmxlLFxufSBmcm9tICcuLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBpc1FybCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuaW1wb3J0IHsgQ29udGFpbmVyU3RhdGUsIG5vdGlmeUNoYW5nZSB9IGZyb20gJy4uL3JlbmRlci9ub3RpZnktcmVuZGVyJztcbmltcG9ydCB7IHRyeUdldEludm9rZUNvbnRleHQgfSBmcm9tICcuLi91c2UvdXNlLWNvcmUnO1xuaW1wb3J0IHsgaXNEb2N1bWVudCwgaXNFbGVtZW50LCBpc05vZGUgfSBmcm9tICcuLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgbG9nV2FybiB9IGZyb20gJy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHR5cGUgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vdXNlL3VzZS1zdWJzY3JpYmVyJztcbmltcG9ydCB7IHRyeUdldENvbnRleHQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBSZW5kZXJFdmVudCB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBpc0FycmF5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9wcm9taXNlcyc7XG5cbmV4cG9ydCB0eXBlIE9ialRvUHJveHlNYXAgPSBXZWFrTWFwPGFueSwgYW55PjtcbmV4cG9ydCB0eXBlIFFPYmplY3Q8VCBleHRlbmRzIHt9PiA9IFQgJiB7IF9fYnJhbmRfXzogJ1FPYmplY3QnIH07XG5cbmV4cG9ydCBjb25zdCBRT2JqZWN0UmVjdXJzaXZlID0gMSA8PCAwO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RJbW11dGFibGUgPSAxIDw8IDE7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHByb3h5IHRoYXQgbm90aWZpZXMgb2YgYW55IHdyaXRlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldE9yQ3JlYXRlUHJveHkgPSA8VCBleHRlbmRzIG9iamVjdD4oXG4gIHRhcmdldDogVCxcbiAgY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlLFxuICBmbGFncyA9IDBcbik6IFQgPT4ge1xuICBjb25zdCBwcm94eSA9IGNvbnRhaW5lclN0YXRlLiRwcm94eU1hcCQuZ2V0KHRhcmdldCk7XG4gIGlmIChwcm94eSkge1xuICAgIHJldHVybiBwcm94eTtcbiAgfVxuICByZXR1cm4gY3JlYXRlUHJveHkodGFyZ2V0LCBjb250YWluZXJTdGF0ZSwgZmxhZ3MsIHVuZGVmaW5lZCk7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlUHJveHkgPSA8VCBleHRlbmRzIG9iamVjdD4oXG4gIHRhcmdldDogVCxcbiAgY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlLFxuICBmbGFnczogbnVtYmVyLFxuICBzdWJzPzogTWFwPEVsZW1lbnQsIFNldDxzdHJpbmc+PlxuKTogVCA9PiB7XG4gIGFzc2VydEVxdWFsKHVud3JhcFByb3h5KHRhcmdldCksIHRhcmdldCwgJ1VuZXhwZWN0ZWQgcHJveHkgYXQgdGhpcyBsb2NhdGlvbicpO1xuICBhc3NlcnRFcXVhbChjb250YWluZXJTdGF0ZS4kcHJveHlNYXAkLmhhcyh0YXJnZXQpLCBmYWxzZSwgJ1Byb3h5IHdhcyBhbHJlYWR5IGNyZWF0ZWQnKTtcblxuICBpZiAoIWlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICB0aHJvdyBxRXJyb3IoUUVycm9yX29ubHlPYmplY3RXcmFwcGVkLCB0YXJnZXQpO1xuICB9XG4gIGlmICh0YXJnZXQuY29uc3RydWN0b3IgIT09IE9iamVjdCAmJiAhaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgdGhyb3cgcUVycm9yKFFFcnJvcl9vbmx5TGl0ZXJhbFdyYXBwZWQsIHRhcmdldCk7XG4gIH1cblxuICBjb25zdCBtYW5hZ2VyID0gY29udGFpbmVyU3RhdGUuJHN1YnNNYW5hZ2VyJC4kZ2V0TG9jYWwkKHRhcmdldCwgc3Vicyk7XG4gIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KFxuICAgIHRhcmdldCxcbiAgICBuZXcgUmVhZFdyaXRlUHJveHlIYW5kbGVyKGNvbnRhaW5lclN0YXRlLCBtYW5hZ2VyLCBmbGFncylcbiAgKSBhcyBhbnkgYXMgVDtcbiAgY29udGFpbmVyU3RhdGUuJHByb3h5TWFwJC5zZXQodGFyZ2V0LCBwcm94eSk7XG4gIHJldHVybiBwcm94eTtcbn07XG5cbmNvbnN0IFFPamVjdFRhcmdldFN5bWJvbCA9IFN5bWJvbCgpO1xuY29uc3QgUU9qZWN0RmxhZ3NTeW1ib2wgPSBTeW1ib2woKTtcblxuZXhwb3J0IHR5cGUgVGFyZ2V0VHlwZSA9IFJlY29yZDxzdHJpbmcgfCBzeW1ib2wsIGFueT47XG5cbmV4cG9ydCB0eXBlIFN1YnNjcmliZXJNYXAgPSBNYXA8U3Vic2NyaWJlciwgU2V0PHN0cmluZz4gfCBudWxsPjtcbmV4cG9ydCB0eXBlIE9ialRvU3Vic2NyaWJlck1hcCA9IFdlYWtNYXA8YW55LCBMb2NhbFN1YnNjcmlwdGlvbk1hbmFnZXI+O1xuZXhwb3J0IHR5cGUgU3Vic2NyaWJlclRvU3Vic2NyaWJlck1hcCA9IE1hcDxTdWJzY3JpYmVyLCBTZXQ8U3Vic2NyaWJlck1hcD4+O1xuXG5leHBvcnQgaW50ZXJmYWNlIFN1YnNjcmlwdGlvbk1hbmFnZXIge1xuICAkdHJ5R2V0TG9jYWwkKG9iajogYW55KTogTG9jYWxTdWJzY3JpcHRpb25NYW5hZ2VyIHwgdW5kZWZpbmVkO1xuICAkZ2V0TG9jYWwkKG9iajogYW55LCBtYXA/OiBTdWJzY3JpYmVyTWFwKTogTG9jYWxTdWJzY3JpcHRpb25NYW5hZ2VyO1xuICAkY2xlYXJTdWIkOiAoc3ViOiBTdWJzY3JpYmVyKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvY2FsU3Vic2NyaXB0aW9uTWFuYWdlciB7XG4gICRzdWJzJDogU3Vic2NyaWJlck1hcDtcbiAgJG5vdGlmeVN1YnMkOiAoa2V5Pzogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuICAkYWRkU3ViJDogKHN1YnNjcmliZXI6IFN1YnNjcmliZXIsIGtleT86IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVN1YnNjcmlwdGlvbk1hbmFnZXIgPSAoKTogU3Vic2NyaXB0aW9uTWFuYWdlciA9PiB7XG4gIGNvbnN0IG9ialRvU3ViczogT2JqVG9TdWJzY3JpYmVyTWFwID0gbmV3IE1hcCgpO1xuICBjb25zdCBzdWJzVG9PYmpzOiBTdWJzY3JpYmVyVG9TdWJzY3JpYmVyTWFwID0gbmV3IE1hcCgpO1xuXG4gIGNvbnN0IGNsZWFyU3ViID0gKHN1YjogU3Vic2NyaWJlcikgPT4ge1xuICAgIGNvbnN0IHN1YnMgPSBzdWJzVG9PYmpzLmdldChzdWIpO1xuICAgIGlmIChzdWJzKSB7XG4gICAgICBzdWJzLmZvckVhY2goKHMpID0+IHtcbiAgICAgICAgcy5kZWxldGUoc3ViKTtcbiAgICAgIH0pO1xuICAgICAgc3Vic1RvT2Jqcy5kZWxldGUoc3ViKTtcbiAgICAgIHN1YnMuY2xlYXIoKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdHJ5R2V0TG9jYWwgPSAob2JqOiBhbnkpID0+IHtcbiAgICBhc3NlcnRFcXVhbChnZXRQcm94eVRhcmdldChvYmopLCB1bmRlZmluZWQpO1xuICAgIHJldHVybiBvYmpUb1N1YnMuZ2V0KG9iaik7XG4gIH07XG5cbiAgY29uc3QgdHJhY2tTdWJUb09iaiA9IChzdWJzY3JpYmVyOiBTdWJzY3JpYmVyLCBtYXA6IFN1YnNjcmliZXJNYXApID0+IHtcbiAgICBsZXQgc2V0ID0gc3Vic1RvT2Jqcy5nZXQoc3Vic2NyaWJlcik7XG4gICAgaWYgKCFzZXQpIHtcbiAgICAgIHN1YnNUb09ianMuc2V0KHN1YnNjcmliZXIsIChzZXQgPSBuZXcgU2V0KCkpKTtcbiAgICB9XG4gICAgc2V0LmFkZChtYXApO1xuICB9O1xuXG4gIGNvbnN0IGdldExvY2FsID0gKG9iajogYW55LCBpbml0aWFsTWFwPzogU3Vic2NyaWJlck1hcCkgPT4ge1xuICAgIGxldCBsb2NhbCA9IHRyeUdldExvY2FsKG9iaik7XG4gICAgaWYgKGxvY2FsKSB7XG4gICAgICBhc3NlcnRFcXVhbChpbml0aWFsTWFwLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtYXAgPSAhaW5pdGlhbE1hcCA/IChuZXcgTWFwKCkgYXMgU3Vic2NyaWJlck1hcCkgOiBpbml0aWFsTWFwO1xuICAgICAgbWFwLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgICB0cmFja1N1YlRvT2JqKGtleSwgbWFwKTtcbiAgICAgIH0pO1xuICAgICAgb2JqVG9TdWJzLnNldChcbiAgICAgICAgb2JqLFxuICAgICAgICAobG9jYWwgPSB7XG4gICAgICAgICAgJHN1YnMkOiBtYXAsXG4gICAgICAgICAgJGFkZFN1YiQoc3Vic2NyaWJlcjogU3Vic2NyaWJlciwga2V5Pzogc3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgbWFwLnNldChzdWJzY3JpYmVyLCBudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxldCBzdWIgPSBtYXAuZ2V0KHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgICBpZiAoc3ViID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBtYXAuc2V0KHN1YnNjcmliZXIsIChzdWIgPSBuZXcgU2V0KCkpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc3ViKSB7XG4gICAgICAgICAgICAgICAgc3ViLmFkZChrZXkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFja1N1YlRvT2JqKHN1YnNjcmliZXIsIG1hcCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAkbm90aWZ5U3VicyQoa2V5Pzogc3RyaW5nKSB7XG4gICAgICAgICAgICBtYXAuZm9yRWFjaCgodmFsdWUsIHN1YnNjcmliZXIpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8ICFrZXkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlDaGFuZ2Uoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlDaGFuZ2Uoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbG9jYWw7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICAkdHJ5R2V0TG9jYWwkOiB0cnlHZXRMb2NhbCxcbiAgICAkZ2V0TG9jYWwkOiBnZXRMb2NhbCxcbiAgICAkY2xlYXJTdWIkOiBjbGVhclN1YixcbiAgfTtcbn07XG5cbmNsYXNzIFJlYWRXcml0ZVByb3h5SGFuZGxlciBpbXBsZW1lbnRzIFByb3h5SGFuZGxlcjxUYXJnZXRUeXBlPiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgJGNvbnRhaW5lclN0YXRlJDogQ29udGFpbmVyU3RhdGUsXG4gICAgcHJpdmF0ZSAkbWFuYWdlciQ6IExvY2FsU3Vic2NyaXB0aW9uTWFuYWdlcixcbiAgICBwcml2YXRlICRmbGFncyQ6IG51bWJlclxuICApIHt9XG5cbiAgZ2V0KHRhcmdldDogVGFyZ2V0VHlwZSwgcHJvcDogc3RyaW5nIHwgc3ltYm9sKTogYW55IHtcbiAgICBpZiAodHlwZW9mIHByb3AgPT09ICdzeW1ib2wnKSB7XG4gICAgICBpZiAocHJvcCA9PT0gUU9qZWN0VGFyZ2V0U3ltYm9sKSByZXR1cm4gdGFyZ2V0O1xuICAgICAgaWYgKHByb3AgPT09IFFPamVjdEZsYWdzU3ltYm9sKSByZXR1cm4gdGhpcy4kZmxhZ3MkO1xuICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICB9XG4gICAgbGV0IHN1YnNjcmliZXI6IFN1YnNjcmliZXIgfCB1bmRlZmluZWQgfCBudWxsO1xuICAgIGNvbnN0IGludm9rZUN0eCA9IHRyeUdldEludm9rZUNvbnRleHQoKTtcbiAgICBjb25zdCByZWN1cnNpdmUgPSAodGhpcy4kZmxhZ3MkICYgUU9iamVjdFJlY3Vyc2l2ZSkgIT09IDA7XG4gICAgY29uc3QgaW1tdXRhYmxlID0gKHRoaXMuJGZsYWdzJCAmIFFPYmplY3RJbW11dGFibGUpICE9PSAwO1xuICAgIGlmIChpbnZva2VDdHgpIHtcbiAgICAgIHN1YnNjcmliZXIgPSBpbnZva2VDdHguJHN1YnNjcmliZXIkO1xuICAgIH1cbiAgICBsZXQgdmFsdWUgPSB0YXJnZXRbcHJvcF07XG4gICAgaWYgKGlzTXV0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudjtcbiAgICB9IGVsc2UgaWYgKGltbXV0YWJsZSkge1xuICAgICAgc3Vic2NyaWJlciA9IG51bGw7XG4gICAgfVxuICAgIGlmIChzdWJzY3JpYmVyKSB7XG4gICAgICBjb25zdCBpc0EgPSBpc0FycmF5KHRhcmdldCk7XG4gICAgICB0aGlzLiRtYW5hZ2VyJC4kYWRkU3ViJChzdWJzY3JpYmVyLCBpc0EgPyB1bmRlZmluZWQgOiBwcm9wKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlY3Vyc2l2ZSA/IHdyYXAodmFsdWUsIHRoaXMuJGNvbnRhaW5lclN0YXRlJCkgOiB2YWx1ZTtcbiAgfVxuXG4gIHNldCh0YXJnZXQ6IFRhcmdldFR5cGUsIHByb3A6IHN0cmluZyB8IHN5bWJvbCwgbmV3VmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N5bWJvbCcpIHtcbiAgICAgIHRhcmdldFtwcm9wXSA9IG5ld1ZhbHVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGltbXV0YWJsZSA9ICh0aGlzLiRmbGFncyQgJiBRT2JqZWN0SW1tdXRhYmxlKSAhPT0gMDtcbiAgICBpZiAoaW1tdXRhYmxlKSB7XG4gICAgICB0aHJvdyBxRXJyb3IoUUVycm9yX2ltbXV0YWJsZVByb3BzKTtcbiAgICB9XG4gICAgY29uc3QgcmVjdXJzaXZlID0gKHRoaXMuJGZsYWdzJCAmIFFPYmplY3RSZWN1cnNpdmUpICE9PSAwO1xuICAgIGNvbnN0IHVud3JhcHBlZE5ld1ZhbHVlID0gcmVjdXJzaXZlID8gdW53cmFwUHJveHkobmV3VmFsdWUpIDogbmV3VmFsdWU7XG4gICAgaWYgKHFEZXYpIHtcbiAgICAgIHZlcmlmeVNlcmlhbGl6YWJsZSh1bndyYXBwZWROZXdWYWx1ZSk7XG4gICAgICBjb25zdCBpbnZva2VDdHggPSB0cnlHZXRJbnZva2VDb250ZXh0KCk7XG4gICAgICBpZiAoaW52b2tlQ3R4ICYmIGludm9rZUN0eC4kZXZlbnQkID09PSBSZW5kZXJFdmVudCkge1xuICAgICAgICBsb2dXYXJuKFxuICAgICAgICAgICdTdGF0ZSBtdXRhdGlvbiBpbnNpZGUgcmVuZGVyIGZ1bmN0aW9uLiBNb3ZlIG11dGF0aW9uIHRvIHVzZVdhdGNoKCksIHVzZUNsaWVudEVmZmVjdCgpIG9yIHVzZVNlcnZlck1vdW50KCknLFxuICAgICAgICAgIGludm9rZUN0eC4kaG9zdEVsZW1lbnQkLFxuICAgICAgICAgIHByb3BcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXNBID0gaXNBcnJheSh0YXJnZXQpO1xuICAgIGlmIChpc0EpIHtcbiAgICAgIHRhcmdldFtwcm9wIGFzIGFueV0gPSB1bndyYXBwZWROZXdWYWx1ZTtcbiAgICAgIHRoaXMuJG1hbmFnZXIkLiRub3RpZnlTdWJzJCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRbcHJvcF07XG4gICAgaWYgKG9sZFZhbHVlICE9PSB1bndyYXBwZWROZXdWYWx1ZSkge1xuICAgICAgdGFyZ2V0W3Byb3BdID0gdW53cmFwcGVkTmV3VmFsdWU7XG4gICAgICB0aGlzLiRtYW5hZ2VyJC4kbm90aWZ5U3VicyQocHJvcCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaGFzKHRhcmdldDogVGFyZ2V0VHlwZSwgcHJvcGVydHk6IHN0cmluZyB8IHN5bWJvbCkge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gUU9qZWN0VGFyZ2V0U3ltYm9sKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAocHJvcGVydHkgPT09IFFPamVjdEZsYWdzU3ltYm9sKSByZXR1cm4gdHJ1ZTtcblxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gIH1cblxuICBvd25LZXlzKHRhcmdldDogVGFyZ2V0VHlwZSk6IEFycmF5TGlrZTxzdHJpbmcgfCBzeW1ib2w+IHtcbiAgICBsZXQgc3Vic2NyaWJlcjogU3Vic2NyaWJlciB8IG51bGwgfCB1bmRlZmluZWQgPSBudWxsO1xuICAgIGNvbnN0IGludm9rZUN0eCA9IHRyeUdldEludm9rZUNvbnRleHQoKTtcbiAgICBpZiAoaW52b2tlQ3R4KSB7XG4gICAgICBzdWJzY3JpYmVyID0gaW52b2tlQ3R4LiRzdWJzY3JpYmVyJDtcbiAgICB9XG4gICAgaWYgKHN1YnNjcmliZXIpIHtcbiAgICAgIHRoaXMuJG1hbmFnZXIkLiRhZGRTdWIkKHN1YnNjcmliZXIpO1xuICAgIH1cbiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTtcbiAgfVxufVxuXG5jb25zdCB3cmFwID0gPFQ+KHZhbHVlOiBULCBjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUpOiBUID0+IHtcbiAgaWYgKGlzUXJsKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgaWYgKE9iamVjdC5pc0Zyb3plbih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgbmFrZWRWYWx1ZSA9IHVud3JhcFByb3h5KHZhbHVlKTtcbiAgICBpZiAobmFrZWRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBwcm94eSByZXR1cm47XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChpc05vZGUobmFrZWRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKCFzaG91bGRTZXJpYWxpemUobmFrZWRWYWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHFEZXYpIHtcbiAgICAgIHZlcmlmeVNlcmlhbGl6YWJsZTxUPih2YWx1ZSk7XG4gICAgfVxuICAgIGNvbnN0IHByb3h5ID0gY29udGFpbmVyU3RhdGUuJHByb3h5TWFwJC5nZXQodmFsdWUpO1xuICAgIHJldHVybiBwcm94eSA/IHByb3h5IDogZ2V0T3JDcmVhdGVQcm94eSh2YWx1ZSBhcyBhbnksIGNvbnRhaW5lclN0YXRlLCBRT2JqZWN0UmVjdXJzaXZlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB2ZXJpZnlTZXJpYWxpemFibGUgPSA8VD4odmFsdWU6IFQpOiBUID0+IHtcbiAgY29uc3Qgc2VlbiA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIF92ZXJpZnlTZXJpYWxpemFibGUodmFsdWUsIHNlZW4pO1xufTtcblxuY29uc3QgX3ZlcmlmeVNlcmlhbGl6YWJsZSA9IDxUPih2YWx1ZTogVCwgc2VlbjogU2V0PGFueT4pOiBUID0+IHtcbiAgY29uc3QgdW53cmFwcGVkID0gdW53cmFwUHJveHkodmFsdWUpO1xuICBpZiAodW53cmFwcGVkID09IG51bGwpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHNob3VsZFNlcmlhbGl6ZSh1bndyYXBwZWQpKSB7XG4gICAgaWYgKHNlZW4uaGFzKHVud3JhcHBlZCkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgc2Vlbi5hZGQodW53cmFwcGVkKTtcbiAgICBpZiAoaXNRcmwodW53cmFwcGVkKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGVvZiB1bndyYXBwZWQpIHtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmIChpc0FycmF5KHVud3JhcHBlZCkpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdW53cmFwcGVkKSB7XG4gICAgICAgICAgICBfdmVyaWZ5U2VyaWFsaXphYmxlKGl0ZW0sIHNlZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih1bndyYXBwZWQpID09PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIE9iamVjdC52YWx1ZXModW53cmFwcGVkKSkge1xuICAgICAgICAgICAgX3ZlcmlmeVNlcmlhbGl6YWJsZShpdGVtLCBzZWVuKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UodW53cmFwcGVkKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICBpZiAoaXNFbGVtZW50KHVud3JhcHBlZCkpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgaWYgKGlzRG9jdW1lbnQodW53cmFwcGVkKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdGhyb3cgcUVycm9yKFFFcnJvcl92ZXJpZnlTZXJpYWxpemFibGUsIHVud3JhcHBlZCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcbmNvbnN0IG5vU2VyaWFsaXplU2V0ID0gLyojX19QVVJFX18qLyBuZXcgV2Vha1NldDxhbnk+KCk7XG5cbmV4cG9ydCBjb25zdCBzaG91bGRTZXJpYWxpemUgPSAob2JqOiBhbnkpOiBib29sZWFuID0+IHtcbiAgaWYgKGlzT2JqZWN0KG9iaikgfHwgaXNGdW5jdGlvbihvYmopKSB7XG4gICAgcmV0dXJuICFub1NlcmlhbGl6ZVNldC5oYXMob2JqKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCB0eXBlIE5vU2VyaWFsaXplPFQ+ID0gKFQgJiB7IF9fbm9fc2VyaWFsaXplX186IHRydWUgfSkgfCB1bmRlZmluZWQ7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI25vU2VyaWFsaXplXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI25vU2VyaWFsaXplIGluc3RlYWQpXG4vKipcbiAqIE1hcmtzIGEgcHJvcGVydHkgb24gYSBzdG9yZSBhcyBub24tc2VyaWFsaXphYmxlLlxuICpcbiAqIEF0IHRpbWVzIGl0IGlzIG5lY2Vzc2FyeSB0byBzdG9yZSB2YWx1ZXMgb24gYSBzdG9yZSB0aGF0IGFyZSBub24tc2VyaWFsaXphYmxlLiBOb3JtYWxseSB0aGlzXG4gKiBpcyBhIHJ1bnRpbWUgZXJyb3IgYXMgU3RvcmUgd2FudHMgdG8gZWFnZXJseSByZXBvcnQgd2hlbiBhIG5vbi1zZXJpYWxpemFibGUgcHJvcGVydHkgaXNcbiAqIGFzc2lnbmVkIHRvIGl0LlxuICpcbiAqIFlvdSBjYW4gdXNlIGBub1NlcmlhbGl6ZSgpYCB0byBtYXJrIGEgdmFsdWUgYXMgbm9uLXNlcmlhbGl6YWJsZS4gVGhlIHZhbHVlIGlzIHBlcnNpc3RlZCBpbiB0aGVcbiAqIFN0b3JlIGJ1dCBkb2VzIG5vdCBzdXJ2aXZlIHNlcmlhbGl6YXRpb24uIFRoZSBpbXBsaWNhdGlvbiBpcyB0aGF0IHdoZW4geW91ciBhcHBsaWNhdGlvbiBpc1xuICogcmVzdW1lZCwgdGhlIHZhbHVlIG9mIHRoaXMgb2JqZWN0IHdpbGwgYmUgYHVuZGVmaW5lZGAuIFlvdSB3aWxsIGJlIHJlc3BvbnNpYmxlIGZvciByZWNvdmVyaW5nXG4gKiBmcm9tIHRoaXMuXG4gKlxuICogU2VlOiBbbm9TZXJpYWxpemUgVHV0b3JpYWxdKGh0dHA6Ly9xd2lrLmJ1aWxkZXIuaW8vdHV0b3JpYWwvc3RvcmUvbm8tc2VyaWFsaXplKVxuICpcbiAqIEBhbHBoYVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3Qgbm9TZXJpYWxpemUgPSA8VCBleHRlbmRzIHt9PihpbnB1dDogVCk6IE5vU2VyaWFsaXplPFQ+ID0+IHtcbiAgbm9TZXJpYWxpemVTZXQuYWRkKGlucHV0KTtcbiAgcmV0dXJuIGlucHV0IGFzIGFueTtcbn07XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI2ltbXV0YWJsZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbW11dGFibGUgaW5zdGVhZClcbi8qKlxuICogTWFyayBhbiBvYmplY3QgYXMgaW1tdXRhYmxlLCBwcmV2ZW50aW5nIFF3aWsgZnJvbSBjcmVhdGluZyBzdWJzY3JpcHRpb25zIG9uIHRoYXQgb2JqZWN0LlxuICpcbiAqIFF3aWsgYXV0b21hdGljYWxseSBjcmVhdGVzIHN1YnNjcmlwdGlvbnMgb24gc3RvcmUgb2JqZWN0cyBjcmVhdGVkIGJ5IGB1c2VTdG9yZSgpYC4gQnkgbWFya2luZ1xuICogYW4gb2JqZWN0IGFzIGBpbW11dGFibGVgLCBpdCBoaW50cyB0byBRd2lrIHRoYXQgdGhlIHByb3BlcnRpZXMgb2YgdGhpcyBvYmplY3Qgd2lsbCBub3QgY2hhbmdlLFxuICogYW5kIHRoZXJlZm9yZSB0aGVyZSBpcyBubyBuZWVkIHRvIGNyZWF0ZSBzdWJzY3JpcHRpb25zIGZvciB0aG9zZSBvYmplY3RzLlxuICpcbiAqIEBhbHBoYVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgaW1tdXRhYmxlID0gPFQgZXh0ZW5kcyB7fT4oaW5wdXQ6IFQpOiBSZWFkb25seTxUPiA9PiB7XG4gIHJldHVybiBPYmplY3QuZnJlZXplKGlucHV0KTtcbn07XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI211dGFibGVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjbXV0YWJsZSBpbnN0ZWFkKVxuLyoqXG4gKiBNYXJrIHByb3BlcnR5IGFzIG11dGFibGUuXG4gKlxuICogUXdpayBhc3N1bWVzIHRoYXQgYWxsIGJpbmRpbmdzIGluIGNvbXBvbmVudHMgYXJlIGltbXV0YWJsZSBieSBkZWZhdWx0LiBUaGlzIGlzIGRvbmUgZm9yIHR3b1xuICogcmVhc29uczpcbiAqXG4gKiAxLiBKU1ggZG9lcyBub3QgYWxsb3cgUXdpayBydW50aW1lIHRvIGtub3cgaWYgYSBiaW5kaW5nIGlzIHN0YXRpYyBvciBtdXRhYmxlLlxuICogICAgYDxFeGFtcGxlIHZhbHVlQT17MTIzfSB2YWx1ZUI9e2V4cH0+YCBBdCBydW50aW1lIHRoZXJlIGlzIG5vIHdheSB0byBrbm93IGlmIGB2YWx1ZUFgIGlzXG4gKiBpbW11dGFibGUuXG4gKiAyLiBJZiBRd2lrIGFzc3VtZXMgdGhhdCBwcm9wZXJ0aWVzIGFyZSBpbW11dGFibGUsIHRoZW4gaXQgY2FuIGRvIGEgYmV0dGVyIGpvYiBkYXRhLXNoYWtpbmcgdGhlXG4gKiBhbW91bnQgb2YgY29kZSB0aGF0IG5lZWRzIHRvIGJlIHNlcmlhbGl6ZWQgdG8gdGhlIGNsaWVudC5cbiAqXG4gKiBCZWNhdXNlIFF3aWsgYXNzdW1lcyB0aGF0IGJpbmRpbmdzIGFyZSBpbW11dGFibGUgYnkgZGVmYXVsdCwgaXQgbmVlZHMgYSB3YXkgZm9yIGEgZGV2ZWxvcGVyIHRvXG4gKiBsZXQgaXQga25vdyB0aGF0IGJpbmRpbmcgaXMgbXV0YWJsZS4gYG11dGFibGUoKWAgZnVuY3Rpb24gc2VydmVzIHRoYXQgcHVycG9zZS5cbiAqIGA8RXhhbXBsZSB2YWx1ZUE9ezEyM30gdmFsdWVCPXttdXRhYmxlKGV4cCl9PmAuIEluIHRoaXMgY2FzZSwgdGhlIFF3aWsgcnVudGltZSBjYW4gY29ycmVjdGx5XG4gKiByZWNvZ25pemUgdGhhdCB0aGUgYEV4YW1wbGVgIHByb3BzIGFyZSBtdXRhYmxlIGFuZCBuZWVkIHRvIGJlIHNlcmlhbGl6ZWQuXG4gKlxuICogU2VlOiBbTXV0YWJsZSBQcm9wcyBUdXRvcmlhbF0oaHR0cDovL3F3aWsuYnVpbGRlci5pby90dXRvcmlhbC9wcm9wcy9tdXRhYmxlKSBmb3IgYW4gZXhhbXBsZVxuICpcbiAqIEBhbHBoYVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgbXV0YWJsZSA9IDxUPih2OiBUKTogTXV0YWJsZVdyYXBwZXI8VD4gPT4ge1xuICByZXR1cm4ge1xuICAgIFtNVVRBQkxFXTogdHJ1ZSxcbiAgICB2LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQ29ubmVjdGVkID0gKHN1YjogU3Vic2NyaWJlcik6IGJvb2xlYW4gPT4ge1xuICBpZiAoaXNFbGVtZW50KHN1YikpIHtcbiAgICByZXR1cm4gISF0cnlHZXRDb250ZXh0KHN1YikgfHwgc3ViLmlzQ29ubmVjdGVkO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpc0Nvbm5lY3RlZChzdWIuZWwpO1xuICB9XG59O1xuXG5jb25zdCBNVVRBQkxFID0gU3ltYm9sKCdtdXRhYmxlJyk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI011dGFibGVXcmFwcGVyXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI011dGFibGVXcmFwcGVyIGluc3RlYWQpXG4vKipcbiAqIEEgbWFya2VyIG9iamVjdCByZXR1cm5lZCBieSBgbXV0YWJsZSgpYCB0byBpZGVudGlmeSB0aGF0IHRoZSBiaW5kaW5nIGlzIG11dGFibGUuXG4gKlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBpbnRlcmZhY2UgTXV0YWJsZVdyYXBwZXI8VD4ge1xuICAvKipcbiAgICogQSBtYXJrZXIgc3ltYm9sLlxuICAgKi9cbiAgW01VVEFCTEVdOiB0cnVlO1xuICAvKipcbiAgICogTXV0YWJsZSB2YWx1ZS5cbiAgICovXG4gIHY6IFQ7XG59XG5cbmV4cG9ydCBjb25zdCBpc011dGFibGUgPSAodjogYW55KTogdiBpcyBNdXRhYmxlV3JhcHBlcjxhbnk+ID0+IHtcbiAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHZbTVVUQUJMRV0gPT09IHRydWU7XG59O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgdW53cmFwUHJveHkgPSA8VD4ocHJveHk6IFQpOiBUID0+IHtcbiAgcmV0dXJuIGdldFByb3h5VGFyZ2V0PFQ+KHByb3h5KSA/PyBwcm94eTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRQcm94eVRhcmdldCA9IDxUID0gUmVjb3JkPHN0cmluZywgYW55Pj4ob2JqOiBUKTogVCB8IHVuZGVmaW5lZCA9PiB7XG4gIGlmIChpc09iamVjdChvYmopKSB7XG4gICAgcmV0dXJuIChvYmogYXMgYW55KVtRT2plY3RUYXJnZXRTeW1ib2xdO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UHJveHlGbGFncyA9IDxUID0gUmVjb3JkPHN0cmluZywgYW55Pj4ob2JqOiBUKTogbnVtYmVyIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICByZXR1cm4gKG9iaiBhcyBhbnkpW1FPamVjdEZsYWdzU3ltYm9sXTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdfQ==","import { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { verifySerializable } from '../object/q-object';\nimport { getPlatform } from '../platform/platform';\nimport { newInvokeContext, useInvoke } from '../use/use-core';\nimport { then } from '../util/promises';\nimport { qDev } from '../util/qdev';\nimport { isFunction } from '../util/types';\nimport { stringifyQRL } from './qrl';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\nexport const createQrl = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev) {\n        verifySerializable(captureRef);\n    }\n    let cachedEl;\n    const setContainer = (el) => {\n        if (!cachedEl) {\n            cachedEl = el;\n        }\n    };\n    const resolve = async (el) => {\n        if (el) {\n            setContainer(el);\n        }\n        if (symbolRef) {\n            return symbolRef;\n        }\n        if (symbolFn) {\n            return (symbolRef = symbolFn().then((module) => (symbolRef = module[symbol])));\n        }\n        else {\n            if (!cachedEl) {\n                throw new Error(`QRL '${chunk}#${symbol || 'default'}' does not have an attached container`);\n            }\n            const symbol2 = getPlatform(cachedEl).importSymbol(cachedEl, chunk, symbol);\n            return (symbolRef = then(symbol2, (ref) => {\n                return (symbolRef = ref);\n            }));\n        }\n    };\n    const resolveLazy = (el) => {\n        return isFunction(symbolRef) ? symbolRef : resolve(el);\n    };\n    const invokeFn = (el, currentCtx, beforeFn) => {\n        return ((...args) => {\n            const fn = resolveLazy(el);\n            return then(fn, (fn) => {\n                if (isFunction(fn)) {\n                    const baseContext = currentCtx ?? newInvokeContext();\n                    const context = {\n                        ...baseContext,\n                        $qrl$: QRL,\n                    };\n                    if (beforeFn) {\n                        beforeFn();\n                    }\n                    return useInvoke(context, fn, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        });\n    };\n    const invoke = async function (...args) {\n        const fn = invokeFn();\n        const result = await fn(...args);\n        return result;\n    };\n    const QRL = invoke;\n    const methods = {\n        getSymbol: () => refSymbol ?? symbol,\n        getHash: () => getSymbolHash(refSymbol ?? symbol),\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        get $capture$() {\n            return capture;\n        },\n        set $capture$(v) {\n            capture = v;\n        },\n        get $captureRef$() {\n            return captureRef;\n        },\n        set $captureRef$(v) {\n            captureRef = v;\n        },\n        $invokeFn$: invokeFn,\n        $copy$() {\n            return createQrl(chunk, symbol, symbolRef, symbolFn, null, captureRef, refSymbol);\n        },\n        $serialize$(options) {\n            return stringifyQRL(QRL, options);\n        },\n    };\n    return Object.assign(invoke, methods);\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport const isSameQRL = (a, b) => {\n    return a.getHash() === b.getHash();\n};\nexport function assertQrl(qrl) {\n    if (!isQrl(qrl)) {\n        throw new Error('Not a QRL');\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQrl } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { getDocument } from '../util/dom';\nimport { logError } from '../util/log';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { codeToText, qError, QError_dynamicImportFailed, QError_runtimeQrlNoElement, QError_unknownTypeArgument, } from '../error/error';\nlet runtimeSymbolId = 0;\nconst RUNTIME_QRL = '/runtimeQRL';\nconst INLINED_QRL = '/inlinedQRL';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @see `QRL`, `$(...)`\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - a set of lexically scoped variables to capture.\n * @alpha\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    let chunk;\n    let symbolFn = null;\n    if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        let match;\n        const srcCode = String(chunkOrFn);\n        if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n            chunk = match[2];\n        }\n        else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n            const ref = 'QWIK-SELF';\n            const frames = new Error(ref).stack.split('\\n');\n            const start = frames.findIndex((f) => f.includes(ref));\n            const frame = frames[start + 2];\n            match = frame.match(EXTRACT_FILE_NAME);\n            if (!match) {\n                chunk = 'main';\n            }\n            else {\n                chunk = match[1];\n            }\n        }\n        else {\n            throw qError(QError_dynamicImportFailed, srcCode);\n        }\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    // Unwrap subscribers\n    const qrl = createQrl(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n    const ctx = tryGetInvokeContext();\n    if (ctx && ctx.$element$) {\n        qrl.$setContainer$(ctx.$element$);\n    }\n    return qrl;\n};\nexport const runtimeQrl = (symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQrl(RUNTIME_QRL, 's' + runtimeSymbolId++, symbol, null, null, lexicalScopeCapture, null);\n};\n/**\n * @alpha\n */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQrl(INLINED_QRL, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\nexport const stringifyQRL = (qrl, opts = {}) => {\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = opts.$platform$;\n    const element = opts.$element$;\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    const parts = [chunk];\n    if (symbol && symbol !== 'default') {\n        parts.push('#', symbol);\n    }\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (opts.$getObjId$) {\n        if (captureRef && captureRef.length) {\n            const capture = captureRef.map(opts.$getObjId$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n    }\n    else if (capture && capture.length > 0) {\n        parts.push(`[${capture.join(' ')}]`);\n    }\n    const qrlString = parts.join('');\n    if (qrl.$chunk$ === RUNTIME_QRL && element) {\n        const qrls = element.__qrls__ || (element.__qrls__ = new Set());\n        qrls.add(qrl);\n    }\n    return qrlString;\n};\nexport const qrlToUrl = (element, qrl) => {\n    return new URL(stringifyQRL(qrl), getDocument(element).baseURI);\n};\n/**\n * `./chunk#symbol[captures]\n */\nexport const parseQRL = (qrl, el) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    if (chunk === RUNTIME_QRL) {\n        logError(codeToText(QError_runtimeQrlNoElement), qrl);\n    }\n    const iQrl = createQrl(chunk, symbol, null, null, capture, null, null);\n    if (el) {\n        iQrl.$setContainer$(el);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\n//# sourceMappingURL=data:application/json;base64,","import { runtimeQrl } from './qrl';\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n * import { importedFn } from './import/example';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(importedFn); // importedFn is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => importedFn()); // importedFn is importable\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n */\n// </docs>\nexport const $ = (expression) => {\n    return runtimeQrl(expression);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\nimport { OnRenderProp } from '../util/markers';\nimport { jsx } from '../render/jsx/jsx-runtime';\nconst ELEMENTS_SKIP_KEY = ['html', 'body', 'head'];\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`, `useScopedStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (onRenderQrl, options = {}) => {\n    const tagName = options.tagName ?? 'div';\n    const skipKey = ELEMENTS_SKIP_KEY.includes(tagName);\n    // Return a QComponent Factory function.\n    return function QSimpleComponent(props, key) {\n        const finalKey = skipKey ? undefined : onRenderQrl.getHash() + ':' + (key ? key : '');\n        return jsx(tagName, { [OnRenderProp]: onRenderQrl, ...props }, finalKey);\n    };\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example:\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`, `useScopedStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount, options) => {\n    return componentQrl($(onMount), options);\n};\n//# sourceMappingURL=data:application/json;base64,","/* eslint-disable */\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { JSXNodeImpl } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * @public\n */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : EMPTY_ARRAY,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    return new JSXNodeImpl(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFrQixFQUFFLEdBQVMsRUFBTyxFQUFFO0lBQ3BFLG9GQUFvRjtJQUNwRixJQUFJLENBQUMsR0FBRztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxDQUFDLENBQ2YsSUFBVSxFQUNWLEtBQW1CLEVBQ25CLEdBQUcsUUFBZTtJQUVsQixpREFBaUQ7SUFDakQsMENBQTBDO0lBQzFDLDZFQUE2RTtJQUM3RSwwREFBMEQ7SUFFMUQsTUFBTSxlQUFlLEdBQVE7UUFDM0IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDdEUsQ0FBQztJQUVGLElBQUksR0FBUSxDQUFDO0lBQ2IsSUFBSSxDQUFNLENBQUM7SUFFWCxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDZixJQUFJLENBQUMsSUFBSSxLQUFLO1lBQUUsR0FBRyxHQUFJLEtBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQ25ELGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlsL2ZseXdlaWdodCc7XG5pbXBvcnQgeyBKU1hOb2RlSW1wbCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuQXJyYXkgPSA8VD4oYXJyYXk6IChUIHwgVFtdKVtdLCBkc3Q/OiBUW10pOiBUW10gPT4ge1xuICAvLyBZZXMgdGhpcyBmdW5jdGlvbiBpcyBqdXN0IEFycmF5LmZsYXQsIGJ1dCB3ZSBuZWVkIHRvIHJ1biBvbiBvbGQgdmVyc2lvbnMgb2YgTm9kZS5cbiAgaWYgKCFkc3QpIGRzdCA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXkpIHtcbiAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgZmxhdHRlbkFycmF5KGl0ZW0sIGRzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoPFRZUEUgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxQUk9QUz4sIFBST1BTIGV4dGVuZHMge30gPSB7fT4oXG4gIHR5cGU6IFRZUEUsXG4gIHByb3BzOiBQUk9QUyB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBhbnlbXVxuKTogSlNYTm9kZTxUWVBFPiB7XG4gIC8vIFVzaW5nIGxlZ2FjeSBoKCkganN4IHRyYW5zZm9ybSBhbmQgbW9ycGhpbmcgaXRcbiAgLy8gc28gaXQgY2FuIHVzZSB0aGUgbW9kZXJuIHZkb20gc3RydWN0dXJlXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvYmxvZy8yMDIwLzA5LzIyL2ludHJvZHVjaW5nLXRoZS1uZXctanN4LXRyYW5zZm9ybS5odG1sXG4gIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy90c2NvbmZpZyNqc3hJbXBvcnRTb3VyY2VcblxuICBjb25zdCBub3JtYWxpemVkUHJvcHM6IGFueSA9IHtcbiAgICBjaGlsZHJlbjogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBmbGF0dGVuQXJyYXkoY2hpbGRyZW4pIDogRU1QVFlfQVJSQVksXG4gIH07XG5cbiAgbGV0IGtleTogYW55O1xuICBsZXQgaTogYW55O1xuXG4gIGZvciAoaSBpbiBwcm9wcykge1xuICAgIGlmIChpID09ICdrZXknKSBrZXkgPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gICAgZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IEpTWE5vZGVJbXBsKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5KTtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBoIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBOb2RlLCBkYXRhOiBhbnkpOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGNoaWxkcmVuOiBBcnJheTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGRhdGE6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChcbiAgICB0eXBlOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIGNoaWxkcmVuOiBBcnJheTxKU1hOb2RlPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPlxuICApOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHNlbDogYW55LCBkYXRhOiBhbnkgfCBudWxsLCBjaGlsZHJlbjogSlNYTm9kZTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuXG4gIGV4cG9ydCBuYW1lc3BhY2UgSlNYIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBRd2lrSlNYLkVsZW1lbnQge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBRd2lrSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNFbGVtZW50cyB7fVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHtcbiAgICAgIGNoaWxkcmVuPzogYW55O1xuICAgIH1cbiAgfVxufVxuIl19","import { QSlot } from '../../util/markers';\nimport { isArray } from '../../util/types';\nimport { jsx } from './jsx-runtime';\n/**\n * @public\n */\nexport const Slot = (props) => {\n    const hasChildren = props.children || (isArray(props.children) && props.children.length > 0);\n    const newChildrem = !hasChildren\n        ? []\n        : jsx('q:fallback', {\n            children: props.children,\n        });\n    return jsx(QSlot, {\n        name: props.name,\n        children: newChildrem,\n    }, props.name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBR1osQ0FBQyxLQUFLLEVBQUUsRUFBRTtJQUNiLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdGLE1BQU0sV0FBVyxHQUFHLENBQUMsV0FBVztRQUM5QixDQUFDLENBQUMsRUFBRTtRQUNKLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFO1lBQ2hCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtTQUN6QixDQUFDLENBQUM7SUFFUCxPQUFPLEdBQUcsQ0FDUixLQUFLLEVBQ0w7UUFDRSxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7UUFDaEIsUUFBUSxFQUFFLFdBQVc7S0FDdEIsRUFDRCxLQUFLLENBQUMsSUFBSSxDQUNYLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRU2xvdCB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICcuL2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBTbG90OiBGdW5jdGlvbkNvbXBvbmVudDx7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogYW55O1xufT4gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgaGFzQ2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbiB8fCAoaXNBcnJheShwcm9wcy5jaGlsZHJlbikgJiYgcHJvcHMuY2hpbGRyZW4ubGVuZ3RoID4gMCk7XG4gIGNvbnN0IG5ld0NoaWxkcmVtID0gIWhhc0NoaWxkcmVuXG4gICAgPyBbXVxuICAgIDoganN4KCdxOmZhbGxiYWNrJywge1xuICAgICAgICBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW4sXG4gICAgICB9KTtcblxuICByZXR1cm4ganN4KFxuICAgIFFTbG90LFxuICAgIHtcbiAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICBjaGlsZHJlbjogbmV3Q2hpbGRyZW0sXG4gICAgfSxcbiAgICBwcm9wcy5uYW1lXG4gICk7XG59O1xuIl19","/**\n * QWIK_VERSION\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBSSxVQUFrQixDQUFDLFlBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFFXSUtfVkVSU0lPTlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IChnbG9iYWxUaGlzIGFzIGFueSkuUVdJS19WRVJTSU9OIGFzIHN0cmluZztcbiJdfQ==","import { isDocument } from '../util/element';\nimport { createRenderContext, executeContext, printRenderStats } from './cursor';\nimport { isJSXNode, jsx, processData } from './jsx/jsx-runtime';\nimport { visitJsxNode } from './render';\nimport { getContainerState } from './notify-render';\nimport { getDocument } from '../util/dom';\nimport { qDev, qTest } from '../util/qdev';\nimport { version } from '../version';\nimport { QContainerAttr } from '../util/markers';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { runWatch, WatchFlagsIsDirty } from '../use/use-watch';\nimport { appendQwikDevTools, getContext } from '../props/props';\nimport { codeToText, QError_cannotRenderOverExistingContainer } from '../error/error';\nimport { directSetAttribute } from './fast-calls';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means\n * it always tries to reuse what is already in the DOM (rather then destroy and\n * recreate content.)\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When\n *     possible the rendering will try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @alpha\n */\nexport const render = async (parent, jsxNode) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        logError(codeToText(QError_cannotRenderOverExistingContainer));\n        return;\n    }\n    injectQContainer(containerEl);\n    const containerState = getContainerState(containerEl);\n    // containerState.$hostsRendering$ = new Set();\n    const ctx = createRenderContext(doc, containerState, containerEl);\n    ctx.$roots$.push(parent);\n    const processedNodes = await processData(jsxNode);\n    await visitJsxNode(ctx, parent, processedNodes, false);\n    executeContext(ctx);\n    if (!qTest) {\n        injectQwikSlotCSS(parent);\n    }\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n        printRenderStats(ctx);\n    }\n    const promises = [];\n    ctx.$hostElements$.forEach((host) => {\n        const elCtx = getContext(host);\n        elCtx.$watches$.forEach((watch) => {\n            if (watch.f & WatchFlagsIsDirty) {\n                try {\n                    promises.push(runWatch(watch, containerState));\n                }\n                catch (e) {\n                    logErrorAndStop(e);\n                }\n            }\n        });\n    });\n    await Promise.all(promises);\n};\nexport const injectQwikSlotCSS = (docOrElm) => {\n    const doc = getDocument(docOrElm);\n    const element = isDocument(docOrElm) ? docOrElm.head : docOrElm;\n    const style = doc.createElement('style');\n    directSetAttribute(style, 'id', 'qwik/base-styles');\n    style.textContent = `q\\\\:slot{display:contents}q\\\\:fallback,q\\\\:template{display:none}q\\\\:fallback:last-child{display:contents}`;\n    element.insertBefore(style, element.firstChild);\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version || '');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../assert/assert';\nimport { useInvokeContext } from './use-core';\n// <docs markdown=\"../readme.md#useHostElement\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useHostElement instead)\n/**\n * Retrieves the Host Element of the current component.\n *\n * NOTE: `useHostElement` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * ```tsx\n * const Section = component$(\n *   () => {\n *     const hostElement = useHostElement();\n *     console.log(hostElement); // hostElement is a HTMLSectionElement\n *\n *     return <Host>I am a section</Host>;\n *   },\n *   {\n *     tagName: 'section',\n *   }\n * );\n * ```\n *\n * @public\n */\n// </docs>\nexport const useHostElement = () => {\n    const ctx = useInvokeContext();\n    const element = ctx.$hostElement$;\n    assertDefined(element);\n    return element;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWhvc3QtZWxlbWVudC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1ob3N0LWVsZW1lbnQucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFOUMsZ0RBQWdEO0FBQ2hELHlDQUF5QztBQUN6Qyw2Q0FBNkM7QUFDN0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXFCRztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsR0FBWSxFQUFFO0lBQzFDLE1BQU0sR0FBRyxHQUFHLGdCQUFnQixFQUFFLENBQUM7SUFDL0IsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLGFBQWMsQ0FBQztJQUNuQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkIsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHsgdXNlSW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VIb3N0RWxlbWVudFwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VIb3N0RWxlbWVudCBpbnN0ZWFkKVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIEhvc3QgRWxlbWVudCBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuXG4gKlxuICogTk9URTogYHVzZUhvc3RFbGVtZW50YCBtZXRob2QgY2FuIG9ubHkgYmUgdXNlZCBpbiB0aGUgc3luY2hyb25vdXMgcG9ydGlvbiBvZiB0aGUgY2FsbGJhY2tcbiAqIChiZWZvcmUgYW55IGBhd2FpdGAgc3RhdGVtZW50cy4pXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBTZWN0aW9uID0gY29tcG9uZW50JChcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnN0IGhvc3RFbGVtZW50ID0gdXNlSG9zdEVsZW1lbnQoKTtcbiAqICAgICBjb25zb2xlLmxvZyhob3N0RWxlbWVudCk7IC8vIGhvc3RFbGVtZW50IGlzIGEgSFRNTFNlY3Rpb25FbGVtZW50XG4gKlxuICogICAgIHJldHVybiA8SG9zdD5JIGFtIGEgc2VjdGlvbjwvSG9zdD47XG4gKiAgIH0sXG4gKiAgIHtcbiAqICAgICB0YWdOYW1lOiAnc2VjdGlvbicsXG4gKiAgIH1cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VIb3N0RWxlbWVudCA9ICgpOiBFbGVtZW50ID0+IHtcbiAgY29uc3QgY3R4ID0gdXNlSW52b2tlQ29udGV4dCgpO1xuICBjb25zdCBlbGVtZW50ID0gY3R4LiRob3N0RWxlbWVudCQhO1xuICBhc3NlcnREZWZpbmVkKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudDtcbn07XG4iXX0=","import { useSequentialScope } from './use-store.public';\nimport { setAttribute } from '../render/cursor';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { getContext } from '../props/props';\nimport { QCtxAttr } from '../util/markers';\nimport { qError, QError_notFoundContext } from '../error/error';\n// <docs markdown=\"./use-context.docs.md#createContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./use-context.docs.md#createContext instead)\n/**\n * Create a context ID to be used in your application.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContext()` to create a `Context`. `Context` is just a serializable identifier for\n * the context. It is not the context value itself. See `useContextProvider()` and `useContext()`\n * for the values. Qwik needs a serializable ID for the context so that the it can track context\n * providers and consumers in a way that survives resumability.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param name - The name of the context.\n * @alpha\n */\n// </docs>\nexport const createContext = (name) => {\n    return Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"./use-context.docs.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./use-context.docs.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assign use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @alpha\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    const hostElement = ctx.$hostElement$;\n    const renderCtx = ctx.$renderCtx$;\n    const hostCtx = getContext(hostElement);\n    let contexts = hostCtx.$contexts$;\n    if (!contexts) {\n        hostCtx.$contexts$ = contexts = new Map();\n    }\n    contexts.set(context.id, newValue);\n    const serializedContexts = [];\n    contexts.forEach((_, key) => {\n        serializedContexts.push(`${key}`);\n    });\n    setAttribute(renderCtx, hostElement, QCtxAttr, serializedContexts.join(' '));\n    set(true);\n};\n// <docs markdown=\"./use-context.docs.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./use-context.docs.md#useContext instead)\n/**\n * Retrive Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a\n * parent component needs to invoke `useContextProvider()` to assign a value.\n *\n * ## Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to retrieve a value from.\n * @alpha\n */\n// </docs>\nexport const useContext = (context) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return get;\n    }\n    let hostElement = ctx.$hostElement$;\n    const contexts = ctx.$renderCtx$.$contexts$;\n    for (let i = contexts.length - 1; i >= 0; i--) {\n        const ctx = contexts[i];\n        hostElement = ctx.$element$;\n        if (ctx.$contexts$) {\n            const found = ctx.$contexts$.get(context.id);\n            if (found) {\n                set(found);\n                return found;\n            }\n        }\n    }\n    const foundEl = hostElement.closest(`[q\\\\:ctx*=\"${context.id}\"]`);\n    if (foundEl) {\n        const value = getContext(foundEl).$contexts$.get(context.id);\n        if (value) {\n            set(value);\n            return value;\n        }\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\n//# sourceMappingURL=data:application/json;base64,","import { styleKey } from '../component/qrl-styles';\nimport { appendStyle, hasStyle } from '../render/cursor';\nimport { directSetAttribute } from '../render/fast-calls';\nimport { ComponentScopedStyles } from '../util/markers';\nimport { useSequentialScope } from './use-store.public';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useScopedStyles`.\n *\n * @public\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <Host>Some text</Host>;\n * });\n * ```\n *\n * @see `useScopedStyles`.\n *\n * @public\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useScopedStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useScopedStyles instead)\n/**\n * @see `useStyles`.\n *\n * @alpha\n */\n// </docs>\nexport const useScopedStylesQrl = (styles) => {\n    _useStyles(styles, true);\n};\n// <docs markdown=\"../readme.md#useScopedStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useScopedStyles instead)\n/**\n * @see `useStyles`.\n *\n * @alpha\n */\n// </docs>\nexport const useScopedStyles$ = /*#__PURE__*/ implicit$FirstArg(useScopedStylesQrl);\nconst _useStyles = (styleQrl, scoped) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get === true) {\n        return;\n    }\n    set(true);\n    const renderCtx = ctx.$renderCtx$;\n    const styleId = styleKey(styleQrl, i);\n    const hostElement = ctx.$hostElement$;\n    if (scoped) {\n        directSetAttribute(hostElement, ComponentScopedStyles, styleId);\n    }\n    if (!hasStyle(renderCtx, styleId)) {\n        ctx.$waitOn$.push(styleQrl.resolve(hostElement).then((styleText) => {\n            if (!hasStyle(renderCtx, styleId)) {\n                appendStyle(renderCtx, hostElement, {\n                    type: 'style',\n                    styleId,\n                    content: scoped ? styleText.replace(/�/g, styleId) : styleText,\n                });\n            }\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCwyQ0FBMkM7QUFDM0MseUNBQXlDO0FBQ3pDLHdDQUF3QztBQUN4Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxNQUFtQixFQUFRLEVBQUU7SUFDeEQsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUM7QUFFRiwyQ0FBMkM7QUFDM0MseUNBQXlDO0FBQ3pDLHdDQUF3QztBQUN4Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO0FBRXhFLGlEQUFpRDtBQUNqRCx5Q0FBeUM7QUFDekMsOENBQThDO0FBQzlDOzs7O0dBSUc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxNQUFtQixFQUFRLEVBQUU7SUFDOUQsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUM7QUFFRixpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7OztHQUlHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBRXBGLE1BQU0sVUFBVSxHQUFHLENBQUMsUUFBcUIsRUFBRSxNQUFlLEVBQUUsRUFBRTtJQUM1RCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsa0JBQWtCLEVBQVcsQ0FBQztJQUMzRCxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDaEIsT0FBTztLQUNSO0lBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ1YsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQztJQUNsQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxhQUFhLENBQUM7SUFDdEMsSUFBSSxNQUFNLEVBQUU7UUFDVixrQkFBa0IsQ0FBQyxXQUFXLEVBQUUscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDakU7SUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUNqQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDZixRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFO2dCQUNqQyxXQUFXLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRTtvQkFDbEMsSUFBSSxFQUFFLE9BQU87b0JBQ2IsT0FBTztvQkFDUCxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUztpQkFDL0QsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdHlsZUtleSB9IGZyb20gJy4uL2NvbXBvbmVudC9xcmwtc3R5bGVzJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybC5wdWJsaWMnO1xuaW1wb3J0IHsgYXBwZW5kU3R5bGUsIGhhc1N0eWxlIH0gZnJvbSAnLi4vcmVuZGVyL2N1cnNvcic7XG5pbXBvcnQgeyBkaXJlY3RTZXRBdHRyaWJ1dGUgfSBmcm9tICcuLi9yZW5kZXIvZmFzdC1jYWxscyc7XG5pbXBvcnQgeyBDb21wb25lbnRTY29wZWRTdHlsZXMgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc3RvcmUucHVibGljJztcbmltcG9ydCB7IGltcGxpY2l0JEZpcnN0QXJnIH0gZnJvbSAnLi4vdXRpbC9pbXBsaWNpdF9kb2xsYXInO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTdHlsZXNcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU3R5bGVzIGluc3RlYWQpXG4vKipcbiAqIEEgbGF6eS1sb2FkYWJsZSByZWZlcmVuY2UgdG8gYSBjb21wb25lbnQncyBzdHlsZXMuXG4gKlxuICogQ29tcG9uZW50IHN0eWxlcyBhbGxvdyBRd2lrIHRvIGxhenkgbG9hZCB0aGUgc3R5bGUgaW5mb3JtYXRpb24gZm9yIHRoZSBjb21wb25lbnQgb25seSB3aGVuXG4gKiBuZWVkZWQuIChBbmQgYXZvaWQgZG91YmxlIGxvYWRpbmcgaXQgaW4gY2FzZSBvZiBTU1IgaHlkcmF0aW9uLilcbiAqXG4gKiBgYGB0c3hcbiAqIGltcG9ydCBzdHlsZXMgZnJvbSAnLi9jb2RlLWJsb2NrLmNzcz9pbmxpbmUnO1xuICpcbiAqIGV4cG9ydCBjb25zdCBDbXBTdHlsZXMgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgdXNlU3R5bGVzJChzdHlsZXMpO1xuICpcbiAqICAgcmV0dXJuIDxIb3N0PlNvbWUgdGV4dDwvSG9zdD47XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgYHVzZVNjb3BlZFN0eWxlc2AuXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlU3R5bGVzUXJsID0gKHN0eWxlczogUVJMPHN0cmluZz4pOiB2b2lkID0+IHtcbiAgX3VzZVN0eWxlcyhzdHlsZXMsIGZhbHNlKTtcbn07XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVN0eWxlc1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VTdHlsZXMgaW5zdGVhZClcbi8qKlxuICogQSBsYXp5LWxvYWRhYmxlIHJlZmVyZW5jZSB0byBhIGNvbXBvbmVudCdzIHN0eWxlcy5cbiAqXG4gKiBDb21wb25lbnQgc3R5bGVzIGFsbG93IFF3aWsgdG8gbGF6eSBsb2FkIHRoZSBzdHlsZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGNvbXBvbmVudCBvbmx5IHdoZW5cbiAqIG5lZWRlZC4gKEFuZCBhdm9pZCBkb3VibGUgbG9hZGluZyBpdCBpbiBjYXNlIG9mIFNTUiBoeWRyYXRpb24uKVxuICpcbiAqIGBgYHRzeFxuICogaW1wb3J0IHN0eWxlcyBmcm9tICcuL2NvZGUtYmxvY2suY3NzP2lubGluZSc7XG4gKlxuICogZXhwb3J0IGNvbnN0IENtcFN0eWxlcyA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICB1c2VTdHlsZXMkKHN0eWxlcyk7XG4gKlxuICogICByZXR1cm4gPEhvc3Q+U29tZSB0ZXh0PC9Ib3N0PjtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSBgdXNlU2NvcGVkU3R5bGVzYC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTdHlsZXMkID0gLyojX19QVVJFX18qLyBpbXBsaWNpdCRGaXJzdEFyZyh1c2VTdHlsZXNRcmwpO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTY29wZWRTdHlsZXNcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU2NvcGVkU3R5bGVzIGluc3RlYWQpXG4vKipcbiAqIEBzZWUgYHVzZVN0eWxlc2AuXG4gKlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTY29wZWRTdHlsZXNRcmwgPSAoc3R5bGVzOiBRUkw8c3RyaW5nPik6IHZvaWQgPT4ge1xuICBfdXNlU3R5bGVzKHN0eWxlcywgdHJ1ZSk7XG59O1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VTY29wZWRTdHlsZXNcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU2NvcGVkU3R5bGVzIGluc3RlYWQpXG4vKipcbiAqIEBzZWUgYHVzZVN0eWxlc2AuXG4gKlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VTY29wZWRTdHlsZXMkID0gLyojX19QVVJFX18qLyBpbXBsaWNpdCRGaXJzdEFyZyh1c2VTY29wZWRTdHlsZXNRcmwpO1xuXG5jb25zdCBfdXNlU3R5bGVzID0gKHN0eWxlUXJsOiBRUkw8c3RyaW5nPiwgc2NvcGVkOiBib29sZWFuKSA9PiB7XG4gIGNvbnN0IHsgZ2V0LCBzZXQsIGN0eCwgaSB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPGJvb2xlYW4+KCk7XG4gIGlmIChnZXQgPT09IHRydWUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc2V0KHRydWUpO1xuICBjb25zdCByZW5kZXJDdHggPSBjdHguJHJlbmRlckN0eCQ7XG4gIGNvbnN0IHN0eWxlSWQgPSBzdHlsZUtleShzdHlsZVFybCwgaSk7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gY3R4LiRob3N0RWxlbWVudCQ7XG4gIGlmIChzY29wZWQpIHtcbiAgICBkaXJlY3RTZXRBdHRyaWJ1dGUoaG9zdEVsZW1lbnQsIENvbXBvbmVudFNjb3BlZFN0eWxlcywgc3R5bGVJZCk7XG4gIH1cblxuICBpZiAoIWhhc1N0eWxlKHJlbmRlckN0eCwgc3R5bGVJZCkpIHtcbiAgICBjdHguJHdhaXRPbiQucHVzaChcbiAgICAgIHN0eWxlUXJsLnJlc29sdmUoaG9zdEVsZW1lbnQpLnRoZW4oKHN0eWxlVGV4dCkgPT4ge1xuICAgICAgICBpZiAoIWhhc1N0eWxlKHJlbmRlckN0eCwgc3R5bGVJZCkpIHtcbiAgICAgICAgICBhcHBlbmRTdHlsZShyZW5kZXJDdHgsIGhvc3RFbGVtZW50LCB7XG4gICAgICAgICAgICB0eXBlOiAnc3R5bGUnLFxuICAgICAgICAgICAgc3R5bGVJZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHNjb3BlZCA/IHN0eWxlVGV4dC5yZXBsYWNlKC/vv70vZywgc3R5bGVJZCkgOiBzdHlsZVRleHQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufTtcbiJdfQ=="],"names":["isElement","isNode"],"mappings":"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OAAO,GAAG,UAAU,EAAE,QAAQ,EAAE;IACtH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,UAAU,iBAAiB,iBAAiB,CAAC,YAAY,EAAE;IACxE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,MAAM,aAAa,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAgCvE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,KAAK,GAAG,CAAC,KAAK,EAAE,QAAQ,KAAK,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE;IAC1E;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,aAAa,GAAG,CAAC,KAAK,EAAE,QAAQ,KAAK,MAAM,CAAC,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE;IACzF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,WAAW,GAAG,CAAC,KAAK,EAAE,QAAQ,KAAK,MAAM,CAAC,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,EAAE,QAAQ,EAAE;IACvF,MAAM,MAAM,GAAG,CAAC,SAAS,EAAE,QAAQ,KAAK;IACxC,IAAI,MAAM,SAAS,GAAG,gBAAgB,EAAE,C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IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB,EAAE;IAClF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,iBAAiB,GAAG,CAAC,QAAQ,KAAK;IAC/C,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;IACnD,IAAI,IAAI,CAAC,GAAG,EAAE;IACd,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;IAClB,QAAQ,MAAM,QAAQ,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,QAAQ,CAAC;IAC7D,QAAQ,IAAI,CAAC,QAAQ,EAAE;IACvB,YAAY,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC1C,SAAS;IACT,KAAK;IACL,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB,EAAE;IAClF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,WAAW,GAAG,CAAC,QAAQ,KAAK;IACzC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;IACnD,IAAI,IAAI,CAAC,GAAG,EAAE;IACd,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;IAClB,QAAQ,GAAG,C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,GAAG,OAAO,CAAC;IAC5C,CAAC;;IC1JD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,CAAC,GAAG,CAAC,UAAU,KAAK;IACjC,IAAI,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC;IAClC;;IC7EA,MAAM,iBAAiB,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;IACnD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,YAAY,GAAG,CAAC,WAAW,EAAE,OAAO,GAAG,EAAE,KAAK;IAC3D,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,KAAK,CAAC;IAC7C,IAAI,MAAM,OAAO,GAAG,iBAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACxD;IACA,IAAI,OAAO,SAAS,gBAAgB,CAAC,KAAK,EAAE,GAAG,EAAE;IACjD,QAAQ,MAAM,QAAQ,GAAG,OAAO,GAAG,SAAS,GAAG,WAAW,CAAC,OAAO,EAAE,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;IAC9F,QAAQ,OAAO,GAAG,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"}