const QWIK_LOADER = "(()=>{var e=Object.defineProperty,t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable,o=(t,n,r)=>n in t?e(t,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[n]=r,s=(e,s)=>{for(var a in s||(s={}))n.call(s,a)&&o(e,a,s[a]);if(t)for(var a of t(s))r.call(s,a)&&o(e,a,s[a]);return e};((e,t)=>{const n=\"__q_context__\",r=window,o=new Set,a=\"replace\",i=\"forEach\",c=\"target\",l=\"getAttribute\",p=\"isConnected\",b=\"qvisible\",f=\"_qwikjson_\",u=t=>e.querySelectorAll(t),y=e=>e&&\"function\"==typeof e.then,d=(e,t,n=t.type)=>{u(\"[on\"+e+\"\\\\:\"+n+\"]\")[i]((r=>v(r,e,t,n)))},m=t=>{if(void 0===t[f]){let n=(t===e.documentElement?e.body:t).lastElementChild;for(;n;){if(\"SCRIPT\"===n.tagName&&\"qwik/json\"===n[l](\"type\")){t[f]=JSON.parse(n.textContent[a](/\\\\x3C(\\/?script)/gi,\"<$1\"));break}n=n.previousElementSibling}}},w=(e,t)=>new CustomEvent(e,{detail:t}),v=async(t,r,o,i=o.type)=>{const c=\"on\"+r+\":\"+i;t.hasAttribute(\"preventdefault:\"+i)&&o.preventDefault();const b=t._qc_,f=b&&b.li.filter((e=>e[0]===c));if(f&&f.length>0){for(const e of f){const n=e[1].getFn([t,o],(()=>t[p]))(o,t),r=o.cancelBubble;y(n)&&await n,r&&o.stopPropagation()}return}const u=t[l](c);if(u){const r=t.closest(\"[q\\\\:container]\"),i=new URL(r[l](\"q:base\"),e.baseURI);for(const c of u.split(\"\\n\")){const l=new URL(c,i),b=l.hash[a](/^#?([^?[|]*).*$/,\"$1\")||\"default\",f=performance.now();let u;const d=c.startsWith(\"#\");if(d)u=(r.qFuncs||[])[Number.parseInt(b)];else{const e=l.href.split(\"#\")[0];try{const t=import(e);m(r),u=(await t)[b]}catch(t){h(\"qerror\",{importError:!0,error:t,symbol:b,uri:e})}}const w=e[n];if(t[p]){const r={symbol:b,element:t,reqTime:f};try{e[n]=[t,o,l],d||h(\"qsymbol\",r);const s=u(o,t);y(s)&&await s}catch(e){h(\"qerror\",s({error:e},r))}finally{e[n]=w}}}}},h=(t,n)=>{e.dispatchEvent(w(t,n))},q=e=>e[a](/([A-Z])/g,(e=>\"-\"+e.toLowerCase())),g=async e=>{let t=q(e.type),n=e[c];for(d(\"-document\",e,t);n&&n[l];){const r=v(n,\"\",e,t);let o=e.cancelBubble;y(r)&&await r,o=o||e.cancelBubble||n.hasAttribute(\"stoppropagation:\"+e.type),n=e.bubbles&&!0!==o?n.parentElement:null}},E=e=>{d(\"-window\",e,q(e.type))},_=()=>{var n;const s=e.readyState;if(!t&&(\"interactive\"==s||\"complete\"==s)&&(t=1,h(\"qinit\"),(null!=(n=r.requestIdleCallback)?n:r.setTimeout).bind(r)((()=>h(\"qidle\"))),o.has(b))){const e=u(\"[on\\\\:\"+b+\"]\"),t=new IntersectionObserver((e=>{for(const n of e)n.isIntersecting&&(t.unobserve(n[c]),v(n[c],\"\",w(b,n)))}));e[i]((e=>t.observe(e)))}},C=(e,t,n,r=!1)=>e.addEventListener(t,n,{capture:r,passive:!1}),O=t=>{for(const n of t)o.has(n)||(C(e,n,g,!0),C(r,n,E,!0),o.add(n))};if(!(n in e)){e[n]=0;const t=r.qwikevents;Array.isArray(t)&&O(t),r.qwikevents={push:(...e)=>O(e)},C(e,\"readystatechange\",_),_()}})(document)})()";
const QWIK_LOADER_DEBUG = "(() => {\n    var __defProp = Object.defineProperty;\n    var __getOwnPropSymbols = Object.getOwnPropertySymbols;\n    var __hasOwnProp = Object.prototype.hasOwnProperty;\n    var __propIsEnum = Object.prototype.propertyIsEnumerable;\n    var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: value\n    }) : obj[key] = value;\n    var __spreadValues = (a, b) => {\n        for (var prop in b || (b = {})) {\n            __hasOwnProp.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n        }\n        if (__getOwnPropSymbols) {\n            for (var prop of __getOwnPropSymbols(b)) {\n                __propIsEnum.call(b, prop) && __defNormalProp(a, prop, b[prop]);\n            }\n        }\n        return a;\n    };\n    ((doc, hasInitialized) => {\n        const Q_CONTEXT = \"__q_context__\";\n        const win = window;\n        const events =  new Set;\n        const querySelectorAll = query => doc.querySelectorAll(query);\n        const isPromise = promise => promise && \"function\" == typeof promise.then;\n        const broadcast = (infix, ev, type = ev.type) => {\n            querySelectorAll(\"[on\" + infix + \"\\\\:\" + type + \"]\").forEach((el => dispatch(el, infix, ev, type)));\n        };\n        const resolveContainer = containerEl => {\n            if (void 0 === containerEl._qwikjson_) {\n                let script = (containerEl === doc.documentElement ? doc.body : containerEl).lastElementChild;\n                while (script) {\n                    if (\"SCRIPT\" === script.tagName && \"qwik/json\" === script.getAttribute(\"type\")) {\n                        containerEl._qwikjson_ = JSON.parse(script.textContent.replace(/\\\\x3C(\\/?script)/gi, \"<$1\"));\n                        break;\n                    }\n                    script = script.previousElementSibling;\n                }\n            }\n        };\n        const createEvent = (eventName, detail) => new CustomEvent(eventName, {\n            detail: detail\n        });\n        const dispatch = async (element, onPrefix, ev, eventName = ev.type) => {\n            const attrName = \"on\" + onPrefix + \":\" + eventName;\n            element.hasAttribute(\"preventdefault:\" + eventName) && ev.preventDefault();\n            const ctx = element._qc_;\n            const relevantListeners = ctx && ctx.li.filter((li => li[0] === attrName));\n            if (relevantListeners && relevantListeners.length > 0) {\n                for (const listener of relevantListeners) {\n                    const results = listener[1].getFn([ element, ev ], (() => element.isConnected))(ev, element);\n                    const cancelBubble = ev.cancelBubble;\n                    isPromise(results) && await results;\n                    cancelBubble && ev.stopPropagation();\n                }\n                return;\n            }\n            const attrValue = element.getAttribute(attrName);\n            if (attrValue) {\n                const container = element.closest(\"[q\\\\:container]\");\n                const base = new URL(container.getAttribute(\"q:base\"), doc.baseURI);\n                for (const qrl of attrValue.split(\"\\n\")) {\n                    const url = new URL(qrl, base);\n                    const symbol = url.hash.replace(/^#?([^?[|]*).*$/, \"$1\") || \"default\";\n                    const reqTime = performance.now();\n                    let handler;\n                    const isSync = qrl.startsWith(\"#\");\n                    if (isSync) {\n                        handler = (container.qFuncs || [])[Number.parseInt(symbol)];\n                    } else {\n                        const uri = url.href.split(\"#\")[0];\n                        try {\n                            const module = import(\n                                                        uri);\n                            resolveContainer(container);\n                            handler = (await module)[symbol];\n                        } catch (error) {\n                            emitEvent(\"qerror\", {\n                                importError: !0,\n                                error: error,\n                                symbol: symbol,\n                                uri: uri\n                            });\n                        }\n                    }\n                    const previousCtx = doc[Q_CONTEXT];\n                    if (element.isConnected) {\n                        const eventData = {\n                            symbol: symbol,\n                            element: element,\n                            reqTime: reqTime\n                        };\n                        try {\n                            doc[Q_CONTEXT] = [ element, ev, url ];\n                            isSync || emitEvent(\"qsymbol\", eventData);\n                            const results = handler(ev, element);\n                            isPromise(results) && await results;\n                        } catch (error) {\n                            emitEvent(\"qerror\", __spreadValues({\n                                error: error\n                            }, eventData));\n                        } finally {\n                            doc[Q_CONTEXT] = previousCtx;\n                        }\n                    }\n                }\n            }\n        };\n        const emitEvent = (eventName, detail) => {\n            doc.dispatchEvent(createEvent(eventName, detail));\n        };\n        const camelToKebab = str => str.replace(/([A-Z])/g, (a => \"-\" + a.toLowerCase()));\n        const processDocumentEvent = async ev => {\n            let type = camelToKebab(ev.type);\n            let element = ev.target;\n            broadcast(\"-document\", ev, type);\n            while (element && element.getAttribute) {\n                const results = dispatch(element, \"\", ev, type);\n                let cancelBubble = ev.cancelBubble;\n                isPromise(results) && await results;\n                cancelBubble = cancelBubble || ev.cancelBubble || element.hasAttribute(\"stoppropagation:\" + ev.type);\n                element = ev.bubbles && !0 !== cancelBubble ? element.parentElement : null;\n            }\n        };\n        const processWindowEvent = ev => {\n            broadcast(\"-window\", ev, camelToKebab(ev.type));\n        };\n        const processReadyStateChange = () => {\n            var _a;\n            const readyState = doc.readyState;\n            if (!hasInitialized && (\"interactive\" == readyState || \"complete\" == readyState)) {\n                hasInitialized = 1;\n                emitEvent(\"qinit\");\n                (null != (_a = win.requestIdleCallback) ? _a : win.setTimeout).bind(win)((() => emitEvent(\"qidle\")));\n                if (events.has(\"qvisible\")) {\n                    const results = querySelectorAll(\"[on\\\\:qvisible]\");\n                    const observer = new IntersectionObserver((entries => {\n                        for (const entry of entries) {\n                            if (entry.isIntersecting) {\n                                observer.unobserve(entry.target);\n                                dispatch(entry.target, \"\", createEvent(\"qvisible\", entry));\n                            }\n                        }\n                    }));\n                    results.forEach((el => observer.observe(el)));\n                }\n            }\n        };\n        const addEventListener = (el, eventName, handler, capture = !1) => el.addEventListener(eventName, handler, {\n            capture: capture,\n            passive: !1\n        });\n        const push = eventNames => {\n            for (const eventName of eventNames) {\n                if (!events.has(eventName)) {\n                    addEventListener(doc, eventName, processDocumentEvent, !0);\n                    addEventListener(win, eventName, processWindowEvent, !0);\n                    events.add(eventName);\n                }\n            }\n        };\n        if (!(Q_CONTEXT in doc)) {\n            doc[Q_CONTEXT] = 0;\n            const qwikevents = win.qwikevents;\n            Array.isArray(qwikevents) && push(qwikevents);\n            win.qwikevents = {\n                push: (...e) => push(e)\n            };\n            addEventListener(doc, \"readystatechange\", processReadyStateChange);\n            processReadyStateChange();\n        }\n    })(document);\n})()";
exports.QWIK_LOADER = QWIK_LOADER;
exports.QWIK_LOADER_DEBUG = QWIK_LOADER_DEBUG;
