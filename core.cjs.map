{"version":3,"file":"core.cjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/listeners.js","../../../dist-dev/tsc-out/packages/qwik/src/testing/html.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/constants.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-locale.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/utils.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/operations.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/virtual-element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/error-handling.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/pause.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/resume.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/signals.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-task.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/container/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/state/common.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/qrl/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-ref.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-id.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-mount.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-error-boundary.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js"],"sourcesContent":["export const qDev = globalThis.qDev === true;\nexport const qInspector = globalThis.qInspector === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const qRuntimeQrl = globalThis.qRuntimeQrl === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUM7QUFDMUQsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixLQUFLLEtBQUssQ0FBQztBQUN0RSxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7QUFDL0MsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLEtBQUssSUFBSSxDQUFDO0FBRTNELE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVEsRUFBRSxFQUFFO0lBQy9CLElBQUksSUFBSSxFQUFFO1FBQ1IsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNsQjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBxRGV2ID0gZ2xvYmFsVGhpcy5xRGV2ID09PSB0cnVlO1xuZXhwb3J0IGNvbnN0IHFJbnNwZWN0b3IgPSBnbG9iYWxUaGlzLnFJbnNwZWN0b3IgPT09IHRydWU7XG5leHBvcnQgY29uc3QgcVNlcmlhbGl6ZSA9IGdsb2JhbFRoaXMucVNlcmlhbGl6ZSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcUR5bmFtaWNQbGF0Zm9ybSA9IGdsb2JhbFRoaXMucUR5bmFtaWNQbGF0Zm9ybSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSBnbG9iYWxUaGlzLnFUZXN0ID09PSB0cnVlO1xuZXhwb3J0IGNvbnN0IHFSdW50aW1lUXJsID0gZ2xvYmFsVGhpcy5xUnVudGltZVFybCA9PT0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IHNlYWwgPSAob2JqOiBhbnkpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBPYmplY3Quc2VhbChvYmopO1xuICB9XG59O1xuXG5kZWNsYXJlIGNvbnN0IGdsb2JhbFRoaXM6IGFueTtcbiJdfQ==","import { qDev } from './qdev';\nexport const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value && value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isQwikElement = (value) => {\n    return isNode(value) && (value.nodeType === 1 || value.nodeType === 111);\n};\nexport const isVirtualElement = (value) => {\n    return value.nodeType === 111;\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 8;\n};\nexport function assertQwikElement(el) {\n    if (qDev) {\n        if (!isQwikElement(el)) {\n            console.error('Not a Qwik Element, got', el);\n            throw new Error('Not a Qwik Element');\n        }\n    }\n}\nexport function assertElement(el) {\n    if (qDev) {\n        if (!isElement(el)) {\n            console.error('Not a Element, got', el);\n            throw new Error('Not an Element');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFVLEVBQXFCLEVBQUU7SUFDMUQsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBNEIsRUFBb0IsRUFBRTtJQUMxRSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQVUsRUFBd0IsRUFBRTtJQUNoRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUE0QixFQUEyQixFQUFFO0lBQ3hGLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVyxFQUFpQixFQUFFO0lBQ25ELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVyxFQUFvQixFQUFFO0lBQ3pELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU87SUFDdkMsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDN0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1NBQ3ZDO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxFQUF5QjtJQUNyRCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDbEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4QyxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDbkM7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50LCBWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgaXNOb2RlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBOb2RlID0+IHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5ub2RlVHlwZSA9PT0gJ251bWJlcic7XG59O1xuXG5leHBvcnQgY29uc3QgaXNEb2N1bWVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgRG9jdW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubm9kZVR5cGUgPT09IDk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNFbGVtZW50ID0gKHZhbHVlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpOiB2YWx1ZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlID09PSAxO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUXdpa0VsZW1lbnQgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFF3aWtFbGVtZW50ID0+IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgKHZhbHVlLm5vZGVUeXBlID09PSAxIHx8IHZhbHVlLm5vZGVUeXBlID09PSAxMTEpO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVmlydHVhbEVsZW1lbnQgPSAodmFsdWU6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCk6IHZhbHVlIGlzIFZpcnR1YWxFbGVtZW50ID0+IHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNUZXh0ID0gKHZhbHVlOiBOb2RlKTogdmFsdWUgaXMgVGV4dCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gMztcbn07XG5leHBvcnQgY29uc3QgaXNDb21tZW50ID0gKHZhbHVlOiBOb2RlKTogdmFsdWUgaXMgQ29tbWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZS5ub2RlVHlwZSA9PT0gODtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRRd2lrRWxlbWVudChlbDogYW55KTogYXNzZXJ0cyBlbCBpcyBRd2lrRWxlbWVudCB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCFpc1F3aWtFbGVtZW50KGVsKSkge1xuICAgICAgY29uc29sZS5lcnJvcignTm90IGEgUXdpayBFbGVtZW50LCBnb3QnLCBlbCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIFF3aWsgRWxlbWVudCcpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RWxlbWVudChlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYXNzZXJ0cyBlbCBpcyBFbGVtZW50IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ05vdCBhIEVsZW1lbnQsIGdvdCcsIGVsKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGFuIEVsZW1lbnQnKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==","import { isElement, isNode } from './element';\nimport { qDev } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    const err = message instanceof Error ? message : createError(message);\n    const messageStr = err.stack || err.message;\n    console.error('%cQWIK ERROR', STYLE, messageStr, ...printParams(optionalParams));\n    return err;\n};\nexport const createError = (message) => {\n    const err = new Error(message);\n    return err;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = logError(message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nexport const logWarn = (message, ...optionalParams) => {\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const tryGetContext = (element) => {\n    return element['_qc_'];\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isNode(p) && isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$componentQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxLQUFLLEdBQUcsSUFBSTtJQUNoQixDQUFDLENBQUMsNEZBQTRGO0lBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFUCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDbEUsTUFBTSxHQUFHLEdBQUcsT0FBTyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEUsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEtBQUssSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDO0lBQzVDLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUNqRixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRTtJQUM5QyxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUN6RSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsT0FBTyxFQUFFLEdBQUcsY0FBYyxDQUFDLENBQUM7SUFDakQsdUNBQXVDO0lBQ3ZDLFFBQVEsQ0FBQztJQUNULE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBYSxFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ2pFLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO0tBQzdFO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBZ0IsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUNyRSxJQUFJLElBQUksRUFBRTtRQUNSLHNDQUFzQztRQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7S0FDekU7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxPQUFvQixFQUF3QixFQUFFO0lBQzFFLE9BQVEsT0FBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLENBQUMsY0FBcUIsRUFBRSxFQUFFO0lBQzVDLElBQUksSUFBSSxFQUFFO1FBQ1IsT0FBTyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixPQUFPLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN4QjtZQUNELE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sY0FBYyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLE1BQU0sWUFBWSxHQUFHLENBQUMsRUFBVyxFQUFFLEVBQUU7SUFDbkMsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sUUFBUSxHQUFZLGFBQWEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUM1QyxPQUFPLE9BQU8sS0FBSyxXQUFXLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUVyRixPQUFPO1FBQ0wsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPO1FBQ25CLFNBQVMsRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRTtRQUMzQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDbEMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHO0tBQ2hDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHR5cGUgeyBRQ29udGV4dCB9IGZyb20gJy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc05vZGUgfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmNvbnN0IFNUWUxFID0gcURldlxuICA/IGBiYWNrZ3JvdW5kOiAjNTY0Q0UwOyBjb2xvcjogd2hpdGU7IHBhZGRpbmc6IDJweCAzcHg7IGJvcmRlci1yYWRpdXM6IDJweDsgZm9udC1zaXplOiAwLjhlbTtgXG4gIDogJyc7XG5cbmV4cG9ydCBjb25zdCBsb2dFcnJvciA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgY29uc3QgZXJyID0gbWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yID8gbWVzc2FnZSA6IGNyZWF0ZUVycm9yKG1lc3NhZ2UpO1xuICBjb25zdCBtZXNzYWdlU3RyID0gZXJyLnN0YWNrIHx8IGVyci5tZXNzYWdlO1xuICBjb25zb2xlLmVycm9yKCclY1FXSUsgRVJST1InLCBTVFlMRSwgbWVzc2FnZVN0ciwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpKTtcbiAgcmV0dXJuIGVycjtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVFcnJvciA9IChtZXNzYWdlPzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVycjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dFcnJvckFuZFN0b3AgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVyciA9IGxvZ0Vycm9yKG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gIGRlYnVnZ2VyO1xuICByZXR1cm4gZXJyO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvZ1dhcm4gPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgY29uc29sZS53YXJuKCclY1FXSUsgV0FSTicsIFNUWUxFLCBtZXNzYWdlLCAuLi5wcmludFBhcmFtcyhvcHRpb25hbFBhcmFtcykpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9nRGVidWcgPSAobWVzc2FnZT86IHN0cmluZywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmRlYnVnKCclY1FXSUsnLCBTVFlMRSwgbWVzc2FnZSwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRyeUdldENvbnRleHQgPSAoZWxlbWVudDogUXdpa0VsZW1lbnQpOiBRQ29udGV4dCB8IHVuZGVmaW5lZCA9PiB7XG4gIHJldHVybiAoZWxlbWVudCBhcyBhbnkpWydfcWNfJ107XG59O1xuXG5jb25zdCBwcmludFBhcmFtcyA9IChvcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICByZXR1cm4gb3B0aW9uYWxQYXJhbXMubWFwKChwKSA9PiB7XG4gICAgICBpZiAoaXNOb2RlKHApICYmIGlzRWxlbWVudChwKSkge1xuICAgICAgICByZXR1cm4gcHJpbnRFbGVtZW50KHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbmFsUGFyYW1zO1xufTtcblxuY29uc3QgcHJpbnRFbGVtZW50ID0gKGVsOiBFbGVtZW50KSA9PiB7XG4gIGNvbnN0IGN0eCA9IHRyeUdldENvbnRleHQoZWwpO1xuICBjb25zdCBpc1NlcnZlcjogYm9vbGVhbiA9IC8qI19fUFVSRV9fKi8gKCgpID0+XG4gICAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICEhcHJvY2Vzcy52ZXJzaW9ucyAmJiAhIXByb2Nlc3MudmVyc2lvbnMubm9kZSkoKTtcblxuICByZXR1cm4ge1xuICAgIHRhZ05hbWU6IGVsLnRhZ05hbWUsXG4gICAgcmVuZGVyUVJMOiBjdHg/LiRjb21wb25lbnRRcmwkPy5nZXRTeW1ib2woKSxcbiAgICBlbGVtZW50OiBpc1NlcnZlciA/IHVuZGVmaW5lZCA6IGVsLFxuICAgIGN0eDogaXNTZXJ2ZXIgPyB1bmRlZmluZWQgOiBjdHgsXG4gIH07XG59O1xuIl19","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_canNotMountUseServerMount = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const QError_qrlMissingContainer = 30;\nexport const QError_qrlMissingChunk = 31;\nexport const QError_invalidRefValue = 32;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    return logErrorAndStop(text, ...parts);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute',\n            'Can not serialize a HTML Node that is not an Element',\n            'Runtime but no instance found on element.',\n            'Only primitive and object literals can be serialized',\n            'Crash while rendering',\n            'You can render over a existing q:container. Skipping render().',\n            'Set property',\n            \"Only function's and 'string's are supported.\",\n            \"Only objects can be wrapped in 'QObject'\",\n            `Only objects literals can be wrapped in 'QObject'`,\n            'QRL is not a function',\n            'Dynamic import not found',\n            'Unknown type argument',\n            'Actual value for useContext() can not be found, make sure some ancestor component has set a value using useContextProvider()',\n            \"Invoking 'use*()' method outside of invocation context.\",\n            'Cant access renderCtx for existing context',\n            'Cant access document for existing context',\n            'props are immutable',\n            '<div> component can only be used at the root of a Qwik component$()',\n            'Props are immutable by default.',\n            `Calling a 'use*()' method outside 'component$(() => { HERE })' is not allowed. 'use*()' methods provide hooks to the 'component$' state and lifecycle, ie 'use' hooks can only be called syncronously within the 'component$' function or another 'use' method.\nFor more information see: https://qwik.builder.io/docs/components/lifecycle/#use-method-rules`,\n            'Container is already paused. Skipping',\n            'Components using useServerMount() can only be mounted in the server, if you need your component to be mounted in the client, use \"useMount$()\" instead',\n            'When rendering directly on top of Document, the root node must be a <html>',\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>',\n            'Invalid JSXNode type. It must be either a function or a string. Found:',\n            'Tracking value changes can only be done to useStore() objects and component props',\n            'Missing Object ID for captured object',\n            'The provided Context reference is not a valid context created by createContextId()',\n            '<html> is the root container, it can not be rendered inside a component',\n            'QRLs can not be resolved because it does not have an attached container. This means that the QRL does not know where it belongs inside the DOM, so it cant dynamically import() from a relative path.',\n            'QRLs can not be dynamically resolved, because it does not have a chunk path',\n            'The JSX ref attribute must be a Signal', // 32\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvZXJyb3IvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQUMsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUMsQ0FBQyx5REFBeUQ7QUFDdEcsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUVBQW1FO0FBQ2hILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBQyxDQUFDLGlFQUFpRTtBQUM3RyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7QUFDckUsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUcsQ0FBQyxDQUFDLENBQUMsa0VBQWtFO0FBQzdILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtBQUNyRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBQztBQUMzQyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsRUFBRSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsRUFBRSxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxFQUFFLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLEVBQUUsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxFQUFFLENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsRUFBRSxDQUFDO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEVBQUUsQ0FBQztBQUM1QyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxFQUFFLENBQUM7QUFDNUMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztBQUN6QyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQVksRUFBRSxHQUFHLEtBQVksRUFBUyxFQUFFO0lBQzdELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixPQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUNqRCxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sR0FBRyxHQUFHO1lBQ1YseUNBQXlDO1lBQ3pDLHNEQUFzRDtZQUN0RCwyQ0FBMkM7WUFDM0Msc0RBQXNEO1lBQ3RELHVCQUF1QjtZQUN2QixnRUFBZ0U7WUFDaEUsY0FBYztZQUNkLDhDQUE4QztZQUM5QywwQ0FBMEM7WUFDMUMsbURBQW1EO1lBQ25ELHVCQUF1QjtZQUN2QiwwQkFBMEI7WUFDMUIsdUJBQXVCO1lBQ3ZCLDhIQUE4SDtZQUM5SCx5REFBeUQ7WUFDekQsNENBQTRDO1lBQzVDLDJDQUEyQztZQUMzQyxxQkFBcUI7WUFDckIscUVBQXFFO1lBQ3JFLGlDQUFpQztZQUNqQzs4RkFDd0Y7WUFDeEYsdUNBQXVDO1lBQ3ZDLHdKQUF3SjtZQUN4Siw0RUFBNEU7WUFDNUUsc0ZBQXNGO1lBQ3RGLHdFQUF3RTtZQUN4RSxtRkFBbUY7WUFDbkYsdUNBQXVDO1lBQ3ZDLG9GQUFvRjtZQUNwRix5RUFBeUU7WUFDekUsdU1BQXVNO1lBQ3ZNLDZFQUE2RTtZQUM3RSx3Q0FBd0MsRUFBRSxLQUFLO1NBQ2hELENBQUM7UUFDRixPQUFPLFFBQVEsSUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztLQUM1QztTQUFNO1FBQ0wsT0FBTyxRQUFRLElBQUksR0FBRyxDQUFDO0tBQ3hCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nRXJyb3JBbmRTdG9wIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmV4cG9ydCBjb25zdCBRRXJyb3Jfc3RyaW5naWZ5Q2xhc3NPclN0eWxlID0gMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY2Fubm90U2VyaWFsaXplTm9kZSA9IDE7IC8vICdDYW4gbm90IHNlcmlhbGl6ZSBhIEhUTUwgTm9kZSB0aGF0IGlzIG5vdCBhbiBFbGVtZW50J1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ydW50aW1lUXJsTm9FbGVtZW50ID0gMjsgLy8gYFEtRVJST1I6ICcke3FybH0nIGlzIHJ1bnRpbWUgYnV0IG5vIGluc3RhbmNlIGZvdW5kIG9uIGVsZW1lbnQuYFxuZXhwb3J0IGNvbnN0IFFFcnJvcl92ZXJpZnlTZXJpYWxpemFibGUgPSAzOyAvLyAnT25seSBwcmltaXRpdmUgYW5kIG9iamVjdCBsaXRlcmFscyBjYW4gYmUgc2VyaWFsaXplZCcsIHZhbHVlLFxuZXhwb3J0IGNvbnN0IFFFcnJvcl9lcnJvcldoaWxlUmVuZGVyaW5nID0gNDsgLy8gQ3Jhc2ggd2hpbGUgcmVuZGVyaW5nXG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbm5vdFJlbmRlck92ZXJFeGlzdGluZ0NvbnRhaW5lciA9IDU7IC8vJ1lvdSBjYW4gcmVuZGVyIG92ZXIgYSBleGlzdGluZyBxOmNvbnRhaW5lci4gU2tpcHBpbmcgcmVuZGVyKCkuJ1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zZXRQcm9wZXJ0eSA9IDY7IC8vJ1NldCBwcm9wZXJ0eSdcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsT3JFcnJvciA9IDc7XG5leHBvcnQgY29uc3QgUUVycm9yX29ubHlPYmplY3RXcmFwcGVkID0gODtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfb25seUxpdGVyYWxXcmFwcGVkID0gOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsSXNOb3RGdW5jdGlvbiA9IDEwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9keW5hbWljSW1wb3J0RmFpbGVkID0gMTE7XG5leHBvcnQgY29uc3QgUUVycm9yX3Vua25vd25UeXBlQXJndW1lbnQgPSAxMjtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfbm90Rm91bmRDb250ZXh0ID0gMTM7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZU1ldGhvZE91dHNpZGVDb250ZXh0ID0gMTQ7XG5leHBvcnQgY29uc3QgUUVycm9yX21pc3NpbmdSZW5kZXJDdHggPSAxNTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ0RvYyA9IDE2O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9pbW11dGFibGVQcm9wcyA9IDE3O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ob3N0Q2FuT25seUJlQXRSb290ID0gMTg7XG5leHBvcnQgY29uc3QgUUVycm9yX2ltbXV0YWJsZUpzeFByb3BzID0gMTk7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZUludm9rZUNvbnRleHQgPSAyMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY29udGFpbmVyQWxyZWFkeVBhdXNlZCA9IDIxO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9jYW5Ob3RNb3VudFVzZVNlcnZlck1vdW50ID0gMjI7XG5leHBvcnQgY29uc3QgUUVycm9yX3Jvb3ROb2RlTXVzdEJlSFRNTCA9IDIzO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zdHJpY3RIVE1MQ2hpbGRyZW4gPSAyNDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfaW52YWxpZEpzeE5vZGVUeXBlID0gMjU7XG5leHBvcnQgY29uc3QgUUVycm9yX3RyYWNrVXNlU3RvcmUgPSAyNjtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ09iamVjdElkID0gMjc7XG5leHBvcnQgY29uc3QgUUVycm9yX2ludmFsaWRDb250ZXh0ID0gMjg7XG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbk5vdFJlbmRlckhUTUwgPSAyOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsTWlzc2luZ0NvbnRhaW5lciA9IDMwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9xcmxNaXNzaW5nQ2h1bmsgPSAzMTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfaW52YWxpZFJlZlZhbHVlID0gMzI7XG5leHBvcnQgY29uc3QgcUVycm9yID0gKGNvZGU6IG51bWJlciwgLi4ucGFydHM6IGFueVtdKTogRXJyb3IgPT4ge1xuICBjb25zdCB0ZXh0ID0gY29kZVRvVGV4dChjb2RlKTtcbiAgcmV0dXJuIGxvZ0Vycm9yQW5kU3RvcCh0ZXh0LCAuLi5wYXJ0cyk7XG59O1xuXG5leHBvcnQgY29uc3QgY29kZVRvVGV4dCA9IChjb2RlOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBpZiAocURldikge1xuICAgIGNvbnN0IE1BUCA9IFtcbiAgICAgICdFcnJvciB3aGlsZSBzZXJpYWxpemluZyBjbGFzcyBhdHRyaWJ1dGUnLCAvLyAwXG4gICAgICAnQ2FuIG5vdCBzZXJpYWxpemUgYSBIVE1MIE5vZGUgdGhhdCBpcyBub3QgYW4gRWxlbWVudCcsIC8vIDFcbiAgICAgICdSdW50aW1lIGJ1dCBubyBpbnN0YW5jZSBmb3VuZCBvbiBlbGVtZW50LicsIC8vIDJcbiAgICAgICdPbmx5IHByaW1pdGl2ZSBhbmQgb2JqZWN0IGxpdGVyYWxzIGNhbiBiZSBzZXJpYWxpemVkJywgLy8gM1xuICAgICAgJ0NyYXNoIHdoaWxlIHJlbmRlcmluZycsIC8vIDRcbiAgICAgICdZb3UgY2FuIHJlbmRlciBvdmVyIGEgZXhpc3RpbmcgcTpjb250YWluZXIuIFNraXBwaW5nIHJlbmRlcigpLicsIC8vIDVcbiAgICAgICdTZXQgcHJvcGVydHknLCAvLyA2XG4gICAgICBcIk9ubHkgZnVuY3Rpb24ncyBhbmQgJ3N0cmluZydzIGFyZSBzdXBwb3J0ZWQuXCIsIC8vIDdcbiAgICAgIFwiT25seSBvYmplY3RzIGNhbiBiZSB3cmFwcGVkIGluICdRT2JqZWN0J1wiLCAvLyA4XG4gICAgICBgT25seSBvYmplY3RzIGxpdGVyYWxzIGNhbiBiZSB3cmFwcGVkIGluICdRT2JqZWN0J2AsIC8vIDlcbiAgICAgICdRUkwgaXMgbm90IGEgZnVuY3Rpb24nLCAvLyAxMFxuICAgICAgJ0R5bmFtaWMgaW1wb3J0IG5vdCBmb3VuZCcsIC8vIDExXG4gICAgICAnVW5rbm93biB0eXBlIGFyZ3VtZW50JywgLy8gMTJcbiAgICAgICdBY3R1YWwgdmFsdWUgZm9yIHVzZUNvbnRleHQoKSBjYW4gbm90IGJlIGZvdW5kLCBtYWtlIHN1cmUgc29tZSBhbmNlc3RvciBjb21wb25lbnQgaGFzIHNldCBhIHZhbHVlIHVzaW5nIHVzZUNvbnRleHRQcm92aWRlcigpJywgLy8gMTNcbiAgICAgIFwiSW52b2tpbmcgJ3VzZSooKScgbWV0aG9kIG91dHNpZGUgb2YgaW52b2NhdGlvbiBjb250ZXh0LlwiLCAvLyAxNFxuICAgICAgJ0NhbnQgYWNjZXNzIHJlbmRlckN0eCBmb3IgZXhpc3RpbmcgY29udGV4dCcsIC8vIDE1XG4gICAgICAnQ2FudCBhY2Nlc3MgZG9jdW1lbnQgZm9yIGV4aXN0aW5nIGNvbnRleHQnLCAvLyAxNlxuICAgICAgJ3Byb3BzIGFyZSBpbW11dGFibGUnLCAvLyAxN1xuICAgICAgJzxkaXY+IGNvbXBvbmVudCBjYW4gb25seSBiZSB1c2VkIGF0IHRoZSByb290IG9mIGEgUXdpayBjb21wb25lbnQkKCknLCAvLyAxOFxuICAgICAgJ1Byb3BzIGFyZSBpbW11dGFibGUgYnkgZGVmYXVsdC4nLCAvLyAxOVxuICAgICAgYENhbGxpbmcgYSAndXNlKigpJyBtZXRob2Qgb3V0c2lkZSAnY29tcG9uZW50JCgoKSA9PiB7IEhFUkUgfSknIGlzIG5vdCBhbGxvd2VkLiAndXNlKigpJyBtZXRob2RzIHByb3ZpZGUgaG9va3MgdG8gdGhlICdjb21wb25lbnQkJyBzdGF0ZSBhbmQgbGlmZWN5Y2xlLCBpZSAndXNlJyBob29rcyBjYW4gb25seSBiZSBjYWxsZWQgc3luY3Jvbm91c2x5IHdpdGhpbiB0aGUgJ2NvbXBvbmVudCQnIGZ1bmN0aW9uIG9yIGFub3RoZXIgJ3VzZScgbWV0aG9kLlxuRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlOiBodHRwczovL3F3aWsuYnVpbGRlci5pby9kb2NzL2NvbXBvbmVudHMvbGlmZWN5Y2xlLyN1c2UtbWV0aG9kLXJ1bGVzYCwgLy8gMjBcbiAgICAgICdDb250YWluZXIgaXMgYWxyZWFkeSBwYXVzZWQuIFNraXBwaW5nJywgLy8gMjFcbiAgICAgICdDb21wb25lbnRzIHVzaW5nIHVzZVNlcnZlck1vdW50KCkgY2FuIG9ubHkgYmUgbW91bnRlZCBpbiB0aGUgc2VydmVyLCBpZiB5b3UgbmVlZCB5b3VyIGNvbXBvbmVudCB0byBiZSBtb3VudGVkIGluIHRoZSBjbGllbnQsIHVzZSBcInVzZU1vdW50JCgpXCIgaW5zdGVhZCcsIC8vIDIyXG4gICAgICAnV2hlbiByZW5kZXJpbmcgZGlyZWN0bHkgb24gdG9wIG9mIERvY3VtZW50LCB0aGUgcm9vdCBub2RlIG11c3QgYmUgYSA8aHRtbD4nLCAvLyAyM1xuICAgICAgJ0EgPGh0bWw+IG5vZGUgbXVzdCBoYXZlIDIgY2hpbGRyZW4uIFRoZSBmaXJzdCBvbmUgPGhlYWQ+IGFuZCB0aGUgc2Vjb25kIG9uZSBhIDxib2R5PicsIC8vIDI0XG4gICAgICAnSW52YWxpZCBKU1hOb2RlIHR5cGUuIEl0IG11c3QgYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmcuIEZvdW5kOicsIC8vIDI1XG4gICAgICAnVHJhY2tpbmcgdmFsdWUgY2hhbmdlcyBjYW4gb25seSBiZSBkb25lIHRvIHVzZVN0b3JlKCkgb2JqZWN0cyBhbmQgY29tcG9uZW50IHByb3BzJywgLy8gMjZcbiAgICAgICdNaXNzaW5nIE9iamVjdCBJRCBmb3IgY2FwdHVyZWQgb2JqZWN0JywgLy8gMjdcbiAgICAgICdUaGUgcHJvdmlkZWQgQ29udGV4dCByZWZlcmVuY2UgaXMgbm90IGEgdmFsaWQgY29udGV4dCBjcmVhdGVkIGJ5IGNyZWF0ZUNvbnRleHRJZCgpJywgLy8gMjhcbiAgICAgICc8aHRtbD4gaXMgdGhlIHJvb3QgY29udGFpbmVyLCBpdCBjYW4gbm90IGJlIHJlbmRlcmVkIGluc2lkZSBhIGNvbXBvbmVudCcsIC8vIDI5XG4gICAgICAnUVJMcyBjYW4gbm90IGJlIHJlc29sdmVkIGJlY2F1c2UgaXQgZG9lcyBub3QgaGF2ZSBhbiBhdHRhY2hlZCBjb250YWluZXIuIFRoaXMgbWVhbnMgdGhhdCB0aGUgUVJMIGRvZXMgbm90IGtub3cgd2hlcmUgaXQgYmVsb25ncyBpbnNpZGUgdGhlIERPTSwgc28gaXQgY2FudCBkeW5hbWljYWxseSBpbXBvcnQoKSBmcm9tIGEgcmVsYXRpdmUgcGF0aC4nLCAvLyAzMFxuICAgICAgJ1FSTHMgY2FuIG5vdCBiZSBkeW5hbWljYWxseSByZXNvbHZlZCwgYmVjYXVzZSBpdCBkb2VzIG5vdCBoYXZlIGEgY2h1bmsgcGF0aCcsIC8vIDMxXG4gICAgICAnVGhlIEpTWCByZWYgYXR0cmlidXRlIG11c3QgYmUgYSBTaWduYWwnLCAvLyAzMlxuICAgIF07XG4gICAgcmV0dXJuIGBDb2RlKCR7Y29kZX0pOiAke01BUFtjb2RlXSA/PyAnJ31gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgQ29kZSgke2NvZGV9KWA7XG4gIH1cbn07XG4iXX0=","/**\n * @private\n */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO0lBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBWSxFQUFFO0lBQzNDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFNLEVBQWMsRUFBRTtJQUM1QyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBTSxFQUFlLEVBQUU7SUFDOUMsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBTSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGlzSHRtbEVsZW1lbnQgPSAobm9kZTogYW55KTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSAxIDogZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTZXJpYWxpemFibGVPYmplY3QgPSAodjogYW55KSA9PiB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHYpO1xuICByZXR1cm4gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodjogYW55KTogdiBpcyBhbnkgPT4ge1xuICByZXR1cm4gdiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9ICh2OiBhbnkpOiB2IGlzIGFueVtdID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAodjogYW55KTogdiBpcyBzdHJpbmcgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodjogYW55KTogdiBpcyBGdW5jdGlvbiA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSB2YWx1ZSB3aGljaCBpcyBlaXRoZXIgcmVzb2x2ZSBvciBhIHByb21pc2UuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFZhbHVlT3JQcm9taXNlPFQ+ID0gVCB8IFByb21pc2U8VD47XG4iXX0=","import { qError, QError_qrlMissingChunk, QError_qrlMissingContainer } from '../error/error';\nimport { qDynamicPlatform } from '../util/qdev';\nimport { isObject } from '../util/types';\nexport const createPlatform = () => {\n    return {\n        isServer: false,\n        importSymbol(containerEl, url, symbolName) {\n            if (!url) {\n                throw qError(QError_qrlMissingChunk, symbolName);\n            }\n            if (!containerEl) {\n                throw qError(QError_qrlMissingContainer, url, symbolName);\n            }\n            const urlDoc = toUrl(containerEl.ownerDocument, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                return findSymbol(mod, symbolName);\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol(symbolName, chunk) {\n            return [symbolName, chunk ?? '_'];\n        },\n    };\n};\nconst findSymbol = (module, symbol) => {\n    if (symbol in module) {\n        return module[symbol];\n    }\n    for (const v of Object.values(module)) {\n        if (isObject(v) && symbol in v) {\n            return v[symbol];\n        }\n    }\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *    - `Element` use `base.ownerDocument.baseURI`\n *    - `Document` use `base.baseURI`\n *    - `string` use `base` as is\n *    - `QConfig` use `base.baseURI`\n * @param url - relative URL\n * @returns fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\nlet _platform = /* @__PURE__ */ createPlatform();\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @alpha\n */\n// </docs>\nexport const setPlatform = (plt) => (_platform = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings\n * from symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but\n * is specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform`\n * is associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @alpha\n */\n// </docs>\nexport const getPlatform = () => {\n    return _platform;\n};\nexport const isServer = () => {\n    if (qDynamicPlatform) {\n        return _platform.isServer;\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertNumber(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'number')\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Vycm9yL2Fzc2VydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEMsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsS0FBUSxFQUNSLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRTtRQUNSLElBQUksS0FBSyxJQUFJLElBQUk7WUFBRSxPQUFPO1FBQzFCLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQ3pCLE1BQVcsRUFDWCxNQUFXLEVBQ1gsSUFBWSxFQUNaLEdBQUcsS0FBWTtJQUVmLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxNQUFNLEtBQUssTUFBTTtZQUFFLE9BQU87UUFDOUIsTUFBTSxlQUFlLENBQUMsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7S0FDdkM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFXLEVBQUUsSUFBWSxFQUFFLEdBQUcsS0FBWTtJQUNuRSxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksTUFBTSxLQUFLLElBQUk7WUFBRSxPQUFPO1FBQzVCLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDckUsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVE7WUFBRSxPQUFPO1FBQ3ZDLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGxvZ0Vycm9yQW5kU3RvcCB9IGZyb20gJy4uL3V0aWwvbG9nJztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RGVmaW5lZDxUPihcbiAgdmFsdWU6IFQsXG4gIHRleHQ6IHN0cmluZyxcbiAgLi4ucGFydHM6IGFueVtdXG4pOiBhc3NlcnRzIHZhbHVlIGlzIE5vbk51bGxhYmxlPFQ+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkgcmV0dXJuO1xuICAgIHRocm93IGxvZ0Vycm9yQW5kU3RvcCh0ZXh0LCAuLi5wYXJ0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEVxdWFsKFxuICB2YWx1ZTE6IGFueSxcbiAgdmFsdWUyOiBhbnksXG4gIHRleHQ6IHN0cmluZyxcbiAgLi4ucGFydHM6IGFueVtdXG4pOiBhc3NlcnRzIHZhbHVlMSBpcyB0eXBlb2YgdmFsdWUyIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUxID09PSB2YWx1ZTIpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUcnVlKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIHRydWUge1xuICBpZiAocURldikge1xuICAgIGlmICh2YWx1ZTEgPT09IHRydWUpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIodmFsdWUxOiBhbnksIHRleHQ6IHN0cmluZywgLi4ucGFydHM6IGFueVtdKTogYXNzZXJ0cyB2YWx1ZTEgaXMgbnVtYmVyIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlMSA9PT0gJ251bWJlcicpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG4iXX0=","export const isPromise = (value) => {\n    return value instanceof Promise;\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const promise = call();\n        if (isPromise(promise)) {\n            return promise.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(promise);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const then = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const promiseAllLazy = (promises) => {\n    if (promises.length > 0) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsT0FBTyxLQUFLLFlBQVksT0FBTyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixJQUE2QixFQUM3QixNQUE4QyxFQUM5QyxRQUE0QixFQUNMLEVBQUU7SUFDekIsSUFBSTtRQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDOUM7YUFBTTtZQUNMLE9BQU8sTUFBTSxDQUFDLE9BQWMsQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQ2xCLE9BQTBCLEVBQzFCLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFjLENBQUMsQ0FBQztBQUNuRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsUUFBVyxFQUNrRCxFQUFFO0lBQy9ELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FDNUIsUUFBVyxFQUNXLEVBQUU7SUFDeEIsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN2QixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFRLENBQUM7S0FDckM7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBSSxDQUFJLEVBQXVCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBQcm9taXNlVHJlZTxUPiA9IFQgfCBQcm9taXNlPFQ+IHwgUHJvbWlzZTxUW10+IHwgQXJyYXk8UHJvbWlzZVRyZWU8VD4+O1xuXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlPGFueT4gPT4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhZmVDYWxsID0gPFQsIEIsIEM+KFxuICBjYWxsOiAoKSA9PiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPixcbiAgcmVqZWN0Rm46IChyZWFzb246IGFueSkgPT4gQ1xuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9taXNlID0gY2FsbCgpO1xuICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVqZWN0Rm4oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0aGVuID0gPFQsIEI+KFxuICBwcm9taXNlOiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPlxuKTogVmFsdWVPclByb21pc2U8Qj4gPT4ge1xuICByZXR1cm4gaXNQcm9taXNlKHByb21pc2UpID8gcHJvbWlzZS50aGVuKHRoZW5GbiBhcyBhbnkpIDogdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlQWxsID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogQXdhaXRlZDxUW1BdPiB9PiA9PiB7XG4gIGNvbnN0IGhhc1Byb21pc2UgPSBwcm9taXNlcy5zb21lKGlzUHJvbWlzZSk7XG4gIGlmIChoYXNQcm9taXNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IHByb21pc2VBbGxMYXp5ID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmIChwcm9taXNlcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKSBhcyBhbnk7XG4gIH1cbiAgcmV0dXJuIHByb21pc2VzIGFzIGFueTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc05vdE51bGxhYmxlID0gPFQ+KHY6IFQpOiB2IGlzIE5vbk51bGxhYmxlPFQ+ID0+IHtcbiAgcmV0dXJuIHYgIT0gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxheSA9ICh0aW1lb3V0OiBudW1iZXIpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0KTtcbiAgfSk7XG59O1xuIl19","import { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n    Error.stackTraceLimit = 9999;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRTVCLElBQUksSUFBSSxFQUFFO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA5OTk5O1xufVxuIl19","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL, emitEvent, getSymbolHash } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { qError, QError_dynamicImportFailed, QError_qrlMissingChunk, QError_unknownTypeArgument, } from '../error/error';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { assertDefined, assertTrue } from '../error/assert';\nimport { assertElement } from '../util/element';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst announcedQRL = /*@__PURE__*/ new Set();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @see `QRL`, `$(...)`\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - a set of lexically scoped variables to capture.\n * @alpha\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY, stackOffset = 0) => {\n    let chunk = null;\n    let symbolFn = null;\n    if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        if (qSerialize) {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2 + stackOffset];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n        }\n    }\n    else if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    if (announcedQRL.has(symbol)) {\n        // Emit event\n        announcedQRL.add(symbol);\n        emitEvent('qprefetch', {\n            symbols: [getSymbolHash(symbol)],\n        });\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\n/**\n * @internal\n */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(null, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\n/**\n * @internal\n */\nexport const _noopQrl = (symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    return createQRL(null, symbolName, null, null, null, lexicalScopeCapture, null);\n};\n/**\n * @internal\n */\nexport const qrlDEV = (chunkOrFn, symbol, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = qrl(chunkOrFn, symbol, lexicalScopeCapture, 1);\n    newQrl.dev = opts;\n    return newQrl;\n};\n/**\n * @internal\n */\nexport const inlinedQrlDEV = (symbol, symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const qrl = inlinedQrl(symbol, symbolName, lexicalScopeCapture);\n    qrl.dev = opts;\n    return qrl;\n};\nexport const serializeQRL = (qrl, opts = {}) => {\n    assertTrue(qSerialize, 'In order to serialize a QRL, qSerialize must be true');\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol, chunk);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    if (qRuntimeQrl && !chunk) {\n        chunk = '/runtimeQRL';\n        symbol = '_';\n    }\n    if (!chunk) {\n        throw qError(QError_qrlMissingChunk, qrl.$symbol$);\n    }\n    if (chunk.startsWith('./')) {\n        chunk = chunk.slice(2);\n    }\n    const parts = [chunk, '#', symbol];\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (captureRef && captureRef.length) {\n        if (opts.$getObjId$) {\n            const capture = captureRef.map(opts.$getObjId$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n        else if (opts.$addRefMap$) {\n            const capture = captureRef.map(opts.$addRefMap$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n    }\n    else if (capture && capture.length > 0) {\n        parts.push(`[${capture.join(' ')}]`);\n    }\n    return parts.join('');\n};\nexport const serializeQRLs = (existingQRLs, elCtx) => {\n    assertElement(elCtx.$element$);\n    const opts = {\n        $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj),\n    };\n    return existingQRLs.map((qrl) => serializeQRL(qrl, opts)).join('\\n');\n};\n/**\n * `./chunk#symbol[captures]\n */\nexport const parseQRL = (qrl, containerEl) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (containerEl) {\n        iQrl.$setContainer$(containerEl);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return array.length - 1;\n    }\n    return index;\n};\nexport const inflateQrl = (qrl, elCtx) => {\n    assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n    return (qrl.$captureRef$ = qrl.$capture$.map((idx) => {\n        const int = parseInt(idx, 10);\n        const obj = elCtx.$refMap$[int];\n        assertTrue(elCtx.$refMap$.length > int, 'out of bounds inflate access', idx);\n        return obj;\n    }));\n};\n/**\n * @internal\n */\nexport const _regSymbol = (symbol, hash) => {\n    if (typeof globalThis.__qwik_reg_symbols === 'undefined') {\n        globalThis.__qwik_reg_symbols = new Map();\n    }\n    globalThis.__qwik_reg_symbols.set(hash, symbol);\n    return symbol;\n};\n//# sourceMappingURL=data:application/json;base64,","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\nexport const fromKebabToCamelCase = (text) => {\n    return text.replace(/-./g, (x) => x[1].toUpperCase());\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUU7SUFDM0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZyb21DYW1lbFRvS2ViYWJDYXNlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbUtlYmFiVG9DYW1lbENhc2UgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvLS4vZywgKHgpID0+IHhbMV0udG9VcHBlckNhc2UoKSk7XG59O1xuIl19","/**\n * State factory of the component.\n */\nexport const OnRenderProp = 'q:renderFn';\n/**\n * Component style host prefix\n */\nexport const ComponentStylesPrefixHost = '💎';\n/**\n * Component style content prefix\n */\nexport const ComponentStylesPrefixContent = '⭐️';\n/**\n * Prefix used to identify on listeners.\n */\nexport const EventPrefix = 'on:';\n/**\n * Attribute used to mark that an event listener is attached.\n */\nexport const EventAny = 'on:.';\n/**\n * `<some-element q:slot=\"...\">`\n */\nexport const QSlot = 'q:slot';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QLocaleAttr = 'q:locale';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const RenderEvent = 'qRender';\n/**\n * `<q:slot name=\"...\">`\n */\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const ELEMENT_ID_Q_PROPS_PREFIX = '&';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUVoQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFFNUMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsaUJBQWlCLENBQUM7QUFFcEQsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLFNBQVMsQ0FBQztBQUNyQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxRQUFRLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQztBQUNqQyxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxVQUFVLENBQUM7QUFDOUMsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsR0FBRyxDQUFDO0FBQ3JDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEdBQUcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3RhdGUgZmFjdG9yeSBvZiB0aGUgY29tcG9uZW50LlxuICovXG5leHBvcnQgY29uc3QgT25SZW5kZXJQcm9wID0gJ3E6cmVuZGVyRm4nO1xuXG4vKipcbiAqIENvbXBvbmVudCBzdHlsZSBob3N0IHByZWZpeFxuICovXG5leHBvcnQgY29uc3QgQ29tcG9uZW50U3R5bGVzUHJlZml4SG9zdCA9ICfwn5KOJztcblxuLyoqXG4gKiBDb21wb25lbnQgc3R5bGUgY29udGVudCBwcmVmaXhcbiAqL1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgPSAn4q2Q77iPJztcblxuLyoqXG4gKiBQcmVmaXggdXNlZCB0byBpZGVudGlmeSBvbiBsaXN0ZW5lcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBFdmVudFByZWZpeCA9ICdvbjonO1xuXG4vKipcbiAqIEF0dHJpYnV0ZSB1c2VkIHRvIG1hcmsgdGhhdCBhbiBldmVudCBsaXN0ZW5lciBpcyBhdHRhY2hlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IEV2ZW50QW55ID0gJ29uOi4nO1xuLyoqXG4gKiBgPHNvbWUtZWxlbWVudCBxOnNsb3Q9XCIuLi5cIj5gXG4gKi9cbmV4cG9ydCBjb25zdCBRU2xvdCA9ICdxOnNsb3QnO1xuZXhwb3J0IGNvbnN0IFFTbG90UmVmID0gJ3E6c3JlZic7XG5leHBvcnQgY29uc3QgUVNsb3RTID0gJ3E6cyc7XG5leHBvcnQgY29uc3QgUVN0eWxlID0gJ3E6c3R5bGUnO1xuZXhwb3J0IGNvbnN0IFFTY29wZWRTdHlsZSA9ICdxOnNzdHlsZSc7XG5leHBvcnQgY29uc3QgUUN0eEF0dHIgPSAncTpjdHgnO1xuXG5leHBvcnQgY29uc3QgUUxvY2FsZUF0dHIgPSAncTpsb2NhbGUnO1xuZXhwb3J0IGNvbnN0IFFDb250YWluZXJBdHRyID0gJ3E6Y29udGFpbmVyJztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJTZWxlY3RvciA9ICdbcVxcXFw6Y29udGFpbmVyXSc7XG5cbmV4cG9ydCBjb25zdCBSZW5kZXJFdmVudCA9ICdxUmVuZGVyJztcbi8qKlxuICogYDxxOnNsb3QgbmFtZT1cIi4uLlwiPmBcbiAqL1xuZXhwb3J0IGNvbnN0IFFTbG90SW5lcnROYW1lID0gJ1xcdTAwMDAnO1xuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRCA9ICdxOmlkJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1NFTEVDVE9SID0gJ1txXFxcXDppZF0nO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUFJFRklYID0gJyMnO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUV9QUk9QU19QUkVGSVggPSAnJic7XG4iXX0=","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDakYsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4vZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RTZXRBdHRyaWJ1dGUgPSAoZWw6IFF3aWtFbGVtZW50LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGVsLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGlyZWN0R2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7XG59O1xuIl19","import { qError, QError_invalidRefValue } from '../error/error';\nimport { isServer } from '../platform/platform';\nimport { logWarn } from '../util/log';\nimport { qSerialize, qTest, seal } from '../util/qdev';\nimport { isFunction, isObject } from '../util/types';\nimport { fromKebabToCamelCase } from '../util/case';\nimport { QContainerAttr } from '../util/markers';\nimport { isElement } from '../util/element';\nimport { createSubscriptionManager } from '../state/common';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertTrue } from '../error/assert';\nconst CONTAINER_STATE = Symbol('ContainerState');\n/**\n * @internal\n */\nexport const _getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        assertTrue(!isServer(), 'Container state can only be created lazily on the browser');\n        containerEl[CONTAINER_STATE] = set = createContainerState(containerEl, directGetAttribute(containerEl, 'q:base') ?? '/');\n    }\n    return set;\n};\nexport const createContainerState = (containerEl, base) => {\n    const containerState = {\n        $containerEl$: containerEl,\n        $elementIndex$: 0,\n        $proxyMap$: new WeakMap(),\n        $opsNext$: new Set(),\n        $watchNext$: new Set(),\n        $watchStaging$: new Set(),\n        $hostsNext$: new Set(),\n        $hostsStaging$: new Set(),\n        $styleIds$: new Set(),\n        $events$: new Set(),\n        $serverData$: {},\n        $base$: base,\n        $renderPromise$: undefined,\n        $hostsRendering$: undefined,\n        $pauseCtx$: undefined,\n        $subsManager$: null,\n    };\n    seal(containerState);\n    containerState.$subsManager$ = createSubscriptionManager(containerState);\n    return containerState;\n};\nexport const setRef = (value, elm) => {\n    if (isFunction(value)) {\n        return value(elm);\n    }\n    else if (isObject(value)) {\n        if ('current' in value) {\n            return (value.current = elm);\n        }\n        else if ('value' in value) {\n            return (value.value = elm);\n        }\n    }\n    throw qError(QError_invalidRefValue, value);\n};\nexport const addQwikEvent = (prop, containerState) => {\n    var _a;\n    const eventName = getEventName(prop);\n    if (!qTest && !isServer()) {\n        try {\n            const qwikevents = ((_a = globalThis).qwikevents || (_a.qwikevents = []));\n            qwikevents.push(eventName);\n        }\n        catch (err) {\n            logWarn(err);\n        }\n    }\n    if (qSerialize) {\n        containerState.$events$.add(eventName);\n    }\n};\nexport const SHOW_ELEMENT = 1;\nexport const SHOW_COMMENT = 128;\nexport const FILTER_ACCEPT = 1;\nexport const FILTER_REJECT = 2;\nexport const FILTER_SKIP = 3;\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\nexport const getEventName = (attribute) => {\n    const colonPos = attribute.indexOf(':');\n    if (attribute) {\n        return fromKebabToCamelCase(attribute.slice(colonPos + 1));\n    }\n    else {\n        return attribute;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { assertQrl, isQrl } from '../qrl/qrl-class';\nimport { $ } from '../qrl/qrl.public';\nimport { isArray } from '../util/types';\nimport { assertTrue } from '../error/assert';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { fromCamelToKebabCase } from '../util/case';\nconst ON_PROP_REGEX = /^(on|window:|document:)/;\nexport const PREVENT_DEFAULT = 'preventdefault:';\nexport const isOnProp = (prop) => {\n    return prop.endsWith('$') && ON_PROP_REGEX.test(prop);\n};\nexport const groupListeners = (listeners) => {\n    if (listeners.length === 0) {\n        return EMPTY_ARRAY;\n    }\n    if (listeners.length === 1) {\n        const listener = listeners[0];\n        return [[listener[0], [listener[1]]]];\n    }\n    const keys = [];\n    for (let i = 0; i < listeners.length; i++) {\n        const eventName = listeners[i][0];\n        if (!keys.includes(eventName)) {\n            keys.push(eventName);\n        }\n    }\n    return keys.map((eventName) => {\n        return [eventName, listeners.filter((l) => l[0] === eventName).map((a) => a[1])];\n    });\n};\nexport const setEvent = (existingListeners, prop, input, containerEl) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    prop = normalizeOnProp(prop.slice(0, -1));\n    if (input) {\n        if (isArray(input)) {\n            const processed = input\n                .flat(Infinity)\n                .filter((q) => q != null)\n                .map((q) => [prop, ensureQrl(q, containerEl)]);\n            existingListeners.push(...processed);\n        }\n        else {\n            existingListeners.push([prop, ensureQrl(input, containerEl)]);\n        }\n    }\n    return prop;\n};\nconst PREFIXES = ['on', 'window:on', 'document:on'];\nconst SCOPED = ['on', 'on-window', 'on-document'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n            break;\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = fromCamelToKebabCase(prop.slice(1));\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return scope + ':' + prop;\n};\nconst ensureQrl = (value, containerEl) => {\n    if (qSerialize && !qRuntimeQrl) {\n        assertQrl(value);\n        value.$setContainer$(containerEl);\n        return value;\n    }\n    const qrl = isQrl(value) ? value : $(value);\n    qrl.$setContainer$(containerEl);\n    return qrl;\n};\nexport const getDomListeners = (elCtx, containerEl) => {\n    const attributes = elCtx.$element$.attributes;\n    const listeners = [];\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            const urls = value.split('\\n');\n            for (const url of urls) {\n                const qrl = parseQRL(url, containerEl);\n                if (qrl.$capture$) {\n                    inflateQrl(qrl, elCtx);\n                }\n                listeners.push([name, qrl]);\n            }\n        }\n    }\n    return listeners;\n};\n//# sourceMappingURL=data:application/json;base64,","export function isTemplate(node) {\n    const tagName = (node && node.tagName) || '';\n    return tagName.toUpperCase() == 'TEMPLATE';\n}\nexport function prettyHtml(element, prefix = '') {\n    const lines = [];\n    lines.push(prefix, '<', element.localName);\n    const attrs = element.attributes;\n    for (let i = 0; i < attrs.length; i++) {\n        const attr = attrs[i];\n        lines.push('\\n', prefix, '    ', attr.name, '=\"', attr.value, '\"');\n    }\n    lines.push('>');\n    let child = isTemplate(element) ? element.content.firstChild : element.firstChild;\n    while (child) {\n        if (isElement(child)) {\n            lines.push('\\n', prettyHtml(child, prefix + '  '));\n        }\n        else {\n            lines.push('\\n', prefix, child.textContent);\n        }\n        child = child.nextSibling;\n    }\n    lines.push('\\n', prefix, '</', element.localName, '>');\n    return lines.join('');\n}\nexport function isElement(value) {\n    return isNode(value) && value.nodeType === 1;\n}\nexport function isNode(value) {\n    return value && typeof value.nodeType === 'number';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvdGVzdGluZy9odG1sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxVQUFVLENBQUMsSUFBNkI7SUFDdEQsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUssSUFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUQsT0FBTyxPQUFPLENBQUMsV0FBVyxFQUFFLElBQUksVUFBVSxDQUFDO0FBQzdDLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLE9BQW9CLEVBQUUsU0FBaUIsRUFBRTtJQUNsRSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMzQyxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDcEU7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLElBQUksS0FBSyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7SUFDbEYsT0FBTyxLQUFLLEVBQUU7UUFDWixJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNwQixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO2FBQU07WUFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzdDO1FBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7S0FDM0I7SUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLEtBQVU7SUFDbEMsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQztBQUVELE1BQU0sVUFBVSxNQUFNLENBQUMsS0FBVTtJQUMvQixPQUFPLEtBQUssSUFBSSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNUZW1wbGF0ZShub2RlOiBOb2RlIHwgbnVsbCB8IHVuZGVmaW5lZCk6IG5vZGUgaXMgSFRNTFRlbXBsYXRlRWxlbWVudCB7XG4gIGNvbnN0IHRhZ05hbWUgPSAobm9kZSAmJiAobm9kZSBhcyBFbGVtZW50KS50YWdOYW1lKSB8fCAnJztcbiAgcmV0dXJuIHRhZ05hbWUudG9VcHBlckNhc2UoKSA9PSAnVEVNUExBVEUnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldHR5SHRtbChlbGVtZW50OiBIVE1MRWxlbWVudCwgcHJlZml4OiBzdHJpbmcgPSAnJyk6IGFueSB7XG4gIGNvbnN0IGxpbmVzID0gW107XG4gIGxpbmVzLnB1c2gocHJlZml4LCAnPCcsIGVsZW1lbnQubG9jYWxOYW1lKTtcbiAgY29uc3QgYXR0cnMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhdHRyID0gYXR0cnNbaV07XG4gICAgbGluZXMucHVzaCgnXFxuJywgcHJlZml4LCAnICAgICcsIGF0dHIubmFtZSwgJz1cIicsIGF0dHIudmFsdWUsICdcIicpO1xuICB9XG4gIGxpbmVzLnB1c2goJz4nKTtcbiAgbGV0IGNoaWxkID0gaXNUZW1wbGF0ZShlbGVtZW50KSA/IGVsZW1lbnQuY29udGVudC5maXJzdENoaWxkIDogZWxlbWVudC5maXJzdENoaWxkO1xuICB3aGlsZSAoY2hpbGQpIHtcbiAgICBpZiAoaXNFbGVtZW50KGNoaWxkKSkge1xuICAgICAgbGluZXMucHVzaCgnXFxuJywgcHJldHR5SHRtbChjaGlsZCwgcHJlZml4ICsgJyAgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lcy5wdXNoKCdcXG4nLCBwcmVmaXgsIGNoaWxkLnRleHRDb250ZW50KTtcbiAgICB9XG4gICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcbiAgfVxuICBsaW5lcy5wdXNoKCdcXG4nLCBwcmVmaXgsICc8LycsIGVsZW1lbnQubG9jYWxOYW1lLCAnPicpO1xuICByZXR1cm4gbGluZXMuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnQodmFsdWU6IGFueSk6IHZhbHVlIGlzIEhUTUxFbGVtZW50IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09PSAnbnVtYmVyJztcbn1cbiJdfQ==","export const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\nexport const QOjectTargetSymbol = Symbol('proxy target');\nexport const QObjectFlagsSymbol = Symbol('proxy flags');\nexport const QObjectManagerSymbol = Symbol('proxy manager');\n/**\n * @internal\n */\nexport const _IMMUTABLE = Symbol('IMMUTABLE');\nexport const _IMMUTABLE_PREFIX = '$$';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3N0YXRlL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN4RCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFNUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRTlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBRT2JqZWN0UmVjdXJzaXZlID0gMSA8PCAwO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RJbW11dGFibGUgPSAxIDw8IDE7XG5cbmV4cG9ydCBjb25zdCBRT2plY3RUYXJnZXRTeW1ib2wgPSBTeW1ib2woJ3Byb3h5IHRhcmdldCcpO1xuZXhwb3J0IGNvbnN0IFFPYmplY3RGbGFnc1N5bWJvbCA9IFN5bWJvbCgncHJveHkgZmxhZ3MnKTtcbmV4cG9ydCBjb25zdCBRT2JqZWN0TWFuYWdlclN5bWJvbCA9IFN5bWJvbCgncHJveHkgbWFuYWdlcicpO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgX0lNTVVUQUJMRSA9IFN5bWJvbCgnSU1NVVRBQkxFJyk7XG5cbmV4cG9ydCBjb25zdCBfSU1NVVRBQkxFX1BSRUZJWCA9ICckJCc7XG4iXX0=","import { assertEqual, assertTrue } from '../error/assert';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { RenderEvent } from '../util/markers';\nimport { isObject } from '../util/types';\nimport { getProxyManager, getProxyTarget, verifySerializable, } from './common';\nimport { QObjectManagerSymbol, _IMMUTABLE, _IMMUTABLE_PREFIX } from './constants';\n/**\n * @internal\n */\nexport const _createSignal = (value, containerState, subcriptions) => {\n    const manager = containerState.$subsManager$.$createManager$(subcriptions);\n    const signal = new SignalImpl(value, manager);\n    return signal;\n};\nexport class SignalImpl {\n    constructor(v, manager) {\n        this.untrackedValue = v;\n        this[QObjectManagerSymbol] = manager;\n    }\n    // prevent accidental use as value\n    valueOf() {\n        throw new TypeError('Cannot coerce a Signal, use `.value` instead');\n    }\n    toString() {\n        return `[Signal ${String(this.value)}]`;\n    }\n    toJSON() {\n        return { value: this.value };\n    }\n    get value() {\n        const sub = tryGetInvokeContext()?.$subscriber$;\n        if (sub) {\n            this[QObjectManagerSymbol].$addSub$([0, sub, undefined]);\n        }\n        return this.untrackedValue;\n    }\n    set value(v) {\n        if (qDev) {\n            verifySerializable(v);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useBrowserVisibleTask() or useServerMount()', invokeCtx.$hostElement$);\n            }\n        }\n        const manager = this[QObjectManagerSymbol];\n        const oldValue = this.untrackedValue;\n        if (manager && oldValue !== v) {\n            this.untrackedValue = v;\n            manager.$notifySubs$();\n        }\n    }\n}\nexport const isSignal = (obj) => {\n    return obj instanceof SignalImpl || obj instanceof SignalWrapper;\n};\nexport const addSignalSub = (type, hostEl, signal, elm, property) => {\n    const subscription = signal instanceof SignalWrapper\n        ? [type, hostEl, getProxyTarget(signal.ref), elm, property, signal.prop]\n        : [type, hostEl, signal, elm, property, 'value'];\n    getProxyManager(signal).$addSub$(subscription);\n};\nexport class SignalWrapper {\n    constructor(ref, prop) {\n        this.ref = ref;\n        this.prop = prop;\n    }\n    get [QObjectManagerSymbol]() {\n        return getProxyManager(this.ref);\n    }\n    get value() {\n        return this.ref[this.prop];\n    }\n    set value(value) {\n        this.ref[this.prop] = value;\n    }\n}\n/**\n * @internal\n */\nexport const _wrapSignal = (obj, prop) => {\n    if (!isObject(obj)) {\n        return obj[prop];\n    }\n    if (obj instanceof SignalImpl) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return obj;\n    }\n    if (obj instanceof SignalWrapper) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return obj;\n    }\n    const target = getProxyTarget(obj);\n    if (target) {\n        const signal = target[_IMMUTABLE_PREFIX + prop];\n        if (signal) {\n            assertTrue(isSignal(signal), `${_IMMUTABLE_PREFIX} has to be a signal kind`);\n            return signal;\n        }\n        if (target[_IMMUTABLE]?.[prop] !== true) {\n            return new SignalWrapper(obj, prop);\n        }\n    }\n    const immutable = obj[_IMMUTABLE]?.[prop];\n    if (isSignal(immutable)) {\n        return immutable;\n    }\n    return obj[prop];\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertNumber, assertTrue } from '../error/assert';\nimport { qError, QError_immutableProps } from '../error/error';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { qDev } from '../util/qdev';\nimport { RenderEvent } from '../util/markers';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { fastSkipSerialize, unwrapProxy, verifySerializable, } from './common';\nimport { isSignal } from './signal';\nimport { QObjectFlagsSymbol, QObjectImmutable, QObjectManagerSymbol, QObjectRecursive, QOjectTargetSymbol, _IMMUTABLE, _IMMUTABLE_PREFIX, } from './constants';\nimport { logError } from '../util/log';\n/**\n * Creates a proxy that notifies of any writes.\n */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    if (flags !== 0) {\n        setObjectFlags(target, flags);\n    }\n    return createProxy(target, containerState, undefined);\n};\nexport const createProxy = (target, containerState, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!containerState.$proxyMap$.has(target), 'Proxy was already created', target);\n    assertTrue(isObject(target), 'Target must be an object');\n    assertTrue(isSerializableObject(target) || isArray(target), 'Target must be a serializable object');\n    const manager = containerState.$subsManager$.$createManager$(subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nexport const createPropsState = () => {\n    const props = {};\n    setObjectFlags(props, QObjectImmutable);\n    return props;\n};\nexport const setObjectFlags = (obj, flags) => {\n    Object.defineProperty(obj, QObjectFlagsSymbol, { value: flags, enumerable: false });\n};\n/**\n * @internal\n */\nexport const _restProps = (props, omit) => {\n    const rest = {};\n    for (const key in props) {\n        if (!omit.includes(key)) {\n            rest[key] = props[key];\n        }\n    }\n    return rest;\n};\nclass ReadWriteProxyHandler {\n    constructor($containerState$, $manager$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol)\n                return target;\n            if (prop === QObjectManagerSymbol)\n                return this.$manager$;\n            return target[prop];\n        }\n        let subscriber;\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const immutable = (flags & QObjectImmutable) !== 0;\n        let value = target[prop];\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (immutable) {\n            const hiddenSignal = target[_IMMUTABLE_PREFIX + prop];\n            const immutableMeta = target[_IMMUTABLE]?.[prop];\n            if (!(prop in target) ||\n                !!hiddenSignal ||\n                isSignal(immutableMeta) ||\n                immutableMeta === _IMMUTABLE) {\n                subscriber = null;\n            }\n            if (hiddenSignal) {\n                assertTrue(isSignal(hiddenSignal), '$$ prop must be a signal');\n                value = hiddenSignal.value;\n            }\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$([0, subscriber, isA ? undefined : prop]);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            verifySerializable(unwrappedNewValue);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logError('State mutation inside render function. Move mutation to useWatch(), useBrowserVisibleTask() or useServerMount()', prop);\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        if (oldValue !== unwrappedNewValue) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol)\n            return true;\n        const hasOwnProperty = Object.prototype.hasOwnProperty;\n        if (hasOwnProperty.call(target, property)) {\n            return true;\n        }\n        if (typeof property === 'string' && hasOwnProperty.call(target, _IMMUTABLE_PREFIX + property)) {\n            return true;\n        }\n        return false;\n    }\n    ownKeys(target) {\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (!immutable) {\n            let subscriber = null;\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx) {\n                subscriber = invokeCtx.$subscriber$;\n            }\n            if (subscriber) {\n                this.$manager$.$addSub$([0, subscriber, undefined]);\n            }\n        }\n        if (isArray(target)) {\n            return Reflect.ownKeys(target);\n        }\n        return Reflect.ownKeys(target).map((a) => {\n            return typeof a === 'string' && a.startsWith(_IMMUTABLE_PREFIX)\n                ? a.slice(_IMMUTABLE_PREFIX.length)\n                : a;\n        });\n    }\n    getOwnPropertyDescriptor(target, prop) {\n        if (isArray(target) || typeof prop === 'symbol') {\n            return Object.getOwnPropertyDescriptor(target, prop);\n        }\n        return {\n            enumerable: true,\n            configurable: true,\n        };\n    }\n}\nconst wrap = (value, containerState) => {\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (fastSkipSerialize(nakedValue)) {\n            return value;\n        }\n        if (isSerializableObject(nakedValue) || isArray(nakedValue)) {\n            const proxy = containerState.$proxyMap$.get(nakedValue);\n            return proxy ? proxy : getOrCreateProxy(nakedValue, containerState, QObjectRecursive);\n        }\n    }\n    return value;\n};\n//# sourceMappingURL=data:application/json;base64,","import { destroyWatch } from '../use/use-task';\nimport { getDomListeners } from './listeners';\nimport { seal } from '../util/qdev';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { isElement } from '../../testing/html';\nimport { assertQwikElement } from '../util/element';\nimport { assertTrue } from '../error/assert';\nimport { QScopedStyle } from '../util/markers';\nimport { createPropsState, createProxy } from './store';\nexport const Q_CTX = '_qc_';\nexport const HOST_FLAG_DIRTY = 1 << 0;\nexport const HOST_FLAG_NEED_ATTACH_LISTENER = 1 << 1;\nexport const HOST_FLAG_MOUNTED = 1 << 2;\nexport const HOST_FLAG_DYNAMIC = 1 << 3;\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (el, containerState) => {\n    assertQwikElement(el);\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx;\n    }\n    const elCtx = createContext(el);\n    const elementID = directGetAttribute(el, 'q:id');\n    if (elementID) {\n        const pauseCtx = containerState.$pauseCtx$;\n        elCtx.$id$ = elementID;\n        if (pauseCtx) {\n            const { getObject, meta, refs } = pauseCtx;\n            if (isElement(el)) {\n                const refMap = refs[elementID];\n                if (refMap) {\n                    assertTrue(isElement(el), 'el must be an actual DOM element');\n                    elCtx.$refMap$ = refMap.split(' ').map(getObject);\n                    elCtx.li = getDomListeners(elCtx, containerState.$containerEl$);\n                }\n            }\n            else {\n                const ctxMeta = meta[elementID];\n                if (ctxMeta) {\n                    const seq = ctxMeta.s;\n                    const host = ctxMeta.h;\n                    const contexts = ctxMeta.c;\n                    const watches = ctxMeta.w;\n                    if (seq) {\n                        elCtx.$seq$ = seq.split(' ').map(getObject);\n                    }\n                    if (watches) {\n                        elCtx.$watches$ = watches.split(' ').map(getObject);\n                    }\n                    if (contexts) {\n                        elCtx.$contexts$ = new Map();\n                        for (const part of contexts.split(' ')) {\n                            const [key, value] = part.split('=');\n                            elCtx.$contexts$.set(key, getObject(value));\n                        }\n                    }\n                    // Restore sequence scoping\n                    if (host) {\n                        const [renderQrl, props] = host.split(' ');\n                        const styleIds = el.getAttribute(QScopedStyle);\n                        elCtx.$scopeIds$ = styleIds ? styleIds.split('|') : null;\n                        elCtx.$flags$ = HOST_FLAG_MOUNTED;\n                        if (renderQrl) {\n                            elCtx.$componentQrl$ = getObject(renderQrl);\n                        }\n                        if (props) {\n                            elCtx.$props$ = getObject(props);\n                        }\n                        else {\n                            elCtx.$props$ = createProxy(createPropsState(), containerState);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return elCtx;\n};\nexport const createContext = (element) => {\n    const ctx = {\n        $flags$: 0,\n        $id$: '',\n        $element$: element,\n        $refMap$: [],\n        li: [],\n        $watches$: null,\n        $seq$: null,\n        $slots$: null,\n        $scopeIds$: null,\n        $appendStyles$: null,\n        $props$: null,\n        $vdom$: null,\n        $componentQrl$: null,\n        $contexts$: null,\n        $dynamicSlots$: null,\n        $parent$: null,\n        $slotParent$: null,\n    };\n    seal(ctx);\n    element[Q_CTX] = ctx;\n    return ctx;\n};\nexport const cleanupContext = (elCtx, subsManager) => {\n    const el = elCtx.$element$;\n    elCtx.$watches$?.forEach((watch) => {\n        subsManager.$clearSub$(watch);\n        destroyWatch(watch);\n    });\n    if (elCtx.$componentQrl$) {\n        subsManager.$clearSub$(el);\n    }\n    elCtx.$componentQrl$ = null;\n    elCtx.$seq$ = null;\n    elCtx.$watches$ = null;\n    elCtx.$flags$ = 0;\n    el[Q_CTX] = undefined;\n};\n//# sourceMappingURL=data:application/json;base64,","import { tryGetInvokeContext } from './use-core';\nlet _locale = undefined;\n/**\n * Retrieve the current lang.\n *\n * If no current lang and there is no `defaultLang` the function throws an error.\n *\n * @returns  the lang.\n * @internal\n */\nexport function getLocale(defaultLocale) {\n    if (_locale === undefined) {\n        const ctx = tryGetInvokeContext();\n        if (ctx && ctx.$locale$) {\n            return ctx.$locale$;\n        }\n        if (defaultLocale !== undefined) {\n            return defaultLocale;\n        }\n        throw new Error('Reading `locale` outside of context.');\n    }\n    return _locale;\n}\n/**\n * Override the `getLocale` with `lang` within the `fn` execution.\n *\n * @internal\n */\nexport function withLocale(locale, fn) {\n    const previousLang = _locale;\n    try {\n        _locale = locale;\n        return fn();\n    }\n    finally {\n        _locale = previousLang;\n    }\n}\n/**\n * Globally set a lang.\n *\n * This can be used only in browser. Server execution requires that each\n * request could potentially be a different lang, therefore setting\n * a global lang would produce incorrect responses.\n *\n * @param lang\n */\nexport function setLocale(locale) {\n    _locale = locale;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxvY2FsZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLWxvY2FsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFakQsSUFBSSxPQUFPLEdBQXVCLFNBQVMsQ0FBQztBQUU1Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxhQUFzQjtJQUM5QyxJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7UUFDekIsTUFBTSxHQUFHLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQztRQUNsQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO1lBQ3ZCLE9BQU8sR0FBRyxDQUFDLFFBQVEsQ0FBQztTQUNyQjtRQUNELElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtZQUMvQixPQUFPLGFBQWEsQ0FBQztTQUN0QjtRQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN6RDtJQUNELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBSSxNQUFjLEVBQUUsRUFBVztJQUN2RCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7SUFDN0IsSUFBSTtRQUNGLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDakIsT0FBTyxFQUFFLEVBQUUsQ0FBQztLQUNiO1lBQVM7UUFDUixPQUFPLEdBQUcsWUFBWSxDQUFDO0tBQ3hCO0FBQ0gsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxNQUFjO0lBQ3RDLE9BQU8sR0FBRyxNQUFNLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRyeUdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxubGV0IF9sb2NhbGU6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgY3VycmVudCBsYW5nLlxuICpcbiAqIElmIG5vIGN1cnJlbnQgbGFuZyBhbmQgdGhlcmUgaXMgbm8gYGRlZmF1bHRMYW5nYCB0aGUgZnVuY3Rpb24gdGhyb3dzIGFuIGVycm9yLlxuICpcbiAqIEByZXR1cm5zICB0aGUgbGFuZy5cbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYWxlKGRlZmF1bHRMb2NhbGU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoX2xvY2FsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgY3R4ID0gdHJ5R2V0SW52b2tlQ29udGV4dCgpO1xuICAgIGlmIChjdHggJiYgY3R4LiRsb2NhbGUkKSB7XG4gICAgICByZXR1cm4gY3R4LiRsb2NhbGUkO1xuICAgIH1cbiAgICBpZiAoZGVmYXVsdExvY2FsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdExvY2FsZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZWFkaW5nIGBsb2NhbGVgIG91dHNpZGUgb2YgY29udGV4dC4nKTtcbiAgfVxuICByZXR1cm4gX2xvY2FsZTtcbn1cblxuLyoqXG4gKiBPdmVycmlkZSB0aGUgYGdldExvY2FsZWAgd2l0aCBgbGFuZ2Agd2l0aGluIHRoZSBgZm5gIGV4ZWN1dGlvbi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhMb2NhbGU8VD4obG9jYWxlOiBzdHJpbmcsIGZuOiAoKSA9PiBUKTogVCB7XG4gIGNvbnN0IHByZXZpb3VzTGFuZyA9IF9sb2NhbGU7XG4gIHRyeSB7XG4gICAgX2xvY2FsZSA9IGxvY2FsZTtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfbG9jYWxlID0gcHJldmlvdXNMYW5nO1xuICB9XG59XG5cbi8qKlxuICogR2xvYmFsbHkgc2V0IGEgbGFuZy5cbiAqXG4gKiBUaGlzIGNhbiBiZSB1c2VkIG9ubHkgaW4gYnJvd3Nlci4gU2VydmVyIGV4ZWN1dGlvbiByZXF1aXJlcyB0aGF0IGVhY2hcbiAqIHJlcXVlc3QgY291bGQgcG90ZW50aWFsbHkgYmUgYSBkaWZmZXJlbnQgbGFuZywgdGhlcmVmb3JlIHNldHRpbmdcbiAqIGEgZ2xvYmFsIGxhbmcgd291bGQgcHJvZHVjZSBpbmNvcnJlY3QgcmVzcG9uc2VzLlxuICpcbiAqIEBwYXJhbSBsYW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiB2b2lkIHtcbiAgX2xvY2FsZSA9IGxvY2FsZTtcbn1cbiJdfQ==","import '../container/container';\nimport { assertDefined } from '../error/assert';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nimport { getContext, HOST_FLAG_DYNAMIC } from '../state/context';\nimport { QContainerSelector, QLocaleAttr, RenderEvent } from '../util/markers';\nimport { isPromise } from '../util/promises';\nimport { seal } from '../util/qdev';\nimport { isArray } from '../util/types';\nimport { setLocale } from './use-locale';\nlet _context;\n/**\n * @alpha\n */\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx || ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$waitOn$, `invoke: $waitOn$ must be defined`, ctx);\n    assertDefined(ctx.$renderCtx$, `invoke: $renderCtx$ must be defined`, ctx);\n    assertDefined(ctx.$subscriber$, `invoke: $subscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport const useBindInvokeContext = (callback) => {\n    if (callback == null) {\n        return callback;\n    }\n    const ctx = getInvokeContext();\n    return ((...args) => {\n        return invoke(ctx, callback.bind(undefined, ...args));\n    });\n};\nexport const invoke = (context, fn, ...args) => {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(null, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n};\nexport const waitAndRun = (ctx, callback) => {\n    const waitOn = ctx.$waitOn$;\n    if (waitOn.length === 0) {\n        const result = callback();\n        if (isPromise(result)) {\n            waitOn.push(result);\n        }\n    }\n    else {\n        waitOn.push(Promise.all(waitOn).then(callback));\n    }\n};\nexport const newInvokeContextFromTuple = (context) => {\n    const element = context[0];\n    const container = element.closest(QContainerSelector);\n    const locale = container?.getAttribute(QLocaleAttr) || undefined;\n    locale && setLocale(locale);\n    return newInvokeContext(locale, undefined, element, context[1], context[2]);\n};\nexport const newInvokeContext = (locale, hostElement, element, event, url) => {\n    const ctx = {\n        $seq$: 0,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $url$: url,\n        $qrl$: undefined,\n        $props$: undefined,\n        $renderCtx$: undefined,\n        $subscriber$: undefined,\n        $waitOn$: undefined,\n        $locale$: locale,\n    };\n    seal(ctx);\n    return ctx;\n};\nexport const getWrappingContainer = (el) => {\n    return el.closest(QContainerSelector);\n};\n/**\n * @alpha\n */\nexport const untrack = (fn) => {\n    return invoke(undefined, fn);\n};\n/**\n * @internal\n */\nexport const _getContextElement = () => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx) {\n        return (iCtx.$element$ ?? iCtx.$hostElement$ ?? iCtx.$qrl$?.$setContainer$(undefined));\n    }\n};\n/**\n * @internal\n */\nexport const _jsxBranch = (input) => {\n    const iCtx = tryGetInvokeContext();\n    if (iCtx && iCtx.$hostElement$ && iCtx.$renderCtx$) {\n        const hostElement = iCtx.$hostElement$;\n        const elCtx = getContext(hostElement, iCtx.$renderCtx$.$static$.$containerState$);\n        elCtx.$flags$ |= HOST_FLAG_DYNAMIC;\n    }\n    return input;\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which\n * ends in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `component($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - a function that should have its first argument automatically `$`.\n * @alpha\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQU8sTUFBTSxtQkFBbUIsQ0FBQztBQUUzQyxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgUVJMIH0gZnJvbSAnLi4vcXJsL3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaFxuICogZW5kcyBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGVzZSBmdW5jdGlvbiBjYWxscyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAtIGBjb21wb25lbnQkKCgpID0+IHsuLi59KWAgaXMgc2FtZSBhcyBgY29tcG9uZW50KCQoKCkgPT4gey4uLn0pKWBcbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiBteUFwaShjYWxsYmFjazogUVJMPCgpID0+IHZvaWQ+KTogdm9pZCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGV4cG9ydCBjb25zdCBteUFwaSQgPSBpbXBsaWNpdCRGaXJzdEFyZyhteUFwaSk7XG4gKiAvLyB0eXBlIG9mIG15QXBpJDogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZFxuICpcbiAqIC8vIGNhbiBiZSB1c2VkIGFzOlxuICogbXlBcGkkKCgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyB3aWxsIGJlIHRyYW5zcGlsZWQgdG86XG4gKiAvLyBGSUxFOiA8Y3VycmVudCBmaWxlPlxuICogbXlBcGkocXJsKCcuL2NodW5rLWFiYy5qcycsICdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyBGSUxFOiBjaHVuay1hYmMuanNcbiAqIGV4cG9ydCBjb25zdCBjYWxsYmFjayA9ICgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGZuIC0gYSBmdW5jdGlvbiB0aGF0IHNob3VsZCBoYXZlIGl0cyBmaXJzdCBhcmd1bWVudCBhdXRvbWF0aWNhbGx5IGAkYC5cbiAqIEBhbHBoYVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgaW1wbGljaXQkRmlyc3RBcmcgPSA8RklSU1QsIFJFU1QgZXh0ZW5kcyBhbnlbXSwgUkVUPihcbiAgZm46IChmaXJzdDogUVJMPEZJUlNUPiwgLi4ucmVzdDogUkVTVCkgPT4gUkVUXG4pOiAoKGZpcnN0OiBGSVJTVCwgLi4ucmVzdDogUkVTVCkgPT4gUkVUKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiAoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKTogUkVUIHtcbiAgICByZXR1cm4gZm4uY2FsbChudWxsLCAkKGZpcnN0KSwgLi4ucmVzdCk7XG4gIH07XG59O1xuIl19","import { verifySerializable } from '../state/common';\nimport { getContext } from '../state/context';\nimport { qDev } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\nexport const useSequentialScope = () => {\n    const iCtx = useInvokeContext();\n    const i = iCtx.$seq$;\n    const hostElement = iCtx.$hostElement$;\n    const elCtx = getContext(hostElement, iCtx.$renderCtx$.$static$.$containerState$);\n    const seq = elCtx.$seq$ ? elCtx.$seq$ : (elCtx.$seq$ = []);\n    iCtx.$seq$++;\n    const set = (value) => {\n        if (qDev) {\n            verifySerializable(value);\n        }\n        return (seq[i] = value);\n    };\n    return {\n        get: seq[i],\n        set,\n        i,\n        iCtx,\n        elCtx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxrQkFBa0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBdUIsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFVbkUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLElBQUksR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDckIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUN2QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbEYsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRTNELElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNiLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBUSxFQUFFLEVBQUU7UUFDdkIsSUFBSSxJQUFJLEVBQUU7WUFDUixrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBQ0YsT0FBTztRQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRztRQUNILENBQUM7UUFDRCxJQUFJO1FBQ0osS0FBSztLQUNOLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZXJpZnlTZXJpYWxpemFibGUgfSBmcm9tICcuLi9zdGF0ZS9jb21tb24nO1xuaW1wb3J0IHsgZ2V0Q29udGV4dCwgUUNvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgUmVuZGVySW52b2tlQ29udGV4dCwgdXNlSW52b2tlQ29udGV4dCB9IGZyb20gJy4vdXNlLWNvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlcXVlbnRpYWxTY29wZTxUPiB7XG4gIHJlYWRvbmx5IGdldDogVCB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgc2V0OiAodjogVCkgPT4gVDtcbiAgcmVhZG9ubHkgaTogbnVtYmVyO1xuICByZWFkb25seSBpQ3R4OiBSZW5kZXJJbnZva2VDb250ZXh0O1xuICByZWFkb25seSBlbEN0eDogUUNvbnRleHQ7XG59XG5cbmV4cG9ydCBjb25zdCB1c2VTZXF1ZW50aWFsU2NvcGUgPSA8VD4oKTogU2VxdWVudGlhbFNjb3BlPFQ+ID0+IHtcbiAgY29uc3QgaUN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgY29uc3QgaSA9IGlDdHguJHNlcSQ7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gaUN0eC4kaG9zdEVsZW1lbnQkO1xuICBjb25zdCBlbEN0eCA9IGdldENvbnRleHQoaG9zdEVsZW1lbnQsIGlDdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJCk7XG4gIGNvbnN0IHNlcSA9IGVsQ3R4LiRzZXEkID8gZWxDdHguJHNlcSQgOiAoZWxDdHguJHNlcSQgPSBbXSk7XG5cbiAgaUN0eC4kc2VxJCsrO1xuICBjb25zdCBzZXQgPSAodmFsdWU6IFQpID0+IHtcbiAgICBpZiAocURldikge1xuICAgICAgdmVyaWZ5U2VyaWFsaXphYmxlKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIChzZXFbaV0gPSB2YWx1ZSk7XG4gIH07XG4gIHJldHVybiB7XG4gICAgZ2V0OiBzZXFbaV0sXG4gICAgc2V0LFxuICAgIGksXG4gICAgaUN0eCxcbiAgICBlbEN0eCxcbiAgfTtcbn07XG4iXX0=","import { assertQrl } from '../qrl/qrl-class';\nimport { getContext, HOST_FLAG_NEED_ATTACH_LISTENER } from '../state/context';\nimport { normalizeOnProp } from '../state/listeners';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { Task, WatchFlagsIsCleanup } from './use-task';\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * It can be used to release resources, abort network requests, stop timers...\n *\n * @alpha\n * @deprecated Use the cleanup() function of `useTask$()`, `useResource$()` or\n * `useBrowserVisibleTask$()` instead.\n */\n// </docs>\nexport const useCleanupQrl = (unmountFn) => {\n    const { get, set, i, elCtx } = useSequentialScope();\n    if (!get) {\n        assertQrl(unmountFn);\n        const watch = new Task(WatchFlagsIsCleanup, i, elCtx.$element$, unmountFn, undefined);\n        set(true);\n        if (!elCtx.$watches$) {\n            elCtx.$watches$ = [];\n        }\n        elCtx.$watches$.push(watch);\n    }\n};\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * It can be used to release resources, abort network requests, stop timers...\n *\n * @alpha\n * @deprecated Use the cleanup() function of `useTask$()`, `useResource$()` or\n * `useBrowserVisibleTask$()` instead.\n */\n// </docs>\nexport const useCleanup$ = /*#__PURE__*/ implicit$FirstArg(useCleanupQrl);\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * @alpha\n */\n// </docs>\nexport const useOn = (event, eventQrl) => _useOn(`on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => _useOn(`document:on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => _useOn(`window:on-${event}`, eventQrl);\nconst _useOn = (eventName, eventQrl) => {\n    const invokeCtx = useInvokeContext();\n    const elCtx = getContext(invokeCtx.$hostElement$, invokeCtx.$renderCtx$.$static$.$containerState$);\n    assertQrl(eventQrl);\n    if (typeof eventName === 'string') {\n        elCtx.li.push([normalizeOnProp(eventName), eventQrl]);\n    }\n    else {\n        elCtx.li.push(...eventName.map((name) => [normalizeOnProp(name), eventQrl]));\n    }\n    elCtx.$flags$ |= HOST_FLAG_NEED_ATTACH_LISTENER;\n};\n//# sourceMappingURL=data:application/json;base64,","import { jsx } from '../jsx/jsx-runtime';\nexport const QOnce = 'qonce';\n/**\n * @alpha\n */\nexport const SkipRender = Symbol('skip render');\n/**\n * @alpha\n */\nexport const RenderOnce = (props, key) => {\n    return jsx(Virtual, {\n        ...props,\n        [QOnce]: '',\n    }, key);\n};\n/**\n * @alpha\n */\nexport const Fragment = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRRaw = (() => null);\n/**\n * @alpha\n */\nexport const SSRComment = (props) => jsx(SSRRaw, { data: `<!--${props.data}-->` }, null);\n/**\n * @alpha\n */\nexport const Virtual = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: 'qkssr-pu' }),\n        props.children,\n        jsx(SSRComment, { data: 'qkssr-po' }),\n    ];\n};\n/**\n * @alpha\n */\nexport const SSRStream = (props, key) => jsx(RenderOnce, { children: jsx(InternalSSRStream, props) }, key);\n/**\n * @alpha\n */\nexport const SSRHint = ((props) => props.children);\nexport const InternalSSRStream = () => null;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9qc3gvdXRpbHMucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUt6QyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBRTdCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFZLE1BQU0sQ0FBQyxhQUFhLENBQVEsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBMEMsQ0FBQyxLQUFVLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDbkYsT0FBTyxHQUFHLENBQ1IsT0FBTyxFQUNQO1FBQ0UsR0FBRyxLQUFLO1FBQ1IsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO0tBQ1osRUFDRCxHQUFHLENBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUEwQixDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFRLENBQUM7QUFFdkY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQXdDLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFRLENBQUM7QUFFL0U7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQXdDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDdkUsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLEtBQUssQ0FBQyxJQUFJLEtBQUssRUFBRSxFQUFFLElBQUksQ0FBUSxDQUFDO0FBRTdEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUEyQyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FDN0UsS0FBSyxDQUFDLFFBQVEsQ0FBUSxDQUFDO0FBRXpCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUEwQyxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQzdFLE9BQU87UUFDTCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxRQUFRO1FBQ2QsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztLQUMvQixDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBWUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQXNDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQ3pFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFTcEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQW9DLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQVEsQ0FBQztBQUVoRyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBc0MsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsganN4IH0gZnJvbSAnLi4vanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB0eXBlIHsgU3RyZWFtV3JpdGVyIH0gZnJvbSAnLi4vc3NyL3JlbmRlci1zc3InO1xuaW1wb3J0IHR5cGUgeyBGdW5jdGlvbkNvbXBvbmVudCwgSlNYTm9kZSB9IGZyb20gJy4vdHlwZXMvanN4LW5vZGUnO1xuaW1wb3J0IHR5cGUgeyBKU1hDaGlsZHJlbiB9IGZyb20gJy4vdHlwZXMvanN4LXF3aWstYXR0cmlidXRlcyc7XG5cbmV4cG9ydCBjb25zdCBRT25jZSA9ICdxb25jZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBTa2lwUmVuZGVyOiBKU1hOb2RlID0gU3ltYm9sKCdza2lwIHJlbmRlcicpIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFJlbmRlck9uY2U6IEZ1bmN0aW9uQ29tcG9uZW50PHsgY2hpbGRyZW4/OiBhbnkgfT4gPSAocHJvcHM6IGFueSwga2V5KSA9PiB7XG4gIHJldHVybiBqc3goXG4gICAgVmlydHVhbCxcbiAgICB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIFtRT25jZV06ICcnLFxuICAgIH0sXG4gICAga2V5XG4gICk7XG59O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgRnJhZ21lbnQ6IEZ1bmN0aW9uQ29tcG9uZW50PHt9PiA9ICgocHJvcHM6IGFueSkgPT4gcHJvcHMuY2hpbGRyZW4pIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNTUlJhdzogRnVuY3Rpb25Db21wb25lbnQ8eyBkYXRhOiBzdHJpbmcgfT4gPSAoKCkgPT4gbnVsbCkgYXMgYW55O1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgU1NSQ29tbWVudDogRnVuY3Rpb25Db21wb25lbnQ8eyBkYXRhOiBzdHJpbmcgfT4gPSAocHJvcHMpID0+XG4gIGpzeChTU1JSYXcsIHsgZGF0YTogYDwhLS0ke3Byb3BzLmRhdGF9LS0+YCB9LCBudWxsKSBhcyBhbnk7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBWaXJ0dWFsOiBGdW5jdGlvbkNvbXBvbmVudDxSZWNvcmQ8c3RyaW5nLCBhbnk+PiA9ICgocHJvcHM6IGFueSkgPT5cbiAgcHJvcHMuY2hpbGRyZW4pIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNTUlN0cmVhbUJsb2NrOiBGdW5jdGlvbkNvbXBvbmVudDx7IGNoaWxkcmVuPzogYW55IH0+ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiBbXG4gICAganN4KFNTUkNvbW1lbnQsIHsgZGF0YTogJ3Frc3NyLXB1JyB9KSxcbiAgICBwcm9wcy5jaGlsZHJlbixcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiAncWtzc3ItcG8nIH0pLFxuICBdIGFzIGFueTtcbn07XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU1NSU3RyZWFtUHJvcHMge1xuICBjaGlsZHJlbjpcbiAgICB8IEFzeW5jR2VuZXJhdG9yPEpTWENoaWxkcmVuLCB2b2lkLCBhbnk+XG4gICAgfCAoKHN0cmVhbTogU3RyZWFtV3JpdGVyKSA9PiBQcm9taXNlPHZvaWQ+KVxuICAgIHwgKCgpID0+IEFzeW5jR2VuZXJhdG9yPEpTWENoaWxkcmVuLCB2b2lkLCBhbnk+KTtcbn1cblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNTUlN0cmVhbTogRnVuY3Rpb25Db21wb25lbnQ8U1NSU3RyZWFtUHJvcHM+ID0gKHByb3BzLCBrZXkpID0+XG4gIGpzeChSZW5kZXJPbmNlLCB7IGNoaWxkcmVuOiBqc3goSW50ZXJuYWxTU1JTdHJlYW0sIHByb3BzKSB9LCBrZXkpO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNTUkhpbnRQcm9wcyB7XG4gIGR5bmFtaWM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgU1NSSGludDogRnVuY3Rpb25Db21wb25lbnQ8U1NSSGludFByb3BzPiA9ICgocHJvcHM6IGFueSkgPT4gcHJvcHMuY2hpbGRyZW4pIGFzIGFueTtcblxuZXhwb3J0IGNvbnN0IEludGVybmFsU1NSU3RyZWFtOiBGdW5jdGlvbkNvbXBvbmVudDxTU1JTdHJlYW1Qcm9wcz4gPSAoKSA9PiBudWxsO1xuIl19","import { qDev, qRuntimeQrl, seal } from '../../util/qdev';\nimport { logError, logWarn } from '../../util/log';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { isQrl } from '../../qrl/qrl-class';\nimport { invoke } from '../../use/use-core';\nimport { verifySerializable } from '../../state/common';\nimport { isQwikComponent } from '../../component/component.public';\nimport { isSignal } from '../../state/signal';\nimport { isPromise } from '../../util/promises';\nimport { SkipRender } from './utils.public';\nlet warnClassname = false;\n/**\n * @public\n */\nexport const jsx = (type, props, key) => {\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, props, processed);\n    seal(node);\n    return node;\n};\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, key = null) {\n        this.type = type;\n        this.props = props;\n        this.key = key;\n        if (qDev) {\n            invoke(undefined, () => {\n                const isQwikC = isQwikComponent(type);\n                if (!isString(type) && !isFunction(type)) {\n                    throw createJSXError(`The <Type> of the JSX element must be either a string or a function. Instead, it's a \"${typeof type}\": ${String(type)}.`, this);\n                }\n                if (isArray(props.children)) {\n                    const flatChildren = props.children.flat();\n                    if (isString(type) || isQwikC) {\n                        flatChildren.forEach((child) => {\n                            if (!isValidJSXChild(child)) {\n                                const typeObj = typeof child;\n                                let explanation = '';\n                                if (typeObj === 'object') {\n                                    if (child?.constructor) {\n                                        explanation = `it's an instance of \"${child?.constructor.name}\".`;\n                                    }\n                                    else {\n                                        explanation = `it's a object literal: ${printObjectLiteral(child)} `;\n                                    }\n                                }\n                                else if (typeObj === 'function') {\n                                    explanation += `it's a function named \"${child.name}\".`;\n                                }\n                                else {\n                                    explanation = `it's a \"${typeObj}\": ${String(child)}.`;\n                                }\n                                throw createJSXError(`One of the children of <${type} /> is not an accepted value. JSX children must be either: string, boolean, number, <element>, Array, undefined/null, or a Promise/Signal that resolves to one of those types. Instead, ${explanation}`, this);\n                            }\n                        });\n                    }\n                    const keys = {};\n                    flatChildren.forEach((child) => {\n                        if (isJSXNode(child) && !isString(child.type) && child.key != null) {\n                            if (keys[child.key]) {\n                                const err = createJSXError(`Multiple JSX sibling nodes with the same key.\\nThis is likely caused by missing a custom key in a for loop`, child);\n                                if (err) {\n                                    logError(err);\n                                }\n                            }\n                            else {\n                                keys[child.key] = true;\n                            }\n                        }\n                    });\n                }\n                if (!qRuntimeQrl && props) {\n                    for (const prop of Object.keys(props)) {\n                        const value = props[prop];\n                        if (prop.endsWith('$') && value) {\n                            if (!isQrl(value) && !Array.isArray(value)) {\n                                throw createJSXError(`The value passed in ${prop}={...}> must be a QRL, instead you passed a \"${typeof value}\". Make sure your ${typeof value} is wrapped with $(...), so it can be serialized. Like this:\\n$(${String(value)})`, this);\n                            }\n                        }\n                        if (prop !== 'children' && isQwikC && value) {\n                            verifySerializable(value, `The value of the JSX attribute \"${prop}\" can not be serialized`);\n                        }\n                    }\n                }\n                if (isString(type)) {\n                    if (type === 'style') {\n                        if (props.children) {\n                            logWarn(`jsx: Using <style>{content}</style> will escape the content, effectively breaking the CSS.\nIn order to disable content escaping use '<style dangerouslySetInnerHTML={content}/>'\n\nHowever, if the use case is to inject component styleContent, use 'useStyles$()' instead, it will be a lot more efficient.\nSee https://qwik.builder.io/docs/components/styles/#usestyles for more information.`);\n                        }\n                    }\n                    if (type === 'script') {\n                        if (props.children) {\n                            logWarn(`jsx: Using <script>{content}</script> will escape the content, effectively breaking the inlined JS.\nIn order to disable content escaping use '<script dangerouslySetInnerHTML={content}/>'`);\n                        }\n                    }\n                    if ('className' in props) {\n                        props['class'] = props['className'];\n                        delete props['className'];\n                        if (qDev && !warnClassname) {\n                            warnClassname = true;\n                            logWarn('jsx: `className` is deprecated. Use `class` instead.');\n                        }\n                    }\n                }\n            });\n        }\n        if (isString(type)) {\n            if ('className' in props) {\n                props['class'] = props['className'];\n                delete props['className'];\n                if (qDev && !warnClassname) {\n                    warnClassname = true;\n                    logWarn('jsx: `className` is deprecated. Use `class` instead.');\n                }\n            }\n        }\n    }\n}\nconst printObjectLiteral = (obj) => {\n    return `{ ${Object.keys(obj)\n        .map((key) => `\"${key}\"`)\n        .join(', ')} }`;\n};\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\nexport const isValidJSXChild = (node) => {\n    if (!node) {\n        return true;\n    }\n    else if (node === SkipRender) {\n        return true;\n    }\n    else if (isString(node) || typeof node === 'number' || typeof node === 'boolean') {\n        return true;\n    }\n    else if (isJSXNode(node)) {\n        return true;\n    }\n    if (isSignal(node)) {\n        return isValidJSXChild(node.value);\n    }\n    else if (isPromise(node)) {\n        return true;\n    }\n    return false;\n};\n/**\n * @public\n */\nexport const Fragment = (props) => props.children;\n/**\n * @public\n */\nexport const jsxDEV = (type, props, key, isStatic, opts, ctx) => {\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, props, processed);\n    node.dev = {\n        isStatic,\n        ctx,\n        stack: new Error().stack,\n        ...opts,\n    };\n    seal(node);\n    return node;\n};\nconst ONCE_JSX = new Set();\nexport const createJSXError = (message, node) => {\n    const error = new Error(message);\n    if (!node.dev) {\n        return error;\n    }\n    const id = node.dev.fileName;\n    const key = `${message}${id}:${node.dev.lineNumber}:${node.dev.columnNumber}`;\n    if (ONCE_JSX.has(key)) {\n        return undefined;\n    }\n    Object.assign(error, {\n        id,\n        loc: {\n            file: id,\n            column: node.dev.columnNumber,\n            line: node.dev.lineNumber,\n        },\n    });\n    error.stack = `JSXError: ${message}\\n${filterStack(node.dev.stack, 1)}`;\n    ONCE_JSX.add(key);\n    return error;\n};\nconst filterStack = (stack, offset = 0) => {\n    return stack\n        .split('\\n')\n        .slice(offset)\n        .filter((l) => !l.includes('/node_modules/@builder.io/qwik') && !l.includes('(node:'))\n        .join('\\n');\n};\nexport { jsx as jsxs };\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../error/assert';\nimport { qDynamicPlatform } from './qdev';\nexport const getDocument = (node) => {\n    if (!qDynamicPlatform) {\n        return document;\n    }\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBNEIsRUFBWSxFQUFFO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELElBQUksT0FBTyxRQUFRLEtBQUssV0FBVyxFQUFFO1FBQ25DLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtRQUN2QixPQUFPLElBQXVCLENBQUM7S0FDaEM7SUFDRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQy9CLGFBQWEsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxQyxPQUFPLEdBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi9lcnJvci9hc3NlcnQnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEeW5hbWljUGxhdGZvcm0gfSBmcm9tICcuL3FkZXYnO1xuXG5leHBvcnQgY29uc3QgZ2V0RG9jdW1lbnQgPSAobm9kZTogUXdpa0VsZW1lbnQgfCBEb2N1bWVudCk6IERvY3VtZW50ID0+IHtcbiAgaWYgKCFxRHluYW1pY1BsYXRmb3JtKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50O1xuICB9XG4gIGlmIChub2RlLm5vZGVUeXBlID09PSA5KSB7XG4gICAgcmV0dXJuIG5vZGUgYXMgYW55IGFzIERvY3VtZW50O1xuICB9XG4gIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgYXNzZXJ0RGVmaW5lZChkb2MsICdkb2MgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIHJldHVybiBkb2MhO1xufTtcbiJdfQ==","import { assertDefined } from '../../error/assert';\nimport { codeToText, QError_setProperty } from '../../error/error';\nimport { getDocument } from '../../util/dom';\nimport { isElement, isNode } from '../../util/element';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { QSlot, QSlotRef, QStyle } from '../../util/markers';\nimport { qDev } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { cleanupTree, directAppendChild, directInsertBefore, directRemoveChild, getChildren, isSlotTemplate, SVG_NS, } from './visitor';\nexport const setAttribute = (staticCtx, el, prop, value) => {\n    if (staticCtx) {\n        staticCtx.$operations$.push({\n            $operation$: _setAttribute,\n            $args$: [el, prop, value],\n        });\n    }\n    else {\n        _setAttribute(el, prop, value);\n    }\n};\nconst _setAttribute = (el, prop, value) => {\n    if (value == null || value === false) {\n        el.removeAttribute(prop);\n    }\n    else {\n        const str = value === true ? '' : String(value);\n        directSetAttribute(el, prop, str);\n    }\n};\nexport const setProperty = (staticCtx, node, key, value) => {\n    if (staticCtx) {\n        staticCtx.$operations$.push({\n            $operation$: _setProperty,\n            $args$: [node, key, value],\n        });\n    }\n    else {\n        _setProperty(node, key, value);\n    }\n};\nconst _setProperty = (node, key, value) => {\n    try {\n        node[key] = value == null ? '' : value;\n        if (value == null && isNode(node) && isElement(node)) {\n            node.removeAttribute(key);\n        }\n    }\n    catch (err) {\n        logError(codeToText(QError_setProperty), { node, key, value }, err);\n    }\n};\nexport const createElement = (doc, expectTag, isSvg) => {\n    const el = isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);\n    return el;\n};\nexport const insertBefore = (staticCtx, parent, newChild, refChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const appendChild = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directAppendChild,\n        $args$: [parent, newChild],\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (staticCtx, styleTask) => {\n    staticCtx.$containerState$.$styleIds$.add(styleTask.styleId);\n    staticCtx.$postOperations$.push({\n        $operation$: _appendHeadStyle,\n        $args$: [staticCtx.$containerState$.$containerEl$, styleTask],\n    });\n};\nexport const setClasslist = (staticCtx, elm, toRemove, toAdd) => {\n    if (staticCtx) {\n        staticCtx.$operations$.push({\n            $operation$: _setClasslist,\n            $args$: [elm, toRemove, toAdd],\n        });\n    }\n    else {\n        _setClasslist(elm, toRemove, toAdd);\n    }\n};\nexport const _setClasslist = (elm, toRemove, toAdd) => {\n    const classList = elm.classList;\n    classList.remove(...toRemove);\n    classList.add(...toAdd);\n};\nexport const _appendHeadStyle = (containerEl, styleTask) => {\n    const doc = getDocument(containerEl);\n    const isDoc = doc.documentElement === containerEl;\n    const headEl = doc.head;\n    const style = doc.createElement('style');\n    if (isDoc && !headEl) {\n        logWarn('document.head is undefined');\n    }\n    directSetAttribute(style, QStyle, styleTask.styleId);\n    directSetAttribute(style, 'hidden', '');\n    style.textContent = styleTask.content;\n    if (isDoc && headEl) {\n        directAppendChild(headEl, style);\n    }\n    else {\n        directInsertBefore(containerEl, style, containerEl.firstChild);\n    }\n};\nexport const prepend = (staticCtx, parent, newChild) => {\n    staticCtx.$operations$.push({\n        $operation$: directPrepend,\n        $args$: [parent, newChild],\n    });\n};\nexport const directPrepend = (parent, newChild) => {\n    directInsertBefore(parent, newChild, parent.firstChild);\n};\nexport const removeNode = (staticCtx, el) => {\n    staticCtx.$operations$.push({\n        $operation$: _removeNode,\n        $args$: [el, staticCtx],\n    });\n};\nconst _removeNode = (el, staticCtx) => {\n    const parent = el.parentElement;\n    if (parent) {\n        if (el.nodeType === 1 || el.nodeType === 111) {\n            const subsManager = staticCtx.$containerState$.$subsManager$;\n            cleanupTree(el, staticCtx, subsManager, true);\n        }\n        directRemoveChild(parent, el);\n    }\n    else if (qDev) {\n        logWarn('Trying to remove component already removed', el);\n    }\n};\nexport const createTemplate = (doc, slotName) => {\n    const template = createElement(doc, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nexport const executeDOMRender = (staticCtx) => {\n    for (const op of staticCtx.$operations$) {\n        op.$operation$.apply(undefined, op.$args$);\n    }\n    resolveSlotProjection(staticCtx);\n};\nexport const getKey = (el) => {\n    return directGetAttribute(el, 'q:key');\n};\nexport const setKey = (el, key) => {\n    if (key !== null) {\n        directSetAttribute(el, 'q:key', key);\n    }\n};\nexport const resolveSlotProjection = (staticCtx) => {\n    // Slots removed\n    const subsManager = staticCtx.$containerState$.$subsManager$;\n    for (const slotEl of staticCtx.$rmSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const slotChildren = getChildren(slotEl, 'root');\n        if (slotChildren.length > 0) {\n            const sref = slotEl.getAttribute(QSlotRef);\n            const hostCtx = staticCtx.$roots$.find((r) => r.$id$ === sref);\n            if (hostCtx) {\n                const hostElm = hostCtx.$element$;\n                const hasTemplate = Array.from(hostElm.childNodes).some((node) => isSlotTemplate(node) && directGetAttribute(node, QSlot) === key);\n                if (!hasTemplate) {\n                    const template = createTemplate(staticCtx.$doc$, key);\n                    for (const child of slotChildren) {\n                        directAppendChild(template, child);\n                    }\n                    directInsertBefore(hostElm, template, hostElm.firstChild);\n                }\n                else {\n                    cleanupTree(slotEl, staticCtx, subsManager, false);\n                }\n            }\n            else {\n                // If slot content cannot be relocated, it means it's content is definively removed\n                // Cleanup needs to be executed\n                cleanupTree(slotEl, staticCtx, subsManager, false);\n            }\n        }\n    }\n    // Slots added\n    for (const [slotEl, hostElm] of staticCtx.$addSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const template = Array.from(hostElm.childNodes).find((node) => {\n            return isSlotTemplate(node) && node.getAttribute(QSlot) === key;\n        });\n        if (template) {\n            const children = getChildren(template, 'root');\n            children.forEach((child) => {\n                directAppendChild(slotEl, child);\n            });\n            template.remove();\n        }\n    }\n};\nexport const createTextNode = (doc, text) => {\n    return doc.createTextNode(text);\n};\nexport const printRenderStats = (staticCtx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of staticCtx.$operations$) {\n                byOp[op.$operation$.name] = (byOp[op.$operation$.name] ?? 0) + 1;\n            }\n            const stats = {\n                byOp,\n                roots: staticCtx.$roots$.map((ctx) => ctx.$element$),\n                hostElements: Array.from(staticCtx.$hostElements$),\n                operations: staticCtx.$operations$.map((v) => [v.$operation$.name, ...v.$args$]),\n            };\n            const noOps = staticCtx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertTrue } from '../../error/assert';\nimport { isComment, isElement, isQwikElement, isVirtualElement } from '../../util/element';\nimport { qSerialize, seal } from '../../util/qdev';\nimport { directGetAttribute } from '../fast-calls';\nimport { createElement } from './operations';\nimport { getChildren } from './visitor';\nconst VIRTUAL_SYMBOL = '__virtual';\nexport const newVirtualElement = (doc) => {\n    const open = doc.createComment('qv ');\n    const close = doc.createComment('/qv');\n    return new VirtualElementImpl(open, close);\n};\nexport const parseVirtualAttributes = (str) => {\n    if (!str) {\n        return new Map();\n    }\n    const attributes = str.split(' ');\n    return new Map(attributes.map((attr) => {\n        const index = attr.indexOf('=');\n        if (index >= 0) {\n            return [attr.slice(0, index), unescape(attr.slice(index + 1))];\n        }\n        else {\n            return [attr, ''];\n        }\n    }));\n};\nexport const serializeVirtualAttributes = (map) => {\n    const attributes = [];\n    map.forEach((value, key) => {\n        if (!value) {\n            attributes.push(`${key}`);\n        }\n        else {\n            attributes.push(`${key}=${escape(value)}`);\n        }\n    });\n    return attributes.join(' ');\n};\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nexport const walkerVirtualByAttribute = (el, prop, value) => {\n    return el.ownerDocument.createTreeWalker(el, SHOW_COMMENT, {\n        acceptNode(c) {\n            const virtual = getVirtualElement(c);\n            if (virtual) {\n                return directGetAttribute(virtual, prop) === value ? FILTER_ACCEPT : FILTER_REJECT;\n            }\n            return FILTER_REJECT;\n        },\n    });\n};\nexport const queryVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const open = walker.firstChild();\n    if (open) {\n        return getVirtualElement(open);\n    }\n    return null;\n};\nexport const queryAllVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(getVirtualElement(currentNode));\n    }\n    return pars;\n};\nexport const escape = (s) => {\n    return s.replace(/ /g, '+');\n};\nexport const unescape = (s) => {\n    return s.replace(/\\+/g, ' ');\n};\nexport const VIRTUAL = ':virtual';\nexport class VirtualElementImpl {\n    constructor(open, close) {\n        this.open = open;\n        this.close = close;\n        this._qc_ = null;\n        this.nodeType = 111;\n        this.localName = VIRTUAL;\n        this.nodeName = VIRTUAL;\n        const doc = (this.ownerDocument = open.ownerDocument);\n        this.template = createElement(doc, 'template', false);\n        this.attributes = parseVirtualAttributes(open.data.slice(3));\n        assertTrue(open.data.startsWith('qv '), 'comment is not a qv');\n        open[VIRTUAL_SYMBOL] = this;\n        seal(this);\n    }\n    insertBefore(node, ref) {\n        const parent = this.parentElement;\n        if (parent) {\n            const ref2 = ref ? ref : this.close;\n            parent.insertBefore(node, ref2);\n        }\n        else {\n            this.template.insertBefore(node, ref);\n        }\n        return node;\n    }\n    remove() {\n        const parent = this.parentElement;\n        if (parent) {\n            const ch = Array.from(this.childNodes);\n            assertEqual(this.template.childElementCount, 0, 'children should be empty');\n            parent.removeChild(this.open);\n            this.template.append(...ch);\n            parent.removeChild(this.close);\n        }\n    }\n    appendChild(node) {\n        return this.insertBefore(node, null);\n    }\n    insertBeforeTo(newParent, child) {\n        const ch = Array.from(this.childNodes);\n        // TODO\n        // if (this.parentElement) {\n        //   console.warn('already attached');\n        // }\n        newParent.insertBefore(this.open, child);\n        for (const c of ch) {\n            newParent.insertBefore(c, child);\n        }\n        newParent.insertBefore(this.close, child);\n        assertEqual(this.template.childElementCount, 0, 'children should be empty');\n    }\n    appendTo(newParent) {\n        this.insertBeforeTo(newParent, null);\n    }\n    get namespaceURI() {\n        return this.parentElement?.namespaceURI ?? '';\n    }\n    removeChild(child) {\n        if (this.parentElement) {\n            this.parentElement.removeChild(child);\n        }\n        else {\n            this.template.removeChild(child);\n        }\n    }\n    getAttribute(prop) {\n        return this.attributes.get(prop) ?? null;\n    }\n    hasAttribute(prop) {\n        return this.attributes.has(prop);\n    }\n    setAttribute(prop, value) {\n        this.attributes.set(prop, value);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    removeAttribute(prop) {\n        this.attributes.delete(prop);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    matches(_) {\n        return false;\n    }\n    compareDocumentPosition(other) {\n        return this.open.compareDocumentPosition(other);\n    }\n    closest(query) {\n        const parent = this.parentElement;\n        if (parent) {\n            return parent.closest(query);\n        }\n        return null;\n    }\n    querySelectorAll(query) {\n        const result = [];\n        const ch = getChildren(this, 'elements');\n        ch.forEach((el) => {\n            if (isQwikElement(el)) {\n                if (el.matches(query)) {\n                    result.push(el);\n                }\n                result.concat(Array.from(el.querySelectorAll(query)));\n            }\n        });\n        return result;\n    }\n    querySelector(query) {\n        for (const el of this.childNodes) {\n            if (isElement(el)) {\n                if (el.matches(query)) {\n                    return el;\n                }\n                const v = el.querySelector(query);\n                if (v !== null) {\n                    return v;\n                }\n            }\n        }\n        return null;\n    }\n    get firstChild() {\n        if (this.parentElement) {\n            const first = this.open.nextSibling;\n            if (first === this.close) {\n                return null;\n            }\n            return first;\n        }\n        else {\n            return this.template.firstChild;\n        }\n    }\n    get nextSibling() {\n        return this.close.nextSibling;\n    }\n    get previousSibling() {\n        return this.open.previousSibling;\n    }\n    get childNodes() {\n        if (!this.parentElement) {\n            return this.template.childNodes;\n        }\n        const nodes = [];\n        let node = this.open;\n        while ((node = node.nextSibling)) {\n            if (node !== this.close) {\n                nodes.push(node);\n            }\n            else {\n                break;\n            }\n        }\n        return nodes;\n    }\n    get isConnected() {\n        return this.open.isConnected;\n    }\n    get parentElement() {\n        return this.open.parentElement;\n    }\n}\nconst updateComment = (attributes) => {\n    return `qv ${serializeVirtualAttributes(attributes)}`;\n};\nexport const processVirtualNodes = (node) => {\n    if (node == null) {\n        return null;\n    }\n    if (isComment(node)) {\n        const virtual = getVirtualElement(node);\n        if (virtual) {\n            return virtual;\n        }\n    }\n    return node;\n};\nexport const getVirtualElement = (open) => {\n    const virtual = open[VIRTUAL_SYMBOL];\n    if (virtual) {\n        return virtual;\n    }\n    if (open.data.startsWith('qv ')) {\n        const close = findClose(open);\n        return new VirtualElementImpl(open, close);\n    }\n    return null;\n};\nexport const findClose = (open) => {\n    let node = open.nextSibling;\n    let stack = 1;\n    while (node) {\n        if (isComment(node)) {\n            if (node.data.startsWith('qv ')) {\n                stack++;\n            }\n            else if (node.data === '/qv') {\n                stack--;\n                if (stack === 0) {\n                    return node;\n                }\n            }\n        }\n        node = node.nextSibling;\n    }\n    throw new Error('close not found');\n};\nexport const getRootNode = (node) => {\n    if (node == null) {\n        return null; // TODO\n    }\n    if (isVirtualElement(node)) {\n        return node.open;\n    }\n    else {\n        return node;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { qDev } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { getVirtualElement } from '../render/dom/virtual-element';\nimport { isComment } from '../util/element';\nimport { assertTrue } from '../error/assert';\nimport { verifySerializable } from '../state/common';\nimport { getContext } from '../state/context';\nimport { invoke } from './use-core';\n// <docs markdown=\"../readme.md#createContextId\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContextId instead)\n/**\n * Create a context ID to be used in your application.\n * The name should be written with no spaces.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContextId()` to create a `ContextId`. `ContextId` is just a serializable identifier for\n * the context. It is not the context value itself. See `useContextProvider()` and `useContext()`\n * for the values. Qwik needs a serializable ID for the context so that the it can track context\n * providers and consumers in a way that survives resumability.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContextId = (name) => {\n    assertTrue(/^[\\w/.-]+$/.test(name), 'Context name must only contain A-Z,a-z,0-9, _', name);\n    return /*#__PURE__*/ Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n/**\n * @beta\n * @deprecated Please use `createContextId` instead.\n */\nexport const createContext = (name) => {\n    return createContextId(name);\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assign use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { get, set, elCtx } = useSequentialScope();\n    if (get !== undefined) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    let contexts = elCtx.$contexts$;\n    if (!contexts) {\n        elCtx.$contexts$ = contexts = new Map();\n    }\n    if (qDev) {\n        verifySerializable(newValue);\n    }\n    contexts.set(context.id, newValue);\n    set(true);\n};\n/**\n * @alpha\n */\nexport const useContextBoundary = (...ids) => {\n    const { get, set, elCtx, iCtx } = useSequentialScope();\n    if (get !== undefined) {\n        return;\n    }\n    let contexts = elCtx.$contexts$;\n    if (!contexts) {\n        elCtx.$contexts$ = contexts = new Map();\n    }\n    for (const c of ids) {\n        const value = resolveContext(c, elCtx, iCtx.$renderCtx$.$static$.$containerState$);\n        if (value !== undefined) {\n            contexts.set(c.id, value);\n        }\n    }\n    contexts.set('_', true);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrive Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a\n * parent component needs to invoke `useContextProvider()` to assign a value.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContextId<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context, defaultValue) => {\n    const { get, set, iCtx, elCtx } = useSequentialScope();\n    if (get !== undefined) {\n        return get;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const value = resolveContext(context, elCtx, iCtx.$renderCtx$.$static$.$containerState$);\n    if (typeof defaultValue === 'function') {\n        return set(invoke(undefined, defaultValue, value));\n    }\n    if (value !== undefined) {\n        return set(value);\n    }\n    if (defaultValue !== undefined) {\n        return set(defaultValue);\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\nexport const resolveContext = (context, hostCtx, containerState) => {\n    const contextID = context.id;\n    if (hostCtx) {\n        let hostElement = hostCtx.$element$;\n        let ctx = hostCtx.$slotParent$ ?? hostCtx.$parent$;\n        while (ctx) {\n            hostElement = ctx.$element$;\n            if (ctx.$contexts$) {\n                const found = ctx.$contexts$.get(contextID);\n                if (found) {\n                    return found;\n                }\n                if (ctx.$contexts$.get('_') === true) {\n                    break;\n                }\n            }\n            ctx = ctx.$slotParent$ ?? ctx.$parent$;\n        }\n        if (hostElement.closest) {\n            const value = queryContextFromDom(hostElement, containerState, contextID);\n            if (value !== undefined) {\n                return value;\n            }\n        }\n    }\n    return undefined;\n};\nexport const queryContextFromDom = (hostElement, containerState, contextId) => {\n    let element = hostElement;\n    while (element) {\n        let node = element;\n        let virtual;\n        while (node && (virtual = findVirtual(node))) {\n            const contexts = getContext(virtual, containerState)?.$contexts$;\n            if (contexts) {\n                if (contexts.has(contextId)) {\n                    return contexts.get(contextId);\n                }\n            }\n            node = virtual;\n        }\n        element = element.parentElement;\n    }\n    return undefined;\n};\nexport const findVirtual = (el) => {\n    let node = el;\n    let stack = 1;\n    while ((node = node.previousSibling)) {\n        if (isComment(node)) {\n            if (node.data === '/qv') {\n                stack++;\n            }\n            else if (node.data.startsWith('qv ')) {\n                stack--;\n                if (stack === 0) {\n                    return getVirtualElement(node);\n                }\n            }\n        }\n    }\n    return null;\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServer } from '../platform/platform';\nimport { tryGetContext } from '../state/context';\nimport { createContextId, resolveContext } from '../use/use-context';\nimport { isVirtualElement } from '../util/element';\nimport { qDev } from '../util/qdev';\nexport const ERROR_CONTEXT = /*#__PURE__*/ createContextId('qk-error');\nexport const handleError = (err, hostElement, rCtx) => {\n    const elCtx = tryGetContext(hostElement);\n    if (qDev) {\n        // Clean vdom\n        if (!isServer() && typeof document !== 'undefined' && isVirtualElement(hostElement)) {\n            elCtx.$vdom$ = null;\n            const errorDiv = document.createElement('errored-host');\n            if (err && err instanceof Error) {\n                errorDiv.props = { error: err };\n            }\n            errorDiv.setAttribute('q:key', '_error_');\n            errorDiv.append(...hostElement.childNodes);\n            hostElement.appendChild(errorDiv);\n        }\n        if (err && err instanceof Error) {\n            if (!('hostElement' in err)) {\n                err['hostElement'] = hostElement;\n            }\n        }\n        if (!isRecoverable(err)) {\n            throw err;\n        }\n    }\n    if (isServer()) {\n        throw err;\n    }\n    else {\n        const errorStore = resolveContext(ERROR_CONTEXT, elCtx, rCtx.$static$.$containerState$);\n        if (errorStore === undefined) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n};\nconst isRecoverable = (err) => {\n    if (err && err instanceof Error) {\n        if ('plugin' in err) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2Vycm9yLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBV3BDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsZUFBZSxDQUFxQixVQUFVLENBQUMsQ0FBQztBQUUzRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFRLEVBQUUsV0FBd0IsRUFBRSxJQUFtQixFQUFFLEVBQUU7SUFDckYsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBRSxDQUFDO0lBQzFDLElBQUksSUFBSSxFQUFFO1FBQ1IsYUFBYTtRQUNiLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxPQUFPLFFBQVEsS0FBSyxXQUFXLElBQUksZ0JBQWdCLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDbkYsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7WUFDcEIsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4RCxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFO2dCQUM5QixRQUFnQixDQUFDLEtBQUssR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQzthQUMxQztZQUNELFFBQVEsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQzFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDM0MsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuQztRQUVELElBQUksR0FBRyxJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUU7WUFDL0IsSUFBSSxDQUFDLENBQUMsYUFBYSxJQUFJLEdBQUcsQ0FBQyxFQUFFO2dCQUMxQixHQUFXLENBQUMsYUFBYSxDQUFDLEdBQUcsV0FBVyxDQUFDO2FBQzNDO1NBQ0Y7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sR0FBRyxDQUFDO1NBQ1g7S0FDRjtJQUNELElBQUksUUFBUSxFQUFFLEVBQUU7UUFDZCxNQUFNLEdBQUcsQ0FBQztLQUNYO1NBQU07UUFDTCxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDeEYsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzVCLE1BQU0sR0FBRyxDQUFDO1NBQ1g7UUFDRCxVQUFVLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztLQUN4QjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDakMsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtRQUMvQixJQUFJLFFBQVEsSUFBSSxHQUFHLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IHRyeUdldENvbnRleHQgfSBmcm9tICcuLi9zdGF0ZS9jb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHRJZCwgcmVzb2x2ZUNvbnRleHQgfSBmcm9tICcuLi91c2UvdXNlLWNvbnRleHQnO1xuaW1wb3J0IHsgaXNWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4uL3V0aWwvZWxlbWVudCc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHR5cGUgeyBSZW5kZXJDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JCb3VuZGFyeVN0b3JlIHtcbiAgZXJyb3I6IGFueSB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNvbnN0IEVSUk9SX0NPTlRFWFQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZUNvbnRleHRJZDxFcnJvckJvdW5kYXJ5U3RvcmU+KCdxay1lcnJvcicpO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlRXJyb3IgPSAoZXJyOiBhbnksIGhvc3RFbGVtZW50OiBRd2lrRWxlbWVudCwgckN0eDogUmVuZGVyQ29udGV4dCkgPT4ge1xuICBjb25zdCBlbEN0eCA9IHRyeUdldENvbnRleHQoaG9zdEVsZW1lbnQpITtcbiAgaWYgKHFEZXYpIHtcbiAgICAvLyBDbGVhbiB2ZG9tXG4gICAgaWYgKCFpc1NlcnZlcigpICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNWaXJ0dWFsRWxlbWVudChob3N0RWxlbWVudCkpIHtcbiAgICAgIGVsQ3R4LiR2ZG9tJCA9IG51bGw7XG4gICAgICBjb25zdCBlcnJvckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Vycm9yZWQtaG9zdCcpO1xuICAgICAgaWYgKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAoZXJyb3JEaXYgYXMgYW55KS5wcm9wcyA9IHsgZXJyb3I6IGVyciB9O1xuICAgICAgfVxuICAgICAgZXJyb3JEaXYuc2V0QXR0cmlidXRlKCdxOmtleScsICdfZXJyb3JfJyk7XG4gICAgICBlcnJvckRpdi5hcHBlbmQoLi4uaG9zdEVsZW1lbnQuY2hpbGROb2Rlcyk7XG4gICAgICBob3N0RWxlbWVudC5hcHBlbmRDaGlsZChlcnJvckRpdik7XG4gICAgfVxuXG4gICAgaWYgKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKCEoJ2hvc3RFbGVtZW50JyBpbiBlcnIpKSB7XG4gICAgICAgIChlcnIgYXMgYW55KVsnaG9zdEVsZW1lbnQnXSA9IGhvc3RFbGVtZW50O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzUmVjb3ZlcmFibGUoZXJyKSkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuICBpZiAoaXNTZXJ2ZXIoKSkge1xuICAgIHRocm93IGVycjtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBlcnJvclN0b3JlID0gcmVzb2x2ZUNvbnRleHQoRVJST1JfQ09OVEVYVCwgZWxDdHgsIHJDdHguJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJCk7XG4gICAgaWYgKGVycm9yU3RvcmUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH1cbiAgICBlcnJvclN0b3JlLmVycm9yID0gZXJyO1xuICB9XG59O1xuXG5jb25zdCBpc1JlY292ZXJhYmxlID0gKGVycjogYW55KSA9PiB7XG4gIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBpZiAoJ3BsdWdpbicgaW4gZXJyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbiJdfQ==","import { assertDefined } from '../error/assert';\nimport { RenderEvent } from '../util/markers';\nimport { safeCall } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { isArray, isString } from '../util/types';\nimport { intToStr } from '../container/container';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { SkipRender } from './jsx/utils.public';\nimport { handleError } from './error-handling';\nimport { HOST_FLAG_DIRTY, HOST_FLAG_MOUNTED } from '../state/context';\nexport const executeComponent = (rCtx, elCtx) => {\n    elCtx.$flags$ &= ~HOST_FLAG_DIRTY;\n    elCtx.$flags$ |= HOST_FLAG_MOUNTED;\n    elCtx.$slots$ = [];\n    elCtx.li.length = 0;\n    const hostElement = elCtx.$element$;\n    const componentQRL = elCtx.$componentQrl$;\n    const props = elCtx.$props$;\n    const newCtx = pushRenderContext(rCtx);\n    const invocationContext = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, RenderEvent);\n    const waitOn = (invocationContext.$waitOn$ = []);\n    assertDefined(componentQRL, `render: host element to render must has a $renderQrl$:`, elCtx);\n    assertDefined(props, `render: host element to render must has defined props`, elCtx);\n    // Set component context\n    newCtx.$cmpCtx$ = elCtx;\n    newCtx.$slotCtx$ = null;\n    // Invoke render hook\n    invocationContext.$subscriber$ = hostElement;\n    invocationContext.$renderCtx$ = rCtx;\n    // Resolve render function\n    componentQRL.$setContainer$(rCtx.$static$.$containerState$.$containerEl$);\n    const componentFn = componentQRL.getFn(invocationContext);\n    return safeCall(() => componentFn(props), (jsxNode) => {\n        if (waitOn.length > 0) {\n            return Promise.all(waitOn).then(() => {\n                if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n                    return executeComponent(rCtx, elCtx);\n                }\n                return {\n                    node: jsxNode,\n                    rCtx: newCtx,\n                };\n            });\n        }\n        if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n            return executeComponent(rCtx, elCtx);\n        }\n        return {\n            node: jsxNode,\n            rCtx: newCtx,\n        };\n    }, (err) => {\n        handleError(err, hostElement, rCtx);\n        return {\n            node: SkipRender,\n            rCtx: newCtx,\n        };\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $static$: {\n            $doc$: doc,\n            $locale$: containerState.$serverData$.locale,\n            $containerState$: containerState,\n            $hostElements$: new Set(),\n            $operations$: [],\n            $postOperations$: [],\n            $roots$: [],\n            $addSlots$: [],\n            $rmSlots$: [],\n        },\n        $cmpCtx$: null,\n        $slotCtx$: null,\n    };\n    seal(ctx);\n    seal(ctx.$static$);\n    return ctx;\n};\nexport const pushRenderContext = (ctx) => {\n    const newCtx = {\n        $static$: ctx.$static$,\n        $cmpCtx$: ctx.$cmpCtx$,\n        $slotCtx$: ctx.$slotCtx$,\n    };\n    return newCtx;\n};\nexport const serializeClass = (obj) => {\n    if (!obj)\n        return '';\n    if (isString(obj))\n        return obj.trim();\n    if (isArray(obj))\n        return obj.reduce((result, o) => {\n            const classList = serializeClass(o);\n            return classList ? (result ? `${result} ${classList}` : classList) : result;\n        }, '');\n    return Object.entries(obj).reduce((result, [key, value]) => (value ? (result ? `${result} ${key.trim()}` : key.trim()) : result), '');\n};\nconst parseClassListRegex = /\\s/;\nexport const parseClassList = (value) => !value ? EMPTY_ARRAY : value.split(parseClassListRegex);\nexport const stringifyStyle = (obj) => {\n    if (obj == null)\n        return '';\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value != null) {\n                        const normalizedKey = key.startsWith('--') ? key : fromCamelToKebabCase(key);\n                        chunks.push(normalizedKey + ':' + value);\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$static$.$containerState$.$elementIndex$++);\n};\nexport const setQId = (rCtx, elCtx) => {\n    const id = getNextIndex(rCtx);\n    elCtx.$id$ = id;\n};\nexport const hasStyle = (containerState, styleId) => {\n    return containerState.$styleIds$.has(styleId);\n};\nexport const jsxToString = (data) => {\n    return data == null || typeof data === 'boolean' ? '' : String(data);\n};\nexport function isAriaAttribute(prop) {\n    return prop.startsWith('aria-');\n}\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { isNotNullable, isPromise, promiseAll, then } from '../../util/promises';\nimport { qDev, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { SkipRender, Virtual } from '../jsx/utils.public';\nimport { isJSXNode, SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { executeComponent, jsxToString } from '../execute-component';\nimport { VIRTUAL } from './virtual-element';\nimport { appendHeadStyle } from './operations';\nimport { isSignal } from '../../state/signal';\nimport { HOST_FLAG_MOUNTED } from '../../state/context';\nexport const renderComponent = (rCtx, elCtx, flags) => {\n    const justMounted = !(elCtx.$flags$ & HOST_FLAG_MOUNTED);\n    const hostElement = elCtx.$element$;\n    const containerState = rCtx.$static$.$containerState$;\n    // Component is not dirty any more\n    containerState.$hostsStaging$.delete(hostElement);\n    // Clean current subscription before render\n    containerState.$subsManager$.$clearSub$(hostElement);\n    // TODO, serialize scopeIds\n    return then(executeComponent(rCtx, elCtx), (res) => {\n        const staticCtx = rCtx.$static$;\n        const newCtx = res.rCtx;\n        const invocationContext = newInvokeContext(rCtx.$static$.$locale$, hostElement);\n        staticCtx.$hostElements$.add(hostElement);\n        invocationContext.$subscriber$ = hostElement;\n        invocationContext.$renderCtx$ = newCtx;\n        if (justMounted) {\n            if (elCtx.$appendStyles$) {\n                for (const style of elCtx.$appendStyles$) {\n                    appendHeadStyle(staticCtx, style);\n                }\n            }\n        }\n        const processedJSXNode = processData(res.node, invocationContext);\n        return then(processedJSXNode, (processedJSXNode) => {\n            const newVdom = wrapJSX(hostElement, processedJSXNode);\n            const oldVdom = getVdom(elCtx);\n            return then(visitJsxNode(newCtx, oldVdom, newVdom, flags), () => {\n                elCtx.$vdom$ = newVdom;\n            });\n        });\n    });\n};\nexport const getVdom = (elCtx) => {\n    if (!elCtx.$vdom$) {\n        elCtx.$vdom$ = domToVnode(elCtx.$element$);\n    }\n    return elCtx.$vdom$;\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $children$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$children$ = $children$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n        this.$signal$ = null;\n        seal(this);\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const key = node.key != null ? String(node.key) : null;\n    const nodeType = node.type;\n    const props = node.props;\n    const originalChildren = props.children;\n    let textType = '';\n    if (isString(nodeType)) {\n        textType = nodeType;\n    }\n    else if (nodeType === Virtual) {\n        textType = VIRTUAL;\n    }\n    else if (isFunction(nodeType)) {\n        const res = invoke(invocationContext, nodeType, props, node.key);\n        return processData(res, invocationContext);\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, nodeType);\n    }\n    let children = EMPTY_ARRAY;\n    if (originalChildren != null) {\n        return then(processData(originalChildren, invocationContext), (result) => {\n            if (result !== undefined) {\n                children = isArray(result) ? result : [result];\n            }\n            return new ProcessedJSXNodeImpl(textType, props, children, key);\n        });\n    }\n    else {\n        return new ProcessedJSXNodeImpl(textType, props, children, key);\n    }\n};\nexport const wrapJSX = (element, input) => {\n    const children = input === undefined ? EMPTY_ARRAY : isArray(input) ? input : [input];\n    const node = new ProcessedJSXNodeImpl(':virtual', {}, children, null);\n    node.$elm$ = element;\n    return node;\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isPrimitive(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isSignal(node)) {\n        const value = node.value;\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        newNode.$text$ = jsxToString(value);\n        newNode.$signal$ = node;\n        return newNode;\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return then(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (node === SkipRender) {\n        return new ProcessedJSXNodeImpl(SKIP_RENDER_TYPE, EMPTY_OBJ, EMPTY_ARRAY, null);\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\nexport const isPrimitive = (obj) => {\n    return isString(obj) || typeof obj === 'number';\n};\n//# sourceMappingURL=data:application/json;base64,","import { ComponentStylesPrefixContent, ELEMENT_ID, OnRenderProp, QSlot, QSlotRef, QSlotS, } from '../../util/markers';\nimport { isOnProp, PREVENT_DEFAULT, setEvent } from '../../state/listeners';\nimport { isPromise, promiseAll, promiseAllLazy, then } from '../../util/promises';\nimport { assertDefined, assertEqual, assertTrue } from '../../error/assert';\nimport { logWarn } from '../../util/log';\nimport { qDev, qInspector, qSerialize, qTest } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { assertQrl, isQrl } from '../../qrl/qrl-class';\nimport { assertElement, assertQwikElement, isElement, isQwikElement, isText, isVirtualElement, } from '../../util/element';\nimport { getVdom, ProcessedJSXNodeImpl, renderComponent } from './render-dom';\nimport { isAriaAttribute, parseClassList, pushRenderContext, serializeClass, setQId, stringifyStyle, } from '../execute-component';\nimport { addQwikEvent, setRef } from '../../container/container';\nimport { getRootNode, newVirtualElement, processVirtualNodes, queryAllVirtualByAttribute, VIRTUAL, } from './virtual-element';\nimport { appendChild, createElement, createTemplate, createTextNode, executeDOMRender, getKey, insertBefore, prepend, removeNode, setAttribute, setClasslist, setKey, setProperty, } from './operations';\nimport { QOnce } from '../jsx/utils.public';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { addSignalSub, isSignal } from '../../state/signal';\nimport { cleanupContext, createContext, getContext, HOST_FLAG_DIRTY, HOST_FLAG_NEED_ATTACH_LISTENER, tryGetContext, } from '../../state/context';\nimport { getProxyManager, getProxyTarget } from '../../state/common';\nimport { createPropsState, createProxy } from '../../state/store';\nimport { _IMMUTABLE, _IMMUTABLE_PREFIX } from '../../state/constants';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const IS_SVG = 1 << 0;\nexport const IS_HEAD = 1 << 1;\nconst CHILDREN_PLACEHOLDER = [];\nexport const visitJsxNode = (ctx, oldVnode, newVnode, flags) => {\n    return smartUpdateChildren(ctx, oldVnode, newVnode, 'root', flags);\n};\nexport const smartUpdateChildren = (ctx, oldVnode, newVnode, mode, flags) => {\n    assertQwikElement(oldVnode.$elm$);\n    const ch = newVnode.$children$;\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        return;\n    }\n    const elm = oldVnode.$elm$;\n    const needsDOMRead = oldVnode.$children$ === CHILDREN_PLACEHOLDER;\n    if (needsDOMRead) {\n        const isHead = elm.nodeName === 'HEAD';\n        if (isHead) {\n            mode = 'head';\n            flags |= IS_HEAD;\n        }\n    }\n    const oldCh = getVnodeChildren(oldVnode, mode);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return updateChildren(ctx, elm, oldCh, ch, flags);\n    }\n    else if (ch.length > 0) {\n        return addVnodes(ctx, elm, null, ch, 0, ch.length - 1, flags);\n    }\n    else if (oldCh.length > 0) {\n        return removeVnodes(ctx.$static$, oldCh, 0, oldCh.length - 1);\n    }\n};\nexport const getVnodeChildren = (vnode, mode) => {\n    const oldCh = vnode.$children$;\n    const elm = vnode.$elm$;\n    if (oldCh === CHILDREN_PLACEHOLDER) {\n        return (vnode.$children$ = getChildrenVnodes(elm, mode));\n    }\n    return oldCh;\n};\nexport const updateChildren = (ctx, parentElm, oldCh, newCh, flags) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    const staticCtx = ctx.$static$;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newStartVnode)) {\n            results.push(patchVnode(ctx, oldStartVnode, newStartVnode, flags));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (sameVnode(oldEndVnode, newEndVnode)) {\n            results.push(patchVnode(ctx, oldEndVnode, newEndVnode, flags));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newEndVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved right\n            results.push(patchVnode(ctx, oldStartVnode, newEndVnode, flags));\n            insertBefore(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldEndVnode, newStartVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved left\n            results.push(patchVnode(ctx, oldEndVnode, newStartVnode, flags));\n            insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, flags, results);\n                insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (!isTagName(elmToMove, newStartVnode.$type$)) {\n                    const newElm = createElm(ctx, newStartVnode, flags, results);\n                    then(newElm, (newElm) => {\n                        insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n                    });\n                }\n                else {\n                    results.push(patchVnode(ctx, elmToMove, newStartVnode, flags));\n                    oldCh[idxInOld] = undefined;\n                    assertDefined(elmToMove.$elm$, 'elmToMove $elm$ must be defined');\n                    insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = then(wait, () => {\n            removeVnodes(staticCtx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nconst getCh = (elm, filter) => {\n    const end = isVirtualElement(elm) ? elm.close : null;\n    const nodes = [];\n    let node = elm.firstChild;\n    while ((node = processVirtualNodes(node))) {\n        if (filter(node)) {\n            nodes.push(node);\n        }\n        node = node.nextSibling;\n        if (node === end) {\n            break;\n        }\n    }\n    return nodes;\n};\nexport const getChildren = (elm, mode) => {\n    // console.warn('DOM READ: getChildren()', elm);\n    switch (mode) {\n        case 'root':\n            return getCh(elm, isChildComponent);\n        case 'head':\n            return getCh(elm, isHeadChildren);\n        case 'elements':\n            return getCh(elm, isQwikElement);\n    }\n};\nexport const getChildrenVnodes = (elm, mode) => {\n    return getChildren(elm, mode).map(getVnodeFromEl);\n};\nexport const getVnodeFromEl = (el) => {\n    if (isElement(el)) {\n        return tryGetContext(el)?.$vdom$ ?? domToVnode(el);\n    }\n    return domToVnode(el);\n};\nexport const domToVnode = (node) => {\n    if (isQwikElement(node)) {\n        const props = isVirtualElement(node) ? EMPTY_OBJ : getProps(node);\n        const t = new ProcessedJSXNodeImpl(node.localName, props, CHILDREN_PLACEHOLDER, getKey(node));\n        t.$elm$ = node;\n        return t;\n    }\n    else if (isText(node)) {\n        const t = new ProcessedJSXNodeImpl(node.nodeName, {}, CHILDREN_PLACEHOLDER, null);\n        t.$text$ = node.data;\n        t.$elm$ = node;\n        return t;\n    }\n    throw new Error('invalid node');\n};\nexport const getProps = (node) => {\n    const props = {};\n    const attributes = node.attributes;\n    const len = attributes.length;\n    for (let i = 0; i < len; i++) {\n        const attr = attributes.item(i);\n        assertDefined(attr, 'attribute must be defined');\n        const name = attr.name;\n        if (name.includes(':')) {\n            continue;\n        }\n        if (qDev) {\n            if (name === 'data-qwik-inspector') {\n                continue;\n            }\n        }\n        if (name === 'class') {\n            props[name] = parseDomClass(attr.value);\n        }\n        else {\n            props[name] = attr.value;\n        }\n    }\n    return props;\n};\nconst parseDomClass = (value) => {\n    return parseClassList(value)\n        .filter((c) => !c.startsWith(ComponentStylesPrefixContent))\n        .join(' ');\n};\nexport const isNode = (elm) => {\n    const type = elm.nodeType;\n    return type === 1 || type === 3 || type === 111;\n};\nconst isHeadChildren = (node) => {\n    const type = node.nodeType;\n    if (type === 1) {\n        return node.hasAttribute('q:head');\n    }\n    return type === 111;\n};\nexport const isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nconst isChildComponent = (node) => {\n    const type = node.nodeType;\n    if (type === 3 || type === 111) {\n        return true;\n    }\n    if (type !== 1) {\n        return false;\n    }\n    const nodeName = node.nodeName;\n    if (nodeName === 'Q:TEMPLATE') {\n        return false;\n    }\n    if (nodeName === 'HEAD') {\n        return node.hasAttribute('q:head');\n    }\n    return true;\n};\nexport const splitChildren = (input) => {\n    const output = {};\n    for (const item of input) {\n        const key = getSlotName(item);\n        const node = output[key] ??\n            (output[key] = new ProcessedJSXNodeImpl(VIRTUAL, {\n                [QSlotS]: '',\n            }, [], key));\n        node.$children$.push(item);\n    }\n    return output;\n};\nexport const patchVnode = (rCtx, oldVnode, newVnode, flags) => {\n    assertEqual(oldVnode.$type$, newVnode.$type$, 'old and new vnodes type must be the same');\n    const elm = oldVnode.$elm$;\n    const tag = newVnode.$type$;\n    const staticCtx = rCtx.$static$;\n    const isVirtual = tag === VIRTUAL;\n    const currentComponent = rCtx.$cmpCtx$;\n    assertDefined(elm, 'while patching element must be defined');\n    assertDefined(currentComponent, 'while patching current component must be defined');\n    newVnode.$elm$ = elm;\n    // Render text nodes\n    if (tag === '#text') {\n        const signal = newVnode.$signal$;\n        if (signal) {\n            addSignalSub(2, currentComponent.$element$, signal, elm, 'data');\n        }\n        if (oldVnode.$text$ !== newVnode.$text$) {\n            setProperty(staticCtx, elm, 'data', newVnode.$text$);\n        }\n        return;\n    }\n    assertQwikElement(elm);\n    // Track SVG state\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const props = newVnode.$props$;\n    const isComponent = isVirtual && OnRenderProp in props;\n    const elCtx = getContext(elm, rCtx.$static$.$containerState$);\n    assertDefined(currentComponent, 'slots can not be rendered outside a component', elm);\n    if (!isComponent) {\n        const pendingListeners = currentComponent.li;\n        const listeners = elCtx.li;\n        listeners.length = 0;\n        newVnode.$props$ = updateProperties(staticCtx, elCtx, currentComponent.$element$, oldVnode.$props$, props, isSvg);\n        if (pendingListeners.length > 0) {\n            listeners.push(...pendingListeners);\n            pendingListeners.length = 0;\n        }\n        if (isSvg && tag === 'foreignObject') {\n            flags &= ~IS_SVG;\n            isSvg = false;\n        }\n        const isSlot = isVirtual && QSlotS in props;\n        if (isSlot) {\n            assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n            currentComponent.$slots$.push(newVnode);\n            return;\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && newVnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return;\n        }\n        const isRenderOnce = isVirtual && QOnce in props;\n        if (isRenderOnce) {\n            return;\n        }\n        if (tag === 'textarea') {\n            return;\n        }\n        return smartUpdateChildren(rCtx, oldVnode, newVnode, 'root', flags);\n    }\n    const cmpProps = props.props;\n    let needsRender = setComponentProps(elCtx, rCtx, cmpProps);\n    // TODO: review this corner case\n    if (!needsRender && !elCtx.$componentQrl$ && !elCtx.$element$.hasAttribute(ELEMENT_ID)) {\n        setQId(rCtx, elCtx);\n        elCtx.$componentQrl$ = cmpProps[OnRenderProp];\n        assertQrl(elCtx.$componentQrl$);\n        needsRender = true;\n    }\n    // Rendering of children of component is more complicated,\n    // since the children must be projected into the rendered slots\n    // In addition, nested childen might need rerendering, if that's the case\n    // we need to render the nested component, and wait before projecting the content\n    // since otherwise we don't know where the slots\n    if (needsRender) {\n        return then(renderComponent(rCtx, elCtx, flags), () => renderContentProjection(rCtx, elCtx, newVnode, flags));\n    }\n    return renderContentProjection(rCtx, elCtx, newVnode, flags);\n};\nconst renderContentProjection = (rCtx, hostCtx, vnode, flags) => {\n    const newChildren = vnode.$children$;\n    const staticCtx = rCtx.$static$;\n    const splittedNewChidren = splitChildren(newChildren);\n    const slotMaps = getSlotMap(hostCtx);\n    // Remove content from empty slots\n    for (const key of Object.keys(slotMaps.slots)) {\n        if (!splittedNewChidren[key]) {\n            const slotEl = slotMaps.slots[key];\n            const oldCh = getChildrenVnodes(slotEl, 'root');\n            if (oldCh.length > 0) {\n                const slotCtx = tryGetContext(slotEl);\n                if (slotCtx && slotCtx.$vdom$) {\n                    slotCtx.$vdom$.$children$ = [];\n                }\n                removeVnodes(staticCtx, oldCh, 0, oldCh.length - 1);\n            }\n        }\n    }\n    // Remove empty templates\n    for (const key of Object.keys(slotMaps.templates)) {\n        const templateEl = slotMaps.templates[key];\n        if (templateEl && !splittedNewChidren[key]) {\n            slotMaps.templates[key] = undefined;\n            removeNode(staticCtx, templateEl);\n        }\n    }\n    // Render into slots\n    return promiseAll(Object.keys(splittedNewChidren).map((slotName) => {\n        const newVdom = splittedNewChidren[slotName];\n        const slotCtx = getSlotCtx(staticCtx, slotMaps, hostCtx, slotName, rCtx.$static$.$containerState$);\n        const oldVdom = getVdom(slotCtx);\n        const slotRctx = pushRenderContext(rCtx);\n        slotRctx.$slotCtx$ = slotCtx;\n        slotCtx.$vdom$ = newVdom;\n        newVdom.$elm$ = slotCtx.$element$;\n        const index = staticCtx.$addSlots$.findIndex((slot) => slot[0] === slotCtx.$element$);\n        if (index >= 0) {\n            staticCtx.$addSlots$.splice(index, 1);\n        }\n        return smartUpdateChildren(slotRctx, oldVdom, newVdom, 'root', flags);\n    }));\n};\nconst addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {\n    const promises = [];\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        const elm = createElm(ctx, ch, flags, promises);\n        insertBefore(ctx.$static$, parentElm, elm, before);\n    }\n    return promiseAllLazy(promises);\n};\nconst removeVnodes = (staticCtx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            assertDefined(ch.$elm$, 'vnode elm must be defined');\n            removeNode(staticCtx, ch.$elm$);\n        }\n    }\n};\nconst getSlotCtx = (staticCtx, slotMaps, hostCtx, slotName, containerState) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return getContext(slotEl, containerState);\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return getContext(templateEl, containerState);\n    }\n    const template = createTemplate(staticCtx.$doc$, slotName);\n    const elCtx = createContext(template);\n    elCtx.$parent$ = hostCtx;\n    prepend(staticCtx, hostCtx.$element$, template);\n    slotMaps.templates[slotName] = template;\n    return elCtx;\n};\nconst getSlotName = (node) => {\n    return node.$props$[QSlot] ?? '';\n};\nconst createElm = (rCtx, vnode, flags, promises) => {\n    const tag = vnode.$type$;\n    const doc = rCtx.$static$.$doc$;\n    const currentComponent = rCtx.$cmpCtx$;\n    if (tag === '#text') {\n        const signal = vnode.$signal$;\n        const elm = createTextNode(doc, vnode.$text$);\n        if (signal && currentComponent) {\n            addSignalSub(2, currentComponent.$element$, signal, elm, 'data');\n        }\n        return (vnode.$elm$ = elm);\n    }\n    let elm;\n    let isHead = !!(flags & IS_HEAD);\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const isVirtual = tag === VIRTUAL;\n    const props = vnode.$props$;\n    const isComponent = OnRenderProp in props;\n    const staticCtx = rCtx.$static$;\n    if (isVirtual) {\n        elm = newVirtualElement(doc);\n    }\n    else if (tag === 'head') {\n        elm = doc.head;\n        flags |= IS_HEAD;\n        isHead = true;\n    }\n    else {\n        elm = createElement(doc, tag, isSvg);\n        flags &= ~IS_HEAD;\n    }\n    if (qDev && qInspector) {\n        const dev = vnode.$dev$;\n        if (dev) {\n            directSetAttribute(elm, 'data-qwik-inspector', `${encodeURIComponent(dev.fileName)}:${dev.lineNumber}:${dev.columnNumber}`);\n        }\n    }\n    vnode.$elm$ = elm;\n    if (isSvg && tag === 'foreignObject') {\n        isSvg = false;\n        flags &= ~IS_SVG;\n    }\n    const elCtx = createContext(elm);\n    elCtx.$parent$ = rCtx.$cmpCtx$;\n    elCtx.$slotParent$ = rCtx.$slotCtx$;\n    if (isComponent) {\n        setKey(elm, vnode.$key$);\n        assertTrue(isVirtual, 'component must be a virtual element');\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        setComponentProps(elCtx, rCtx, props.props);\n        setQId(rCtx, elCtx);\n        if (qDev && !qTest) {\n            const symbol = renderQRL.$symbol$;\n            if (symbol) {\n                directSetAttribute(elm, 'data-qrl', symbol);\n            }\n        }\n        // Run mount hook\n        elCtx.$componentQrl$ = renderQRL;\n        const wait = then(renderComponent(rCtx, elCtx, flags), () => {\n            let children = vnode.$children$;\n            if (children.length === 0) {\n                return;\n            }\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotMap = getSlotMap(elCtx);\n            const p = [];\n            for (const node of children) {\n                const slotCtx = getSlotCtx(staticCtx, slotMap, elCtx, getSlotName(node), staticCtx.$containerState$);\n                const slotRctx = pushRenderContext(rCtx);\n                slotRctx.$slotCtx$ = slotCtx;\n                const nodeElm = createElm(slotRctx, node, flags, p);\n                assertDefined(node.$elm$, 'vnode elm must be defined');\n                assertEqual(nodeElm, node.$elm$, 'vnode elm must be defined');\n                appendChild(staticCtx, slotCtx.$element$, nodeElm);\n            }\n            return promiseAllLazy(p);\n        });\n        if (isPromise(wait)) {\n            promises.push(wait);\n        }\n        return elm;\n    }\n    const isSlot = isVirtual && QSlotS in props;\n    const hasRef = !isVirtual && 'ref' in props;\n    const listeners = elCtx.li;\n    vnode.$props$ = setProperties(staticCtx, elCtx, currentComponent?.$element$, props, isSvg);\n    if (currentComponent && !isVirtual) {\n        const scopedIds = currentComponent.$scopeIds$;\n        if (scopedIds) {\n            scopedIds.forEach((styleId) => {\n                elm.classList.add(styleId);\n            });\n        }\n        if (currentComponent.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n            listeners.push(...currentComponent.li);\n            currentComponent.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n        }\n    }\n    if (isSlot) {\n        assertDefined(currentComponent, 'slot can only be used inside component');\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        setKey(elm, vnode.$key$);\n        directSetAttribute(elm, QSlotRef, currentComponent.$id$);\n        currentComponent.$slots$.push(vnode);\n        staticCtx.$addSlots$.push([elm, currentComponent.$element$]);\n    }\n    if (qSerialize) {\n        setKey(elm, vnode.$key$);\n        if (isHead && !isVirtual) {\n            directSetAttribute(elm, 'q:head', '');\n        }\n        if (listeners.length > 0 || hasRef) {\n            setQId(rCtx, elCtx);\n        }\n    }\n    const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n    if (setsInnerHTML) {\n        if (qDev && vnode.$children$.length > 0) {\n            logWarn('Node can not have children when innerHTML is set');\n        }\n        return elm;\n    }\n    let children = vnode.$children$;\n    if (children.length === 0) {\n        return elm;\n    }\n    if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n        children = children[0].$children$;\n    }\n    const nodes = children.map((ch) => createElm(rCtx, ch, flags, promises));\n    for (const node of nodes) {\n        directAppendChild(elm, node);\n    }\n    return elm;\n};\nconst getSlots = (elCtx) => {\n    const slots = elCtx.$slots$;\n    if (!slots) {\n        const parent = elCtx.$element$.parentElement;\n        assertDefined(parent, 'component should be already attached to the dom');\n        return (elCtx.$slots$ = readDOMSlots(elCtx));\n    }\n    return slots;\n};\nconst getSlotMap = (elCtx) => {\n    const slotsArray = getSlots(elCtx);\n    const slots = {};\n    const templates = {};\n    const t = Array.from(elCtx.$element$.childNodes).filter(isSlotTemplate);\n    // Map virtual slots\n    for (const vnode of slotsArray) {\n        assertQwikElement(vnode.$elm$);\n        slots[vnode.$key$ ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst readDOMSlots = (elCtx) => {\n    const parent = elCtx.$element$.parentElement;\n    assertDefined(parent, 'component should be already attached to the dom');\n    return queryAllVirtualByAttribute(parent, QSlotRef, elCtx.$id$).map(domToVnode);\n};\nconst handleStyle = (ctx, elm, _, newValue) => {\n    setProperty(ctx, elm.style, 'cssText', stringifyStyle(newValue));\n    return true;\n};\nconst handleClass = (ctx, elm, _, newValue, oldValue) => {\n    assertTrue(oldValue == null || typeof oldValue === 'string', 'class oldValue must be either nullish or string', oldValue);\n    assertTrue(newValue == null || typeof newValue === 'string', 'class newValue must be either nullish or string', newValue);\n    const oldClasses = parseClassList(oldValue);\n    const newClasses = parseClassList(newValue);\n    setClasslist(ctx, elm, oldClasses.filter((c) => c && !newClasses.includes(c)), newClasses.filter((c) => c && !oldClasses.includes(c)));\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, prop, newValue) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            setProperty(ctx, elm, prop, newValue);\n        }\n    }\n    return true;\n};\nconst forceAttribute = (ctx, elm, prop, newValue) => {\n    setAttribute(ctx, elm, prop.toLowerCase(), newValue);\n    return true;\n};\nconst dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\nconst setInnerHTML = (ctx, elm, _, newValue) => {\n    if (dangerouslySetInnerHTML in elm) {\n        setProperty(ctx, elm, dangerouslySetInnerHTML, newValue);\n    }\n    else if ('innerHTML' in elm) {\n        setProperty(ctx, elm, 'innerHTML', newValue);\n    }\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    href: forceAttribute,\n    list: forceAttribute,\n    form: forceAttribute,\n    tabIndex: forceAttribute,\n    download: forceAttribute,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n    innerHTML: noop,\n};\nexport const updateProperties = (staticCtx, elCtx, hostElm, oldProps, newProps, isSvg) => {\n    const keys = getKeys(oldProps, newProps);\n    const values = {};\n    if (keys.length === 0) {\n        return values;\n    }\n    const immutableMeta = newProps[_IMMUTABLE] ?? EMPTY_OBJ;\n    const elm = elCtx.$element$;\n    for (const prop of keys) {\n        if (prop === 'ref') {\n            assertElement(elm);\n            setRef(newProps[prop], elm);\n            continue;\n        }\n        let newValue = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : newProps[prop];\n        if (isOnProp(prop)) {\n            browserSetEvent(staticCtx, elCtx, prop, newValue);\n            continue;\n        }\n        if (isSignal(newValue)) {\n            addSignalSub(1, hostElm, newValue, elm, prop);\n            newValue = newValue.value;\n        }\n        if (prop === 'class') {\n            newValue = serializeClass(newValue);\n        }\n        const normalizedProp = isSvg ? prop : prop.toLowerCase();\n        const oldValue = oldProps[normalizedProp];\n        values[normalizedProp] = newValue;\n        if (oldValue === newValue) {\n            continue;\n        }\n        smartSetProperty(staticCtx, elm, prop, newValue, oldValue, isSvg);\n    }\n    return values;\n};\nexport const smartSetProperty = (staticCtx, elm, prop, newValue, oldValue, isSvg) => {\n    // aria attribute value should be rendered as string\n    if (isAriaAttribute(prop)) {\n        setAttribute(staticCtx, elm, prop, newValue != null ? String(newValue) : newValue);\n        return;\n    }\n    // Check if its an exception\n    const exception = PROP_HANDLER_MAP[prop];\n    if (exception) {\n        if (exception(staticCtx, elm, prop, newValue, oldValue)) {\n            return;\n        }\n    }\n    // Check if property in prototype\n    if (!isSvg && prop in elm) {\n        setProperty(staticCtx, elm, prop, newValue);\n        return;\n    }\n    if (prop.startsWith(PREVENT_DEFAULT)) {\n        addQwikEvent(prop.slice(PREVENT_DEFAULT.length), staticCtx.$containerState$);\n    }\n    // Fallback to render attribute\n    setAttribute(staticCtx, elm, prop, newValue);\n};\nconst getKeys = (oldProps, newProps) => {\n    const keys = Object.keys(newProps);\n    const normalizedKeys = keys.map((s) => s.toLowerCase());\n    const oldKeys = Object.keys(oldProps);\n    keys.push(...oldKeys.filter((p) => !normalizedKeys.includes(p)));\n    return keys.filter((c) => c !== 'children');\n};\nexport const areExactQRLs = (oldValue, newValue) => {\n    if (!isQrl(oldValue) || !isQrl(newValue) || oldValue.$hash$ !== newValue.$hash$) {\n        return false;\n    }\n    const cA = oldValue.$captureRef$;\n    const cB = newValue.$captureRef$;\n    if (cA && cB) {\n        return sameArrays(cA, cB);\n    }\n    return false;\n};\nexport const sameArrays = (a1, a2) => {\n    const len = a1.length;\n    if (len !== a2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const setProperties = (staticCtx, elCtx, hostElm, newProps, isSvg) => {\n    const elm = elCtx.$element$;\n    const keys = Object.keys(newProps);\n    const values = {};\n    if (keys.length === 0) {\n        return values;\n    }\n    const immutableMeta = newProps[_IMMUTABLE] ?? EMPTY_OBJ;\n    for (const prop of keys) {\n        if (prop === 'children') {\n            continue;\n        }\n        if (prop === 'ref') {\n            assertElement(elm);\n            setRef(newProps[prop], elm);\n            continue;\n        }\n        let newValue = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : newProps[prop];\n        if (isOnProp(prop)) {\n            browserSetEvent(staticCtx, elCtx, prop, newValue);\n            continue;\n        }\n        const sig = isSignal(newValue);\n        if (sig) {\n            if (hostElm)\n                addSignalSub(1, hostElm, newValue, elm, prop);\n            newValue = newValue.value;\n        }\n        const normalizedProp = isSvg ? prop : prop.toLowerCase();\n        if (normalizedProp === 'class') {\n            if (qDev && values.class)\n                throw new TypeError('Can only provide one of class or className');\n            // Signals shouldn't be changed\n            if (!sig)\n                newValue = serializeClass(newValue);\n        }\n        values[normalizedProp] = newValue;\n        smartSetProperty(staticCtx, elm, prop, newValue, undefined, isSvg);\n    }\n    return values;\n};\nexport const setComponentProps = (elCtx, rCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    let props = elCtx.$props$;\n    if (!props) {\n        elCtx.$props$ = props = createProxy(createPropsState(), rCtx.$static$.$containerState$);\n    }\n    if (keys.length === 0) {\n        return false;\n    }\n    const manager = getProxyManager(props);\n    assertDefined(manager, `props have to be a proxy, but it is not`, props);\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    const immutableMeta = (target[_IMMUTABLE] =\n        expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n    for (const prop of keys) {\n        if (prop === 'children' || prop === QSlot) {\n            continue;\n        }\n        if (isSignal(immutableMeta[prop])) {\n            target[_IMMUTABLE_PREFIX + prop] = immutableMeta[prop];\n        }\n        else {\n            const value = expectProps[prop];\n            const oldValue = target[prop];\n            target[prop] = value;\n            if (oldValue !== value) {\n                manager.$notifySubs$(prop);\n            }\n        }\n    }\n    return !!(elCtx.$flags$ & HOST_FLAG_DIRTY);\n};\nexport const cleanupTree = (parent, staticCtx, subsManager, stopSlots) => {\n    if (stopSlots && parent.hasAttribute(QSlotS)) {\n        staticCtx.$rmSlots$.push(parent);\n        return;\n    }\n    const ctx = tryGetContext(parent);\n    if (ctx) {\n        cleanupContext(ctx, subsManager);\n    }\n    const ch = getChildren(parent, 'elements');\n    for (const child of ch) {\n        cleanupTree(child, staticCtx, subsManager, true);\n    }\n};\nexport const executeContextWithSlots = ({ $static$: ctx }) => {\n    executeDOMRender(ctx);\n};\nexport const directAppendChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.appendTo(parent);\n    }\n    else {\n        parent.appendChild(child);\n    }\n};\nexport const directRemoveChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.remove();\n    }\n    else {\n        parent.removeChild(child);\n    }\n};\nexport const directInsertBefore = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, getRootNode(ref));\n    }\n    else {\n        parent.insertBefore(child, getRootNode(ref));\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        const key = child.$key$;\n        if (key != null) {\n            map[key] = i;\n        }\n    }\n    return map;\n};\nconst browserSetEvent = (staticCtx, elCtx, prop, input) => {\n    const containerState = staticCtx.$containerState$;\n    const normalized = setEvent(elCtx.li, prop, input, containerState.$containerEl$);\n    if (!prop.startsWith('on')) {\n        setAttribute(staticCtx, elCtx.$element$, normalized, '');\n    }\n    addQwikEvent(normalized, containerState);\n};\nconst sameVnode = (vnode1, vnode2) => {\n    if (vnode1.$type$ !== vnode2.$type$) {\n        return false;\n    }\n    return vnode1.$key$ === vnode2.$key$;\n};\nconst isTagName = (elm, tagName) => {\n    return elm.$type$ === tagName;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL3Zpc2l0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLDRCQUE0QixFQUM1QixVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxHQUNQLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFNUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUNMLGFBQWEsRUFDYixpQkFBaUIsRUFDakIsU0FBUyxFQUNULGFBQWEsRUFDYixNQUFNLEVBQ04sZ0JBQWdCLEdBQ2pCLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLE9BQU8sRUFBb0Isb0JBQW9CLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRWhHLE9BQU8sRUFDTCxlQUFlLEVBQ2YsY0FBYyxFQUNkLGlCQUFp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RSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2pGLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFCLFlBQVksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDMUQ7SUFDRCxZQUFZLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsTUFBd0IsRUFBRSxNQUF3QixFQUFXLEVBQUU7SUFDaEYsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDbkMsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3ZDLENBQUMsQ0FBQztBQUVGLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBcUIsRUFBRSxPQUFlLEVBQVcsRUFBRTtJQUNwRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDO0FBQ2hDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQsXG4gIEVMRU1FTlRfSUQsXG4gIE9uUmVuZGVyUHJvcCxcbiAgUVNsb3QsXG4gIFFTbG90UmVmLFxuICBRU2xvdFMsXG59IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBpc09uUHJvcCwgUFJFVkVOVF9ERUZBVUxULCBzZXRFdmVudCB9IGZyb20gJy4uLy4uL3N0YXRlL2xpc3RlbmVycyc7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBpc1Byb21pc2UsIHByb21pc2VBbGwsIHByb21pc2VBbGxMYXp5LCB0aGVuIH0gZnJvbSAnLi4vLi4vdXRpbC9wcm9taXNlcyc7XG5pbXBvcnQgeyBhc3NlcnREZWZpbmVkLCBhc3NlcnRFcXVhbCwgYXNzZXJ0VHJ1ZSB9IGZyb20gJy4uLy4uL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyBsb2dXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcURldiwgcUluc3BlY3RvciwgcVNlcmlhbGl6ZSwgcVRlc3QgfSBmcm9tICcuLi8uLi91dGlsL3FkZXYnO1xuaW1wb3J0IHR5cGUgeyBPblJlbmRlckZuIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50L2NvbXBvbmVudC5wdWJsaWMnO1xuaW1wb3J0IHsgZGlyZWN0R2V0QXR0cmlidXRlLCBkaXJlY3RTZXRBdHRyaWJ1dGUgfSBmcm9tICcuLi9mYXN0LWNhbGxzJztcbmltcG9ydCB7IFNLSVBfUkVOREVSX1RZUEUgfSBmcm9tICcuLi9qc3gvanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsLCBpc1FybCB9IGZyb20gJy4uLy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHtcbiAgYXNzZXJ0RWxlbWVudCxcbiAgYXNzZXJ0UXdpa0VsZW1lbnQsXG4gIGlzRWxlbWVudCxcbiAgaXNRd2lrRWxlbWVudCxcbiAgaXNUZXh0LFxuICBpc1ZpcnR1YWxFbGVtZW50LFxufSBmcm9tICcuLi8uLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgZ2V0VmRvbSwgUHJvY2Vzc2VkSlNYTm9kZSwgUHJvY2Vzc2VkSlNYTm9kZUltcGwsIHJlbmRlckNvbXBvbmVudCB9IGZyb20gJy4vcmVuZGVyLWRvbSc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlckNvbnRleHQsIFJlbmRlclN0YXRpY0NvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge1xuICBpc0FyaWFBdHRyaWJ1dGUsXG4gIHBhcnNlQ2xhc3NMaXN0LFxuICBwdXNoUmVuZGVyQ29udGV4dCxcbiAgc2VyaWFsaXplQ2xhc3MsXG4gIHNldFFJZCxcbiAgc3RyaW5naWZ5U3R5bGUsXG59IGZyb20gJy4uL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB7IGFkZFF3aWtFdmVudCwgQ29udGFpbmVyU3RhdGUsIHNldFJlZiB9IGZyb20gJy4uLy4uL2NvbnRhaW5lci9jb250YWluZXInO1xuaW1wb3J0IHtcbiAgZ2V0Um9vdE5vZGUsXG4gIG5ld1ZpcnR1YWxFbGVtZW50LFxuICBwcm9jZXNzVmlydHVhbE5vZGVzLFxuICBxdWVyeUFsbFZpcnR1YWxCeUF0dHJpYnV0ZSxcbiAgUXdpa0VsZW1lbnQsXG4gIFZJUlRVQUwsXG4gIFZpcnR1YWxFbGVtZW50LFxufSBmcm9tICcuL3ZpcnR1YWwtZWxlbWVudCc7XG5cbmltcG9ydCB7XG4gIGFwcGVuZENoaWxkLFxuICBjcmVhdGVFbGVtZW50LFxuICBjcmVhdGVUZW1wbGF0ZSxcbiAgY3JlYXRlVGV4dE5vZGUsXG4gIGV4ZWN1dGVET01SZW5kZXIsXG4gIGdldEtleSxcbiAgaW5zZXJ0QmVmb3JlLFxuICBwcmVwZW5kLFxuICByZW1vdmVOb2RlLFxuICBzZXRBdHRyaWJ1dGUsXG4gIHNldENsYXNzbGlzdCxcbiAgc2V0S2V5LFxuICBzZXRQcm9wZXJ0eSxcbn0gZnJvbSAnLi9vcGVyYXRpb25zJztcbmltcG9ydCB7IFFPbmNlIH0gZnJvbSAnLi4vanN4L3V0aWxzLnB1YmxpYyc7XG5pbXBvcnQgeyBFTVBUWV9PQkogfSBmcm9tICcuLi8uLi91dGlsL2ZseXdlaWdodCc7XG5pbXBvcnQgeyBhZGRTaWduYWxTdWIsIGlzU2lnbmFsIH0gZnJvbSAnLi4vLi4vc3RhdGUvc2lnbmFsJztcbmltcG9ydCB7XG4gIGNsZWFudXBDb250ZXh0LFxuICBjcmVhdGVDb250ZXh0LFxuICBnZXRDb250ZXh0LFxuICBIT1NUX0ZMQUdfRElSVFksXG4gIEhPU1RfRkxBR19ORUVEX0FUVEFDSF9MSVNURU5FUixcbiAgUUNvbnRleHQsXG4gIHRyeUdldENvbnRleHQsXG59IGZyb20gJy4uLy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgZ2V0UHJveHlNYW5hZ2VyLCBnZXRQcm94eVRhcmdldCwgU3Vic2NyaXB0aW9uTWFuYWdlciB9IGZyb20gJy4uLy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgeyBjcmVhdGVQcm9wc1N0YXRlLCBjcmVhdGVQcm94eSB9IGZyb20gJy4uLy4uL3N0YXRlL3N0b3JlJztcbmltcG9ydCB7IF9JTU1VVEFCTEUsIF9JTU1VVEFCTEVfUFJFRklYIH0gZnJvbSAnLi4vLi4vc3RhdGUvY29uc3RhbnRzJztcblxuZXhwb3J0IGNvbnN0IFNWR19OUyA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5cbmV4cG9ydCBjb25zdCBJU19TVkcgPSAxIDw8IDA7XG5leHBvcnQgY29uc3QgSVNfSEVBRCA9IDEgPDwgMTtcblxudHlwZSBLZXlUb0luZGV4TWFwID0geyBba2V5OiBzdHJpbmddOiBudW1iZXIgfTtcblxuY29uc3QgQ0hJTERSRU5fUExBQ0VIT0xERVI6IFByb2Nlc3NlZEpTWE5vZGVbXSA9IFtdO1xudHlwZSBQcm9wSGFuZGxlciA9IChcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0IHwgdW5kZWZpbmVkLFxuICBlbDogSFRNTEVsZW1lbnQsXG4gIGtleTogc3RyaW5nLFxuICBuZXdWYWx1ZTogYW55LFxuICBvbGRWYWx1ZTogYW55XG4pID0+IGJvb2xlYW47XG5cbmV4cG9ydCB0eXBlIENoaWxkcmVuTW9kZSA9ICdyb290JyB8ICdoZWFkJyB8ICdlbGVtZW50cyc7XG5cbmV4cG9ydCBjb25zdCB2aXNpdEpzeE5vZGUgPSAoXG4gIGN0eDogUmVuZGVyQ29udGV4dCxcbiAgb2xkVm5vZGU6IFByb2Nlc3NlZEpTWE5vZGUsXG4gIG5ld1Zub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBmbGFnczogbnVtYmVyXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIHJldHVybiBzbWFydFVwZGF0ZUNoaWxkcmVuKGN0eCwgb2xkVm5vZGUsIG5ld1Zub2RlLCAncm9vdCcsIGZsYWdzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBzbWFydFVwZGF0ZUNoaWxkcmVuID0gKFxuICBjdHg6IFJlbmRlckNvbnRleHQsXG4gIG9sZFZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBuZXdWbm9kZTogUHJvY2Vzc2VkSlNYTm9kZSxcbiAgbW9kZTogQ2hpbGRyZW5Nb2RlLFxuICBmbGFnczogbnVtYmVyXG4pID0+IHtcbiAgYXNzZXJ0UXdpa0VsZW1lbnQob2xkVm5vZGUuJGVsbSQpO1xuXG4gIGNvbnN0IGNoID0gbmV3Vm5vZGUuJGNoaWxkcmVuJDtcbiAgaWYgKGNoLmxlbmd0aCA9PT0gMSAmJiBjaFswXS4kdHlwZSQgPT09IFNLSVBfUkVOREVSX1RZUEUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZWxtID0gb2xkVm5vZGUuJGVsbSQ7XG4gIGNvbnN0IG5lZWRzRE9NUmVhZCA9IG9sZFZub2RlLiRjaGlsZHJlbiQgPT09IENISUxEUkVOX1BMQUNFSE9MREVSO1xuICBpZiAobmVlZHNET01SZWFkKSB7XG4gICAgY29uc3QgaXNIZWFkID0gZWxtLm5vZGVOYW1lID09PSAnSEVBRCc7XG4gICAgaWYgKGlzSGVhZCkge1xuICAgICAgbW9kZSA9ICdoZWFkJztcbiAgICAgIGZsYWdzIHw9IElTX0hFQUQ7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb2xkQ2ggPSBnZXRWbm9kZUNoaWxkcmVuKG9sZFZub2RlLCBtb2RlKTtcbiAgaWYgKG9sZENoLmxlbmd0aCA+IDAgJiYgY2gubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB1cGRhdGVDaGlsZHJlbihjdHgsIGVsbSwgb2xkQ2gsIGNoLCBmbGFncyk7XG4gIH0gZWxzZSBpZiAoY2gubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBhZGRWbm9kZXMoY3R4LCBlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBmbGFncyk7XG4gIH0gZWxzZSBpZiAob2xkQ2gubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiByZW1vdmVWbm9kZXMoY3R4LiRzdGF0aWMkLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWbm9kZUNoaWxkcmVuID0gKHZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLCBtb2RlOiBDaGlsZHJlbk1vZGUpID0+IHtcbiAgY29uc3Qgb2xkQ2ggPSB2bm9kZS4kY2hpbGRyZW4kO1xuICBjb25zdCBlbG0gPSB2bm9kZS4kZWxtJCBhcyBFbGVtZW50O1xuICBpZiAob2xkQ2ggPT09IENISUxEUkVOX1BMQUNFSE9MREVSKSB7XG4gICAgcmV0dXJuICh2bm9kZS4kY2hpbGRyZW4kID0gZ2V0Q2hpbGRyZW5Wbm9kZXMoZWxtLCBtb2RlKSk7XG4gIH1cbiAgcmV0dXJuIG9sZENoO1xufTtcblxuZXhwb3J0IGNvbnN0IHVwZGF0ZUNoaWxkcmVuID0gKFxuICBjdHg6IFJlbmRlckNvbnRleHQsXG4gIHBhcmVudEVsbTogUXdpa0VsZW1lbnQsXG4gIG9sZENoOiBQcm9jZXNzZWRKU1hOb2RlW10sXG4gIG5ld0NoOiBQcm9jZXNzZWRKU1hOb2RlW10sXG4gIGZsYWdzOiBudW1iZXJcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgbGV0IG9sZFN0YXJ0SWR4ID0gMDtcbiAgbGV0IG5ld1N0YXJ0SWR4ID0gMDtcbiAgbGV0IG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gIGxldCBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF0gYXMgUHJvY2Vzc2VkSlNYTm9kZSB8IHVuZGVmaW5lZDtcbiAgbGV0IG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XSBhcyBQcm9jZXNzZWRKU1hOb2RlIHwgdW5kZWZpbmVkO1xuICBsZXQgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgbGV0IG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXSBhcyBQcm9jZXNzZWRKU1hOb2RlIHwgdW5kZWZpbmVkO1xuICBsZXQgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdIGFzIFByb2Nlc3NlZEpTWE5vZGUgfCB1bmRlZmluZWQ7XG4gIGxldCBvbGRLZXlUb0lkeDogS2V5VG9JbmRleE1hcCB8IHVuZGVmaW5lZDtcbiAgbGV0IGlkeEluT2xkOiBudW1iZXI7XG4gIGxldCBlbG1Ub01vdmU6IFByb2Nlc3NlZEpTWE5vZGU7XG4gIGNvbnN0IHJlc3VsdHM6IGFueVtdID0gW107XG4gIGNvbnN0IHN0YXRpY0N0eCA9IGN0eC4kc3RhdGljJDtcblxuICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgIGlmIChvbGRTdGFydFZub2RlID09IG51bGwpIHtcbiAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTsgLy8gVm5vZGUgbWlnaHQgaGF2ZSBiZWVuIG1vdmVkIGxlZnRcbiAgICB9IGVsc2UgaWYgKG9sZEVuZFZub2RlID09IG51bGwpIHtcbiAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRWbm9kZSA9PSBudWxsKSB7XG4gICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgfSBlbHNlIGlmIChuZXdFbmRWbm9kZSA9PSBudWxsKSB7XG4gICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlKSkge1xuICAgICAgcmVzdWx0cy5wdXNoKHBhdGNoVm5vZGUoY3R4LCBvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBmbGFncykpO1xuICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgIHJlc3VsdHMucHVzaChwYXRjaFZub2RlKGN0eCwgb2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlLCBmbGFncykpO1xuICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRTdGFydFZub2RlLCBuZXdFbmRWbm9kZSkpIHtcbiAgICAgIGFzc2VydERlZmluZWQob2xkU3RhcnRWbm9kZS4kZWxtJCwgJ29sZFN0YXJ0Vm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICBhc3NlcnREZWZpbmVkKG9sZEVuZFZub2RlLiRlbG0kLCAnb2xkRW5kVm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG5cbiAgICAgIC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICByZXN1bHRzLnB1c2gocGF0Y2hWbm9kZShjdHgsIG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlLCBmbGFncykpO1xuICAgICAgaW5zZXJ0QmVmb3JlKHN0YXRpY0N0eCwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLiRlbG0kLCBvbGRFbmRWbm9kZS4kZWxtJC5uZXh0U2libGluZyk7XG4gICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgIGFzc2VydERlZmluZWQob2xkU3RhcnRWbm9kZS4kZWxtJCwgJ29sZFN0YXJ0Vm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICBhc3NlcnREZWZpbmVkKG9sZEVuZFZub2RlLiRlbG0kLCAnb2xkRW5kVm5vZGUgJGVsbSQgbXVzdCBiZSBkZWZpbmVkJyk7XG5cbiAgICAgIC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgIHJlc3VsdHMucHVzaChwYXRjaFZub2RlKGN0eCwgb2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGZsYWdzKSk7XG4gICAgICBpbnNlcnRCZWZvcmUoc3RhdGljQ3R4LCBwYXJlbnRFbG0sIG9sZEVuZFZub2RlLiRlbG0kLCBvbGRTdGFydFZub2RlLiRlbG0kKTtcbiAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob2xkS2V5VG9JZHggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgIH1cbiAgICAgIGlkeEluT2xkID0gb2xkS2V5VG9JZHhbbmV3U3RhcnRWbm9kZS4ka2V5JCBhcyBzdHJpbmddO1xuICAgICAgaWYgKGlkeEluT2xkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgY29uc3QgbmV3RWxtID0gY3JlYXRlRWxtKGN0eCwgbmV3U3RhcnRWbm9kZSwgZmxhZ3MsIHJlc3VsdHMpO1xuICAgICAgICBpbnNlcnRCZWZvcmUoc3RhdGljQ3R4LCBwYXJlbnRFbG0sIG5ld0VsbSwgb2xkU3RhcnRWbm9kZT8uJGVsbSQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxtVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICBpZiAoIWlzVGFnTmFtZShlbG1Ub01vdmUsIG5ld1N0YXJ0Vm5vZGUuJHR5cGUkKSkge1xuICAgICAgICAgIGNvbnN0IG5ld0VsbSA9IGNyZWF0ZUVsbShjdHgsIG5ld1N0YXJ0Vm5vZGUsIGZsYWdzLCByZXN1bHRzKTtcbiAgICAgICAgICB0aGVuKG5ld0VsbSwgKG5ld0VsbSkgPT4ge1xuICAgICAgICAgICAgaW5zZXJ0QmVmb3JlKHN0YXRpY0N0eCwgcGFyZW50RWxtLCBuZXdFbG0sIG9sZFN0YXJ0Vm5vZGU/LiRlbG0kKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2gocGF0Y2hWbm9kZShjdHgsIGVsbVRvTW92ZSwgbmV3U3RhcnRWbm9kZSwgZmxhZ3MpKTtcbiAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQgYXMgYW55O1xuICAgICAgICAgIGFzc2VydERlZmluZWQoZWxtVG9Nb3ZlLiRlbG0kLCAnZWxtVG9Nb3ZlICRlbG0kIG11c3QgYmUgZGVmaW5lZCcpO1xuICAgICAgICAgIGluc2VydEJlZm9yZShzdGF0aWNDdHgsIHBhcmVudEVsbSwgZWxtVG9Nb3ZlLiRlbG0kLCBvbGRTdGFydFZub2RlLiRlbG0kKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChuZXdTdGFydElkeCA8PSBuZXdFbmRJZHgpIHtcbiAgICBjb25zdCBiZWZvcmUgPSBuZXdDaFtuZXdFbmRJZHggKyAxXSA9PSBudWxsID8gbnVsbCA6IG5ld0NoW25ld0VuZElkeCArIDFdLiRlbG0kO1xuICAgIHJlc3VsdHMucHVzaChhZGRWbm9kZXMoY3R4LCBwYXJlbnRFbG0sIGJlZm9yZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGZsYWdzKSk7XG4gIH1cblxuICBsZXQgd2FpdCA9IHByb21pc2VBbGwocmVzdWx0cykgYXMgYW55O1xuICBpZiAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4KSB7XG4gICAgd2FpdCA9IHRoZW4od2FpdCwgKCkgPT4ge1xuICAgICAgcmVtb3ZlVm5vZGVzKHN0YXRpY0N0eCwgb2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB3YWl0O1xufTtcblxuY29uc3QgZ2V0Q2ggPSAoZWxtOiBRd2lrRWxlbWVudCwgZmlsdGVyOiAoZWw6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCkgPT4gYm9vbGVhbikgPT4ge1xuICBjb25zdCBlbmQgPSBpc1ZpcnR1YWxFbGVtZW50KGVsbSkgPyBlbG0uY2xvc2UgOiBudWxsO1xuXG4gIGNvbnN0IG5vZGVzOiAoTm9kZSB8IFZpcnR1YWxFbGVtZW50KVtdID0gW107XG4gIGxldCBub2RlOiBOb2RlIHwgbnVsbCB8IFZpcnR1YWxFbGVtZW50ID0gZWxtLmZpcnN0Q2hpbGQ7XG4gIHdoaWxlICgobm9kZSA9IHByb2Nlc3NWaXJ0dWFsTm9kZXMobm9kZSkpKSB7XG4gICAgaWYgKGZpbHRlcihub2RlKSkge1xuICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgaWYgKG5vZGUgPT09IGVuZCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBub2Rlcztcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDaGlsZHJlbiA9IChlbG06IFF3aWtFbGVtZW50LCBtb2RlOiBDaGlsZHJlbk1vZGUpOiAoTm9kZSB8IFZpcnR1YWxFbGVtZW50KVtdID0+IHtcbiAgLy8gY29uc29sZS53YXJuKCdET00gUkVBRDogZ2V0Q2hpbGRyZW4oKScsIGVsbSk7XG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ3Jvb3QnOlxuICAgICAgcmV0dXJuIGdldENoKGVsbSwgaXNDaGlsZENvbXBvbmVudCk7XG4gICAgY2FzZSAnaGVhZCc6XG4gICAgICByZXR1cm4gZ2V0Q2goZWxtLCBpc0hlYWRDaGlsZHJlbik7XG4gICAgY2FzZSAnZWxlbWVudHMnOlxuICAgICAgcmV0dXJuIGdldENoKGVsbSwgaXNRd2lrRWxlbWVudCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRDaGlsZHJlblZub2RlcyA9IChlbG06IFF3aWtFbGVtZW50LCBtb2RlOiBDaGlsZHJlbk1vZGUpID0+IHtcbiAgcmV0dXJuIGdldENoaWxkcmVuKGVsbSwgbW9kZSkubWFwKGdldFZub2RlRnJvbUVsKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWbm9kZUZyb21FbCA9IChlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KSA9PiB7XG4gIGlmIChpc0VsZW1lbnQoZWwpKSB7XG4gICAgcmV0dXJuIHRyeUdldENvbnRleHQoZWwpPy4kdmRvbSQgPz8gZG9tVG9Wbm9kZShlbCk7XG4gIH1cbiAgcmV0dXJuIGRvbVRvVm5vZGUoZWwpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRvbVRvVm5vZGUgPSAobm9kZTogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogUHJvY2Vzc2VkSlNYTm9kZSA9PiB7XG4gIGlmIChpc1F3aWtFbGVtZW50KG5vZGUpKSB7XG4gICAgY29uc3QgcHJvcHMgPSBpc1ZpcnR1YWxFbGVtZW50KG5vZGUpID8gRU1QVFlfT0JKIDogZ2V0UHJvcHMobm9kZSk7XG4gICAgY29uc3QgdCA9IG5ldyBQcm9jZXNzZWRKU1hOb2RlSW1wbChub2RlLmxvY2FsTmFtZSwgcHJvcHMsIENISUxEUkVOX1BMQUNFSE9MREVSLCBnZXRLZXkobm9kZSkpO1xuICAgIHQuJGVsbSQgPSBub2RlO1xuICAgIHJldHVybiB0O1xuICB9IGVsc2UgaWYgKGlzVGV4dChub2RlKSkge1xuICAgIGNvbnN0IHQgPSBuZXcgUHJvY2Vzc2VkSlNYTm9kZUltcGwobm9kZS5ub2RlTmFtZSwge30sIENISUxEUkVOX1BMQUNFSE9MREVSLCBudWxsKTtcbiAgICB0LiR0ZXh0JCA9IG5vZGUuZGF0YTtcbiAgICB0LiRlbG0kID0gbm9kZTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbm9kZScpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFByb3BzID0gKG5vZGU6IEVsZW1lbnQpID0+IHtcbiAgY29uc3QgcHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcbiAgY29uc3QgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlcztcbiAgY29uc3QgbGVuID0gYXR0cmlidXRlcy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBhdHRyID0gYXR0cmlidXRlcy5pdGVtKGkpO1xuICAgIGFzc2VydERlZmluZWQoYXR0ciwgJ2F0dHJpYnV0ZSBtdXN0IGJlIGRlZmluZWQnKTtcblxuICAgIGNvbnN0IG5hbWUgPSBhdHRyLm5hbWU7XG4gICAgaWYgKG5hbWUuaW5jbHVkZXMoJzonKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChxRGV2KSB7XG4gICAgICBpZiAobmFtZSA9PT0gJ2RhdGEtcXdpay1pbnNwZWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ2NsYXNzJykge1xuICAgICAgcHJvcHNbbmFtZV0gPSBwYXJzZURvbUNsYXNzKGF0dHIudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wc1tuYW1lXSA9IGF0dHIudmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wcztcbn07XG5cbmNvbnN0IHBhcnNlRG9tQ2xhc3MgPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBwYXJzZUNsYXNzTGlzdCh2YWx1ZSlcbiAgICAuZmlsdGVyKChjKSA9PiAhYy5zdGFydHNXaXRoKENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQpKVxuICAgIC5qb2luKCcgJyk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNOb2RlID0gKGVsbTogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHR5cGUgPSBlbG0ubm9kZVR5cGU7XG4gIHJldHVybiB0eXBlID09PSAxIHx8IHR5cGUgPT09IDMgfHwgdHlwZSA9PT0gMTExO1xufTtcblxuY29uc3QgaXNIZWFkQ2hpbGRyZW4gPSAobm9kZTogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICBpZiAodHlwZSA9PT0gMSkge1xuICAgIHJldHVybiAobm9kZSBhcyBFbGVtZW50KS5oYXNBdHRyaWJ1dGUoJ3E6aGVhZCcpO1xuICB9XG4gIHJldHVybiB0eXBlID09PSAxMTE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTbG90VGVtcGxhdGUgPSAobm9kZTogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICdROlRFTVBMQVRFJztcbn07XG5cbmNvbnN0IGlzQ2hpbGRDb21wb25lbnQgPSAobm9kZTogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IHR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICBpZiAodHlwZSA9PT0gMyB8fCB0eXBlID09PSAxMTEpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZSAhPT0gMSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBub2RlTmFtZSA9IG5vZGUubm9kZU5hbWU7XG4gIGlmIChub2RlTmFtZSA9PT0gJ1E6VEVNUExBVEUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChub2RlTmFtZSA9PT0gJ0hFQUQnKSB7XG4gICAgcmV0dXJuIChub2RlIGFzIEVsZW1lbnQpLmhhc0F0dHJpYnV0ZSgncTpoZWFkJyk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnQgY29uc3Qgc3BsaXRDaGlsZHJlbiA9IChpbnB1dDogUHJvY2Vzc2VkSlNYTm9kZVtdKTogUmVjb3JkPHN0cmluZywgUHJvY2Vzc2VkSlNYTm9kZT4gPT4ge1xuICBjb25zdCBvdXRwdXQ6IFJlY29yZDxzdHJpbmcsIFByb2Nlc3NlZEpTWE5vZGU+ID0ge307XG4gIGZvciAoY29uc3QgaXRlbSBvZiBpbnB1dCkge1xuICAgIGNvbnN0IGtleSA9IGdldFNsb3ROYW1lKGl0ZW0pO1xuICAgIGNvbnN0IG5vZGUgPVxuICAgICAgb3V0cHV0W2tleV0gPz9cbiAgICAgIChvdXRwdXRba2V5XSA9IG5ldyBQcm9jZXNzZWRKU1hOb2RlSW1wbChcbiAgICAgICAgVklSVFVBTCxcbiAgICAgICAge1xuICAgICAgICAgIFtRU2xvdFNdOiAnJyxcbiAgICAgICAgfSxcbiAgICAgICAgW10sXG4gICAgICAgIGtleVxuICAgICAgKSk7XG4gICAgbm9kZS4kY2hpbGRyZW4kLnB1c2goaXRlbSk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbmV4cG9ydCBjb25zdCBwYXRjaFZub2RlID0gKFxuICByQ3R4OiBSZW5kZXJDb250ZXh0LFxuICBvbGRWbm9kZTogUHJvY2Vzc2VkSlNYTm9kZSxcbiAgbmV3Vm5vZGU6IFByb2Nlc3NlZEpTWE5vZGUsXG4gIGZsYWdzOiBudW1iZXJcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgYXNzZXJ0RXF1YWwob2xkVm5vZGUuJHR5cGUkLCBuZXdWbm9kZS4kdHlwZSQsICdvbGQgYW5kIG5ldyB2bm9kZXMgdHlwZSBtdXN0IGJlIHRoZSBzYW1lJyk7XG5cbiAgY29uc3QgZWxtID0gb2xkVm5vZGUuJGVsbSQ7XG4gIGNvbnN0IHRhZyA9IG5ld1Zub2RlLiR0eXBlJDtcbiAgY29uc3Qgc3RhdGljQ3R4ID0gckN0eC4kc3RhdGljJDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gdGFnID09PSBWSVJUVUFMO1xuICBjb25zdCBjdXJyZW50Q29tcG9uZW50ID0gckN0eC4kY21wQ3R4JDtcbiAgYXNzZXJ0RGVmaW5lZChlbG0sICd3aGlsZSBwYXRjaGluZyBlbGVtZW50IG11c3QgYmUgZGVmaW5lZCcpO1xuICBhc3NlcnREZWZpbmVkKGN1cnJlbnRDb21wb25lbnQsICd3aGlsZSBwYXRjaGluZyBjdXJyZW50IGNvbXBvbmVudCBtdXN0IGJlIGRlZmluZWQnKTtcblxuICBuZXdWbm9kZS4kZWxtJCA9IGVsbTtcblxuICAvLyBSZW5kZXIgdGV4dCBub2Rlc1xuICBpZiAodGFnID09PSAnI3RleHQnKSB7XG4gICAgY29uc3Qgc2lnbmFsID0gbmV3Vm5vZGUuJHNpZ25hbCQ7XG4gICAgaWYgKHNpZ25hbCkge1xuICAgICAgYWRkU2lnbmFsU3ViKDIsIGN1cnJlbnRDb21wb25lbnQuJGVsZW1lbnQkLCBzaWduYWwsIGVsbSBhcyBUZXh0LCAnZGF0YScpO1xuICAgIH1cbiAgICBpZiAob2xkVm5vZGUuJHRleHQkICE9PSBuZXdWbm9kZS4kdGV4dCQpIHtcbiAgICAgIHNldFByb3BlcnR5KHN0YXRpY0N0eCwgZWxtLCAnZGF0YScsIG5ld1Zub2RlLiR0ZXh0JCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBhc3NlcnRRd2lrRWxlbWVudChlbG0pO1xuXG4gIC8vIFRyYWNrIFNWRyBzdGF0ZVxuICBsZXQgaXNTdmcgPSAhIShmbGFncyAmIElTX1NWRyk7XG4gIGlmICghaXNTdmcgJiYgdGFnID09PSAnc3ZnJykge1xuICAgIGZsYWdzIHw9IElTX1NWRztcbiAgICBpc1N2ZyA9IHRydWU7XG4gIH1cblxuICBjb25zdCBwcm9wcyA9IG5ld1Zub2RlLiRwcm9wcyQ7XG4gIGNvbnN0IGlzQ29tcG9uZW50ID0gaXNWaXJ0dWFsICYmIE9uUmVuZGVyUHJvcCBpbiBwcm9wcztcbiAgY29uc3QgZWxDdHggPSBnZXRDb250ZXh0KGVsbSwgckN0eC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkKTtcbiAgYXNzZXJ0RGVmaW5lZChjdXJyZW50Q29tcG9uZW50LCAnc2xvdHMgY2FuIG5vdCBiZSByZW5kZXJlZCBvdXRzaWRlIGEgY29tcG9uZW50JywgZWxtKTtcbiAgaWYgKCFpc0NvbXBvbmVudCkge1xuICAgIGNvbnN0IHBlbmRpbmdMaXN0ZW5lcnMgPSBjdXJyZW50Q29tcG9uZW50LmxpO1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IGVsQ3R4LmxpO1xuICAgIGxpc3RlbmVycy5sZW5ndGggPSAwO1xuICAgIG5ld1Zub2RlLiRwcm9wcyQgPSB1cGRhdGVQcm9wZXJ0aWVzKFxuICAgICAgc3RhdGljQ3R4LFxuICAgICAgZWxDdHgsXG4gICAgICBjdXJyZW50Q29tcG9uZW50LiRlbGVtZW50JCxcbiAgICAgIG9sZFZub2RlLiRwcm9wcyQsXG4gICAgICBwcm9wcyxcbiAgICAgIGlzU3ZnXG4gICAgKTtcbiAgICBpZiAocGVuZGluZ0xpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICBsaXN0ZW5lcnMucHVzaCguLi5wZW5kaW5nTGlzdGVuZXJzKTtcbiAgICAgIHBlbmRpbmdMaXN0ZW5lcnMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBpZiAoaXNTdmcgJiYgdGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAgIGZsYWdzICY9IH5JU19TVkc7XG4gICAgICBpc1N2ZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGlzU2xvdCA9IGlzVmlydHVhbCAmJiBRU2xvdFMgaW4gcHJvcHM7XG4gICAgaWYgKGlzU2xvdCkge1xuICAgICAgYXNzZXJ0RGVmaW5lZChjdXJyZW50Q29tcG9uZW50LiRzbG90cyQsICdjdXJyZW50IGNvbXBvbmVudCBzbG90cyBtdXN0IGJlIGEgZGVmaW5lZCBhcnJheScpO1xuICAgICAgY3VycmVudENvbXBvbmVudC4kc2xvdHMkLnB1c2gobmV3Vm5vZGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzZXRzSW5uZXJIVE1MID0gcHJvcHNbZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxdICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKHNldHNJbm5lckhUTUwpIHtcbiAgICAgIGlmIChxRGV2ICYmIG5ld1Zub2RlLiRjaGlsZHJlbiQubGVuZ3RoID4gMCkge1xuICAgICAgICBsb2dXYXJuKCdOb2RlIGNhbiBub3QgaGF2ZSBjaGlsZHJlbiB3aGVuIGlubmVySFRNTCBpcyBzZXQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNSZW5kZXJPbmNlID0gaXNWaXJ0dWFsICYmIFFPbmNlIGluIHByb3BzO1xuICAgIGlmIChpc1JlbmRlck9uY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ3RleHRhcmVhJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gc21hcnRVcGRhdGVDaGlsZHJlbihyQ3R4LCBvbGRWbm9kZSwgbmV3Vm5vZGUsICdyb290JywgZmxhZ3MpO1xuICB9XG5cbiAgY29uc3QgY21wUHJvcHMgPSBwcm9wcy5wcm9wcztcbiAgbGV0IG5lZWRzUmVuZGVyID0gc2V0Q29tcG9uZW50UHJvcHMoZWxDdHgsIHJDdHgsIGNtcFByb3BzKTtcblxuICAvLyBUT0RPOiByZXZpZXcgdGhpcyBjb3JuZXIgY2FzZVxuICBpZiAoIW5lZWRzUmVuZGVyICYmICFlbEN0eC4kY29tcG9uZW50UXJsJCAmJiAhZWxDdHguJGVsZW1lbnQkLmhhc0F0dHJpYnV0ZShFTEVNRU5UX0lEKSkge1xuICAgIHNldFFJZChyQ3R4LCBlbEN0eCk7XG4gICAgZWxDdHguJGNvbXBvbmVudFFybCQgPSBjbXBQcm9wc1tPblJlbmRlclByb3BdO1xuICAgIGFzc2VydFFybChlbEN0eC4kY29tcG9uZW50UXJsJCBhcyBhbnkpO1xuICAgIG5lZWRzUmVuZGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFJlbmRlcmluZyBvZiBjaGlsZHJlbiBvZiBjb21wb25lbnQgaXMgbW9yZSBjb21wbGljYXRlZCxcbiAgLy8gc2luY2UgdGhlIGNoaWxkcmVuIG11c3QgYmUgcHJvamVjdGVkIGludG8gdGhlIHJlbmRlcmVkIHNsb3RzXG4gIC8vIEluIGFkZGl0aW9uLCBuZXN0ZWQgY2hpbGRlbiBtaWdodCBuZWVkIHJlcmVuZGVyaW5nLCBpZiB0aGF0J3MgdGhlIGNhc2VcbiAgLy8gd2UgbmVlZCB0byByZW5kZXIgdGhlIG5lc3RlZCBjb21wb25lbnQsIGFuZCB3YWl0IGJlZm9yZSBwcm9qZWN0aW5nIHRoZSBjb250ZW50XG4gIC8vIHNpbmNlIG90aGVyd2lzZSB3ZSBkb24ndCBrbm93IHdoZXJlIHRoZSBzbG90c1xuICBpZiAobmVlZHNSZW5kZXIpIHtcbiAgICByZXR1cm4gdGhlbihyZW5kZXJDb21wb25lbnQockN0eCwgZWxDdHgsIGZsYWdzKSwgKCkgPT5cbiAgICAgIHJlbmRlckNvbnRlbnRQcm9qZWN0aW9uKHJDdHgsIGVsQ3R4LCBuZXdWbm9kZSwgZmxhZ3MpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVuZGVyQ29udGVudFByb2plY3Rpb24ockN0eCwgZWxDdHgsIG5ld1Zub2RlLCBmbGFncyk7XG59O1xuXG5jb25zdCByZW5kZXJDb250ZW50UHJvamVjdGlvbiA9IChcbiAgckN0eDogUmVuZGVyQ29udGV4dCxcbiAgaG9zdEN0eDogUUNvbnRleHQsXG4gIHZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBmbGFnczogbnVtYmVyXG4pOiBWYWx1ZU9yUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IG5ld0NoaWxkcmVuID0gdm5vZGUuJGNoaWxkcmVuJDtcbiAgY29uc3Qgc3RhdGljQ3R4ID0gckN0eC4kc3RhdGljJDtcbiAgY29uc3Qgc3BsaXR0ZWROZXdDaGlkcmVuID0gc3BsaXRDaGlsZHJlbihuZXdDaGlsZHJlbik7XG4gIGNvbnN0IHNsb3RNYXBzID0gZ2V0U2xvdE1hcChob3N0Q3R4KTtcblxuICAvLyBSZW1vdmUgY29udGVudCBmcm9tIGVtcHR5IHNsb3RzXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNsb3RNYXBzLnNsb3RzKSkge1xuICAgIGlmICghc3BsaXR0ZWROZXdDaGlkcmVuW2tleV0pIHtcbiAgICAgIGNvbnN0IHNsb3RFbCA9IHNsb3RNYXBzLnNsb3RzW2tleV07XG4gICAgICBjb25zdCBvbGRDaCA9IGdldENoaWxkcmVuVm5vZGVzKHNsb3RFbCwgJ3Jvb3QnKTtcbiAgICAgIGlmIChvbGRDaC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IHNsb3RDdHggPSB0cnlHZXRDb250ZXh0KHNsb3RFbCk7XG4gICAgICAgIGlmIChzbG90Q3R4ICYmIHNsb3RDdHguJHZkb20kKSB7XG4gICAgICAgICAgc2xvdEN0eC4kdmRvbSQuJGNoaWxkcmVuJCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJlbW92ZVZub2RlcyhzdGF0aWNDdHgsIG9sZENoLCAwLCBvbGRDaC5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZW1vdmUgZW1wdHkgdGVtcGxhdGVzXG4gIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNsb3RNYXBzLnRlbXBsYXRlcykpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZUVsID0gc2xvdE1hcHMudGVtcGxhdGVzW2tleV07XG4gICAgaWYgKHRlbXBsYXRlRWwgJiYgIXNwbGl0dGVkTmV3Q2hpZHJlbltrZXldKSB7XG4gICAgICBzbG90TWFwcy50ZW1wbGF0ZXNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgIHJlbW92ZU5vZGUoc3RhdGljQ3R4LCB0ZW1wbGF0ZUVsKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZW5kZXIgaW50byBzbG90c1xuICByZXR1cm4gcHJvbWlzZUFsbChcbiAgICBPYmplY3Qua2V5cyhzcGxpdHRlZE5ld0NoaWRyZW4pLm1hcCgoc2xvdE5hbWUpID0+IHtcbiAgICAgIGNvbnN0IG5ld1Zkb20gPSBzcGxpdHRlZE5ld0NoaWRyZW5bc2xvdE5hbWVdO1xuICAgICAgY29uc3Qgc2xvdEN0eCA9IGdldFNsb3RDdHgoXG4gICAgICAgIHN0YXRpY0N0eCxcbiAgICAgICAgc2xvdE1hcHMsXG4gICAgICAgIGhvc3RDdHgsXG4gICAgICAgIHNsb3ROYW1lLFxuICAgICAgICByQ3R4LiRzdGF0aWMkLiRjb250YWluZXJTdGF0ZSRcbiAgICAgICk7XG4gICAgICBjb25zdCBvbGRWZG9tID0gZ2V0VmRvbShzbG90Q3R4KTtcbiAgICAgIGNvbnN0IHNsb3RSY3R4ID0gcHVzaFJlbmRlckNvbnRleHQockN0eCk7XG4gICAgICBzbG90UmN0eC4kc2xvdEN0eCQgPSBzbG90Q3R4O1xuICAgICAgc2xvdEN0eC4kdmRvbSQgPSBuZXdWZG9tO1xuICAgICAgbmV3VmRvbS4kZWxtJCA9IHNsb3RDdHguJGVsZW1lbnQkO1xuICAgICAgY29uc3QgaW5kZXggPSBzdGF0aWNDdHguJGFkZFNsb3RzJC5maW5kSW5kZXgoKHNsb3QpID0+IHNsb3RbMF0gPT09IHNsb3RDdHguJGVsZW1lbnQkKTtcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHN0YXRpY0N0eC4kYWRkU2xvdHMkLnNwbGljZShpbmRleCwgMSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc21hcnRVcGRhdGVDaGlsZHJlbihzbG90UmN0eCwgb2xkVmRvbSwgbmV3VmRvbSwgJ3Jvb3QnLCBmbGFncyk7XG4gICAgfSlcbiAgKSBhcyBhbnk7XG59O1xuXG5jb25zdCBhZGRWbm9kZXMgPSAoXG4gIGN0eDogUmVuZGVyQ29udGV4dCxcbiAgcGFyZW50RWxtOiBRd2lrRWxlbWVudCxcbiAgYmVmb3JlOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQgfCBudWxsLFxuICB2bm9kZXM6IFByb2Nlc3NlZEpTWE5vZGVbXSxcbiAgc3RhcnRJZHg6IG51bWJlcixcbiAgZW5kSWR4OiBudW1iZXIsXG4gIGZsYWdzOiBudW1iZXJcbik6IFZhbHVlT3JQcm9taXNlPHZvaWQ+ID0+IHtcbiAgY29uc3QgcHJvbWlzZXM6IFByb21pc2U8YW55PltdID0gW107XG4gIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICBjb25zdCBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgYXNzZXJ0RGVmaW5lZChjaCwgJ3JlbmRlcjogbm9kZSBtdXN0IGJlIGRlZmluZWQgYXQgaW5kZXgnLCBzdGFydElkeCwgdm5vZGVzKTtcbiAgICBjb25zdCBlbG0gPSBjcmVhdGVFbG0oY3R4LCBjaCwgZmxhZ3MsIHByb21pc2VzKTtcbiAgICBpbnNlcnRCZWZvcmUoY3R4LiRzdGF0aWMkLCBwYXJlbnRFbG0sIGVsbSwgYmVmb3JlKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZUFsbExhenkocHJvbWlzZXMpO1xufTtcblxuY29uc3QgcmVtb3ZlVm5vZGVzID0gKFxuICBzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIG5vZGVzOiBQcm9jZXNzZWRKU1hOb2RlW10sXG4gIHN0YXJ0SWR4OiBudW1iZXIsXG4gIGVuZElkeDogbnVtYmVyXG4pOiB2b2lkID0+IHtcbiAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgIGNvbnN0IGNoID0gbm9kZXNbc3RhcnRJZHhdO1xuICAgIGlmIChjaCkge1xuICAgICAgYXNzZXJ0RGVmaW5lZChjaC4kZWxtJCwgJ3Zub2RlIGVsbSBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICAgIHJlbW92ZU5vZGUoc3RhdGljQ3R4LCBjaC4kZWxtJCk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBnZXRTbG90Q3R4ID0gKFxuICBzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIHNsb3RNYXBzOiBTbG90TWFwcyxcbiAgaG9zdEN0eDogUUNvbnRleHQsXG4gIHNsb3ROYW1lOiBzdHJpbmcsXG4gIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZVxuKTogUUNvbnRleHQgPT4ge1xuICBjb25zdCBzbG90RWwgPSBzbG90TWFwcy5zbG90c1tzbG90TmFtZV07XG4gIGlmIChzbG90RWwpIHtcbiAgICByZXR1cm4gZ2V0Q29udGV4dChzbG90RWwsIGNvbnRhaW5lclN0YXRlKTtcbiAgfVxuICBjb25zdCB0ZW1wbGF0ZUVsID0gc2xvdE1hcHMudGVtcGxhdGVzW3Nsb3ROYW1lXTtcbiAgaWYgKHRlbXBsYXRlRWwpIHtcbiAgICByZXR1cm4gZ2V0Q29udGV4dCh0ZW1wbGF0ZUVsLCBjb250YWluZXJTdGF0ZSk7XG4gIH1cbiAgY29uc3QgdGVtcGxhdGUgPSBjcmVhdGVUZW1wbGF0ZShzdGF0aWNDdHguJGRvYyQsIHNsb3ROYW1lKTtcbiAgY29uc3QgZWxDdHggPSBjcmVhdGVDb250ZXh0KHRlbXBsYXRlKTtcbiAgZWxDdHguJHBhcmVudCQgPSBob3N0Q3R4O1xuICBwcmVwZW5kKHN0YXRpY0N0eCwgaG9zdEN0eC4kZWxlbWVudCQsIHRlbXBsYXRlKTtcbiAgc2xvdE1hcHMudGVtcGxhdGVzW3Nsb3ROYW1lXSA9IHRlbXBsYXRlO1xuICByZXR1cm4gZWxDdHg7XG59O1xuXG5jb25zdCBnZXRTbG90TmFtZSA9IChub2RlOiBQcm9jZXNzZWRKU1hOb2RlKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIG5vZGUuJHByb3BzJFtRU2xvdF0gPz8gJyc7XG59O1xuXG5jb25zdCBjcmVhdGVFbG0gPSAoXG4gIHJDdHg6IFJlbmRlckNvbnRleHQsXG4gIHZub2RlOiBQcm9jZXNzZWRKU1hOb2RlLFxuICBmbGFnczogbnVtYmVyLFxuICBwcm9taXNlczogUHJvbWlzZTxhbnk+W11cbik6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCA9PiB7XG4gIGNvbnN0IHRhZyA9IHZub2RlLiR0eXBlJDtcbiAgY29uc3QgZG9jID0gckN0eC4kc3RhdGljJC4kZG9jJDtcbiAgY29uc3QgY3VycmVudENvbXBvbmVudCA9IHJDdHguJGNtcEN0eCQ7XG4gIGlmICh0YWcgPT09ICcjdGV4dCcpIHtcbiAgICBjb25zdCBzaWduYWwgPSB2bm9kZS4kc2lnbmFsJDtcbiAgICBjb25zdCBlbG0gPSBjcmVhdGVUZXh0Tm9kZShkb2MsIHZub2RlLiR0ZXh0JCEpO1xuICAgIGlmIChzaWduYWwgJiYgY3VycmVudENvbXBvbmVudCkge1xuICAgICAgYWRkU2lnbmFsU3ViKDIsIGN1cnJlbnRDb21wb25lbnQuJGVsZW1lbnQkLCBzaWduYWwsIGVsbSwgJ2RhdGEnKTtcbiAgICB9XG4gICAgcmV0dXJuICh2bm9kZS4kZWxtJCA9IGVsbSk7XG4gIH1cblxuICBsZXQgZWxtOiBRd2lrRWxlbWVudDtcbiAgbGV0IGlzSGVhZCA9ICEhKGZsYWdzICYgSVNfSEVBRCk7XG4gIGxldCBpc1N2ZyA9ICEhKGZsYWdzICYgSVNfU1ZHKTtcbiAgaWYgKCFpc1N2ZyAmJiB0YWcgPT09ICdzdmcnKSB7XG4gICAgZmxhZ3MgfD0gSVNfU1ZHO1xuICAgIGlzU3ZnID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBpc1ZpcnR1YWwgPSB0YWcgPT09IFZJUlRVQUw7XG4gIGNvbnN0IHByb3BzID0gdm5vZGUuJHByb3BzJDtcbiAgY29uc3QgaXNDb21wb25lbnQgPSBPblJlbmRlclByb3AgaW4gcHJvcHM7XG4gIGNvbnN0IHN0YXRpY0N0eCA9IHJDdHguJHN0YXRpYyQ7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBlbG0gPSBuZXdWaXJ0dWFsRWxlbWVudChkb2MpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2hlYWQnKSB7XG4gICAgZWxtID0gZG9jLmhlYWQ7XG4gICAgZmxhZ3MgfD0gSVNfSEVBRDtcbiAgICBpc0hlYWQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGVsbSA9IGNyZWF0ZUVsZW1lbnQoZG9jLCB0YWcsIGlzU3ZnKTtcbiAgICBmbGFncyAmPSB+SVNfSEVBRDtcbiAgfVxuICBpZiAocURldiAmJiBxSW5zcGVjdG9yKSB7XG4gICAgY29uc3QgZGV2ID0gdm5vZGUuJGRldiQ7XG4gICAgaWYgKGRldikge1xuICAgICAgZGlyZWN0U2V0QXR0cmlidXRlKFxuICAgICAgICBlbG0sXG4gICAgICAgICdkYXRhLXF3aWstaW5zcGVjdG9yJyxcbiAgICAgICAgYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGRldi5maWxlTmFtZSl9OiR7ZGV2LmxpbmVOdW1iZXJ9OiR7ZGV2LmNvbHVtbk51bWJlcn1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHZub2RlLiRlbG0kID0gZWxtO1xuICBpZiAoaXNTdmcgJiYgdGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICBpc1N2ZyA9IGZhbHNlO1xuICAgIGZsYWdzICY9IH5JU19TVkc7XG4gIH1cbiAgY29uc3QgZWxDdHggPSBjcmVhdGVDb250ZXh0KGVsbSk7XG4gIGVsQ3R4LiRwYXJlbnQkID0gckN0eC4kY21wQ3R4JDtcbiAgZWxDdHguJHNsb3RQYXJlbnQkID0gckN0eC4kc2xvdEN0eCQ7XG4gIGlmIChpc0NvbXBvbmVudCkge1xuICAgIHNldEtleShlbG0sIHZub2RlLiRrZXkkKTtcbiAgICBhc3NlcnRUcnVlKGlzVmlydHVhbCwgJ2NvbXBvbmVudCBtdXN0IGJlIGEgdmlydHVhbCBlbGVtZW50Jyk7XG4gICAgY29uc3QgcmVuZGVyUVJMID0gcHJvcHNbT25SZW5kZXJQcm9wXTtcbiAgICBhc3NlcnRRcmw8T25SZW5kZXJGbjxhbnk+PihyZW5kZXJRUkwpO1xuICAgIHNldENvbXBvbmVudFByb3BzKGVsQ3R4LCByQ3R4LCBwcm9wcy5wcm9wcyk7XG4gICAgc2V0UUlkKHJDdHgsIGVsQ3R4KTtcblxuICAgIGlmIChxRGV2ICYmICFxVGVzdCkge1xuICAgICAgY29uc3Qgc3ltYm9sID0gcmVuZGVyUVJMLiRzeW1ib2wkO1xuICAgICAgaWYgKHN5bWJvbCkge1xuICAgICAgICBkaXJlY3RTZXRBdHRyaWJ1dGUoZWxtLCAnZGF0YS1xcmwnLCBzeW1ib2wpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJ1biBtb3VudCBob29rXG4gICAgZWxDdHguJGNvbXBvbmVudFFybCQgPSByZW5kZXJRUkw7XG5cbiAgICBjb25zdCB3YWl0ID0gdGhlbihyZW5kZXJDb21wb25lbnQockN0eCwgZWxDdHgsIGZsYWdzKSwgKCkgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuID0gdm5vZGUuJGNoaWxkcmVuJDtcbiAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBjaGlsZHJlblswXS4kdHlwZSQgPT09IFNLSVBfUkVOREVSX1RZUEUpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXS4kY2hpbGRyZW4kO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xvdE1hcCA9IGdldFNsb3RNYXAoZWxDdHgpO1xuICAgICAgY29uc3QgcDogUHJvbWlzZTx2b2lkPltdID0gW107XG4gICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgY29uc3Qgc2xvdEN0eCA9IGdldFNsb3RDdHgoXG4gICAgICAgICAgc3RhdGljQ3R4LFxuICAgICAgICAgIHNsb3RNYXAsXG4gICAgICAgICAgZWxDdHgsXG4gICAgICAgICAgZ2V0U2xvdE5hbWUobm9kZSksXG4gICAgICAgICAgc3RhdGljQ3R4LiRjb250YWluZXJTdGF0ZSRcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgc2xvdFJjdHggPSBwdXNoUmVuZGVyQ29udGV4dChyQ3R4KTtcbiAgICAgICAgc2xvdFJjdHguJHNsb3RDdHgkID0gc2xvdEN0eDtcbiAgICAgICAgY29uc3Qgbm9kZUVsbSA9IGNyZWF0ZUVsbShzbG90UmN0eCwgbm9kZSwgZmxhZ3MsIHApO1xuICAgICAgICBhc3NlcnREZWZpbmVkKG5vZGUuJGVsbSQsICd2bm9kZSBlbG0gbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICAgIGFzc2VydEVxdWFsKG5vZGVFbG0sIG5vZGUuJGVsbSQsICd2bm9kZSBlbG0gbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICAgIGFwcGVuZENoaWxkKHN0YXRpY0N0eCwgc2xvdEN0eC4kZWxlbWVudCQsIG5vZGVFbG0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvbWlzZUFsbExhenkocCk7XG4gICAgfSk7XG4gICAgaWYgKGlzUHJvbWlzZSh3YWl0KSkge1xuICAgICAgcHJvbWlzZXMucHVzaCh3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIGVsbTtcbiAgfVxuXG4gIGNvbnN0IGlzU2xvdCA9IGlzVmlydHVhbCAmJiBRU2xvdFMgaW4gcHJvcHM7XG4gIGNvbnN0IGhhc1JlZiA9ICFpc1ZpcnR1YWwgJiYgJ3JlZicgaW4gcHJvcHM7XG4gIGNvbnN0IGxpc3RlbmVycyA9IGVsQ3R4LmxpO1xuICB2bm9kZS4kcHJvcHMkID0gc2V0UHJvcGVydGllcyhzdGF0aWNDdHgsIGVsQ3R4LCBjdXJyZW50Q29tcG9uZW50Py4kZWxlbWVudCQsIHByb3BzLCBpc1N2Zyk7XG5cbiAgaWYgKGN1cnJlbnRDb21wb25lbnQgJiYgIWlzVmlydHVhbCkge1xuICAgIGNvbnN0IHNjb3BlZElkcyA9IGN1cnJlbnRDb21wb25lbnQuJHNjb3BlSWRzJDtcbiAgICBpZiAoc2NvcGVkSWRzKSB7XG4gICAgICBzY29wZWRJZHMuZm9yRWFjaCgoc3R5bGVJZCkgPT4ge1xuICAgICAgICAoZWxtIGFzIEVsZW1lbnQpLmNsYXNzTGlzdC5hZGQoc3R5bGVJZCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRDb21wb25lbnQuJGZsYWdzJCAmIEhPU1RfRkxBR19ORUVEX0FUVEFDSF9MSVNURU5FUikge1xuICAgICAgbGlzdGVuZXJzLnB1c2goLi4uY3VycmVudENvbXBvbmVudC5saSk7XG4gICAgICBjdXJyZW50Q29tcG9uZW50LiRmbGFncyQgJj0gfkhPU1RfRkxBR19ORUVEX0FUVEFDSF9MSVNURU5FUjtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNTbG90KSB7XG4gICAgYXNzZXJ0RGVmaW5lZChjdXJyZW50Q29tcG9uZW50LCAnc2xvdCBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBjb21wb25lbnQnKTtcbiAgICBhc3NlcnREZWZpbmVkKGN1cnJlbnRDb21wb25lbnQuJHNsb3RzJCwgJ2N1cnJlbnQgY29tcG9uZW50IHNsb3RzIG11c3QgYmUgYSBkZWZpbmVkIGFycmF5Jyk7XG4gICAgc2V0S2V5KGVsbSwgdm5vZGUuJGtleSQpO1xuXG4gICAgZGlyZWN0U2V0QXR0cmlidXRlKGVsbSwgUVNsb3RSZWYsIGN1cnJlbnRDb21wb25lbnQuJGlkJCk7XG4gICAgY3VycmVudENvbXBvbmVudC4kc2xvdHMkLnB1c2godm5vZGUpO1xuICAgIHN0YXRpY0N0eC4kYWRkU2xvdHMkLnB1c2goW2VsbSwgY3VycmVudENvbXBvbmVudC4kZWxlbWVudCRdKTtcbiAgfVxuXG4gIGlmIChxU2VyaWFsaXplKSB7XG4gICAgc2V0S2V5KGVsbSwgdm5vZGUuJGtleSQpO1xuXG4gICAgaWYgKGlzSGVhZCAmJiAhaXNWaXJ0dWFsKSB7XG4gICAgICBkaXJlY3RTZXRBdHRyaWJ1dGUoZWxtIGFzIEVsZW1lbnQsICdxOmhlYWQnLCAnJyk7XG4gICAgfVxuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCB8fCBoYXNSZWYpIHtcbiAgICAgIHNldFFJZChyQ3R4LCBlbEN0eCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc2V0c0lubmVySFRNTCA9IHByb3BzW2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MXSAhPT0gdW5kZWZpbmVkO1xuICBpZiAoc2V0c0lubmVySFRNTCkge1xuICAgIGlmIChxRGV2ICYmIHZub2RlLiRjaGlsZHJlbiQubGVuZ3RoID4gMCkge1xuICAgICAgbG9nV2FybignTm9kZSBjYW4gbm90IGhhdmUgY2hpbGRyZW4gd2hlbiBpbm5lckhUTUwgaXMgc2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiBlbG07XG4gIH1cbiAgbGV0IGNoaWxkcmVuID0gdm5vZGUuJGNoaWxkcmVuJDtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBlbG07XG4gIH1cbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBjaGlsZHJlblswXS4kdHlwZSQgPT09IFNLSVBfUkVOREVSX1RZUEUpIHtcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdLiRjaGlsZHJlbiQ7XG4gIH1cbiAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbi5tYXAoKGNoKSA9PiBjcmVhdGVFbG0ockN0eCwgY2gsIGZsYWdzLCBwcm9taXNlcykpO1xuICBmb3IgKGNvbnN0IG5vZGUgb2Ygbm9kZXMpIHtcbiAgICBkaXJlY3RBcHBlbmRDaGlsZChlbG0sIG5vZGUpO1xuICB9XG4gIHJldHVybiBlbG07XG59O1xuXG5pbnRlcmZhY2UgU2xvdE1hcHMge1xuICBzbG90czogUmVjb3JkPHN0cmluZywgUXdpa0VsZW1lbnQ+O1xuICB0ZW1wbGF0ZXM6IFJlY29yZDxzdHJpbmcsIEVsZW1lbnQgfCB1bmRlZmluZWQ+O1xufVxuXG5jb25zdCBnZXRTbG90cyA9IChlbEN0eDogUUNvbnRleHQpOiBQcm9jZXNzZWRKU1hOb2RlW10gPT4ge1xuICBjb25zdCBzbG90cyA9IGVsQ3R4LiRzbG90cyQ7XG4gIGlmICghc2xvdHMpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBlbEN0eC4kZWxlbWVudCQucGFyZW50RWxlbWVudDtcbiAgICBhc3NlcnREZWZpbmVkKHBhcmVudCwgJ2NvbXBvbmVudCBzaG91bGQgYmUgYWxyZWFkeSBhdHRhY2hlZCB0byB0aGUgZG9tJyk7XG4gICAgcmV0dXJuIChlbEN0eC4kc2xvdHMkID0gcmVhZERPTVNsb3RzKGVsQ3R4KSk7XG4gIH1cbiAgcmV0dXJuIHNsb3RzO1xufTtcblxuY29uc3QgZ2V0U2xvdE1hcCA9IChlbEN0eDogUUNvbnRleHQpOiBTbG90TWFwcyA9PiB7XG4gIGNvbnN0IHNsb3RzQXJyYXkgPSBnZXRTbG90cyhlbEN0eCk7XG4gIGNvbnN0IHNsb3RzOiBSZWNvcmQ8c3RyaW5nLCBRd2lrRWxlbWVudD4gPSB7fTtcbiAgY29uc3QgdGVtcGxhdGVzOiBSZWNvcmQ8c3RyaW5nLCBFbGVtZW50IHwgdW5kZWZpbmVkPiA9IHt9O1xuICBjb25zdCB0ID0gQXJyYXkuZnJvbShlbEN0eC4kZWxlbWVudCQuY2hpbGROb2RlcykuZmlsdGVyKGlzU2xvdFRlbXBsYXRlKTtcblxuICAvLyBNYXAgdmlydHVhbCBzbG90c1xuICBmb3IgKGNvbnN0IHZub2RlIG9mIHNsb3RzQXJyYXkpIHtcbiAgICBhc3NlcnRRd2lrRWxlbWVudCh2bm9kZS4kZWxtJCk7XG4gICAgc2xvdHNbdm5vZGUuJGtleSQgPz8gJyddID0gdm5vZGUuJGVsbSQ7XG4gIH1cbiAgLy8gTWFwIHRlbXBsYXRlc1xuICBmb3IgKGNvbnN0IGVsbSBvZiB0KSB7XG4gICAgdGVtcGxhdGVzW2RpcmVjdEdldEF0dHJpYnV0ZShlbG0sIFFTbG90KSA/PyAnJ10gPSBlbG07XG4gIH1cbiAgcmV0dXJuIHsgc2xvdHMsIHRlbXBsYXRlcyB9O1xufTtcblxuY29uc3QgcmVhZERPTVNsb3RzID0gKGVsQ3R4OiBRQ29udGV4dCk6IFByb2Nlc3NlZEpTWE5vZGVbXSA9PiB7XG4gIGNvbnN0IHBhcmVudCA9IGVsQ3R4LiRlbGVtZW50JC5wYXJlbnRFbGVtZW50O1xuICBhc3NlcnREZWZpbmVkKHBhcmVudCwgJ2NvbXBvbmVudCBzaG91bGQgYmUgYWxyZWFkeSBhdHRhY2hlZCB0byB0aGUgZG9tJyk7XG4gIHJldHVybiBxdWVyeUFsbFZpcnR1YWxCeUF0dHJpYnV0ZShwYXJlbnQsIFFTbG90UmVmLCBlbEN0eC4kaWQkKS5tYXAoZG9tVG9Wbm9kZSk7XG59O1xuXG5jb25zdCBoYW5kbGVTdHlsZTogUHJvcEhhbmRsZXIgPSAoY3R4LCBlbG0sIF8sIG5ld1ZhbHVlKSA9PiB7XG4gIHNldFByb3BlcnR5KGN0eCwgZWxtLnN0eWxlLCAnY3NzVGV4dCcsIHN0cmluZ2lmeVN0eWxlKG5ld1ZhbHVlKSk7XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgaGFuZGxlQ2xhc3M6IFByb3BIYW5kbGVyID0gKGN0eCwgZWxtLCBfLCBuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgYXNzZXJ0VHJ1ZShcbiAgICBvbGRWYWx1ZSA9PSBudWxsIHx8IHR5cGVvZiBvbGRWYWx1ZSA9PT0gJ3N0cmluZycsXG4gICAgJ2NsYXNzIG9sZFZhbHVlIG11c3QgYmUgZWl0aGVyIG51bGxpc2ggb3Igc3RyaW5nJyxcbiAgICBvbGRWYWx1ZVxuICApO1xuICBhc3NlcnRUcnVlKFxuICAgIG5ld1ZhbHVlID09IG51bGwgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAnY2xhc3MgbmV3VmFsdWUgbXVzdCBiZSBlaXRoZXIgbnVsbGlzaCBvciBzdHJpbmcnLFxuICAgIG5ld1ZhbHVlXG4gICk7XG5cbiAgY29uc3Qgb2xkQ2xhc3NlcyA9IHBhcnNlQ2xhc3NMaXN0KG9sZFZhbHVlKTtcbiAgY29uc3QgbmV3Q2xhc3NlcyA9IHBhcnNlQ2xhc3NMaXN0KG5ld1ZhbHVlKTtcbiAgc2V0Q2xhc3NsaXN0KFxuICAgIGN0eCxcbiAgICBlbG0sXG4gICAgb2xkQ2xhc3Nlcy5maWx0ZXIoKGMpID0+IGMgJiYgIW5ld0NsYXNzZXMuaW5jbHVkZXMoYykpLFxuICAgIG5ld0NsYXNzZXMuZmlsdGVyKChjKSA9PiBjICYmICFvbGRDbGFzc2VzLmluY2x1ZGVzKGMpKVxuICApO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbnN0IGNoZWNrQmVmb3JlQXNzaWduOiBQcm9wSGFuZGxlciA9IChjdHgsIGVsbSwgcHJvcCwgbmV3VmFsdWUpID0+IHtcbiAgaWYgKHByb3AgaW4gZWxtKSB7XG4gICAgaWYgKChlbG0gYXMgYW55KVtwcm9wXSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgIHNldFByb3BlcnR5KGN0eCwgZWxtLCBwcm9wLCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgZm9yY2VBdHRyaWJ1dGU6IFByb3BIYW5kbGVyID0gKGN0eCwgZWxtLCBwcm9wLCBuZXdWYWx1ZSkgPT4ge1xuICBzZXRBdHRyaWJ1dGUoY3R4LCBlbG0sIHByb3AudG9Mb3dlckNhc2UoKSwgbmV3VmFsdWUpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbnN0IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID0gJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJztcbmNvbnN0IHNldElubmVySFRNTDogUHJvcEhhbmRsZXIgPSAoY3R4LCBlbG0sIF8sIG5ld1ZhbHVlKSA9PiB7XG4gIGlmIChkYW5nZXJvdXNseVNldElubmVySFRNTCBpbiBlbG0pIHtcbiAgICBzZXRQcm9wZXJ0eShjdHgsIGVsbSwgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsIG5ld1ZhbHVlKTtcbiAgfSBlbHNlIGlmICgnaW5uZXJIVE1MJyBpbiBlbG0pIHtcbiAgICBzZXRQcm9wZXJ0eShjdHgsIGVsbSwgJ2lubmVySFRNTCcsIG5ld1ZhbHVlKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNvbnN0IG5vb3A6IFByb3BIYW5kbGVyID0gKCkgPT4ge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBQUk9QX0hBTkRMRVJfTUFQOiBSZWNvcmQ8c3RyaW5nLCBQcm9wSGFuZGxlciB8IHVuZGVmaW5lZD4gPSB7XG4gIHN0eWxlOiBoYW5kbGVTdHlsZSxcbiAgY2xhc3M6IGhhbmRsZUNsYXNzLFxuICB2YWx1ZTogY2hlY2tCZWZvcmVBc3NpZ24sXG4gIGNoZWNrZWQ6IGNoZWNrQmVmb3JlQXNzaWduLFxuICBocmVmOiBmb3JjZUF0dHJpYnV0ZSxcbiAgbGlzdDogZm9yY2VBdHRyaWJ1dGUsXG4gIGZvcm06IGZvcmNlQXR0cmlidXRlLFxuICB0YWJJbmRleDogZm9yY2VBdHRyaWJ1dGUsXG4gIGRvd25sb2FkOiBmb3JjZUF0dHJpYnV0ZSxcbiAgW2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MXTogc2V0SW5uZXJIVE1MLFxuICBpbm5lckhUTUw6IG5vb3AsXG59O1xuXG5leHBvcnQgY29uc3QgdXBkYXRlUHJvcGVydGllcyA9IChcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBlbEN0eDogUUNvbnRleHQsXG4gIGhvc3RFbG06IFF3aWtFbGVtZW50LFxuICBvbGRQcm9wczogUmVjb3JkPHN0cmluZywgYW55PixcbiAgbmV3UHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIGlzU3ZnOiBib29sZWFuXG4pOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0+IHtcbiAgY29uc3Qga2V5cyA9IGdldEtleXMob2xkUHJvcHMsIG5ld1Byb3BzKTtcbiAgY29uc3QgdmFsdWVzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cbiAgY29uc3QgaW1tdXRhYmxlTWV0YSA9IChuZXdQcm9wcyBhcyBhbnkpW19JTU1VVEFCTEVdID8/IEVNUFRZX09CSjtcbiAgY29uc3QgZWxtID0gZWxDdHguJGVsZW1lbnQkO1xuICBmb3IgKGNvbnN0IHByb3Agb2Yga2V5cykge1xuICAgIGlmIChwcm9wID09PSAncmVmJykge1xuICAgICAgYXNzZXJ0RWxlbWVudChlbG0pO1xuICAgICAgc2V0UmVmKG5ld1Byb3BzW3Byb3BdLCBlbG0pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgbGV0IG5ld1ZhbHVlID0gaXNTaWduYWwoaW1tdXRhYmxlTWV0YVtwcm9wXSkgPyBpbW11dGFibGVNZXRhW3Byb3BdIDogbmV3UHJvcHNbcHJvcF07XG4gICAgaWYgKGlzT25Qcm9wKHByb3ApKSB7XG4gICAgICBicm93c2VyU2V0RXZlbnQoc3RhdGljQ3R4LCBlbEN0eCwgcHJvcCwgbmV3VmFsdWUpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKGlzU2lnbmFsKG5ld1ZhbHVlKSkge1xuICAgICAgYWRkU2lnbmFsU3ViKDEsIGhvc3RFbG0sIG5ld1ZhbHVlLCBlbG0sIHByb3ApO1xuICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHByb3AgPT09ICdjbGFzcycpIHtcbiAgICAgIG5ld1ZhbHVlID0gc2VyaWFsaXplQ2xhc3MobmV3VmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBub3JtYWxpemVkUHJvcCA9IGlzU3ZnID8gcHJvcCA6IHByb3AudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IG9sZFByb3BzW25vcm1hbGl6ZWRQcm9wXTtcbiAgICB2YWx1ZXNbbm9ybWFsaXplZFByb3BdID0gbmV3VmFsdWU7XG5cbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgc21hcnRTZXRQcm9wZXJ0eShzdGF0aWNDdHgsIGVsbSBhcyBIVE1MRWxlbWVudCwgcHJvcCwgbmV3VmFsdWUsIG9sZFZhbHVlLCBpc1N2Zyk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn07XG5cbmV4cG9ydCBjb25zdCBzbWFydFNldFByb3BlcnR5ID0gKFxuICBzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsXG4gIGVsbTogUXdpa0VsZW1lbnQsXG4gIHByb3A6IHN0cmluZyxcbiAgbmV3VmFsdWU6IGFueSxcbiAgb2xkVmFsdWU6IGFueSxcbiAgaXNTdmc6IGJvb2xlYW5cbikgPT4ge1xuICAvLyBhcmlhIGF0dHJpYnV0ZSB2YWx1ZSBzaG91bGQgYmUgcmVuZGVyZWQgYXMgc3RyaW5nXG4gIGlmIChpc0FyaWFBdHRyaWJ1dGUocHJvcCkpIHtcbiAgICBzZXRBdHRyaWJ1dGUoc3RhdGljQ3R4LCBlbG0sIHByb3AsIG5ld1ZhbHVlICE9IG51bGwgPyBTdHJpbmcobmV3VmFsdWUpIDogbmV3VmFsdWUpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIGl0cyBhbiBleGNlcHRpb25cbiAgY29uc3QgZXhjZXB0aW9uID0gUFJPUF9IQU5ETEVSX01BUFtwcm9wXTtcbiAgaWYgKGV4Y2VwdGlvbikge1xuICAgIGlmIChleGNlcHRpb24oc3RhdGljQ3R4LCBlbG0gYXMgSFRNTEVsZW1lbnQsIHByb3AsIG5ld1ZhbHVlLCBvbGRWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBpZiBwcm9wZXJ0eSBpbiBwcm90b3R5cGVcbiAgaWYgKCFpc1N2ZyAmJiBwcm9wIGluIGVsbSkge1xuICAgIHNldFByb3BlcnR5KHN0YXRpY0N0eCwgZWxtLCBwcm9wLCBuZXdWYWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHByb3Auc3RhcnRzV2l0aChQUkVWRU5UX0RFRkFVTFQpKSB7XG4gICAgYWRkUXdpa0V2ZW50KHByb3Auc2xpY2UoUFJFVkVOVF9ERUZBVUxULmxlbmd0aCksIHN0YXRpY0N0eC4kY29udGFpbmVyU3RhdGUkKTtcbiAgfVxuXG4gIC8vIEZhbGxiYWNrIHRvIHJlbmRlciBhdHRyaWJ1dGVcbiAgc2V0QXR0cmlidXRlKHN0YXRpY0N0eCwgZWxtLCBwcm9wLCBuZXdWYWx1ZSk7XG59O1xuXG5jb25zdCBnZXRLZXlzID0gKG9sZFByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBuZXdQcm9wczogUmVjb3JkPHN0cmluZywgYW55PikgPT4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmV3UHJvcHMpO1xuICBjb25zdCBub3JtYWxpemVkS2V5cyA9IGtleXMubWFwKChzKSA9PiBzLnRvTG93ZXJDYXNlKCkpO1xuICBjb25zdCBvbGRLZXlzID0gT2JqZWN0LmtleXMob2xkUHJvcHMpO1xuICBrZXlzLnB1c2goLi4ub2xkS2V5cy5maWx0ZXIoKHApID0+ICFub3JtYWxpemVkS2V5cy5pbmNsdWRlcyhwKSkpO1xuICByZXR1cm4ga2V5cy5maWx0ZXIoKGMpID0+IGMgIT09ICdjaGlsZHJlbicpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFyZUV4YWN0UVJMcyA9IChvbGRWYWx1ZTogYW55LCBuZXdWYWx1ZTogYW55KSA9PiB7XG4gIGlmICghaXNRcmwob2xkVmFsdWUpIHx8ICFpc1FybChuZXdWYWx1ZSkgfHwgb2xkVmFsdWUuJGhhc2gkICE9PSBuZXdWYWx1ZS4kaGFzaCQpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgY0EgPSBvbGRWYWx1ZS4kY2FwdHVyZVJlZiQ7XG4gIGNvbnN0IGNCID0gbmV3VmFsdWUuJGNhcHR1cmVSZWYkO1xuICBpZiAoY0EgJiYgY0IpIHtcbiAgICByZXR1cm4gc2FtZUFycmF5cyhjQSwgY0IpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCBjb25zdCBzYW1lQXJyYXlzID0gKGExOiBhbnlbXSwgYTI6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGxlbiA9IGExLmxlbmd0aDtcbiAgaWYgKGxlbiAhPT0gYTIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChhMVtpXSAhPT0gYTJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0UHJvcGVydGllcyA9IChcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBlbEN0eDogUUNvbnRleHQsXG4gIGhvc3RFbG06IFF3aWtFbGVtZW50IHwgdW5kZWZpbmVkLFxuICBuZXdQcm9wczogUmVjb3JkPHN0cmluZywgYW55PixcbiAgaXNTdmc6IGJvb2xlYW5cbik6IFJlY29yZDxzdHJpbmcsIGFueT4gPT4ge1xuICBjb25zdCBlbG0gPSBlbEN0eC4kZWxlbWVudCQ7XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhuZXdQcm9wcyk7XG4gIGNvbnN0IHZhbHVlczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gdmFsdWVzO1xuICB9XG4gIGNvbnN0IGltbXV0YWJsZU1ldGEgPSAobmV3UHJvcHMgYXMgYW55KVtfSU1NVVRBQkxFXSA/PyBFTVBUWV9PQko7XG4gIGZvciAoY29uc3QgcHJvcCBvZiBrZXlzKSB7XG4gICAgaWYgKHByb3AgPT09ICdjaGlsZHJlbicpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocHJvcCA9PT0gJ3JlZicpIHtcbiAgICAgIGFzc2VydEVsZW1lbnQoZWxtKTtcbiAgICAgIHNldFJlZihuZXdQcm9wc1twcm9wXSwgZWxtKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGxldCBuZXdWYWx1ZSA9IGlzU2lnbmFsKGltbXV0YWJsZU1ldGFbcHJvcF0pID8gaW1tdXRhYmxlTWV0YVtwcm9wXSA6IG5ld1Byb3BzW3Byb3BdO1xuICAgIGlmIChpc09uUHJvcChwcm9wKSkge1xuICAgICAgYnJvd3NlclNldEV2ZW50KHN0YXRpY0N0eCwgZWxDdHgsIHByb3AsIG5ld1ZhbHVlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHNpZyA9IGlzU2lnbmFsKG5ld1ZhbHVlKTtcbiAgICBpZiAoc2lnKSB7XG4gICAgICBpZiAoaG9zdEVsbSkgYWRkU2lnbmFsU3ViKDEsIGhvc3RFbG0sIG5ld1ZhbHVlLCBlbG0sIHByb3ApO1xuICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZS52YWx1ZTtcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZFByb3AgPSBpc1N2ZyA/IHByb3AgOiBwcm9wLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKG5vcm1hbGl6ZWRQcm9wID09PSAnY2xhc3MnKSB7XG4gICAgICBpZiAocURldiAmJiB2YWx1ZXMuY2xhc3MpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NhbiBvbmx5IHByb3ZpZGUgb25lIG9mIGNsYXNzIG9yIGNsYXNzTmFtZScpO1xuICAgICAgLy8gU2lnbmFscyBzaG91bGRuJ3QgYmUgY2hhbmdlZFxuICAgICAgaWYgKCFzaWcpIG5ld1ZhbHVlID0gc2VyaWFsaXplQ2xhc3MobmV3VmFsdWUpO1xuICAgIH1cbiAgICB2YWx1ZXNbbm9ybWFsaXplZFByb3BdID0gbmV3VmFsdWU7XG4gICAgc21hcnRTZXRQcm9wZXJ0eShzdGF0aWNDdHgsIGVsbSwgcHJvcCwgbmV3VmFsdWUsIHVuZGVmaW5lZCwgaXNTdmcpO1xuICB9XG4gIHJldHVybiB2YWx1ZXM7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0Q29tcG9uZW50UHJvcHMgPSAoXG4gIGVsQ3R4OiBRQ29udGV4dCxcbiAgckN0eDogUmVuZGVyQ29udGV4dCxcbiAgZXhwZWN0UHJvcHM6IFJlY29yZDxzdHJpbmcsIGFueT5cbikgPT4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZXhwZWN0UHJvcHMpO1xuICBsZXQgcHJvcHMgPSBlbEN0eC4kcHJvcHMkO1xuICBpZiAoIXByb3BzKSB7XG4gICAgZWxDdHguJHByb3BzJCA9IHByb3BzID0gY3JlYXRlUHJveHkoY3JlYXRlUHJvcHNTdGF0ZSgpLCByQ3R4LiRzdGF0aWMkLiRjb250YWluZXJTdGF0ZSQpO1xuICB9XG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IG1hbmFnZXIgPSBnZXRQcm94eU1hbmFnZXIocHJvcHMpO1xuICBhc3NlcnREZWZpbmVkKG1hbmFnZXIsIGBwcm9wcyBoYXZlIHRvIGJlIGEgcHJveHksIGJ1dCBpdCBpcyBub3RgLCBwcm9wcyk7XG4gIGNvbnN0IHRhcmdldCA9IGdldFByb3h5VGFyZ2V0KHByb3BzKTtcbiAgYXNzZXJ0RGVmaW5lZCh0YXJnZXQsIGBwcm9wcyBoYXZlIHRvIGJlIGEgcHJveHksIGJ1dCBpdCBpcyBub3RgLCBwcm9wcyk7XG5cbiAgY29uc3QgaW1tdXRhYmxlTWV0YSA9ICgodGFyZ2V0IGFzIGFueSlbX0lNTVVUQUJMRV0gPVxuICAgIChleHBlY3RQcm9wcyBhcyBhbnkpW19JTU1VVEFCTEVdID8/IEVNUFRZX09CSik7XG5cbiAgZm9yIChjb25zdCBwcm9wIG9mIGtleXMpIHtcbiAgICBpZiAocHJvcCA9PT0gJ2NoaWxkcmVuJyB8fCBwcm9wID09PSBRU2xvdCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChpc1NpZ25hbChpbW11dGFibGVNZXRhW3Byb3BdKSkge1xuICAgICAgdGFyZ2V0W19JTU1VVEFCTEVfUFJFRklYICsgcHJvcF0gPSBpbW11dGFibGVNZXRhW3Byb3BdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGV4cGVjdFByb3BzW3Byb3BdO1xuICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRbcHJvcF07XG4gICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgbWFuYWdlci4kbm90aWZ5U3VicyQocHJvcCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAhIShlbEN0eC4kZmxhZ3MkICYgSE9TVF9GTEFHX0RJUlRZKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjbGVhbnVwVHJlZSA9IChcbiAgcGFyZW50OiBRd2lrRWxlbWVudCxcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBzdWJzTWFuYWdlcjogU3Vic2NyaXB0aW9uTWFuYWdlcixcbiAgc3RvcFNsb3RzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKHN0b3BTbG90cyAmJiBwYXJlbnQuaGFzQXR0cmlidXRlKFFTbG90UykpIHtcbiAgICBzdGF0aWNDdHguJHJtU2xvdHMkLnB1c2gocGFyZW50KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgY3R4ID0gdHJ5R2V0Q29udGV4dChwYXJlbnQpO1xuICBpZiAoY3R4KSB7XG4gICAgY2xlYW51cENvbnRleHQoY3R4LCBzdWJzTWFuYWdlcik7XG4gIH1cbiAgY29uc3QgY2ggPSBnZXRDaGlsZHJlbihwYXJlbnQsICdlbGVtZW50cycpO1xuICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoKSB7XG4gICAgY2xlYW51cFRyZWUoY2hpbGQgYXMgUXdpa0VsZW1lbnQsIHN0YXRpY0N0eCwgc3Vic01hbmFnZXIsIHRydWUpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZUNvbnRleHRXaXRoU2xvdHMgPSAoeyAkc3RhdGljJDogY3R4IH06IFJlbmRlckNvbnRleHQpID0+IHtcbiAgZXhlY3V0ZURPTVJlbmRlcihjdHgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGRpcmVjdEFwcGVuZENoaWxkID0gKHBhcmVudDogUXdpa0VsZW1lbnQsIGNoaWxkOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQpID0+IHtcbiAgaWYgKGlzVmlydHVhbEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgY2hpbGQuYXBwZW5kVG8ocGFyZW50KTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZGlyZWN0UmVtb3ZlQ2hpbGQgPSAocGFyZW50OiBRd2lrRWxlbWVudCwgY2hpbGQ6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCkgPT4ge1xuICBpZiAoaXNWaXJ0dWFsRWxlbWVudChjaGlsZCkpIHtcbiAgICBjaGlsZC5yZW1vdmUoKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZGlyZWN0SW5zZXJ0QmVmb3JlID0gKFxuICBwYXJlbnQ6IFF3aWtFbGVtZW50LFxuICBjaGlsZDogTm9kZSB8IFZpcnR1YWxFbGVtZW50LFxuICByZWY6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCB8IG51bGxcbikgPT4ge1xuICBpZiAoaXNWaXJ0dWFsRWxlbWVudChjaGlsZCkpIHtcbiAgICBjaGlsZC5pbnNlcnRCZWZvcmVUbyhwYXJlbnQsIGdldFJvb3ROb2RlKHJlZikpO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGdldFJvb3ROb2RlKHJlZikpO1xuICB9XG59O1xuXG5jb25zdCBjcmVhdGVLZXlUb09sZElkeCA9IChcbiAgY2hpbGRyZW46IFByb2Nlc3NlZEpTWE5vZGVbXSxcbiAgYmVnaW5JZHg6IG51bWJlcixcbiAgZW5kSWR4OiBudW1iZXJcbik6IEtleVRvSW5kZXhNYXAgPT4ge1xuICBjb25zdCBtYXA6IEtleVRvSW5kZXhNYXAgPSB7fTtcbiAgZm9yIChsZXQgaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICBjb25zdCBrZXkgPSBjaGlsZC4ka2V5JDtcbiAgICBpZiAoa2V5ICE9IG51bGwpIHtcbiAgICAgIG1hcFtrZXkgYXMgc3RyaW5nXSA9IGk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXA7XG59O1xuXG5jb25zdCBicm93c2VyU2V0RXZlbnQgPSAoXG4gIHN0YXRpY0N0eDogUmVuZGVyU3RhdGljQ29udGV4dCxcbiAgZWxDdHg6IFFDb250ZXh0LFxuICBwcm9wOiBzdHJpbmcsXG4gIGlucHV0OiBhbnlcbikgPT4ge1xuICBjb25zdCBjb250YWluZXJTdGF0ZSA9IHN0YXRpY0N0eC4kY29udGFpbmVyU3RhdGUkO1xuICBjb25zdCBub3JtYWxpemVkID0gc2V0RXZlbnQoZWxDdHgubGksIHByb3AsIGlucHV0LCBjb250YWluZXJTdGF0ZS4kY29udGFpbmVyRWwkKTtcbiAgaWYgKCFwcm9wLnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICBzZXRBdHRyaWJ1dGUoc3RhdGljQ3R4LCBlbEN0eC4kZWxlbWVudCQsIG5vcm1hbGl6ZWQsICcnKTtcbiAgfVxuICBhZGRRd2lrRXZlbnQobm9ybWFsaXplZCwgY29udGFpbmVyU3RhdGUpO1xufTtcblxuY29uc3Qgc2FtZVZub2RlID0gKHZub2RlMTogUHJvY2Vzc2VkSlNYTm9kZSwgdm5vZGUyOiBQcm9jZXNzZWRKU1hOb2RlKTogYm9vbGVhbiA9PiB7XG4gIGlmICh2bm9kZTEuJHR5cGUkICE9PSB2bm9kZTIuJHR5cGUkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2bm9kZTEuJGtleSQgPT09IHZub2RlMi4ka2V5JDtcbn07XG5cbmNvbnN0IGlzVGFnTmFtZSA9IChlbG06IFByb2Nlc3NlZEpTWE5vZGUsIHRhZ05hbWU6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gZWxtLiR0eXBlJCA9PT0gdGFnTmFtZTtcbn07XG4iXX0=","export const emitEvent = (el, eventName, detail, bubbles) => {\n    if (el && typeof CustomEvent === 'function') {\n        el.dispatchEvent(new CustomEvent(eventName, {\n            detail,\n            bubbles: bubbles,\n            composed: bubbles,\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLEVBQUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLEVBQUU7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsTUFBTTtZQUNOLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1pdEV2ZW50ID0gKFxuICBlbDogRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGRldGFpbDogYW55LFxuICBidWJibGVzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKGVsICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbCxcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgY29tcG9zZWQ6IGJ1YmJsZXMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0=","export const hashCode = (text, hash = 0) => {\n    if (text.length === 0)\n        return hash;\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzaENvZGUgPSAodGV4dDogc3RyaW5nLCBoYXNoOiBudW1iZXIgPSAwKSA9PiB7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNociA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cbiAgcmV0dXJuIE51bWJlcihNYXRoLmFicyhoYXNoKSkudG9TdHJpbmcoMzYpO1xufTtcbiJdfQ==","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nimport { assertQrl } from '../qrl/qrl-class';\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join('|');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9zdHlsZS9xcmwtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFN0MsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBb0IsRUFBRSxLQUFhLEVBQVUsRUFBRTtJQUN0RSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDbkQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBZSxFQUFVLEVBQUU7SUFDdEQsT0FBTyw0QkFBNEIsR0FBRyxPQUFPLENBQUM7QUFDaEQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFO0lBQ3BELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUNwQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50U3R5bGVzUHJlZml4Q29udGVudCB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBoYXNoQ29kZSB9IGZyb20gJy4uL3V0aWwvaGFzaF9jb2RlJztcbmltcG9ydCB0eXBlIHsgUVJMIH0gZnJvbSAnLi4vcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsIH0gZnJvbSAnLi4vcXJsL3FybC1jbGFzcyc7XG5cbmV4cG9ydCBjb25zdCBzdHlsZUtleSA9IChxU3R5bGVzOiBRUkw8c3RyaW5nPiwgaW5kZXg6IG51bWJlcik6IHN0cmluZyA9PiB7XG4gIGFzc2VydFFybChxU3R5bGVzKTtcbiAgcmV0dXJuIGAke2hhc2hDb2RlKHFTdHlsZXMuJGhhc2gkKX0tJHtpbmRleH1gO1xufTtcblxuZXhwb3J0IGNvbnN0IHN0eWxlSG9zdCA9IChzdHlsZUlkOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUNvbnRlbnQgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgKyBzdHlsZUlkO1xufTtcblxuZXhwb3J0IGNvbnN0IHNlcmlhbGl6ZVNTdHlsZSA9IChzY29wZUlkczogc3RyaW5nW10pID0+IHtcbiAgY29uc3QgdmFsdWUgPSBzY29wZUlkcy5qb2luKCd8Jyk7XG4gIGlmICh2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuIl19","import { assertDefined, assertEqual } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { assertElement, isComment, isDocument, isElement, isNode, isQwikElement, isText, isVirtualElement, } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QScopedStyle } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { destroyWatch, isResourceTask, WatchFlagsIsDirty, } from '../use/use-task';\nimport { qError, QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, } from '../error/error';\nimport { isArray, isObject, isSerializableObject } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { collectDeps, serializeValue, UNDEFINED_PREFIX } from './serializers';\nimport { FILTER_REJECT, FILTER_SKIP, _getContainerState, intToStr, SHOW_COMMENT, SHOW_ELEMENT, } from './container';\nimport { processVirtualNodes } from '../render/dom/virtual-element';\nimport { groupListeners } from '../state/listeners';\nimport { serializeSStyle } from '../style/qrl-styles';\nimport { serializeQRLs } from '../qrl/qrl';\nimport { fastSkipSerialize, fastWeakSerialize, getProxyFlags, getProxyManager, getProxyTarget, isConnected, serializeSubscription, } from '../state/common';\nimport { HOST_FLAG_DYNAMIC, tryGetContext } from '../state/context';\nimport { SignalImpl } from '../state/signal';\n/**\n * @internal\n */\nexport const _serializeData = async (data, pureQRL) => {\n    const containerState = {};\n    const collector = createCollector(containerState);\n    collectValue(data, collector, false);\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    const objs = Array.from(collector.$objSet$.keys());\n    let count = 0;\n    const objToId = new Map();\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    const mustGetObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const promiseValue = getPromiseValue(obj);\n            if (!promiseValue) {\n                throw qError(QError_missingObjectId, obj);\n            }\n            obj = promiseValue.value;\n            if (promiseValue.resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        const key = objToId.get(obj);\n        if (key === undefined) {\n            throw qError(QError_missingObjectId, obj);\n        }\n        return key + suffix;\n    };\n    const convertedObjs = objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'number':\n                if (!Number.isFinite(obj)) {\n                    break;\n                }\n                return obj;\n            case 'string':\n            case 'boolean':\n                return obj;\n        }\n        const value = serializeValue(obj, mustGetObjId, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        if (typeObj === 'object') {\n            if (isArray(obj)) {\n                return obj.map(mustGetObjId);\n            }\n            if (isSerializableObject(obj)) {\n                const output = {};\n                for (const key of Object.keys(obj)) {\n                    output[key] = mustGetObjId(obj[key]);\n                }\n                return output;\n            }\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n    return JSON.stringify({\n        _entry: mustGetObjId(data),\n        _objs: convertedObjs,\n    });\n};\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n/**\n */\n// </docs>\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const containerState = _getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasContext);\n    // Set container to paused\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    // Update elements with context\n    for (const elCtx of contexts) {\n        const elm = elCtx.$element$;\n        const listeners = elCtx.li;\n        if (elCtx.$scopeIds$) {\n            const value = serializeSStyle(elCtx.$scopeIds$);\n            if (value) {\n                elm.setAttribute(QScopedStyle, value);\n            }\n        }\n        if (elCtx.$id$) {\n            elm.setAttribute(ELEMENT_ID, elCtx.$id$);\n        }\n        if (isElement(elm) && listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                elm.setAttribute(listener[0], serializeQRLs(listener[1], elCtx));\n            }\n        }\n    }\n    // Serialize data\n    const data = await _pauseFromContexts(contexts, containerState, (el) => {\n        if (isNode(el) && isText(el)) {\n            return getTextID(el, containerState);\n        }\n        return null;\n    });\n    // Emit Qwik JSON\n    const qwikJson = doc.createElement('script');\n    directSetAttribute(qwikJson, 'type', 'qwik/json');\n    qwikJson.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(qwikJson);\n    // Emit event registration\n    const extraListeners = Array.from(containerState.$events$, (s) => JSON.stringify(s));\n    const eventsScript = doc.createElement('script');\n    eventsScript.textContent = `window.qwikevents||=[];window.qwikevents.push(${extraListeners.join(', ')})`;\n    parentJSON.appendChild(eventsScript);\n    return data;\n};\n/**\n * @internal\n */\nexport const _pauseFromContexts = async (allContexts, containerState, fallbackGetObjId) => {\n    const collector = createCollector(containerState);\n    let hasListeners = false;\n    // TODO: optimize\n    for (const ctx of allContexts) {\n        if (ctx.$watches$) {\n            for (const watch of ctx.$watches$) {\n                if (qDev) {\n                    if (watch.$flags$ & WatchFlagsIsDirty) {\n                        logWarn('Serializing dirty watch. Looks like an internal error.');\n                    }\n                    if (!isConnected(watch)) {\n                        logWarn('Serializing disconneted watch. Looks like an internal error.');\n                    }\n                }\n                if (isResourceTask(watch)) {\n                    collector.$resources$.push(watch.$resource$);\n                }\n                destroyWatch(watch);\n            }\n        }\n    }\n    for (const ctx of allContexts) {\n        const el = ctx.$element$;\n        const ctxListeners = ctx.li;\n        for (const listener of ctxListeners) {\n            if (isElement(el)) {\n                const qrl = listener[1];\n                const captured = qrl.$captureRef$;\n                if (captured) {\n                    for (const obj of captured) {\n                        collectValue(obj, collector, true);\n                    }\n                }\n                collector.$qrls$.push(qrl);\n                hasListeners = true;\n            }\n        }\n    }\n    // No listeners implies static page\n    if (!hasListeners) {\n        return {\n            state: {\n                refs: {},\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            qrls: [],\n            resources: collector.$resources$,\n            mode: 'static',\n        };\n    }\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const elCtx of collector.$deferElements$) {\n            collectElementData(elCtx, collector, elCtx.$element$);\n        }\n        for (const ctx of allContexts) {\n            collectProps(ctx, collector);\n        }\n    }\n    // Wait for remaining promises\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // Convert objSet to array\n    const elementToIndex = new Map();\n    const objs = Array.from(collector.$objSet$.keys());\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            id = getQId(el);\n            if (!id) {\n                console.warn('Missing ID', el);\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const promiseValue = getPromiseValue(obj);\n            if (!promiseValue) {\n                return null;\n            }\n            obj = promiseValue.value;\n            if (promiseValue.resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            else if (isQwikElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return ELEMENT_ID_PREFIX + elID + suffix;\n                }\n                return null;\n            }\n        }\n        const id = objToId.get(obj);\n        if (id) {\n            return id + suffix;\n        }\n        if (fallbackGetObjId) {\n            return fallbackGetObjId(obj);\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            throw qError(QError_missingObjectId, obj);\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    objs.forEach((obj) => {\n        const subs = getManager(obj, containerState)?.$subs$;\n        if (!subs) {\n            return null;\n        }\n        const flags = getProxyFlags(obj) ?? 0;\n        const convered = [];\n        if (flags > 0) {\n            convered.push(flags);\n        }\n        for (const sub of subs) {\n            const host = sub[1];\n            if (sub[0] === 0 && isNode(host) && isVirtualElement(host)) {\n                if (!collector.$elements$.includes(tryGetContext(host))) {\n                    continue;\n                }\n            }\n            convered.push(sub);\n        }\n        if (convered.length > 0) {\n            subsMap.set(obj, convered);\n        }\n    });\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    // Serialize object subscriptions\n    const subs = [];\n    for (const obj of objs) {\n        const value = subsMap.get(obj);\n        if (value == null) {\n            break;\n        }\n        subs.push(value\n            .map((s) => {\n            if (typeof s === 'number') {\n                return `_${s}`;\n            }\n            return serializeSubscription(s, getObjId);\n        })\n            .filter(isNotNullable));\n    }\n    assertEqual(subs.length, subsMap.size, 'missing subscriptions to serialize', subs, subsMap);\n    // Serialize objects\n    const convertedObjs = objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'number':\n                if (!Number.isFinite(obj)) {\n                    break;\n                }\n                return obj;\n            case 'string':\n            case 'boolean':\n                return obj;\n        }\n        const value = serializeValue(obj, mustGetObjId, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        if (typeObj === 'object') {\n            if (isArray(obj)) {\n                return obj.map(mustGetObjId);\n            }\n            if (isSerializableObject(obj)) {\n                const output = {};\n                for (const key of Object.keys(obj)) {\n                    const id = getObjId(obj[key]);\n                    if (id !== null) {\n                        output[key] = id;\n                    }\n                }\n                return output;\n            }\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n    const meta = {};\n    const refs = {};\n    // Write back to the dom\n    allContexts.forEach((ctx) => {\n        const node = ctx.$element$;\n        const elementID = ctx.$id$;\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const watches = ctx.$watches$;\n        const renderQrl = ctx.$componentQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(ctx);\n        assertDefined(elementID, `pause: can not generate ID for dom node`, node);\n        if (ref.length > 0) {\n            assertElement(node);\n            const value = ref.map(mustGetObjId).join(' ');\n            if (value) {\n                refs[elementID] = value;\n            }\n        }\n        else if (canRender) {\n            let add = false;\n            if (elementCaptured) {\n                assertDefined(renderQrl, 'renderQrl must be defined');\n                const propsId = getObjId(props);\n                metaValue.h = mustGetObjId(renderQrl) + (propsId ? ' ' + propsId : '');\n                add = true;\n            }\n            else {\n                const propsId = getObjId(props);\n                if (propsId) {\n                    metaValue.h = ' ' + propsId;\n                    add = true;\n                }\n            }\n            if (watches && watches.length > 0) {\n                const value = watches.map(getObjId).filter(isNotNullable).join(' ');\n                if (value) {\n                    metaValue.w = value;\n                    add = true;\n                }\n            }\n            if (elementCaptured && seq && seq.length > 0) {\n                const value = seq.map(mustGetObjId).join(' ');\n                metaValue.s = value;\n                add = true;\n            }\n            if (contexts) {\n                const serializedContexts = [];\n                contexts.forEach((value, key) => {\n                    const id = getObjId(value);\n                    if (id) {\n                        serializedContexts.push(`${key}=${id}`);\n                    }\n                });\n                const value = serializedContexts.join(' ');\n                if (value) {\n                    metaValue.c = value;\n                    add = true;\n                }\n            }\n            if (add) {\n                meta[elementID] = metaValue;\n            }\n        }\n    });\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.nodeName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            refs,\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        resources: collector.$resources$,\n        qrls: collector.$qrls$,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const getNodesInScope = (parent, predicate) => {\n    const results = [];\n    const v = predicate(parent);\n    if (v !== undefined) {\n        results.push(v);\n    }\n    const walker = parent.ownerDocument.createTreeWalker(parent, SHOW_ELEMENT | SHOW_COMMENT, {\n        acceptNode(node) {\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            const v = predicate(node);\n            if (v !== undefined) {\n                results.push(v);\n            }\n            return FILTER_SKIP;\n        },\n    });\n    while (walker.nextNode())\n        ;\n    return results;\n};\nconst collectProps = (elCtx, collector) => {\n    const parentCtx = elCtx.$parent$;\n    const props = elCtx.$props$;\n    if (parentCtx && props && !isEmptyObj(props) && collector.$elements$.includes(parentCtx)) {\n        const subs = getProxyManager(props)?.$subs$;\n        const el = elCtx.$element$;\n        if (subs) {\n            for (const sub of subs) {\n                if (sub[1] === el) {\n                    if (sub[0] === 0) {\n                        collectElement(el, collector);\n                        return;\n                    }\n                    else {\n                        collectValue(props, collector, false);\n                    }\n                }\n            }\n        }\n    }\n};\nconst createCollector = (containerState) => {\n    return {\n        $containerState$: containerState,\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $prefetch$: 0,\n        $noSerialize$: [],\n        $resources$: [],\n        $elements$: [],\n        $qrls$: [],\n        $deferElements$: [],\n        $promises$: [],\n    };\n};\nconst collectDeferElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (collector.$elements$.includes(ctx)) {\n        return;\n    }\n    collector.$elements$.push(ctx);\n    collector.$prefetch$++;\n    if (ctx.$flags$ & HOST_FLAG_DYNAMIC) {\n        collectElementData(ctx, collector, true);\n    }\n    else {\n        collector.$deferElements$.push(ctx);\n    }\n    collector.$prefetch$--;\n};\nconst collectElement = (el, collector) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        if (collector.$elements$.includes(ctx)) {\n            return;\n        }\n        collector.$elements$.push(ctx);\n        collectElementData(ctx, collector, el);\n    }\n};\nexport const collectElementData = (elCtx, collector, dynamicCtx) => {\n    if (elCtx.$props$ && !isEmptyObj(elCtx.$props$)) {\n        collectValue(elCtx.$props$, collector, dynamicCtx);\n    }\n    if (elCtx.$componentQrl$) {\n        collectValue(elCtx.$componentQrl$, collector, dynamicCtx);\n    }\n    if (elCtx.$seq$) {\n        for (const obj of elCtx.$seq$) {\n            collectValue(obj, collector, dynamicCtx);\n        }\n    }\n    if (elCtx.$watches$) {\n        for (const obj of elCtx.$watches$) {\n            collectValue(obj, collector, dynamicCtx);\n        }\n    }\n    if (dynamicCtx) {\n        collectContext(elCtx, collector);\n        if (elCtx.$dynamicSlots$) {\n            for (const slotCtx of elCtx.$dynamicSlots$) {\n                collectContext(slotCtx, collector);\n            }\n        }\n    }\n};\nconst collectContext = (elCtx, collector) => {\n    while (elCtx) {\n        if (elCtx.$contexts$) {\n            for (const obj of elCtx.$contexts$.values()) {\n                collectValue(obj, collector, true);\n            }\n            if (elCtx.$contexts$.get('_') === true) {\n                break;\n            }\n        }\n        elCtx = elCtx.$slotParent$ ?? elCtx.$parent$;\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const collectSubscriptions = (manager, collector) => {\n    if (collector.$seen$.has(manager)) {\n        return;\n    }\n    collector.$seen$.add(manager);\n    const subs = manager.$subs$;\n    assertDefined(subs, 'subs must be defined');\n    for (const key of subs) {\n        const host = key[1];\n        if (isNode(host) && isVirtualElement(host)) {\n            if (key[0] === 0) {\n                collectDeferElement(host, collector);\n            }\n        }\n        else {\n            collectValue(host, collector, true);\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        const v = {\n            resolved: true,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    }, (value) => {\n        const v = {\n            resolved: false,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    return promise[PROMISE_VALUE];\n};\nexport const collectValue = (obj, collector, leaks) => {\n    if (obj !== null) {\n        const objType = typeof obj;\n        switch (objType) {\n            case 'function':\n            case 'object': {\n                const seen = collector.$seen$;\n                if (seen.has(obj)) {\n                    return;\n                }\n                seen.add(obj);\n                if (fastSkipSerialize(obj)) {\n                    collector.$objSet$.add(undefined);\n                    collector.$noSerialize$.push(obj);\n                    return;\n                }\n                const input = obj;\n                const target = getProxyTarget(obj);\n                if (target) {\n                    obj = target;\n                    if (seen.has(obj)) {\n                        return;\n                    }\n                    seen.add(obj);\n                    if (leaks === true) {\n                        collectSubscriptions(getProxyManager(input), collector);\n                    }\n                    if (fastWeakSerialize(input)) {\n                        collector.$objSet$.add(obj);\n                        return;\n                    }\n                }\n                const collected = collectDeps(obj, collector, leaks);\n                if (collected) {\n                    collector.$objSet$.add(obj);\n                    return;\n                }\n                if (isPromise(obj)) {\n                    collector.$promises$.push(resolvePromise(obj).then((value) => {\n                        collectValue(value, collector, leaks);\n                    }));\n                    return;\n                }\n                if (objType === 'object') {\n                    if (isNode(obj)) {\n                        return;\n                    }\n                    if (isArray(obj)) {\n                        for (let i = 0; i < obj.length; i++) {\n                            collectValue(obj[i], collector, leaks);\n                        }\n                    }\n                    else if (isSerializableObject(obj)) {\n                        for (const key of Object.keys(obj)) {\n                            collectValue(obj[key], collector, leaks);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    collector.$objSet$.add(obj);\n};\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nconst hasContext = (el) => {\n    const node = processVirtualNodes(el);\n    if (isQwikElement(node)) {\n        const ctx = tryGetContext(node);\n        if (ctx && ctx.$id$) {\n            return ctx;\n        }\n    }\n    return undefined;\n};\nconst getManager = (obj, containerState) => {\n    if (!isObject(obj)) {\n        return undefined;\n    }\n    if (obj instanceof SignalImpl) {\n        return getProxyManager(obj);\n    }\n    const proxy = containerState.$proxyMap$.get(obj);\n    if (proxy) {\n        return getProxyManager(proxy);\n    }\n    return undefined;\n};\nconst getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nconst getTextID = (node, containerState) => {\n    const prev = node.previousSibling;\n    if (prev && isComment(prev)) {\n        if (prev.data.startsWith('t=')) {\n            return ELEMENT_ID_PREFIX + prev.data.slice(2);\n        }\n    }\n    const doc = node.ownerDocument;\n    const id = intToStr(containerState.$elementIndex$++);\n    const open = doc.createComment(`t=${id}`);\n    const close = doc.createComment('');\n    const parent = node.parentElement;\n    parent.insertBefore(open, node);\n    parent.insertBefore(close, node.nextSibling);\n    return ELEMENT_ID_PREFIX + id;\n};\nconst isEmptyObj = (obj) => {\n    return Object.keys(obj).length === 0;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertTrue } from '../error/assert';\nimport { getDocument } from '../util/dom';\nimport { isComment, isElement, isQwikElement, isText } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QStyle } from '../util/markers';\nimport { emitEvent } from '../util/event';\nimport { isArray, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { createParser, OBJECT_TRANSFORMS, UNDEFINED_PREFIX } from './serializers';\nimport { _getContainerState, isContainer, SHOW_COMMENT, strToInt, } from './container';\nimport { findClose, VirtualElementImpl } from '../render/dom/virtual-element';\nimport { getProxyManager, parseSubscription } from '../state/common';\nimport { createProxy, setObjectFlags } from '../state/store';\nimport { qSerialize } from '../util/qdev';\nimport { pauseContainer } from './pause';\nimport { isPrimitive } from '../render/dom/render-dom';\nimport { getContext } from '../state/context';\nimport { domToVnode } from '../render/dom/visitor';\nimport { getWrappingContainer } from '../use/use-core';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qSerialize) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const getPauseState = (containerEl) => {\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (script) {\n        const data = script.firstChild.data;\n        return JSON.parse(unescapeText(data) || '{}');\n    }\n};\n/**\n * @internal\n */\nexport const _deserializeData = (data, element) => {\n    const obj = JSON.parse(data);\n    if (typeof obj !== 'object') {\n        return null;\n    }\n    const { _objs, _entry } = obj;\n    if (typeof _objs === 'undefined' || typeof _entry === 'undefined') {\n        return null;\n    }\n    let doc = {};\n    let containerState = {};\n    if (element && isQwikElement(element)) {\n        const containerEl = getWrappingContainer(element);\n        if (containerEl) {\n            containerState = _getContainerState(containerEl);\n            doc = containerEl.ownerDocument;\n        }\n    }\n    const parser = createParser(containerState, doc);\n    reviveValues(_objs, parser);\n    const getObject = (id) => _objs[strToInt(id)];\n    for (const obj of _objs) {\n        reviveNestedObjects(obj, getObject, parser);\n    }\n    return getObject(_entry);\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping hydration because parent element is not q:container');\n        return;\n    }\n    const pauseState = containerEl['_qwikjson_'] ?? getPauseState(containerEl);\n    containerEl['_qwikjson_'] = null;\n    if (!pauseState) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (!script) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    const containerState = _getContainerState(containerEl);\n    moveStyles(containerEl, containerState);\n    // Collect all elements\n    const elements = new Map();\n    let node = null;\n    let container = 0;\n    // Collect all virtual elements\n    const elementWalker = doc.createTreeWalker(containerEl, SHOW_COMMENT);\n    while ((node = elementWalker.nextNode())) {\n        const data = node.data;\n        if (container === 0) {\n            if (data.startsWith('qv ')) {\n                const id = getID(data); // TODO: remove\n                if (id >= 0) {\n                    elements.set(id, node);\n                }\n            }\n            else if (data.startsWith('t=')) {\n                const id = data.slice(2);\n                const index = strToInt(id);\n                elements.set(index, getTextNode(node));\n            }\n        }\n        if (data === 'cq') {\n            container++;\n        }\n        else if (data === '/cq') {\n            container--;\n        }\n    }\n    // Collect all elements\n    // If there are nested container, we are forced to take a slower path.\n    // In order to check if there are nested containers, we use the `'qc📦'` class.\n    // This is because checking for class is the fastest way for the browser to find it.\n    const slotPath = containerEl.getElementsByClassName('qc📦').length !== 0;\n    containerEl.querySelectorAll('[q\\\\:id]').forEach((el) => {\n        if (slotPath && el.closest('[q\\\\:container]') !== containerEl) {\n            return;\n        }\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const index = strToInt(id);\n        elements.set(index, el);\n    });\n    const parser = createParser(containerState, doc);\n    const finalized = new Map();\n    const revived = new Set();\n    const getObject = (id) => {\n        assertTrue(typeof id === 'string' && id.length > 0, 'resume: id must be an non-empty string, got:', id);\n        if (finalized.has(id)) {\n            return finalized.get(id);\n        }\n        return computeObject(id);\n    };\n    const computeObject = (id) => {\n        // Handle elements\n        if (id.startsWith(ELEMENT_ID_PREFIX)) {\n            const elementId = id.slice(ELEMENT_ID_PREFIX.length);\n            const index = strToInt(elementId);\n            assertTrue(elements.has(index), `missing element for id:`, elementId);\n            const rawElement = elements.get(index);\n            assertDefined(rawElement, `missing element for id:`, elementId);\n            if (isComment(rawElement)) {\n                if (!rawElement.isConnected) {\n                    finalized.set(id, undefined);\n                    return undefined;\n                }\n                const close = findClose(rawElement);\n                const virtual = new VirtualElementImpl(rawElement, close);\n                finalized.set(id, virtual);\n                getContext(virtual, containerState);\n                return virtual;\n            }\n            else if (isElement(rawElement)) {\n                finalized.set(id, rawElement);\n                getContext(rawElement, containerState).$vdom$ = domToVnode(rawElement);\n                return rawElement;\n            }\n            finalized.set(id, rawElement);\n            return rawElement;\n        }\n        const index = strToInt(id);\n        const objs = pauseState.objs;\n        assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n        const value = objs[index];\n        let obj = value;\n        for (let i = id.length - 1; i >= 0; i--) {\n            const code = id[i];\n            const transform = OBJECT_TRANSFORMS[code];\n            if (!transform) {\n                break;\n            }\n            obj = transform(obj, containerState);\n        }\n        finalized.set(id, obj);\n        if (!isPrimitive(value) && !revived.has(index)) {\n            revived.add(index);\n            reviveSubscriptions(value, index, pauseState.subs, getObject, containerState, parser);\n            reviveNestedObjects(value, getObject, parser);\n        }\n        return obj;\n    };\n    containerState.$elementIndex$ = 100000;\n    containerState.$pauseCtx$ = {\n        getObject,\n        meta: pauseState.ctx,\n        refs: pauseState.refs,\n    };\n    reviveValues(pauseState.objs, parser);\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nconst reviveValues = (objs, parser) => {\n    for (let i = 0; i < objs.length; i++) {\n        const value = objs[i];\n        if (isString(value)) {\n            objs[i] = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n    }\n};\nconst reviveSubscriptions = (value, i, objsSubs, getObject, containerState, parser) => {\n    const subs = objsSubs[i];\n    if (subs) {\n        const converted = [];\n        let flag = 0;\n        for (const sub of subs) {\n            if (sub.startsWith('_')) {\n                flag = parseInt(sub.slice(1), 10);\n            }\n            else {\n                const parsed = parseSubscription(sub, getObject);\n                if (parsed) {\n                    converted.push(parsed);\n                }\n            }\n        }\n        if (flag > 0) {\n            setObjectFlags(value, flag);\n        }\n        if (!parser.subs(value, converted)) {\n            const proxy = containerState.$proxyMap$.get(value);\n            if (proxy) {\n                getProxyManager(proxy).$addSubs$(converted);\n            }\n            else {\n                createProxy(value, containerState, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj, getObject)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                obj[i] = getObject(obj[i]);\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key of Object.keys(obj)) {\n                obj[key] = getObject(obj[key]);\n            }\n        }\n    }\n};\nexport const moveStyles = (containerEl, containerState) => {\n    const head = containerEl.ownerDocument.head;\n    containerEl.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n        containerState.$styleIds$.add(directGetAttribute(el, QStyle));\n        head.appendChild(el);\n    });\n};\nconst unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nexport const getQwikJSON = (parentElm) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, 'type') === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nconst getTextNode = (mark) => {\n    const nextNode = mark.nextSibling;\n    if (isText(nextNode)) {\n        return nextNode;\n    }\n    else {\n        const textNode = mark.ownerDocument.createTextNode('');\n        mark.parentElement.insertBefore(textNode, mark);\n        return textNode;\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: _getContainerState(containerEl),\n    };\n};\nexport const getID = (stuff) => {\n    const index = stuff.indexOf('q:id=');\n    if (index > 0) {\n        return strToInt(stuff.slice(index + 5));\n    }\n    return -1;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdW1lLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2NvbnRhaW5lci9yZXN1bWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlFLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQVUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUYsT0FBTyxFQUVMLGtCQUFrQixFQUVsQixXQUFXLEVBQ1gsWUFBWSxFQUVaLFFBQVEsR0FDVCxNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDOUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBaUIsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdELE9BQU8sRUFB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QyxDQUFDO0lBQ3JDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtRQUNiLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDekM7SUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCwgYXNzZXJ0VHJ1ZSB9IGZyb20gJy4uL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3V0aWwvZG9tJztcbmltcG9ydCB7IGlzQ29tbWVudCwgaXNFbGVtZW50LCBpc1F3aWtFbGVtZW50LCBpc1RleHQgfSBmcm9tICcuLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgbG9nRGVidWcsIGxvZ1dhcm4gfSBmcm9tICcuLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBFTEVNRU5UX0lELCBFTEVNRU5UX0lEX1BSRUZJWCwgUUNvbnRhaW5lckF0dHIsIFFTdHlsZSB9IGZyb20gJy4uL3V0aWwvbWFya2Vycyc7XG5cbmltcG9ydCB7IGVtaXRFdmVudCB9IGZyb20gJy4uL3V0aWwvZXZlbnQnO1xuXG5pbXBvcnQgeyBpc0FycmF5LCBpc1NlcmlhbGl6YWJsZU9iamVjdCwgaXNTdHJpbmcgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IGRpcmVjdEdldEF0dHJpYnV0ZSwgZGlyZWN0U2V0QXR0cmlidXRlIH0gZnJvbSAnLi4vcmVuZGVyL2Zhc3QtY2FsbHMnO1xuaW1wb3J0IHsgY3JlYXRlUGFyc2VyLCBPQkpFQ1RfVFJBTlNGT1JNUywgUGFyc2VyLCBVTkRFRklORURfUFJFRklYIH0gZnJvbSAnLi9zZXJpYWxpemVycyc7XG5pbXBvcnQge1xuICBDb250YWluZXJTdGF0ZSxcbiAgX2dldENvbnRhaW5lclN0YXRlLFxuICBHZXRPYmplY3QsXG4gIGlzQ29udGFpbmVyLFxuICBTSE9XX0NPTU1FTlQsXG4gIFNuYXBzaG90U3RhdGUsXG4gIHN0clRvSW50LFxufSBmcm9tICcuL2NvbnRhaW5lcic7XG5pbXBvcnQgeyBmaW5kQ2xvc2UsIFZpcnR1YWxFbGVtZW50SW1wbCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IGdldFByb3h5TWFuYWdlciwgcGFyc2VTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbnMgfSBmcm9tICcuLi9zdGF0ZS9jb21tb24nO1xuaW1wb3J0IHsgY3JlYXRlUHJveHksIHNldE9iamVjdEZsYWdzIH0gZnJvbSAnLi4vc3RhdGUvc3RvcmUnO1xuaW1wb3J0IHsgcVNlcmlhbGl6ZSB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyBwYXVzZUNvbnRhaW5lciB9IGZyb20gJy4vcGF1c2UnO1xuaW1wb3J0IHsgaXNQcmltaXRpdmUgfSBmcm9tICcuLi9yZW5kZXIvZG9tL3JlbmRlci1kb20nO1xuaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gJy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgZG9tVG9Wbm9kZSB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlzaXRvcic7XG5pbXBvcnQgeyBnZXRXcmFwcGluZ0NvbnRhaW5lciB9IGZyb20gJy4uL3VzZS91c2UtY29yZSc7XG5cbmV4cG9ydCBjb25zdCByZXN1bWVJZk5lZWRlZCA9IChjb250YWluZXJFbDogRWxlbWVudCk6IHZvaWQgPT4ge1xuICBjb25zdCBpc1Jlc3VtZWQgPSBkaXJlY3RHZXRBdHRyaWJ1dGUoY29udGFpbmVyRWwsIFFDb250YWluZXJBdHRyKTtcbiAgaWYgKGlzUmVzdW1lZCA9PT0gJ3BhdXNlZCcpIHtcbiAgICByZXN1bWVDb250YWluZXIoY29udGFpbmVyRWwpO1xuICAgIGlmIChxU2VyaWFsaXplKSB7XG4gICAgICBhcHBlbmRRd2lrRGV2VG9vbHMoY29udGFpbmVyRWwpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGdldFBhdXNlU3RhdGUgPSAoY29udGFpbmVyRWw6IEVsZW1lbnQpOiBTbmFwc2hvdFN0YXRlIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgZG9jID0gZ2V0RG9jdW1lbnQoY29udGFpbmVyRWwpO1xuICBjb25zdCBpc0RvY0VsZW1lbnQgPSBjb250YWluZXJFbCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgY29uc3QgcGFyZW50SlNPTiA9IGlzRG9jRWxlbWVudCA/IGRvYy5ib2R5IDogY29udGFpbmVyRWw7XG4gIGNvbnN0IHNjcmlwdCA9IGdldFF3aWtKU09OKHBhcmVudEpTT04pO1xuICBpZiAoc2NyaXB0KSB7XG4gICAgY29uc3QgZGF0YSA9IChzY3JpcHQuZmlyc3RDaGlsZCEgYXMgYW55KS5kYXRhO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHVuZXNjYXBlVGV4dChkYXRhKSB8fCAne30nKSBhcyBTbmFwc2hvdFN0YXRlO1xuICB9XG59O1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgX2Rlc2VyaWFsaXplRGF0YSA9IChkYXRhOiBzdHJpbmcsIGVsZW1lbnQ/OiB1bmtub3duKSA9PiB7XG4gIGNvbnN0IG9iaiA9IEpTT04ucGFyc2UoZGF0YSk7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHsgX29ianMsIF9lbnRyeSB9ID0gb2JqO1xuICBpZiAodHlwZW9mIF9vYmpzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgX2VudHJ5ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGxldCBkb2MgPSB7fSBhcyBEb2N1bWVudDtcbiAgbGV0IGNvbnRhaW5lclN0YXRlID0ge30gYXMgYW55O1xuICBpZiAoZWxlbWVudCAmJiBpc1F3aWtFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgY29uc3QgY29udGFpbmVyRWwgPSBnZXRXcmFwcGluZ0NvbnRhaW5lcihlbGVtZW50KTtcbiAgICBpZiAoY29udGFpbmVyRWwpIHtcbiAgICAgIGNvbnRhaW5lclN0YXRlID0gX2dldENvbnRhaW5lclN0YXRlKGNvbnRhaW5lckVsKTtcbiAgICAgIGRvYyA9IGNvbnRhaW5lckVsLm93bmVyRG9jdW1lbnQ7XG4gICAgfVxuICB9XG4gIGNvbnN0IHBhcnNlciA9IGNyZWF0ZVBhcnNlcihjb250YWluZXJTdGF0ZSwgZG9jKTtcbiAgcmV2aXZlVmFsdWVzKF9vYmpzLCBwYXJzZXIpO1xuICBjb25zdCBnZXRPYmplY3Q6IEdldE9iamVjdCA9IChpZCkgPT4gX29ianNbc3RyVG9JbnQoaWQpXTtcbiAgZm9yIChjb25zdCBvYmogb2YgX29ianMpIHtcbiAgICByZXZpdmVOZXN0ZWRPYmplY3RzKG9iaiwgZ2V0T2JqZWN0LCBwYXJzZXIpO1xuICB9XG4gIHJldHVybiBnZXRPYmplY3QoX2VudHJ5KTtcbn07XG5cbmV4cG9ydCBjb25zdCByZXN1bWVDb250YWluZXIgPSAoY29udGFpbmVyRWw6IEVsZW1lbnQpID0+IHtcbiAgaWYgKCFpc0NvbnRhaW5lcihjb250YWluZXJFbCkpIHtcbiAgICBsb2dXYXJuKCdTa2lwcGluZyBoeWRyYXRpb24gYmVjYXVzZSBwYXJlbnQgZWxlbWVudCBpcyBub3QgcTpjb250YWluZXInKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBwYXVzZVN0YXRlID1cbiAgICAoY29udGFpbmVyRWwgYXMgYW55KVsnX3F3aWtqc29uXyddID8/IChnZXRQYXVzZVN0YXRlKGNvbnRhaW5lckVsKSBhcyBTbmFwc2hvdFN0YXRlKTtcblxuICAoY29udGFpbmVyRWwgYXMgYW55KVsnX3F3aWtqc29uXyddID0gbnVsbDtcbiAgaWYgKCFwYXVzZVN0YXRlKSB7XG4gICAgbG9nV2FybignU2tpcHBpbmcgaHlkcmF0aW9uIHF3aWsvanNvbiBtZXRhZGF0YSB3YXMgbm90IGZvdW5kLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGRvYyA9IGdldERvY3VtZW50KGNvbnRhaW5lckVsKTtcbiAgY29uc3QgaXNEb2NFbGVtZW50ID0gY29udGFpbmVyRWwgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gIGNvbnN0IHBhcmVudEpTT04gPSBpc0RvY0VsZW1lbnQgPyBkb2MuYm9keSA6IGNvbnRhaW5lckVsO1xuICBjb25zdCBzY3JpcHQgPSBnZXRRd2lrSlNPTihwYXJlbnRKU09OKTtcbiAgaWYgKCFzY3JpcHQpIHtcbiAgICBsb2dXYXJuKCdTa2lwcGluZyBoeWRyYXRpb24gcXdpay9qc29uIG1ldGFkYXRhIHdhcyBub3QgZm91bmQuJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gX2dldENvbnRhaW5lclN0YXRlKGNvbnRhaW5lckVsKTtcbiAgbW92ZVN0eWxlcyhjb250YWluZXJFbCwgY29udGFpbmVyU3RhdGUpO1xuXG4gIC8vIENvbGxlY3QgYWxsIGVsZW1lbnRzXG4gIGNvbnN0IGVsZW1lbnRzID0gbmV3IE1hcDxudW1iZXIsIE5vZGU+KCk7XG4gIGxldCBub2RlOiBDb21tZW50IHwgbnVsbCA9IG51bGw7XG4gIGxldCBjb250YWluZXIgPSAwO1xuXG4gIC8vIENvbGxlY3QgYWxsIHZpcnR1YWwgZWxlbWVudHNcbiAgY29uc3QgZWxlbWVudFdhbGtlciA9IGRvYy5jcmVhdGVUcmVlV2Fsa2VyKGNvbnRhaW5lckVsLCBTSE9XX0NPTU1FTlQpO1xuXG4gIHdoaWxlICgobm9kZSA9IGVsZW1lbnRXYWxrZXIubmV4dE5vZGUoKSBhcyBDb21tZW50KSkge1xuICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGE7XG4gICAgaWYgKGNvbnRhaW5lciA9PT0gMCkge1xuICAgICAgaWYgKGRhdGEuc3RhcnRzV2l0aCgncXYgJykpIHtcbiAgICAgICAgY29uc3QgaWQgPSBnZXRJRChkYXRhKTsgLy8gVE9ETzogcmVtb3ZlXG4gICAgICAgIGlmIChpZCA+PSAwKSB7XG4gICAgICAgICAgZWxlbWVudHMuc2V0KGlkLCBub2RlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhLnN0YXJ0c1dpdGgoJ3Q9JykpIHtcbiAgICAgICAgY29uc3QgaWQgPSBkYXRhLnNsaWNlKDIpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHN0clRvSW50KGlkKTtcbiAgICAgICAgZWxlbWVudHMuc2V0KGluZGV4LCBnZXRUZXh0Tm9kZShub2RlKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkYXRhID09PSAnY3EnKSB7XG4gICAgICBjb250YWluZXIrKztcbiAgICB9IGVsc2UgaWYgKGRhdGEgPT09ICcvY3EnKSB7XG4gICAgICBjb250YWluZXItLTtcbiAgICB9XG4gIH1cblxuICAvLyBDb2xsZWN0IGFsbCBlbGVtZW50c1xuICAvLyBJZiB0aGVyZSBhcmUgbmVzdGVkIGNvbnRhaW5lciwgd2UgYXJlIGZvcmNlZCB0byB0YWtlIGEgc2xvd2VyIHBhdGguXG4gIC8vIEluIG9yZGVyIHRvIGNoZWNrIGlmIHRoZXJlIGFyZSBuZXN0ZWQgY29udGFpbmVycywgd2UgdXNlIHRoZSBgJ3Fj8J+TpidgIGNsYXNzLlxuICAvLyBUaGlzIGlzIGJlY2F1c2UgY2hlY2tpbmcgZm9yIGNsYXNzIGlzIHRoZSBmYXN0ZXN0IHdheSBmb3IgdGhlIGJyb3dzZXIgdG8gZmluZCBpdC5cbiAgY29uc3Qgc2xvdFBhdGggPSBjb250YWluZXJFbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdxY/Cfk6YnKS5sZW5ndGggIT09IDA7XG4gIGNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1txXFxcXDppZF0nKS5mb3JFYWNoKChlbCkgPT4ge1xuICAgIGlmIChzbG90UGF0aCAmJiBlbC5jbG9zZXN0KCdbcVxcXFw6Y29udGFpbmVyXScpICE9PSBjb250YWluZXJFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpZCA9IGRpcmVjdEdldEF0dHJpYnV0ZShlbCwgRUxFTUVOVF9JRCk7XG4gICAgYXNzZXJ0RGVmaW5lZChpZCwgYHJlc3VtZTogZWxlbWVudCBtaXNzZWQgcTppZGAsIGVsKTtcbiAgICBjb25zdCBpbmRleCA9IHN0clRvSW50KGlkKTtcbiAgICBlbGVtZW50cy5zZXQoaW5kZXgsIGVsKTtcbiAgfSk7XG4gIGNvbnN0IHBhcnNlciA9IGNyZWF0ZVBhcnNlcihjb250YWluZXJTdGF0ZSwgZG9jKTtcblxuICBjb25zdCBmaW5hbGl6ZWQgPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuICBjb25zdCByZXZpdmVkID0gbmV3IFNldDxudW1iZXI+KCk7XG5cbiAgY29uc3QgZ2V0T2JqZWN0OiBHZXRPYmplY3QgPSAoaWQpID0+IHtcbiAgICBhc3NlcnRUcnVlKFxuICAgICAgdHlwZW9mIGlkID09PSAnc3RyaW5nJyAmJiBpZC5sZW5ndGggPiAwLFxuICAgICAgJ3Jlc3VtZTogaWQgbXVzdCBiZSBhbiBub24tZW1wdHkgc3RyaW5nLCBnb3Q6JyxcbiAgICAgIGlkXG4gICAgKTtcbiAgICBpZiAoZmluYWxpemVkLmhhcyhpZCkpIHtcbiAgICAgIHJldHVybiBmaW5hbGl6ZWQuZ2V0KGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXB1dGVPYmplY3QoaWQpO1xuICB9O1xuXG4gIGNvbnN0IGNvbXB1dGVPYmplY3Q6IEdldE9iamVjdCA9IChpZCkgPT4ge1xuICAgIC8vIEhhbmRsZSBlbGVtZW50c1xuICAgIGlmIChpZC5zdGFydHNXaXRoKEVMRU1FTlRfSURfUFJFRklYKSkge1xuICAgICAgY29uc3QgZWxlbWVudElkID0gaWQuc2xpY2UoRUxFTUVOVF9JRF9QUkVGSVgubGVuZ3RoKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gc3RyVG9JbnQoZWxlbWVudElkKTtcbiAgICAgIGFzc2VydFRydWUoZWxlbWVudHMuaGFzKGluZGV4KSwgYG1pc3NpbmcgZWxlbWVudCBmb3IgaWQ6YCwgZWxlbWVudElkKTtcbiAgICAgIGNvbnN0IHJhd0VsZW1lbnQgPSBlbGVtZW50cy5nZXQoaW5kZXgpO1xuICAgICAgYXNzZXJ0RGVmaW5lZChyYXdFbGVtZW50LCBgbWlzc2luZyBlbGVtZW50IGZvciBpZDpgLCBlbGVtZW50SWQpO1xuICAgICAgaWYgKGlzQ29tbWVudChyYXdFbGVtZW50KSkge1xuICAgICAgICBpZiAoIXJhd0VsZW1lbnQuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICBmaW5hbGl6ZWQuc2V0KGlkLCB1bmRlZmluZWQpO1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2xvc2UgPSBmaW5kQ2xvc2UocmF3RWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHZpcnR1YWwgPSBuZXcgVmlydHVhbEVsZW1lbnRJbXBsKHJhd0VsZW1lbnQsIGNsb3NlKTtcbiAgICAgICAgZmluYWxpemVkLnNldChpZCwgdmlydHVhbCk7XG4gICAgICAgIGdldENvbnRleHQodmlydHVhbCwgY29udGFpbmVyU3RhdGUpO1xuICAgICAgICByZXR1cm4gdmlydHVhbDtcbiAgICAgIH0gZWxzZSBpZiAoaXNFbGVtZW50KHJhd0VsZW1lbnQpKSB7XG4gICAgICAgIGZpbmFsaXplZC5zZXQoaWQsIHJhd0VsZW1lbnQpO1xuICAgICAgICBnZXRDb250ZXh0KHJhd0VsZW1lbnQsIGNvbnRhaW5lclN0YXRlKS4kdmRvbSQgPSBkb21Ub1Zub2RlKHJhd0VsZW1lbnQpO1xuICAgICAgICByZXR1cm4gcmF3RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIGZpbmFsaXplZC5zZXQoaWQsIHJhd0VsZW1lbnQpO1xuICAgICAgcmV0dXJuIHJhd0VsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gc3RyVG9JbnQoaWQpO1xuICAgIGNvbnN0IG9ianMgPSBwYXVzZVN0YXRlLm9ianM7XG4gICAgYXNzZXJ0VHJ1ZShvYmpzLmxlbmd0aCA+IGluZGV4LCAncmVzdW1lOiBpbmRleCBpcyBvdXQgb2YgYm91bmRzJywgaWQpO1xuICAgIGNvbnN0IHZhbHVlID0gb2Jqc1tpbmRleF07XG4gICAgbGV0IG9iaiA9IHZhbHVlO1xuICAgIGZvciAobGV0IGkgPSBpZC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgY29kZSA9IGlkW2ldO1xuICAgICAgY29uc3QgdHJhbnNmb3JtID0gT0JKRUNUX1RSQU5TRk9STVNbY29kZV07XG4gICAgICBpZiAoIXRyYW5zZm9ybSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG9iaiA9IHRyYW5zZm9ybShvYmosIGNvbnRhaW5lclN0YXRlKTtcbiAgICB9XG4gICAgZmluYWxpemVkLnNldChpZCwgb2JqKTtcblxuICAgIGlmICghaXNQcmltaXRpdmUodmFsdWUpICYmICFyZXZpdmVkLmhhcyhpbmRleCkpIHtcbiAgICAgIHJldml2ZWQuYWRkKGluZGV4KTtcbiAgICAgIHJldml2ZVN1YnNjcmlwdGlvbnModmFsdWUsIGluZGV4LCBwYXVzZVN0YXRlLnN1YnMsIGdldE9iamVjdCwgY29udGFpbmVyU3RhdGUsIHBhcnNlcik7XG4gICAgICByZXZpdmVOZXN0ZWRPYmplY3RzKHZhbHVlLCBnZXRPYmplY3QsIHBhcnNlcik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgY29udGFpbmVyU3RhdGUuJGVsZW1lbnRJbmRleCQgPSAxMDAwMDA7XG4gIGNvbnRhaW5lclN0YXRlLiRwYXVzZUN0eCQgPSB7XG4gICAgZ2V0T2JqZWN0LFxuICAgIG1ldGE6IHBhdXNlU3RhdGUuY3R4LFxuICAgIHJlZnM6IHBhdXNlU3RhdGUucmVmcyxcbiAgfTtcblxuICByZXZpdmVWYWx1ZXMocGF1c2VTdGF0ZS5vYmpzLCBwYXJzZXIpO1xuICBkaXJlY3RTZXRBdHRyaWJ1dGUoY29udGFpbmVyRWwsIFFDb250YWluZXJBdHRyLCAncmVzdW1lZCcpO1xuICBsb2dEZWJ1ZygnQ29udGFpbmVyIHJlc3VtZWQnKTtcbiAgZW1pdEV2ZW50KGNvbnRhaW5lckVsLCAncXJlc3VtZScsIHVuZGVmaW5lZCwgdHJ1ZSk7XG59O1xuXG5jb25zdCByZXZpdmVWYWx1ZXMgPSAob2JqczogYW55W10sIHBhcnNlcjogUGFyc2VyKSA9PiB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb2Jqcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHZhbHVlID0gb2Jqc1tpXTtcbiAgICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBvYmpzW2ldID0gdmFsdWUgPT09IFVOREVGSU5FRF9QUkVGSVggPyB1bmRlZmluZWQgOiBwYXJzZXIucHJlcGFyZSh2YWx1ZSk7XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCByZXZpdmVTdWJzY3JpcHRpb25zID0gKFxuICB2YWx1ZTogYW55LFxuICBpOiBhbnksXG4gIG9ianNTdWJzOiBhbnlbXSxcbiAgZ2V0T2JqZWN0OiBHZXRPYmplY3QsXG4gIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSxcbiAgcGFyc2VyOiBQYXJzZXJcbikgPT4ge1xuICBjb25zdCBzdWJzID0gb2Jqc1N1YnNbaV0gYXMgc3RyaW5nW107XG4gIGlmIChzdWJzKSB7XG4gICAgY29uc3QgY29udmVydGVkOiBTdWJzY3JpcHRpb25zW10gPSBbXTtcbiAgICBsZXQgZmxhZyA9IDA7XG4gICAgZm9yIChjb25zdCBzdWIgb2Ygc3Vicykge1xuICAgICAgaWYgKHN1Yi5zdGFydHNXaXRoKCdfJykpIHtcbiAgICAgICAgZmxhZyA9IHBhcnNlSW50KHN1Yi5zbGljZSgxKSwgMTApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gcGFyc2VTdWJzY3JpcHRpb24oc3ViLCBnZXRPYmplY3QpO1xuICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgY29udmVydGVkLnB1c2gocGFyc2VkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmxhZyA+IDApIHtcbiAgICAgIHNldE9iamVjdEZsYWdzKHZhbHVlLCBmbGFnKTtcbiAgICB9XG4gICAgaWYgKCFwYXJzZXIuc3Vicyh2YWx1ZSwgY29udmVydGVkKSkge1xuICAgICAgY29uc3QgcHJveHkgPSBjb250YWluZXJTdGF0ZS4kcHJveHlNYXAkLmdldCh2YWx1ZSk7XG4gICAgICBpZiAocHJveHkpIHtcbiAgICAgICAgZ2V0UHJveHlNYW5hZ2VyKHByb3h5KSEuJGFkZFN1YnMkKGNvbnZlcnRlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcmVhdGVQcm94eSh2YWx1ZSwgY29udGFpbmVyU3RhdGUsIGNvbnZlcnRlZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5jb25zdCByZXZpdmVOZXN0ZWRPYmplY3RzID0gKG9iajogYW55LCBnZXRPYmplY3Q6IEdldE9iamVjdCwgcGFyc2VyOiBQYXJzZXIpID0+IHtcbiAgaWYgKHBhcnNlci5maWxsKG9iaiwgZ2V0T2JqZWN0KSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChvYmogJiYgdHlwZW9mIG9iaiA9PSAnb2JqZWN0Jykge1xuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG9ialtpXSA9IGdldE9iamVjdChvYmpbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNTZXJpYWxpemFibGVPYmplY3Qob2JqKSkge1xuICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgICAgICBvYmpba2V5XSA9IGdldE9iamVjdChvYmpba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbW92ZVN0eWxlcyA9IChjb250YWluZXJFbDogRWxlbWVudCwgY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlKSA9PiB7XG4gIGNvbnN0IGhlYWQgPSBjb250YWluZXJFbC5vd25lckRvY3VtZW50LmhlYWQ7XG4gIGNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlW3FcXFxcOnN0eWxlXScpLmZvckVhY2goKGVsKSA9PiB7XG4gICAgY29udGFpbmVyU3RhdGUuJHN0eWxlSWRzJC5hZGQoZGlyZWN0R2V0QXR0cmlidXRlKGVsLCBRU3R5bGUpISk7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChlbCk7XG4gIH0pO1xufTtcblxuY29uc3QgdW5lc2NhcGVUZXh0ID0gKHN0cjogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXFxcXHgzQyhcXC8/c2NyaXB0KS9nLCAnPCQxJyk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UXdpa0pTT04gPSAocGFyZW50RWxtOiBFbGVtZW50KTogSFRNTFNjcmlwdEVsZW1lbnQgfCB1bmRlZmluZWQgPT4ge1xuICBsZXQgY2hpbGQgPSBwYXJlbnRFbG0ubGFzdEVsZW1lbnRDaGlsZDtcbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkLnRhZ05hbWUgPT09ICdTQ1JJUFQnICYmIGRpcmVjdEdldEF0dHJpYnV0ZShjaGlsZCwgJ3R5cGUnKSA9PT0gJ3F3aWsvanNvbicpIHtcbiAgICAgIHJldHVybiBjaGlsZCBhcyBIVE1MU2NyaXB0RWxlbWVudDtcbiAgICB9XG4gICAgY2hpbGQgPSBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59O1xuXG5jb25zdCBnZXRUZXh0Tm9kZSA9IChtYXJrOiBDb21tZW50KSA9PiB7XG4gIGNvbnN0IG5leHROb2RlID0gbWFyay5uZXh0U2libGluZyE7XG4gIGlmIChpc1RleHQobmV4dE5vZGUpKSB7XG4gICAgcmV0dXJuIG5leHROb2RlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHRleHROb2RlID0gbWFyay5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBtYXJrLnBhcmVudEVsZW1lbnQhLmluc2VydEJlZm9yZSh0ZXh0Tm9kZSwgbWFyayk7XG4gICAgcmV0dXJuIHRleHROb2RlO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgYXBwZW5kUXdpa0RldlRvb2xzID0gKGNvbnRhaW5lckVsOiBFbGVtZW50KSA9PiB7XG4gIChjb250YWluZXJFbCBhcyBhbnkpWydxd2lrJ10gPSB7XG4gICAgcGF1c2U6ICgpID0+IHBhdXNlQ29udGFpbmVyKGNvbnRhaW5lckVsKSxcbiAgICBzdGF0ZTogX2dldENvbnRhaW5lclN0YXRlKGNvbnRhaW5lckVsKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJRCA9IChzdHVmZjogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGluZGV4ID0gc3R1ZmYuaW5kZXhPZigncTppZD0nKTtcbiAgaWYgKGluZGV4ID4gMCkge1xuICAgIHJldHVybiBzdHJUb0ludChzdHVmZi5zbGljZShpbmRleCArIDUpKTtcbiAgfVxuICByZXR1cm4gLTE7XG59O1xuIl19","import { assertDefined } from '../error/assert';\nimport { inflateQrl, parseQRL } from '../qrl/qrl';\nimport { getWrappingContainer, getInvokeContext } from './use-core';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { getContext } from '../state/context';\nimport { resumeIfNeeded } from '../container/resume';\nimport { _getContainerState } from '../container/container';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const container = getWrappingContainer(el);\n        assertDefined(container, `invoke: cant find parent q:container of`, el);\n        qrl = parseQRL(decodeURIComponent(String(context.$url$)), container);\n        assertQrl(qrl);\n        resumeIfNeeded(container);\n        const elCtx = getContext(el, _getContainerState(container));\n        inflateQrl(qrl, elCtx);\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNwRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RCxpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQTZCLEVBQUU7SUFDNUQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsMERBQTBELEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkYsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsYUFBYSxDQUFDLFNBQVMsRUFBRSx5Q0FBeUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4RSxHQUFHLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNyRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDZixjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUIsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzVELFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDeEI7U0FBTTtRQUNMLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7S0FDSDtJQUNELE9BQU8sR0FBRyxDQUFDLFlBQW9CLENBQUM7QUFDbEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Vycm9yL2Fzc2VydCc7XG5pbXBvcnQgeyBpbmZsYXRlUXJsLCBwYXJzZVFSTCB9IGZyb20gJy4uL3FybC9xcmwnO1xuaW1wb3J0IHsgZ2V0V3JhcHBpbmdDb250YWluZXIsIGdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gJy4uL3N0YXRlL2NvbnRleHQnO1xuaW1wb3J0IHsgcmVzdW1lSWZOZWVkZWQgfSBmcm9tICcuLi9jb250YWluZXIvcmVzdW1lJztcbmltcG9ydCB7IF9nZXRDb250YWluZXJTdGF0ZSB9IGZyb20gJy4uL2NvbnRhaW5lci9jb250YWluZXInO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlIGluc3RlYWQpXG4vKipcbiAqIFVzZWQgYnkgdGhlIFF3aWsgT3B0aW1pemVyIHRvIHJlc3RvcmUgdGhlIGxleGljYWxseSBzY29wZWQgdmFyaWFibGVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgcHJlc2VudCBpbiB0aGUgYXBwbGljYXRpb24gc291cmNlIGNvZGUuXG4gKlxuICogTk9URTogYHVzZUxleGljYWxTY29wZWAgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIHN5bmNocm9ub3VzIHBvcnRpb24gb2YgdGhlIGNhbGxiYWNrXG4gKiAoYmVmb3JlIGFueSBgYXdhaXRgIHN0YXRlbWVudHMuKVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlTGV4aWNhbFNjb3BlID0gPFZBUlMgZXh0ZW5kcyBhbnlbXT4oKTogVkFSUyA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBnZXRJbnZva2VDb250ZXh0KCk7XG4gIGxldCBxcmwgPSBjb250ZXh0LiRxcmwkO1xuICBpZiAoIXFybCkge1xuICAgIGNvbnN0IGVsID0gY29udGV4dC4kZWxlbWVudCQ7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCwgJ2ludm9rZTogZWxlbWVudCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJywgY29udGV4dCk7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0V3JhcHBpbmdDb250YWluZXIoZWwpO1xuICAgIGFzc2VydERlZmluZWQoY29udGFpbmVyLCBgaW52b2tlOiBjYW50IGZpbmQgcGFyZW50IHE6Y29udGFpbmVyIG9mYCwgZWwpO1xuICAgIHFybCA9IHBhcnNlUVJMKGRlY29kZVVSSUNvbXBvbmVudChTdHJpbmcoY29udGV4dC4kdXJsJCkpLCBjb250YWluZXIpO1xuICAgIGFzc2VydFFybChxcmwpO1xuICAgIHJlc3VtZUlmTmVlZGVkKGNvbnRhaW5lcik7XG4gICAgY29uc3QgZWxDdHggPSBnZXRDb250ZXh0KGVsLCBfZ2V0Q29udGFpbmVyU3RhdGUoY29udGFpbmVyKSk7XG4gICAgaW5mbGF0ZVFybChxcmwsIGVsQ3R4KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRRcmwocXJsKTtcbiAgICBhc3NlcnREZWZpbmVkKFxuICAgICAgcXJsLiRjYXB0dXJlUmVmJCxcbiAgICAgICdpbnZva2U6IHFybCAkY2FwdHVyZVJlZiQgbXVzdCBiZSBkZWZpbmVkIGluc2lkZSB1c2VMZXhpY2FsU2NvcGUoKScsXG4gICAgICBxcmxcbiAgICApO1xuICB9XG4gIHJldHVybiBxcmwuJGNhcHR1cmVSZWYkIGFzIFZBUlM7XG59O1xuIl19","import { tryGetContext } from '../../state/context';\nimport { jsxToString, serializeClass } from '../execute-component';\nimport { setProperty } from './operations';\nimport { smartSetProperty, SVG_NS } from './visitor';\nexport const executeSignalOperation = (staticCtx, operation) => {\n    const prop = operation[5];\n    let value = operation[2][prop];\n    switch (operation[0]) {\n        case 1: {\n            const prop = operation[4];\n            const elm = operation[3];\n            const ctx = tryGetContext(elm);\n            const isSVG = elm.namespaceURI === SVG_NS;\n            let oldValue = undefined;\n            if (prop === 'class') {\n                value = serializeClass(value);\n            }\n            if (ctx && ctx.$vdom$) {\n                const normalizedProp = isSVG ? prop : prop.toLowerCase();\n                oldValue = ctx.$vdom$.$props$[normalizedProp];\n                ctx.$vdom$.$props$[normalizedProp] = value;\n            }\n            return smartSetProperty(staticCtx, elm, prop, value, oldValue, isSVG);\n        }\n        case 2:\n            return setProperty(staticCtx, operation[3], 'data', jsxToString(value));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL3NpZ25hbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLENBQ3BDLFNBQThCLEVBQzlCLFNBQTJCLEVBQzNCLEVBQUU7SUFDRixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsSUFBSSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLFFBQVEsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDTixNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMvQixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsWUFBWSxLQUFLLE1BQU0sQ0FBQztZQUMxQyxJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUM7WUFDekIsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO2dCQUNwQixLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDckIsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDekQsUUFBUSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUM5QyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDNUM7WUFDRCxPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkU7UUFDRCxLQUFLLENBQUM7WUFDSixPQUFPLFdBQVcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUMzRTtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgU3Vic2NyaWJlclNpZ25hbCB9IGZyb20gJy4uLy4uL3N0YXRlL2NvbW1vbic7XG5pbXBvcnQgeyB0cnlHZXRDb250ZXh0IH0gZnJvbSAnLi4vLi4vc3RhdGUvY29udGV4dCc7XG5pbXBvcnQgeyBqc3hUb1N0cmluZywgc2VyaWFsaXplQ2xhc3MgfSBmcm9tICcuLi9leGVjdXRlLWNvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlclN0YXRpY0NvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzZXRQcm9wZXJ0eSB9IGZyb20gJy4vb3BlcmF0aW9ucyc7XG5pbXBvcnQgeyBzbWFydFNldFByb3BlcnR5LCBTVkdfTlMgfSBmcm9tICcuL3Zpc2l0b3InO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZVNpZ25hbE9wZXJhdGlvbiA9IChcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBvcGVyYXRpb246IFN1YnNjcmliZXJTaWduYWxcbikgPT4ge1xuICBjb25zdCBwcm9wID0gb3BlcmF0aW9uWzVdO1xuICBsZXQgdmFsdWUgPSBvcGVyYXRpb25bMl1bcHJvcF07XG4gIHN3aXRjaCAob3BlcmF0aW9uWzBdKSB7XG4gICAgY2FzZSAxOiB7XG4gICAgICBjb25zdCBwcm9wID0gb3BlcmF0aW9uWzRdO1xuICAgICAgY29uc3QgZWxtID0gb3BlcmF0aW9uWzNdO1xuICAgICAgY29uc3QgY3R4ID0gdHJ5R2V0Q29udGV4dChlbG0pO1xuICAgICAgY29uc3QgaXNTVkcgPSBlbG0ubmFtZXNwYWNlVVJJID09PSBTVkdfTlM7XG4gICAgICBsZXQgb2xkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAocHJvcCA9PT0gJ2NsYXNzJykge1xuICAgICAgICB2YWx1ZSA9IHNlcmlhbGl6ZUNsYXNzKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdHggJiYgY3R4LiR2ZG9tJCkge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkUHJvcCA9IGlzU1ZHID8gcHJvcCA6IHByb3AudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgb2xkVmFsdWUgPSBjdHguJHZkb20kLiRwcm9wcyRbbm9ybWFsaXplZFByb3BdO1xuICAgICAgICBjdHguJHZkb20kLiRwcm9wcyRbbm9ybWFsaXplZFByb3BdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc21hcnRTZXRQcm9wZXJ0eShzdGF0aWNDdHgsIGVsbSwgcHJvcCwgdmFsdWUsIG9sZFZhbHVlLCBpc1NWRyk7XG4gICAgfVxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBzZXRQcm9wZXJ0eShzdGF0aWNDdHgsIG9wZXJhdGlvblszXSwgJ2RhdGEnLCBqc3hUb1N0cmluZyh2YWx1ZSkpO1xuICB9XG59O1xuIl19","import { assertDefined, assertTrue } from '../../error/assert';\nimport { executeContextWithSlots, IS_HEAD, IS_SVG, SVG_NS } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { getWrappingContainer } from '../../use/use-core';\nimport { runSubscriber, WatchFlagsIsDirty, WatchFlagsIsEffect, WatchFlagsIsResource, WatchFlagsIsWatch, } from '../../use/use-task';\nimport { then } from '../../util/promises';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { renderComponent } from './render-dom';\nimport { _getContainerState } from '../../container/container';\nimport { createRenderContext } from '../execute-component';\nimport { getRootNode } from './virtual-element';\nimport { printRenderStats } from './operations';\nimport { executeSignalOperation } from './signals';\nimport { getPlatform, isServer } from '../../platform/platform';\nimport { qDev } from '../../util/qdev';\nimport { isQwikElement } from '../../util/element';\nimport { resumeIfNeeded } from '../../container/resume';\nimport { getContext, HOST_FLAG_DIRTY } from '../../state/context';\nexport const notifyChange = (subAction, containerState) => {\n    if (subAction[0] === 0) {\n        const host = subAction[1];\n        if (isQwikElement(host)) {\n            notifyRender(host, containerState);\n        }\n        else {\n            notifyWatch(host, containerState);\n        }\n    }\n    else {\n        notifySignalOperation(subAction, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time.\n * This method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The\n * default implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n *\n */\nconst notifyRender = (hostElement, containerState) => {\n    const server = isServer();\n    if (!server) {\n        resumeIfNeeded(containerState.$containerEl$);\n    }\n    const elCtx = getContext(hostElement, containerState);\n    assertDefined(elCtx.$componentQrl$, `render: notified host element must have a defined $renderQrl$`, elCtx);\n    if (elCtx.$flags$ & HOST_FLAG_DIRTY) {\n        return;\n    }\n    elCtx.$flags$ |= HOST_FLAG_DIRTY;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$hostsStaging$.add(hostElement);\n    }\n    else {\n        if (server) {\n            logWarn('Can not rerender in server platform');\n            return undefined;\n        }\n        containerState.$hostsNext$.add(hostElement);\n        scheduleFrame(containerState);\n    }\n};\nconst notifySignalOperation = (op, containerState) => {\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$opsNext$.add(op);\n    }\n    else {\n        containerState.$opsNext$.add(op);\n        scheduleFrame(containerState);\n    }\n};\nexport const notifyWatch = (watch, containerState) => {\n    if (watch.$flags$ & WatchFlagsIsDirty) {\n        return;\n    }\n    watch.$flags$ |= WatchFlagsIsDirty;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$watchStaging$.add(watch);\n    }\n    else {\n        containerState.$watchNext$.add(watch);\n        scheduleFrame(containerState);\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = getPlatform().nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useTask$()` API. This method\n * is not intended to be used by developers.\n *\n * @internal\n *\n */\nexport const _hW = () => {\n    const [watch] = useLexicalScope();\n    notifyWatch(watch, _getContainerState(getWrappingContainer(watch.$el$)));\n};\nconst renderMarked = async (containerState) => {\n    const doc = getDocument(containerState.$containerEl$);\n    try {\n        const rCtx = createRenderContext(doc, containerState);\n        const staticCtx = rCtx.$static$;\n        const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n        containerState.$hostsNext$.clear();\n        await executeWatchesBefore(containerState, rCtx);\n        containerState.$hostsStaging$.forEach((host) => {\n            hostsRendering.add(host);\n        });\n        containerState.$hostsStaging$.clear();\n        const renderingQueue = Array.from(hostsRendering);\n        sortNodes(renderingQueue);\n        containerState.$opsNext$.forEach((op) => {\n            executeSignalOperation(staticCtx, op);\n        });\n        containerState.$opsNext$.clear();\n        for (const el of renderingQueue) {\n            if (!staticCtx.$hostElements$.has(el)) {\n                const elCtx = getContext(el, containerState);\n                if (elCtx.$componentQrl$) {\n                    assertTrue(el.isConnected, 'element must be connected to the dom');\n                    staticCtx.$roots$.push(elCtx);\n                    try {\n                        await renderComponent(rCtx, elCtx, getFlags(el.parentElement));\n                    }\n                    catch (err) {\n                        if (qDev) {\n                            throw err;\n                        }\n                        else {\n                            logError(err);\n                        }\n                    }\n                }\n            }\n        }\n        // Add post operations\n        staticCtx.$operations$.push(...staticCtx.$postOperations$);\n        // Early exist, no dom operations\n        if (staticCtx.$operations$.length === 0) {\n            printRenderStats(staticCtx);\n            await postRendering(containerState, rCtx);\n            return;\n        }\n        await getPlatform().raf(() => {\n            executeContextWithSlots(rCtx);\n            printRenderStats(staticCtx);\n            return postRendering(containerState, rCtx);\n        });\n    }\n    catch (err) {\n        logError(err);\n    }\n};\nconst getFlags = (el) => {\n    let flags = 0;\n    if (el) {\n        if (el.namespaceURI === SVG_NS) {\n            flags |= IS_SVG;\n        }\n        if (el.tagName === 'HEAD') {\n            flags |= IS_HEAD;\n        }\n    }\n    return flags;\n};\nexport const postRendering = async (containerState, rCtx) => {\n    const hostElements = rCtx.$static$.$hostElements$;\n    await executeWatchesAfter(containerState, rCtx, (watch, stage) => {\n        if ((watch.$flags$ & WatchFlagsIsEffect) === 0) {\n            return false;\n        }\n        if (stage) {\n            return hostElements.has(watch.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    const pending = containerState.$hostsNext$.size +\n        containerState.$watchNext$.size +\n        containerState.$opsNext$.size;\n    if (pending > 0) {\n        scheduleFrame(containerState);\n    }\n};\nconst executeWatchesBefore = async (containerState, rCtx) => {\n    const containerEl = containerState.$containerEl$;\n    const resourcesPromises = [];\n    const watchPromises = [];\n    const isWatch = (watch) => (watch.$flags$ & WatchFlagsIsWatch) !== 0;\n    const isResourceWatch = (watch) => (watch.$flags$ & WatchFlagsIsResource) !== 0;\n    containerState.$watchNext$.forEach((watch) => {\n        if (isWatch(watch)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n        if (isResourceWatch(watch)) {\n            resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (isWatch(watch)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else if (isResourceWatch(watch)) {\n                resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState, rCtx);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortWatches(resources);\n        resources.forEach((watch) => runSubscriber(watch, containerState, rCtx));\n    }\n};\nconst executeWatchesAfter = async (containerState, rCtx, watchPred) => {\n    const watchPromises = [];\n    const containerEl = containerState.$containerEl$;\n    containerState.$watchNext$.forEach((watch) => {\n        if (watchPred(watch, false)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (watchPred(watch, true)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            for (const watch of watches) {\n                await runSubscriber(watch, containerState, rCtx);\n            }\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => (a.compareDocumentPosition(getRootNode(b)) & 2 ? 1 : -1));\n};\nconst sortWatches = (watches) => {\n    watches.sort((a, b) => {\n        if (a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(getRootNode(b.$el$)) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { newInvokeContext, invoke, waitAndRun } from './use-core';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { delay, safeCall, then } from '../util/promises';\nimport { isFunction, isObject } from '../util/types';\nimport { isServer } from '../platform/platform';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined, assertEqual } from '../error/assert';\nimport { assertQrl, createQRL } from '../qrl/qrl-class';\nimport { codeToText, QError_trackUseStore } from '../error/error';\nimport { useOn, useOnDocument } from './use-on';\nimport { intToStr, strToInt } from '../container/container';\nimport { notifyWatch, _hW } from '../render/dom/notify-render';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { handleError } from '../render/error-handling';\nimport { getProxyManager, noSerialize, unwrapProxy } from '../state/common';\nimport { isSignal } from '../state/signal';\nexport const WatchFlagsIsEffect = 1 << 0;\nexport const WatchFlagsIsWatch = 1 << 1;\nexport const WatchFlagsIsDirty = 1 << 2;\nexport const WatchFlagsIsCleanup = 1 << 3;\nexport const WatchFlagsIsResource = 1 << 4;\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when\n * those inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `taskFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useTaskQrl = (qrl, opts) => {\n    const { get, set, iCtx, i, elCtx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(qrl);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    const watch = new Task(WatchFlagsIsDirty | WatchFlagsIsWatch, i, elCtx.$element$, qrl, undefined);\n    set(true);\n    qrl.$resolveLazy$(containerState.$containerEl$);\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    waitAndRun(iCtx, () => runSubscriber(watch, containerState, iCtx.$renderCtx$));\n    if (isServer()) {\n        useRunWatch(watch, opts?.eagerness);\n    }\n};\n// <docs markdown=\"../readme.md#useTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useTask instead)\n/**\n * Reruns the `taskFn` when the observed inputs change.\n *\n * Use `useTask` to observe changes on a set of inputs, and then re-execute the `taskFn` when\n * those inputs change.\n *\n * The `taskFn` only executes if the observed inputs change. To observe the inputs, use the `obs`\n * function to wrap property reads. This creates subscriptions that will trigger the `taskFn` to\n * rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ### Example\n *\n * The `useTask` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `taskFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useTask$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useTask$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useTask$ = /*#__PURE__*/ implicit$FirstArg(useTaskQrl);\n/**\n * @beta\n * @deprecated - use `useTask$()` instead\n */\nexport const useWatch$ = /*#__PURE__*/ useTask$;\n/**\n * @beta\n * @deprecated - use `useTask$()` instead\n */\nexport const useWatchQrl = /*#__PURE__*/ useTaskQrl;\n// <docs markdown=\"../readme.md#useBrowserVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useBrowserVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useBrowserVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useBrowserVisibleTaskQrl = (qrl, opts) => {\n    const { get, set, i, iCtx, elCtx } = useSequentialScope();\n    const eagerness = opts?.strategy ?? opts?.eagerness ?? 'intersection-observer';\n    if (get) {\n        if (isServer()) {\n            useRunWatch(get, eagerness);\n        }\n        return;\n    }\n    assertQrl(qrl);\n    const watch = new Task(WatchFlagsIsEffect, i, elCtx.$element$, qrl, undefined);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    set(watch);\n    useRunWatch(watch, eagerness);\n    if (!isServer()) {\n        qrl.$resolveLazy$(containerState.$containerEl$);\n        notifyWatch(watch, containerState);\n    }\n};\n// <docs markdown=\"../readme.md#useBrowserVisibleTask\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useBrowserVisibleTask instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useBrowserVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useBrowserVisibleTask$ = /*#__PURE__*/ implicit$FirstArg(useBrowserVisibleTaskQrl);\n/**\n * @alpha\n * @deprecated - use `useBrowserVisibleTask$()` instead\n */\nexport const useClientEffectQrl = useBrowserVisibleTaskQrl;\n/**\n * @alpha\n * @deprecated - use `useBrowserVisibleTask$()` instead\n */\nexport const useClientEffect$ = useBrowserVisibleTask$;\nexport const isResourceTask = (watch) => {\n    return !!watch.$resource$;\n};\nexport const runSubscriber = async (watch, containerState, rCtx) => {\n    assertEqual(!!(watch.$flags$ & WatchFlagsIsDirty), true, 'Resource is not dirty', watch);\n    if (isResourceTask(watch)) {\n        return runResource(watch, containerState, rCtx);\n    }\n    else {\n        return runWatch(watch, containerState, rCtx);\n    }\n};\nexport const runResource = (watch, containerState, rCtx, waitOn) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const el = watch.$el$;\n    const invocationContext = newInvokeContext(rCtx.$static$.$locale$, el, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.getFn(invocationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const cleanups = [];\n    const resource = watch.$resource$;\n    assertDefined(resource, 'useResource: when running a resource, \"watch.r\" must be a defined.', watch);\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = watch;\n            return invoke(ctx, obj);\n        }\n        const manager = getProxyManager(obj);\n        if (manager) {\n            manager.$addSub$([0, watch, prop]);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const resourceTarget = unwrapProxy(resource);\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n        cache(policy) {\n            let milliseconds = 0;\n            if (policy === 'immutable') {\n                milliseconds = Infinity;\n            }\n            else {\n                milliseconds = policy;\n            }\n            resource._cache = milliseconds;\n        },\n        previous: resourceTarget._resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.loading = false;\n                resource._state = 'resolved';\n                resource._resolved = value;\n                resource._error = undefined;\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.loading = false;\n                resource._state = 'rejected';\n                resource._error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    // Execute mutation inside empty invokation\n    invoke(invocationContext, () => {\n        resource._state = 'pending';\n        resource.loading = !isServer();\n        resource.value = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        });\n    });\n    watch.$destroy$ = noSerialize(() => {\n        done = true;\n        cleanups.forEach((fn) => fn());\n    });\n    const promise = safeCall(() => then(waitOn, () => watchFn(opts)), (value) => {\n        setState(true, value);\n    }, (reason) => {\n        setState(false, reason);\n    });\n    const timeout = resourceTarget._timeout;\n    if (timeout > 0) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, new Error('timeout'))) {\n                    cleanupWatch(watch);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nexport const runWatch = (watch, containerState, rCtx) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const hostElement = watch.$el$;\n    const invocationContext = newInvokeContext(rCtx.$static$.$locale$, hostElement, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.getFn(invocationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = watch;\n            return invoke(ctx, obj);\n        }\n        const manager = getProxyManager(obj);\n        if (manager) {\n            manager.$addSub$([0, watch, prop]);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => watchFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        handleError(reason, hostElement, rCtx);\n    });\n};\nexport const cleanupWatch = (watch) => {\n    const destroy = watch.$destroy$;\n    if (destroy) {\n        watch.$destroy$ = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyWatch = (watch) => {\n    if (watch.$flags$ & WatchFlagsIsCleanup) {\n        watch.$flags$ &= ~WatchFlagsIsCleanup;\n        const cleanup = watch.$qrl$;\n        cleanup();\n    }\n    else {\n        cleanupWatch(watch);\n    }\n};\nconst useRunWatch = (watch, eagerness) => {\n    if (eagerness === 'visible' || eagerness === 'intersection-observer') {\n        useOn('qvisible', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'load' || eagerness === 'document-ready') {\n        useOnDocument('qinit', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'idle' || eagerness === 'document-idle') {\n        useOnDocument('qidle', getWatchHandlerQrl(watch));\n    }\n};\nconst getWatchHandlerQrl = (watch) => {\n    const watchQrl = watch.$qrl$;\n    const watchHandler = createQRL(watchQrl.$chunk$, '_hW', _hW, null, null, [watch], watchQrl.$symbol$);\n    return watchHandler;\n};\nexport const isWatchCleanup = (obj) => {\n    return isSubscriberDescriptor(obj) && !!(obj.$flags$ & WatchFlagsIsCleanup);\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Task;\n};\nexport const serializeWatch = (watch, getObjId) => {\n    let value = `${intToStr(watch.$flags$)} ${intToStr(watch.$index$)} ${getObjId(watch.$qrl$)} ${getObjId(watch.$el$)}`;\n    if (isResourceTask(watch)) {\n        value += ` ${getObjId(watch.$resource$)}`;\n    }\n    return value;\n};\nexport const parseTask = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Task(strToInt(flags), strToInt(index), el, qrl, resource);\n};\nexport class Task {\n    constructor($flags$, $index$, $el$, $qrl$, $resource$) {\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$resource$ = $resource$;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { runResource, WatchFlagsIsDirty, WatchFlagsIsResource, Task, } from './use-task';\nimport { Fragment, jsx } from '../render/jsx/jsx-runtime';\nimport { isServer } from '../platform/platform';\nimport { untrack, useBindInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { createProxy } from '../state/store';\nimport { getProxyTarget } from '../state/common';\nimport { isSignal } from '../state/signal';\nimport { isObject } from '../util/types';\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const useResourceQrl = (qrl, opts) => {\n    const { get, set, i, iCtx, elCtx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    assertQrl(qrl);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    const resource = createResourceReturn(containerState, opts);\n    const el = elCtx.$element$;\n    const watch = new Task(WatchFlagsIsDirty | WatchFlagsIsResource, i, el, qrl, resource);\n    const previousWait = Promise.all(iCtx.$waitOn$.slice());\n    runResource(watch, containerState, iCtx.$renderCtx$, previousWait);\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    set(resource);\n    return resource;\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl($(generatorFn), opts);\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const Resource = (props) => {\n    const isBrowser = !isServer();\n    const resource = props.value;\n    let promise;\n    if (isResourceReturn(resource)) {\n        if (isBrowser) {\n            if (props.onRejected) {\n                resource.value.catch(() => { });\n                if (resource._state === 'rejected') {\n                    return props.onRejected(resource._error);\n                }\n            }\n            if (props.onPending) {\n                const state = resource._state;\n                if (state === 'resolved') {\n                    return props.onResolved(resource._resolved);\n                }\n                else if (state === 'pending') {\n                    return props.onPending();\n                }\n                else if (state === 'rejected') {\n                    throw resource._error;\n                }\n            }\n            if (untrack(() => resource._resolved) !== undefined) {\n                return props.onResolved(resource._resolved);\n            }\n        }\n        promise = resource.value;\n    }\n    else if (resource instanceof Promise) {\n        promise = resource;\n    }\n    else if (isSignal(resource)) {\n        promise = Promise.resolve(resource.value);\n    }\n    else {\n        return props.onResolved(resource);\n    }\n    // Resource path\n    return jsx(Fragment, {\n        children: promise.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected)),\n    });\n};\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        value: undefined,\n        loading: isServer() ? false : true,\n        _resolved: undefined,\n        _error: undefined,\n        _state: 'pending',\n        _timeout: opts?.timeout ?? -1,\n        _cache: 0,\n    };\n    return resource;\n};\nexport const createResourceReturn = (containerState, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.value = initialPromise;\n    const resource = createProxy(result, containerState, undefined);\n    return resource;\n};\nexport const getInternalResource = (resource) => {\n    return getProxyTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && obj.__brand === 'resource';\n};\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource._state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource._resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2 ${getObjId(resource._error)}`;\n    }\n};\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn(undefined);\n    result.value = Promise.resolve();\n    if (first === '0') {\n        result._state = 'resolved';\n        result._resolved = id;\n        result.loading = false;\n    }\n    else if (first === '1') {\n        result._state = 'pending';\n        result.value = new Promise(() => { });\n        result.loading = true;\n    }\n    else if (first === '2') {\n        result._state = 'rejected';\n        result._error = id;\n        result.loading = false;\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,","import { componentQrl, isQwikComponent } from '../component/component.public';\nimport { parseQRL, serializeQRL } from '../qrl/qrl';\nimport { isQrl } from '../qrl/qrl-class';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseTask, serializeWatch, } from '../use/use-task';\nimport { isDocument } from '../util/element';\nimport { SignalImpl, SignalWrapper } from '../state/signal';\nimport { collectSubscriptions, collectValue } from './pause';\nimport { fastWeakSerialize, getProxyManager, } from '../state/common';\nimport { getOrCreateProxy } from '../state/store';\nimport { QObjectManagerSymbol } from '../state/constants';\n/**\n * 0, 8, 9, A, B, C, D\n\\0: null character (U+0000 NULL) (only if the next character is not a decimal digit; else it’s an octal escape sequence)\n\\b: backspace (U+0008 BACKSPACE)\n\\t: horizontal tab (U+0009 CHARACTER TABULATION)\n\\n: line feed (U+000A LINE FEED)\n\\v: vertical tab (U+000B LINE TABULATION)\n\\f: form feed (U+000C FORM FEED)\n\\r: carriage return (U+000D CARRIAGE RETURN)\n\\\": double quote (U+0022 QUOTATION MARK)\n\\': single quote (U+0027 APOSTROPHE)\n\\\\: backslash (U+005C REVERSE SOLIDUS)\n */\nexport const UNDEFINED_PREFIX = '\\u0001';\nconst QRLSerializer = {\n    prefix: '\\u0002',\n    test: (v) => isQrl(v),\n    collect: (v, collector, leaks) => {\n        if (v.$captureRef$) {\n            for (const item of v.$captureRef$) {\n                collectValue(item, collector, leaks);\n            }\n        }\n        if (collector.$prefetch$ === 0) {\n            collector.$qrls$.push(v);\n        }\n    },\n    serialize: (obj, getObjId) => {\n        return serializeQRL(obj, {\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    fill: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst WatchSerializer = {\n    prefix: '\\u0003',\n    test: (v) => isSubscriberDescriptor(v),\n    collect: (v, collector, leaks) => {\n        collectValue(v.$qrl$, collector, leaks);\n        if (v.$resource$) {\n            collectValue(v.$resource$, collector, leaks);\n        }\n    },\n    serialize: (obj, getObjId) => serializeWatch(obj, getObjId),\n    prepare: (data) => parseTask(data),\n    fill: (watch, getObject) => {\n        watch.$el$ = getObject(watch.$el$);\n        watch.$qrl$ = getObject(watch.$qrl$);\n        if (watch.$resource$) {\n            watch.$resource$ = getObject(watch.$resource$);\n        }\n    },\n};\nconst ResourceSerializer = {\n    prefix: '\\u0004',\n    test: (v) => isResourceReturn(v),\n    collect: (obj, collector, leaks) => {\n        collectValue(obj.value, collector, leaks);\n        collectValue(obj._resolved, collector, leaks);\n    },\n    serialize: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    prepare: (data) => {\n        return parseResourceReturn(data);\n    },\n    fill: (resource, getObject) => {\n        if (resource._state === 'resolved') {\n            resource._resolved = getObject(resource._resolved);\n            resource.value = Promise.resolve(resource._resolved);\n        }\n        else if (resource._state === 'rejected') {\n            const p = Promise.reject(resource._error);\n            p.catch(() => null);\n            resource._error = getObject(resource._error);\n            resource.value = p;\n        }\n    },\n};\nconst URLSerializer = {\n    prefix: '\\u0005',\n    test: (v) => v instanceof URL,\n    serialize: (obj) => obj.href,\n    prepare: (data) => new URL(data),\n    fill: undefined,\n};\nconst DateSerializer = {\n    prefix: '\\u0006',\n    test: (v) => v instanceof Date,\n    serialize: (obj) => obj.toISOString(),\n    prepare: (data) => new Date(data),\n    fill: undefined,\n};\nconst RegexSerializer = {\n    prefix: '\\u0007',\n    test: (v) => v instanceof RegExp,\n    serialize: (obj) => `${obj.flags} ${obj.source}`,\n    prepare: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n    fill: undefined,\n};\nconst ErrorSerializer = {\n    prefix: '\\u000E',\n    test: (v) => v instanceof Error,\n    serialize: (obj) => {\n        return obj.message;\n    },\n    prepare: (text) => {\n        const err = new Error(text);\n        err.stack = undefined;\n        return err;\n    },\n    fill: undefined,\n};\nconst DocumentSerializer = {\n    prefix: '\\u000F',\n    test: (v) => isDocument(v),\n    serialize: undefined,\n    prepare: (_, _c, doc) => {\n        return doc;\n    },\n    fill: undefined,\n};\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = {\n    prefix: '\\u0010',\n    test: (obj) => isQwikComponent(obj),\n    serialize: (obj, getObjId) => {\n        const [qrl] = obj[SERIALIZABLE_STATE];\n        return serializeQRL(qrl, {\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        const optionsIndex = data.indexOf('{');\n        const qrlString = optionsIndex == -1 ? data : data.slice(0, optionsIndex);\n        const qrl = parseQRL(qrlString, containerState.$containerEl$);\n        return componentQrl(qrl);\n    },\n    fill: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst PureFunctionSerializer = {\n    prefix: '\\u0011',\n    test: (obj) => typeof obj === 'function' && obj.__qwik_serializable__ !== undefined,\n    serialize: (obj) => {\n        return obj.toString();\n    },\n    prepare: (data) => {\n        const fn = new Function('return ' + data)();\n        fn.__qwik_serializable__ = true;\n        return fn;\n    },\n    fill: undefined,\n};\nconst SignalSerializer = {\n    prefix: '\\u0012',\n    test: (v) => v instanceof SignalImpl,\n    collect: (obj, collector, leaks) => {\n        collectValue(obj.untrackedValue, collector, leaks);\n        if (leaks === true) {\n            collectSubscriptions(obj[QObjectManagerSymbol], collector);\n        }\n        return obj;\n    },\n    serialize: (obj, getObjId) => {\n        return getObjId(obj.untrackedValue);\n    },\n    prepare: (data, containerState) => {\n        return new SignalImpl(data, containerState?.$subsManager$?.$createManager$());\n    },\n    subs: (signal, subs) => {\n        signal[QObjectManagerSymbol].$addSubs$(subs);\n    },\n    fill: (signal, getObject) => {\n        signal.untrackedValue = getObject(signal.untrackedValue);\n    },\n};\nconst SignalWrapperSerializer = {\n    prefix: '\\u0013',\n    test: (v) => v instanceof SignalWrapper,\n    collect(obj, collector, leaks) {\n        collectValue(obj.ref, collector, leaks);\n        if (fastWeakSerialize(obj.ref)) {\n            const localManager = getProxyManager(obj.ref);\n            if (isTreeshakeable(collector.$containerState$.$subsManager$, localManager, leaks)) {\n                collectValue(obj.ref[obj.prop], collector, leaks);\n            }\n        }\n        return obj;\n    },\n    serialize: (obj, getObjId) => {\n        return `${getObjId(obj.ref)} ${obj.prop}`;\n    },\n    prepare: (data) => {\n        const [id, prop] = data.split(' ');\n        return new SignalWrapper(id, prop);\n    },\n    fill: (signal, getObject) => {\n        signal.ref = getObject(signal.ref);\n    },\n};\nconst NoFiniteNumberSerializer = {\n    prefix: '\\u0014',\n    test: (v) => typeof v === 'number',\n    serialize: (v) => {\n        return String(v);\n    },\n    prepare: (data) => {\n        return Number(data);\n    },\n    fill: undefined,\n};\nconst URLSearchParamsSerializer = {\n    prefix: '\\u0015',\n    test: (v) => v instanceof URLSearchParams,\n    serialize: (obj) => obj.toString(),\n    prepare: (data) => new URLSearchParams(data),\n    fill: undefined,\n};\nconst FormDataSerializer = {\n    prefix: '\\u0016',\n    test: (v) => typeof FormData !== 'undefined' && v instanceof globalThis.FormData,\n    serialize: (formData) => {\n        const array = [];\n        formData.forEach((value, key) => {\n            if (typeof value === 'string') {\n                array.push([key, value]);\n            }\n            else {\n                array.push([key, value.name]);\n            }\n        });\n        return JSON.stringify(array);\n    },\n    prepare: (data) => {\n        const array = JSON.parse(data);\n        const formData = new FormData();\n        for (const [key, value] of array) {\n            formData.append(key, value);\n        }\n        return formData;\n    },\n    fill: undefined,\n};\nconst serializers = [\n    QRLSerializer,\n    SignalSerializer,\n    SignalWrapperSerializer,\n    WatchSerializer,\n    ResourceSerializer,\n    URLSerializer,\n    DateSerializer,\n    RegexSerializer,\n    ErrorSerializer,\n    DocumentSerializer,\n    ComponentSerializer,\n    PureFunctionSerializer,\n    NoFiniteNumberSerializer,\n    URLSearchParamsSerializer,\n    FormDataSerializer,\n];\nconst collectorSerializers = /*#__PURE__*/ serializers.filter((a) => a.collect);\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const collectDeps = (obj, collector, leaks) => {\n    for (const s of collectorSerializers) {\n        if (s.test(obj)) {\n            s.collect(obj, collector, leaks);\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, containerState) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            let value = s.prefix;\n            if (s.serialize) {\n                value += s.serialize(obj, getObjID, containerState);\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\nexport const createParser = (containerState, doc) => {\n    const fillMap = new Map();\n    const subsMap = new Map();\n    return {\n        prepare(data) {\n            for (const s of serializers) {\n                const prefix = s.prefix;\n                if (data.startsWith(prefix)) {\n                    const value = s.prepare(data.slice(prefix.length), containerState, doc);\n                    if (s.fill) {\n                        fillMap.set(value, s);\n                    }\n                    if (s.subs) {\n                        subsMap.set(value, s);\n                    }\n                    return value;\n                }\n            }\n            return data;\n        },\n        subs(obj, subs) {\n            const serializer = subsMap.get(obj);\n            if (serializer) {\n                serializer.subs(obj, subs, containerState);\n                return true;\n            }\n            return false;\n        },\n        fill(obj, getObject) {\n            const serializer = fillMap.get(obj);\n            if (serializer) {\n                serializer.fill(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\nexport const OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n    _: (obj) => {\n        return Promise.reject(obj);\n    },\n};\nconst isTreeshakeable = (manager, target, leaks) => {\n    if (typeof leaks === 'boolean') {\n        return leaks;\n    }\n    const localManager = manager.$groupToManagers$.get(leaks);\n    if (localManager && localManager.length > 0) {\n        if (localManager.length === 1) {\n            return localManager[0] !== target;\n        }\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertTrue } from '../error/assert';\nimport { qError, QError_verifySerializable } from '../error/error';\nimport { isDocument, isQwikElement } from '../util/element';\nimport { seal } from '../util/qdev';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { isPromise } from '../util/promises';\nimport { canSerialize } from '../container/serializers';\nimport { isSubscriberDescriptor } from '../use/use-task';\nimport { notifyChange } from '../render/dom/notify-render';\nimport { createError, logError } from '../util/log';\nimport { tryGetContext } from './context';\nimport { QObjectFlagsSymbol, QObjectManagerSymbol, QOjectTargetSymbol } from './constants';\n/**\n * @internal\n */\nexport const verifySerializable = (value, preMessage) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen, '_', preMessage);\n};\nconst _verifySerializable = (value, seen, ctx, preMessage) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        const typeObj = typeof unwrapped;\n        switch (typeObj) {\n            case 'object':\n                if (isPromise(unwrapped))\n                    return value;\n                if (isQwikElement(unwrapped))\n                    return value;\n                if (isDocument(unwrapped))\n                    return value;\n                if (isArray(unwrapped)) {\n                    let expectIndex = 0;\n                    // Make sure the array has no holes\n                    unwrapped.forEach((v, i) => {\n                        if (i !== expectIndex) {\n                            throw qError(QError_verifySerializable, unwrapped);\n                        }\n                        _verifySerializable(v, seen, ctx + '[' + i + ']');\n                        expectIndex = i + 1;\n                    });\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const [key, item] of Object.entries(unwrapped)) {\n                        _verifySerializable(item, seen, ctx + '.' + key);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        let message = '';\n        if (preMessage) {\n            message = preMessage;\n        }\n        else {\n            message = 'Value cannot be serialized';\n        }\n        if (ctx !== '_') {\n            message += ` in ${ctx},`;\n        }\n        if (typeObj === 'object') {\n            message += ` because it's an instance of \"${value?.constructor.name}\". You might need to use 'noSerialize()' or use an object literal instead. Check out https://qwik.builder.io/docs/advanced/dollar/`;\n        }\n        else if (typeObj === 'function') {\n            const fnName = value.name;\n            message += ` because it's a function named \"${fnName}\". You might need to convert it to a QRL using $(fn):\\n\\nconst ${fnName} = $(${String(value)});\\n\\nPlease check out https://qwik.builder.io/docs/advanced/qrl/ for more information.`;\n        }\n        console.error('Trying to serialize', value);\n        throw createError(message);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nconst weakSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\nexport const fastSkipSerialize = (obj) => {\n    return noSerializeSet.has(obj);\n};\nexport const fastWeakSerialize = (obj) => {\n    return weakSerializeSet.has(obj);\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this\n * is a runtime error as Store wants to eagerly report when a non-serializable property is\n * assigned to it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.builder.io/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\n/**\n * @internal\n */\nexport const _weakSerialize = (input) => {\n    weakSerializeSet.add(input);\n    return input;\n};\n/**\n * @alpha\n * @deprecated Remove it, not needed anymore\n */\nexport const mutable = (v) => {\n    console.warn('mutable() is deprecated, you can safely remove all usages of mutable() in your code');\n    return v;\n};\n/**\n * @internal\n * @deprecated Remove it, not needed anymore\n */\nexport const _useMutableProps = () => { };\nexport const isConnected = (sub) => {\n    if (isQwikElement(sub)) {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n    else {\n        return isConnected(sub.$el$);\n    }\n};\n/**\n * @alpha\n */\nexport const unwrapProxy = (proxy) => {\n    return isObject(proxy) ? getProxyTarget(proxy) ?? proxy : proxy;\n};\nexport const getProxyTarget = (obj) => {\n    return obj[QOjectTargetSymbol];\n};\nexport const getProxyManager = (obj) => {\n    return obj[QObjectManagerSymbol];\n};\nexport const getProxyFlags = (obj) => {\n    return obj[QObjectFlagsSymbol];\n};\nexport const serializeSubscription = (sub, getObjId) => {\n    const type = sub[0];\n    const host = getObjId(sub[1]);\n    if (!host) {\n        return undefined;\n    }\n    let base = type + ' ' + host;\n    if (sub[0] === 0) {\n        if (sub[2]) {\n            base += ' ' + sub[2];\n        }\n    }\n    else {\n        const nodeID = typeof sub[3] === 'string' ? sub[3] : must(getObjId(sub[3]));\n        base += ` ${must(getObjId(sub[2]))} ${nodeID} ${sub[4]}`;\n        if (sub[5]) {\n            base += ` ${sub[5]}`;\n        }\n    }\n    return base;\n};\nexport const parseSubscription = (sub, getObject) => {\n    const parts = sub.split(' ');\n    const type = parseInt(parts[0], 10);\n    assertTrue(parts.length >= 2, 'At least 2 parts');\n    const host = getObject(parts[1]);\n    if (!host) {\n        return undefined;\n    }\n    if (isSubscriberDescriptor(host) && !host.$el$) {\n        return undefined;\n    }\n    const subscription = [type, host];\n    if (type === 0) {\n        assertTrue(parts.length <= 3, 'Max 3 parts');\n        subscription.push(parts[2]);\n    }\n    else {\n        assertTrue(parts.length === 5 || parts.length === 6, 'Max 5 parts');\n        subscription.push(getObject(parts[2]), getObject(parts[3]), parts[4], parts[5]);\n    }\n    return subscription;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const groupToManagers = new Map();\n    const manager = {\n        $groupToManagers$: groupToManagers,\n        $createManager$: (initialMap) => {\n            return new LocalSubscriptionManager(groupToManagers, containerState, initialMap);\n        },\n        $clearSub$: (group) => {\n            const managers = groupToManagers.get(group);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubGroup$(group);\n                }\n                groupToManagers.delete(group);\n                managers.length = 0;\n            }\n        },\n    };\n    seal(manager);\n    return manager;\n};\nexport class LocalSubscriptionManager {\n    constructor($groupToManagers$, $containerState$, initialMap) {\n        this.$groupToManagers$ = $groupToManagers$;\n        this.$containerState$ = $containerState$;\n        this.$subs$ = [];\n        if (initialMap) {\n            this.$addSubs$(initialMap);\n        }\n        seal(this);\n    }\n    $addSubs$(subs) {\n        this.$subs$.push(...subs);\n        for (const sub of this.$subs$) {\n            this.$addToGroup$(sub[1], this);\n        }\n    }\n    $addToGroup$(group, manager) {\n        let managers = this.$groupToManagers$.get(group);\n        if (!managers) {\n            this.$groupToManagers$.set(group, (managers = []));\n        }\n        if (!managers.includes(manager)) {\n            managers.push(manager);\n        }\n    }\n    $unsubGroup$(group) {\n        const subs = this.$subs$;\n        for (let i = 0; i < subs.length; i++) {\n            const found = subs[i][1] === group;\n            if (found) {\n                subs.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    $addSub$(sub) {\n        const subs = this.$subs$;\n        const group = sub[1];\n        const key = sub[sub.length - 1];\n        if (subs.some(([_type, _group, _key]) => _type === 0 && _group === group && _key === key)) {\n            return;\n        }\n        subs.push(sub);\n        this.$addToGroup$(group, this);\n    }\n    $notifySubs$(key) {\n        const subs = this.$subs$;\n        for (const sub of subs) {\n            const compare = sub[sub.length - 1];\n            if (key && compare && compare !== key) {\n                continue;\n            }\n            notifyChange(sub, this.$containerState$);\n        }\n    }\n}\nconst must = (a) => {\n    if (a == null) {\n        throw logError('must be non null', a);\n    }\n    return a;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_qrlIsNotFunction } from '../error/error';\nimport { getPlatform, isServer } from '../platform/platform';\nimport { verifySerializable } from '../state/common';\nimport { newInvokeContext, invoke, newInvokeContextFromTuple, } from '../use/use-core';\nimport { then } from '../util/promises';\nimport { qDev, qTest, seal } from '../util/qdev';\nimport { isArray, isFunction } from '../util/types';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev) {\n        if (captureRef) {\n            for (const item of captureRef) {\n                verifySerializable(item, 'Captured variable in the closure can not be serialized');\n            }\n        }\n    }\n    let _containerEl;\n    const setContainer = (el) => {\n        if (!_containerEl) {\n            _containerEl = el;\n        }\n        return _containerEl;\n    };\n    const resolve = async (containerEl) => {\n        if (containerEl) {\n            setContainer(containerEl);\n        }\n        if (symbolRef !== null) {\n            return symbolRef;\n        }\n        if (symbolFn !== null) {\n            return (symbolRef = symbolFn().then((module) => (symbolRef = module[symbol])));\n        }\n        else {\n            const symbol2 = getPlatform().importSymbol(_containerEl, chunk, symbol);\n            return (symbolRef = then(symbol2, (ref) => {\n                return (symbolRef = ref);\n            }));\n        }\n    };\n    const resolveLazy = (containerEl) => {\n        return symbolRef !== null ? symbolRef : resolve(containerEl);\n    };\n    const invokeFn = (currentCtx, beforeFn) => {\n        return ((...args) => {\n            const start = now();\n            const fn = resolveLazy();\n            return then(fn, (fn) => {\n                if (isFunction(fn)) {\n                    if (beforeFn && beforeFn() === false) {\n                        return;\n                    }\n                    const baseContext = createInvokationContext(currentCtx);\n                    const context = {\n                        ...baseContext,\n                        $qrl$: QRL,\n                    };\n                    emitUsedSymbol(symbol, context.$element$, start);\n                    return invoke(context, fn, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        });\n    };\n    const createInvokationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const invokeQRL = async function (...args) {\n        const fn = invokeFn();\n        const result = await fn(...args);\n        return result;\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    const QRL = invokeQRL;\n    const methods = {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        getCaptured: () => captureRef,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n        dev: null,\n    };\n    const qrl = Object.assign(invokeQRL, methods);\n    seal(qrl);\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\nexport const emitUsedSymbol = (symbol, element, reqTime) => {\n    emitEvent('qsymbol', {\n        symbol,\n        element,\n        reqTime,\n    });\n};\nexport const emitEvent = (eventName, detail) => {\n    if (!qTest && !isServer() && typeof document === 'object') {\n        document.dispatchEvent(new CustomEvent(eventName, {\n            bubbles: false,\n            detail,\n        }));\n    }\n};\nconst now = () => {\n    if (qTest || isServer()) {\n        return 0;\n    }\n    if (typeof performance === 'object') {\n        return performance.now();\n    }\n    return 0;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qRuntimeQrl } from '../util/qdev';\nimport { createQRL } from './qrl-class';\nlet runtimeSymbolId = 0;\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n *\n * import { createContextId, useContext, useContextProvider } from './use/use-context';\n * import { useRef } from './use/use-ref';\n * import { Resource, useResource$ } from './use/use-resource';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n */\n// </docs>\nexport const $ = (expression) => {\n    if (!qRuntimeQrl) {\n        throw new Error('Optimizer should replace all usages of $() with some special syntax. If you need to create a QRL manually, use inlinedQrl() instead.');\n    }\n    return createQRL(null, 's' + runtimeSymbolId++, expression, null, null, null, null);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../qrl/qrl.public';\nimport { OnRenderProp, QSlot } from '../util/markers';\nimport { jsx } from '../render/jsx/jsx-runtime';\nimport { SERIALIZABLE_STATE } from '../container/serializers';\nimport { qTest } from '../util/qdev';\nimport { Virtual } from '../render/jsx/utils.public';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { _IMMUTABLE } from '../state/constants';\n// const ELEMENTS_SKIP_KEY: JSXTagName[] = ['html', 'body', 'head'];\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (componentQrl) => {\n    // Return a QComponent Factory function.\n    function QwikComponent(props, key) {\n        assertQrl(componentQrl);\n        const hash = qTest ? 'sX' : componentQrl.$hash$.slice(0, 4);\n        const finalKey = hash + ':' + (key ? key : '');\n        return jsx(Virtual, {\n            [OnRenderProp]: componentQrl,\n            [QSlot]: props[QSlot],\n            [_IMMUTABLE]: props[_IMMUTABLE],\n            children: props.children,\n            props,\n        }, finalKey);\n    }\n    QwikComponent[SERIALIZABLE_STATE] = [componentQrl];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl($(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9jb21wb25lbnQvY29tcG9uZW50LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsQ0FBQyxFQUF3QixNQUFNLG1CQUFtQixDQUFDO0FBRTVELE9BQU8sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHdEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFtRWhELG9FQUFvRTtBQUVwRSwyQ0FBMkM7QUFDM0MseUNBQXlDO0FBQ3pDLHdDQUF3QztBQUN4Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWlERztBQUNILFVBQVU7QUFDVixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FDMUIsWUFBb0MsRUFDbEIsRUFBRTtJQUNwQix3Q0FBd0M7SUFDeEMsU0FBUyxhQUFhLENBQUMsS0FBeUIsRUFBRSxHQUFrQjtRQUNsRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM1RCxNQUFNLFFBQVEsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sR0FBRyxDQUNSLE9BQU8sRUFDUDtZQUNFLENBQUMsWUFBWSxDQUFDLEVBQUUsWUFBWTtZQUM1QixDQUFDLEtBQUssQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUM7WUFDckIsQ0FBQyxVQUFVLENBQUMsRUFBRyxLQUFhLENBQUMsVUFBVSxDQUFDO1lBQ3hDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtZQUN4QixLQUFLO1NBQ04sRUFDRCxRQUFRLENBQ0YsQ0FBQztJQUNYLENBQUM7SUFDQSxhQUFxQixDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1RCxPQUFPLGFBQWEsQ0FBQztBQUN2QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxTQUFjLEVBQStCLEVBQUU7SUFDN0UsT0FBTyxPQUFPLFNBQVMsSUFBSSxVQUFVLElBQUksU0FBUyxDQUFDLGtCQUFrQixDQUFDLEtBQUssU0FBUyxDQUFDO0FBQ3ZGLENBQUMsQ0FBQztBQUVGLDJDQUEyQztBQUMzQyx5Q0FBeUM7QUFDekMsd0NBQXdDO0FBQ3hDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaURHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFtQixPQUEwQixFQUFvQixFQUFFO0lBQzNGLE9BQU8sWUFBWSxDQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ICQsIFByb3BGbkludGVyZmFjZSwgUVJMIH0gZnJvbSAnLi4vcXJsL3FybC5wdWJsaWMnO1xuaW1wb3J0IHR5cGUgeyBKU1hOb2RlIH0gZnJvbSAnLi4vcmVuZGVyL2pzeC90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBPblJlbmRlclByb3AsIFFTbG90IH0gZnJvbSAnLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB0eXBlIHsgQ29tcG9uZW50QmFzZVByb3BzLCBKU1hDaGlsZHJlbiB9IGZyb20gJy4uL3JlbmRlci9qc3gvdHlwZXMvanN4LXF3aWstYXR0cmlidXRlcyc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vcmVuZGVyL2pzeC90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBqc3ggfSBmcm9tICcuLi9yZW5kZXIvanN4L2pzeC1ydW50aW1lJztcbmltcG9ydCB7IFNFUklBTElaQUJMRV9TVEFURSB9IGZyb20gJy4uL2NvbnRhaW5lci9zZXJpYWxpemVycyc7XG5pbXBvcnQgeyBxVGVzdCB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyBWaXJ0dWFsIH0gZnJvbSAnLi4vcmVuZGVyL2pzeC91dGlscy5wdWJsaWMnO1xuaW1wb3J0IHsgYXNzZXJ0UXJsIH0gZnJvbSAnLi4vcXJsL3FybC1jbGFzcyc7XG5pbXBvcnQgdHlwZSB7IFZhbHVlT3JQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBfSU1NVVRBQkxFIH0gZnJvbSAnLi4vc3RhdGUvY29uc3RhbnRzJztcblxuLyoqXG4gKiBJbmZlcnMgYFByb3BzYCBmcm9tIHRoZSBjb21wb25lbnQuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogZXhwb3J0IGNvbnN0IE90aGVyQ29tcG9uZW50ID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIHJldHVybiAkKCgpID0+IDxDb3VudGVyIHZhbHVlPXsxMDB9IC8+KTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgdHlwZSBQcm9wc09mPENPTVAgZXh0ZW5kcyBDb21wb25lbnQ8YW55Pj4gPSBDT01QIGV4dGVuZHMgQ29tcG9uZW50PGluZmVyIFBST1BTPlxuICA/IE5vbk51bGxhYmxlPFBST1BTPlxuICA6IG5ldmVyO1xuXG4vKipcbiAqIFR5cGUgcmVwcmVzZW50aW5nIHRoZSBRd2lrIGNvbXBvbmVudC5cbiAqXG4gKiBgQ29tcG9uZW50YCBpcyB0aGUgdHlwZSByZXR1cm5lZCBieSBpbnZva2luZyBgY29tcG9uZW50JGAuXG4gKlxuICogYGBgXG4gKiBpbnRlcmZhY2UgTXlDb21wb25lbnRQcm9wcyB7XG4gKiAgIHNvbWVQcm9wOiBzdHJpbmc7XG4gKiB9XG4gKiBjb25zdCBNeUNvbXBvbmVudDogQ29tcG9uZW50PE15Q29tcG9uZW50UHJvcHM+ID0gY29tcG9uZW50JCgocHJvcHM6IE15Q29tcG9uZW50UHJvcHMpID0+IHtcbiAqICAgcmV0dXJuIDxzcGFuPntwcm9wcy5zb21lUHJvcH08L3NwYW4+O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIENvbXBvbmVudDxQUk9QUyBleHRlbmRzIHt9PiA9IEZ1bmN0aW9uQ29tcG9uZW50PFB1YmxpY1Byb3BzPFBST1BTPj47XG5cbmV4cG9ydCB0eXBlIENvbXBvbmVudENoaWxkcmVuPFBST1BTIGV4dGVuZHMge30+ID0gUFJPUFMgZXh0ZW5kcyB7IGNoaWxkcmVuOiBhbnkgfVxuICA/IG5ldmVyXG4gIDogeyBjaGlsZHJlbj86IEpTWENoaWxkcmVuIH07XG4vKipcbiAqIEV4dGVuZHMgdGhlIGRlZmluZWQgY29tcG9uZW50IFBST1BTLCBhZGRpbmcgdGhlIGRlZmF1bHQgb25lcyAoY2hpbGRyZW4gYW5kIHE6c2xvdCkuLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBQdWJsaWNQcm9wczxQUk9QUyBleHRlbmRzIHt9PiA9IFRyYW5zZm9ybVByb3BzPFBST1BTPiAmXG4gIENvbXBvbmVudEJhc2VQcm9wcyAmXG4gIENvbXBvbmVudENoaWxkcmVuPFBST1BTPjtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGNvbXBvbmVudCBQUk9QUy5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgVHJhbnNmb3JtUHJvcHM8UFJPUFMgZXh0ZW5kcyB7fT4gPSB7XG4gIFtLIGluIGtleW9mIFBST1BTXTogVHJhbnNmb3JtUHJvcDxQUk9QU1tLXT47XG59O1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgVHJhbnNmb3JtUHJvcDxUPiA9IFQgZXh0ZW5kcyBQcm9wRm5JbnRlcmZhY2U8aW5mZXIgQVJHUywgaW5mZXIgUkVUPlxuICA/ICguLi5hcmdzOiBBUkdTKSA9PiBWYWx1ZU9yUHJvbWlzZTxSRVQ+XG4gIDogVDtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IHR5cGUgRXZlbnRIYW5kbGVyPFQ+ID0gUVJMPCh2YWx1ZTogVCkgPT4gYW55PjtcblxuLy8gY29uc3QgRUxFTUVOVFNfU0tJUF9LRVk6IEpTWFRhZ05hbWVbXSA9IFsnaHRtbCcsICdib2R5JywgJ2hlYWQnXTtcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjY29tcG9uZW50XCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI2NvbXBvbmVudCBpbnN0ZWFkKVxuLyoqXG4gKiBEZWNsYXJlIGEgUXdpayBjb21wb25lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgVUkuXG4gKlxuICogVXNlIGBjb21wb25lbnQkYCB0byBkZWNsYXJlIGEgUXdpayBjb21wb25lbnQuIEEgUXdpayBjb21wb25lbnQgaXMgYSBzcGVjaWFsIGtpbmQgb2YgY29tcG9uZW50XG4gKiB0aGF0IGFsbG93cyB0aGUgUXdpayBmcmFtZXdvcmsgdG8gbGF6eSBsb2FkIGFuZCBleGVjdXRlIHRoZSBjb21wb25lbnQgaW5kZXBlbmRlbnRseSBvZiBvdGhlclxuICogUXdpayBjb21wb25lbnRzIGFzIHdlbGwgYXMgbGF6eSBsb2FkIHRoZSBjb21wb25lbnQncyBsaWZlLWN5Y2xlIGhvb2tzIGFuZCBldmVudCBoYW5kbGVycy5cbiAqXG4gKiBTaWRlIG5vdGU6IFlvdSBjYW4gYWxzbyBkZWNsYXJlIHJlZ3VsYXIgKHN0YW5kYXJkIEpTWCkgY29tcG9uZW50cyB0aGF0IHdpbGwgaGF2ZSBzdGFuZGFyZFxuICogc3luY2hyb25vdXMgYmVoYXZpb3IuXG4gKlxuICogUXdpayBjb21wb25lbnQgaXMgYSBmYWNhZGUgdGhhdCBkZXNjcmliZXMgaG93IHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVzZWQgd2l0aG91dCBmb3JjaW5nIHRoZVxuICogaW1wbGVtZW50YXRpb24gb2YgdGhlIGNvbXBvbmVudCB0byBiZSBlYWdlcmx5IGxvYWRlZC4gQSBtaW5pbXVtIFF3aWsgZGVmaW5pdGlvbiBjb25zaXN0cyBvZjpcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIEFuIGV4YW1wbGUgc2hvd2luZyBob3cgdG8gY3JlYXRlIGEgY291bnRlciBjb21wb25lbnQ6XG4gKlxuICogYGBgdHN4XG4gKiBleHBvcnQgaW50ZXJmYWNlIENvdW50ZXJQcm9wcyB7XG4gKiAgIGluaXRpYWxWYWx1ZT86IG51bWJlcjtcbiAqICAgc3RlcD86IG51bWJlcjtcbiAqIH1cbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyID0gY29tcG9uZW50JCgocHJvcHM6IENvdW50ZXJQcm9wcykgPT4ge1xuICogICBjb25zdCBzdGF0ZSA9IHVzZVN0b3JlKHsgY291bnQ6IHByb3BzLmluaXRpYWxWYWx1ZSB8fCAwIH0pO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8c3Bhbj57c3RhdGUuY291bnR9PC9zcGFuPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrJD17KCkgPT4gKHN0YXRlLmNvdW50ICs9IHByb3BzLnN0ZXAgfHwgMSl9Pis8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogLSBgY29tcG9uZW50JGAgaXMgaG93IGEgY29tcG9uZW50IGdldHMgZGVjbGFyZWQuXG4gKiAtIGB7IHZhbHVlPzogbnVtYmVyOyBzdGVwPzogbnVtYmVyIH1gIGRlY2xhcmVzIHRoZSBwdWJsaWMgKHByb3BzKSBpbnRlcmZhY2Ugb2YgdGhlIGNvbXBvbmVudC5cbiAqIC0gYHsgY291bnQ6IG51bWJlciB9YCBkZWNsYXJlcyB0aGUgcHJpdmF0ZSAoc3RhdGUpIGludGVyZmFjZSBvZiB0aGUgY29tcG9uZW50LlxuICpcbiAqIFRoZSBhYm92ZSBjYW4gdGhlbiBiZSB1c2VkIGxpa2Ugc286XG4gKlxuICogYGBgdHN4XG4gKiBleHBvcnQgY29uc3QgT3RoZXJDb21wb25lbnQgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgcmV0dXJuIDxDb3VudGVyIGluaXRpYWxWYWx1ZT17MTAwfSAvPjtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogU2VlIGFsc286IGBjb21wb25lbnRgLCBgdXNlQ2xlYW51cGAsIGBvblJlc3VtZWAsIGBvblBhdXNlYCwgYHVzZU9uYCwgYHVzZU9uRG9jdW1lbnRgLFxuICogYHVzZU9uV2luZG93YCwgYHVzZVN0eWxlc2BcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRRcmwgPSA8UFJPUFMgZXh0ZW5kcyB7fT4oXG4gIGNvbXBvbmVudFFybDogUVJMPE9uUmVuZGVyRm48UFJPUFM+PlxuKTogQ29tcG9uZW50PFBST1BTPiA9PiB7XG4gIC8vIFJldHVybiBhIFFDb21wb25lbnQgRmFjdG9yeSBmdW5jdGlvbi5cbiAgZnVuY3Rpb24gUXdpa0NvbXBvbmVudChwcm9wczogUHVibGljUHJvcHM8UFJPUFM+LCBrZXk6IHN0cmluZyB8IG51bGwpOiBKU1hOb2RlIHtcbiAgICBhc3NlcnRRcmwoY29tcG9uZW50UXJsKTtcbiAgICBjb25zdCBoYXNoID0gcVRlc3QgPyAnc1gnIDogY29tcG9uZW50UXJsLiRoYXNoJC5zbGljZSgwLCA0KTtcbiAgICBjb25zdCBmaW5hbEtleSA9IGhhc2ggKyAnOicgKyAoa2V5ID8ga2V5IDogJycpO1xuICAgIHJldHVybiBqc3goXG4gICAgICBWaXJ0dWFsLFxuICAgICAge1xuICAgICAgICBbT25SZW5kZXJQcm9wXTogY29tcG9uZW50UXJsLFxuICAgICAgICBbUVNsb3RdOiBwcm9wc1tRU2xvdF0sXG4gICAgICAgIFtfSU1NVVRBQkxFXTogKHByb3BzIGFzIGFueSlbX0lNTVVUQUJMRV0sXG4gICAgICAgIGNoaWxkcmVuOiBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgcHJvcHMsXG4gICAgICB9LFxuICAgICAgZmluYWxLZXlcbiAgICApIGFzIGFueTtcbiAgfVxuICAoUXdpa0NvbXBvbmVudCBhcyBhbnkpW1NFUklBTElaQUJMRV9TVEFURV0gPSBbY29tcG9uZW50UXJsXTtcbiAgcmV0dXJuIFF3aWtDb21wb25lbnQ7XG59O1xuXG5leHBvcnQgY29uc3QgaXNRd2lrQ29tcG9uZW50ID0gKGNvbXBvbmVudDogYW55KTogY29tcG9uZW50IGlzIENvbXBvbmVudDxhbnk+ID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBjb21wb25lbnQgPT0gJ2Z1bmN0aW9uJyAmJiBjb21wb25lbnRbU0VSSUFMSVpBQkxFX1NUQVRFXSAhPT0gdW5kZWZpbmVkO1xufTtcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjY29tcG9uZW50XCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI2NvbXBvbmVudCBpbnN0ZWFkKVxuLyoqXG4gKiBEZWNsYXJlIGEgUXdpayBjb21wb25lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgVUkuXG4gKlxuICogVXNlIGBjb21wb25lbnQkYCB0byBkZWNsYXJlIGEgUXdpayBjb21wb25lbnQuIEEgUXdpayBjb21wb25lbnQgaXMgYSBzcGVjaWFsIGtpbmQgb2YgY29tcG9uZW50XG4gKiB0aGF0IGFsbG93cyB0aGUgUXdpayBmcmFtZXdvcmsgdG8gbGF6eSBsb2FkIGFuZCBleGVjdXRlIHRoZSBjb21wb25lbnQgaW5kZXBlbmRlbnRseSBvZiBvdGhlclxuICogUXdpayBjb21wb25lbnRzIGFzIHdlbGwgYXMgbGF6eSBsb2FkIHRoZSBjb21wb25lbnQncyBsaWZlLWN5Y2xlIGhvb2tzIGFuZCBldmVudCBoYW5kbGVycy5cbiAqXG4gKiBTaWRlIG5vdGU6IFlvdSBjYW4gYWxzbyBkZWNsYXJlIHJlZ3VsYXIgKHN0YW5kYXJkIEpTWCkgY29tcG9uZW50cyB0aGF0IHdpbGwgaGF2ZSBzdGFuZGFyZFxuICogc3luY2hyb25vdXMgYmVoYXZpb3IuXG4gKlxuICogUXdpayBjb21wb25lbnQgaXMgYSBmYWNhZGUgdGhhdCBkZXNjcmliZXMgaG93IHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVzZWQgd2l0aG91dCBmb3JjaW5nIHRoZVxuICogaW1wbGVtZW50YXRpb24gb2YgdGhlIGNvbXBvbmVudCB0byBiZSBlYWdlcmx5IGxvYWRlZC4gQSBtaW5pbXVtIFF3aWsgZGVmaW5pdGlvbiBjb25zaXN0cyBvZjpcbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIEFuIGV4YW1wbGUgc2hvd2luZyBob3cgdG8gY3JlYXRlIGEgY291bnRlciBjb21wb25lbnQ6XG4gKlxuICogYGBgdHN4XG4gKiBleHBvcnQgaW50ZXJmYWNlIENvdW50ZXJQcm9wcyB7XG4gKiAgIGluaXRpYWxWYWx1ZT86IG51bWJlcjtcbiAqICAgc3RlcD86IG51bWJlcjtcbiAqIH1cbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyID0gY29tcG9uZW50JCgocHJvcHM6IENvdW50ZXJQcm9wcykgPT4ge1xuICogICBjb25zdCBzdGF0ZSA9IHVzZVN0b3JlKHsgY291bnQ6IHByb3BzLmluaXRpYWxWYWx1ZSB8fCAwIH0pO1xuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8c3Bhbj57c3RhdGUuY291bnR9PC9zcGFuPlxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrJD17KCkgPT4gKHN0YXRlLmNvdW50ICs9IHByb3BzLnN0ZXAgfHwgMSl9Pis8L2J1dHRvbj5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogLSBgY29tcG9uZW50JGAgaXMgaG93IGEgY29tcG9uZW50IGdldHMgZGVjbGFyZWQuXG4gKiAtIGB7IHZhbHVlPzogbnVtYmVyOyBzdGVwPzogbnVtYmVyIH1gIGRlY2xhcmVzIHRoZSBwdWJsaWMgKHByb3BzKSBpbnRlcmZhY2Ugb2YgdGhlIGNvbXBvbmVudC5cbiAqIC0gYHsgY291bnQ6IG51bWJlciB9YCBkZWNsYXJlcyB0aGUgcHJpdmF0ZSAoc3RhdGUpIGludGVyZmFjZSBvZiB0aGUgY29tcG9uZW50LlxuICpcbiAqIFRoZSBhYm92ZSBjYW4gdGhlbiBiZSB1c2VkIGxpa2Ugc286XG4gKlxuICogYGBgdHN4XG4gKiBleHBvcnQgY29uc3QgT3RoZXJDb21wb25lbnQgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgcmV0dXJuIDxDb3VudGVyIGluaXRpYWxWYWx1ZT17MTAwfSAvPjtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogU2VlIGFsc286IGBjb21wb25lbnRgLCBgdXNlQ2xlYW51cGAsIGBvblJlc3VtZWAsIGBvblBhdXNlYCwgYHVzZU9uYCwgYHVzZU9uRG9jdW1lbnRgLFxuICogYHVzZU9uV2luZG93YCwgYHVzZVN0eWxlc2BcbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBjb21wb25lbnQkID0gPFBST1BTIGV4dGVuZHMge30+KG9uTW91bnQ6IE9uUmVuZGVyRm48UFJPUFM+KTogQ29tcG9uZW50PFBST1BTPiA9PiB7XG4gIHJldHVybiBjb21wb25lbnRRcmw8UFJPUFM+KCQob25Nb3VudCkpO1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIE9uUmVuZGVyRm48UFJPUFM+ID0gKHByb3BzOiBQUk9QUykgPT4gSlNYTm9kZTxhbnk+IHwgbnVsbDtcblxuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJGYWN0b3J5T3V0cHV0PFBST1BTPiB7XG4gIHJlbmRlclFSTDogUVJMPE9uUmVuZGVyRm48UFJPUFM+PjtcbiAgd2FpdE9uOiBhbnlbXTtcbn1cbiJdfQ==","/* eslint-disable */\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { JSXNodeImpl } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * @public\n */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : EMPTY_ARRAY,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    return new JSXNodeImpl(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFrQixFQUFFLEdBQVMsRUFBTyxFQUFFO0lBQ3BFLG9GQUFvRjtJQUNwRixJQUFJLENBQUMsR0FBRztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxDQUFDLENBQ2YsSUFBVSxFQUNWLEtBQW1CLEVBQ25CLEdBQUcsUUFBZTtJQUVsQixpREFBaUQ7SUFDakQsMENBQTBDO0lBQzFDLDZFQUE2RTtJQUM3RSwwREFBMEQ7SUFFMUQsTUFBTSxlQUFlLEdBQVE7UUFDM0IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDdEUsQ0FBQztJQUVGLElBQUksR0FBUSxDQUFDO0lBQ2IsSUFBSSxDQUFNLENBQUM7SUFFWCxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDZixJQUFJLENBQUMsSUFBSSxLQUFLO1lBQUUsR0FBRyxHQUFJLEtBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQ25ELGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlsL2ZseXdlaWdodCc7XG5pbXBvcnQgeyBKU1hOb2RlSW1wbCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuQXJyYXkgPSA8VD4oYXJyYXk6IChUIHwgVFtdKVtdLCBkc3Q/OiBUW10pOiBUW10gPT4ge1xuICAvLyBZZXMgdGhpcyBmdW5jdGlvbiBpcyBqdXN0IEFycmF5LmZsYXQsIGJ1dCB3ZSBuZWVkIHRvIHJ1biBvbiBvbGQgdmVyc2lvbnMgb2YgTm9kZS5cbiAgaWYgKCFkc3QpIGRzdCA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXkpIHtcbiAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgZmxhdHRlbkFycmF5KGl0ZW0sIGRzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoPFRZUEUgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxQUk9QUz4sIFBST1BTIGV4dGVuZHMge30gPSB7fT4oXG4gIHR5cGU6IFRZUEUsXG4gIHByb3BzOiBQUk9QUyB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBhbnlbXVxuKTogSlNYTm9kZTxUWVBFPiB7XG4gIC8vIFVzaW5nIGxlZ2FjeSBoKCkganN4IHRyYW5zZm9ybSBhbmQgbW9ycGhpbmcgaXRcbiAgLy8gc28gaXQgY2FuIHVzZSB0aGUgbW9kZXJuIHZkb20gc3RydWN0dXJlXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvYmxvZy8yMDIwLzA5LzIyL2ludHJvZHVjaW5nLXRoZS1uZXctanN4LXRyYW5zZm9ybS5odG1sXG4gIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy90c2NvbmZpZyNqc3hJbXBvcnRTb3VyY2VcblxuICBjb25zdCBub3JtYWxpemVkUHJvcHM6IGFueSA9IHtcbiAgICBjaGlsZHJlbjogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBmbGF0dGVuQXJyYXkoY2hpbGRyZW4pIDogRU1QVFlfQVJSQVksXG4gIH07XG5cbiAgbGV0IGtleTogYW55O1xuICBsZXQgaTogYW55O1xuXG4gIGZvciAoaSBpbiBwcm9wcykge1xuICAgIGlmIChpID09ICdrZXknKSBrZXkgPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gICAgZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IEpTWE5vZGVJbXBsKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5KTtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBoIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBOb2RlLCBkYXRhOiBhbnkpOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGNoaWxkcmVuOiBBcnJheTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGRhdGE6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChcbiAgICB0eXBlOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIGNoaWxkcmVuOiBBcnJheTxKU1hOb2RlPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPlxuICApOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHNlbDogYW55LCBkYXRhOiBhbnkgfCBudWxsLCBjaGlsZHJlbjogSlNYTm9kZTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuXG4gIGV4cG9ydCBuYW1lc3BhY2UgSlNYIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBRd2lrSlNYLkVsZW1lbnQge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBRd2lrSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNFbGVtZW50cyB7fVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHtcbiAgICAgIGNoaWxkcmVuPzogYW55O1xuICAgIH1cbiAgfVxufVxuIl19","import { QSlotS } from '../../util/markers';\nimport { Virtual } from './utils.public';\nimport { jsx } from './jsx-runtime';\n/**\n * Allows to project the children of the current component. <Slot/> can only be used within the context of a component defined with `component$`.\n *\n * @public\n */\nexport const Slot = (props) => {\n    const name = props.name ?? '';\n    return jsx(Virtual, {\n        [QSlotS]: '',\n    }, name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEM7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FFWixDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ2IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7SUFDOUIsT0FBTyxHQUFHLENBQ1IsT0FBTyxFQUNQO1FBQ0UsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO0tBQ2IsRUFDRCxJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFFTbG90UyB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBWaXJ0dWFsIH0gZnJvbSAnLi91dGlscy5wdWJsaWMnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnLi9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5cbi8qKlxuICogQWxsb3dzIHRvIHByb2plY3QgdGhlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC4gPFNsb3QvPiBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBvbmVudCBkZWZpbmVkIHdpdGggYGNvbXBvbmVudCRgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNsb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbmFtZT86IHN0cmluZztcbn0+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBwcm9wcy5uYW1lID8/ICcnO1xuICByZXR1cm4ganN4KFxuICAgIFZpcnR1YWwsXG4gICAge1xuICAgICAgW1FTbG90U106ICcnLFxuICAgIH0sXG4gICAgbmFtZVxuICApO1xufTtcbiJdfQ==","/**\n * QWIK_VERSION\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBSSxVQUFrQixDQUFDLFlBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFFXSUtfVkVSU0lPTlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IChnbG9iYWxUaGlzIGFzIGFueSkuUVdJS19WRVJTSU9OIGFzIHN0cmluZztcbiJdfQ==","import { isDocument } from '../../util/element';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { qDev } from '../../util/qdev';\nimport { version } from '../../version';\nimport { QContainerAttr } from '../../util/markers';\nimport { qError, QError_cannotRenderOverExistingContainer } from '../../error/error';\nimport { directSetAttribute } from '../fast-calls';\nimport { processData, wrapJSX } from './render-dom';\nimport { _getContainerState } from '../../container/container';\nimport { postRendering } from './notify-render';\nimport { createRenderContext } from '../execute-component';\nimport { executeDOMRender, printRenderStats } from './operations';\nimport { logError } from '../../util/log';\nimport { appendQwikDevTools } from '../../container/resume';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means\n * it always tries to reuse what is already in the DOM (rather then destroy and\n * recreate content.)\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When\n *     possible the rendering will try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @alpha\n */\nexport const render = async (parent, jsxNode, opts) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        throw qError(QError_cannotRenderOverExistingContainer, containerEl);\n    }\n    // if (qDev) {\n    //   if (parent.childNodes.length > 0) {\n    //     throw new Error('Container must be empty before mounting anything inside');\n    //   }\n    // }\n    injectQContainer(containerEl);\n    const containerState = _getContainerState(containerEl);\n    const serverData = opts?.serverData;\n    if (serverData) {\n        Object.assign(containerState.$serverData$, serverData);\n    }\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = renderRoot(containerEl, jsxNode, doc, containerState, containerEl);\n    const renderCtx = await containerState.$renderPromise$;\n    await postRendering(containerState, renderCtx);\n};\nconst renderRoot = async (parent, jsxNode, doc, containerState, containerEl) => {\n    const rCtx = createRenderContext(doc, containerState);\n    const staticCtx = rCtx.$static$;\n    try {\n        const processedNodes = await processData(jsxNode);\n        const rootJsx = domToVnode(parent);\n        await visitJsxNode(rCtx, rootJsx, wrapJSX(parent, processedNodes), 0);\n    }\n    catch (err) {\n        logError(err);\n    }\n    staticCtx.$operations$.push(...staticCtx.$postOperations$);\n    executeDOMRender(staticCtx);\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n        printRenderStats(staticCtx);\n    }\n    return rCtx;\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version ?? 'dev');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    directSetAttribute(containerEl, 'q:render', qDev ? 'dom-dev' : 'dom');\n};\n//# sourceMappingURL=data:application/json;base64,","import { QObjectRecursive } from '../state/constants';\nimport { getOrCreateProxy } from '../state/store';\nimport { isFunction } from '../util/types';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has\n * a unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ### Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useBrowserVisibleTask$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { get, set, iCtx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const value = isFunction(initialState) ? invoke(undefined, initialState) : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n        const recursive = opts?.deep ?? opts?.recursive ?? false;\n        const flags = recursive ? QObjectRecursive : 0;\n        const newStore = getOrCreateProxy(value, containerState, flags);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDcEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUF3QjVELDBDQUEwQztBQUMxQyx5Q0FBeUM7QUFDekMsdUNBQXVDO0FBQ3ZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMERHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixZQUFtQyxFQUNuQyxJQUFzQixFQUNmLEVBQUU7SUFDVCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxrQkFBa0IsRUFBUyxDQUFDO0lBQ3ZELElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtRQUNmLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFDRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztJQUN4RixJQUFJLElBQUksRUFBRSxRQUFRLEtBQUssS0FBSyxFQUFFO1FBQzVCLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNYLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7U0FBTTtRQUNMLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDO1FBQ2xFLE1BQU0sU0FBUyxHQUFHLElBQUksRUFBRSxJQUFJLElBQUksSUFBSSxFQUFFLFNBQVMsSUFBSSxLQUFLLENBQUM7UUFDekQsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxRQUFRLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRT2JqZWN0UmVjdXJzaXZlIH0gZnJvbSAnLi4vc3RhdGUvY29uc3RhbnRzJztcbmltcG9ydCB7IGdldE9yQ3JlYXRlUHJveHkgfSBmcm9tICcuLi9zdGF0ZS9zdG9yZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBpbnZva2UgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTdG9yZU9wdGlvbnMge1xuICAvKipcbiAgICogSWYgYHRydWVgIHRoZW4gYWxsIG5lc3RlZCBvYmplY3RzIGFuZCBhcnJheXMgd2lsbCBiZSB0cmFja2VkIGFzIHdlbGwuXG4gICAqIERlZmF1bHQgaXMgYGZhbHNlYC5cbiAgICovXG4gIGRlZXA/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBJZiBgZmFsc2VgIHRoZW4gdGhlIG9iamVjdCB3aWxsIG5vdCBiZSB0cmFja2VkIGZvciBjaGFuZ2VzLlxuICAgKiBEZWZhdWx0IGlzIGB0cnVlYC5cbiAgICovXG4gIHJlYWN0aXZlPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgLSB1c2UgYGRlZXBgIGluc3RlYWRcbiAgICovXG4gIHJlY3Vyc2l2ZT86IGJvb2xlYW47XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVN0b3JlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVN0b3JlIGluc3RlYWQpXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgUXdpayBjYW4gdHJhY2sgYWNyb3NzIHNlcmlhbGl6YXRpb25zLlxuICpcbiAqIFVzZSBgdXNlU3RvcmVgIHRvIGNyZWF0ZSBhIHN0YXRlIGZvciB5b3VyIGFwcGxpY2F0aW9uLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIGEgcHJveHkgdGhhdCBoYXNcbiAqIGEgdW5pcXVlIElELiBUaGUgSUQgb2YgdGhlIG9iamVjdCBpcyB1c2VkIGluIHRoZSBgUVJMYHMgdG8gcmVmZXIgdG8gdGhlIHN0b3JlLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogRXhhbXBsZSBzaG93aW5nIGhvdyBgdXNlU3RvcmVgIGlzIHVzZWQgaW4gQ291bnRlciBleGFtcGxlIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGNvdW50LlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgU3RvcmVzID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VDb3VudGVyKDEpO1xuICpcbiAqICAgLy8gUmVhY3Rpdml0eSBoYXBwZW5zIGV2ZW4gZm9yIG5lc3RlZCBvYmplY3RzIGFuZCBhcnJheXNcbiAqICAgY29uc3QgdXNlckRhdGEgPSB1c2VTdG9yZSh7XG4gKiAgICAgbmFtZTogJ01hbnUnLFxuICogICAgIGFkZHJlc3M6IHtcbiAqICAgICAgIGFkZHJlc3M6ICcnLFxuICogICAgICAgY2l0eTogJycsXG4gKiAgICAgfSxcbiAqICAgICBvcmdzOiBbXSxcbiAqICAgfSk7XG4gKlxuICogICAvLyB1c2VTdG9yZSgpIGNhbiBhbHNvIGFjY2VwdCBhIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgaW5pdGlhbCB2YWx1ZVxuICogICBjb25zdCBzdGF0ZSA9IHVzZVN0b3JlKCgpID0+IHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgdmFsdWU6IGV4cGVuc2l2ZUluaXRpYWxWYWx1ZSgpLFxuICogICAgIH07XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGRpdj5Db3VudGVyOiB7Y291bnRlci52YWx1ZX08L2Rpdj5cbiAqICAgICAgIDxDaGlsZCB1c2VyRGF0YT17dXNlckRhdGF9IHN0YXRlPXtzdGF0ZX0gLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGZ1bmN0aW9uIHVzZUNvdW50ZXIoc3RlcDogbnVtYmVyKSB7XG4gKiAgIC8vIE11bHRpcGxlIHN0b3JlcyBjYW4gYmUgY3JlYXRlZCBpbiBjdXN0b20gaG9va3MgZm9yIGNvbnZlbmllbmNlIGFuZCBjb21wb3NhYmlsaXR5XG4gKiAgIGNvbnN0IGNvdW50ZXJTdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICB2YWx1ZTogMCxcbiAqICAgfSk7XG4gKiAgIHVzZUJyb3dzZXJWaXNpYmxlVGFzayQoKCkgPT4ge1xuICogICAgIC8vIE9ubHkgcnVucyBpbiB0aGUgY2xpZW50XG4gKiAgICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gKiAgICAgICBjb3VudGVyU3RvcmUudmFsdWUgKz0gc3RlcDtcbiAqICAgICB9LCA1MDApO1xuICogICAgIHJldHVybiAoKSA9PiB7XG4gKiAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAqICAgICB9O1xuICogICB9KTtcbiAqICAgcmV0dXJuIGNvdW50ZXJTdG9yZTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gPFNUQVRFIGV4dGVuZHMgb2JqZWN0PihcbiAgaW5pdGlhbFN0YXRlOiBTVEFURSB8ICgoKSA9PiBTVEFURSksXG4gIG9wdHM/OiBVc2VTdG9yZU9wdGlvbnNcbik6IFNUQVRFID0+IHtcbiAgY29uc3QgeyBnZXQsIHNldCwgaUN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNUQVRFPigpO1xuICBpZiAoZ2V0ICE9IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0O1xuICB9XG4gIGNvbnN0IHZhbHVlID0gaXNGdW5jdGlvbihpbml0aWFsU3RhdGUpID8gaW52b2tlKHVuZGVmaW5lZCwgaW5pdGlhbFN0YXRlKSA6IGluaXRpYWxTdGF0ZTtcbiAgaWYgKG9wdHM/LnJlYWN0aXZlID09PSBmYWxzZSkge1xuICAgIHNldCh2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gaUN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICAgIGNvbnN0IHJlY3Vyc2l2ZSA9IG9wdHM/LmRlZXAgPz8gb3B0cz8ucmVjdXJzaXZlID8/IGZhbHNlO1xuICAgIGNvbnN0IGZsYWdzID0gcmVjdXJzaXZlID8gUU9iamVjdFJlY3Vyc2l2ZSA6IDA7XG4gICAgY29uc3QgbmV3U3RvcmUgPSBnZXRPckNyZWF0ZVByb3h5KHZhbHVlLCBjb250YWluZXJTdGF0ZSwgZmxhZ3MpO1xuICAgIHNldChuZXdTdG9yZSk7XG4gICAgcmV0dXJuIG5ld1N0b3JlO1xuICB9XG59O1xuIl19","import { useStore } from './use-store.public';\n// <docs markdown=\"../readme.md#useRef\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useRef instead)\n/**\n * It's a very thin wrapper around `useStore()`, including the proper type signature to be passed\n * to the `ref` property in JSX.\n *\n * ```tsx\n * export function useRef<T = Element>(current?: T): Ref<T> {\n *   return useStore({ current });\n * }\n * ```\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const input = useRef<HTMLInputElement>();\n *\n *   useBrowserVisibleTask$(({ track }) => {\n *     const el = track(() => input.current)!;\n *     el.focus();\n *   });\n *\n *   return (\n *     <div>\n *       <input type=\"text\" ref={input} />\n *     </div>\n *   );\n * });\n *\n * ```\n *\n * @deprecated Use `useSignal` instead.\n * @alpha\n */\n// </docs>\nexport const useRef = (current) => {\n    return useStore({ current });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFXOUMsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0NHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUE4QixPQUFXLEVBQVUsRUFBRTtJQUN6RSxPQUFPLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL3VzZS1zdG9yZS5wdWJsaWMnO1xuXG4vKipcbiAqIFR5cGUgb2YgdGhlIHZhbHVlIHJldHVybmVkIGJ5IGB1c2VSZWYoKWAuXG4gKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVmPFQgPSBFbGVtZW50PiB7XG4gIGN1cnJlbnQ6IFQgfCB1bmRlZmluZWQ7XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlZlwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZWYgaW5zdGVhZClcbi8qKlxuICogSXQncyBhIHZlcnkgdGhpbiB3cmFwcGVyIGFyb3VuZCBgdXNlU3RvcmUoKWAsIGluY2x1ZGluZyB0aGUgcHJvcGVyIHR5cGUgc2lnbmF0dXJlIHRvIGJlIHBhc3NlZFxuICogdG8gdGhlIGByZWZgIHByb3BlcnR5IGluIEpTWC5cbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiB1c2VSZWY8VCA9IEVsZW1lbnQ+KGN1cnJlbnQ/OiBUKTogUmVmPFQ+IHtcbiAqICAgcmV0dXJuIHVzZVN0b3JlKHsgY3VycmVudCB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBDbXAgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3QgaW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4oKTtcbiAqXG4gKiAgIHVzZUJyb3dzZXJWaXNpYmxlVGFzayQoKHsgdHJhY2sgfSkgPT4ge1xuICogICAgIGNvbnN0IGVsID0gdHJhY2soKCkgPT4gaW5wdXQuY3VycmVudCkhO1xuICogICAgIGVsLmZvY3VzKCk7XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPXtpbnB1dH0gLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgdXNlU2lnbmFsYCBpbnN0ZWFkLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VSZWYgPSA8VCBleHRlbmRzIEVsZW1lbnQgPSBFbGVtZW50PihjdXJyZW50PzogVCk6IFJlZjxUPiA9PiB7XG4gIHJldHVybiB1c2VTdG9yZSh7IGN1cnJlbnQgfSk7XG59O1xuIl19","import { getNextIndex } from '../render/execute-component';\nimport { hashCode } from '../util/hash_code';\nimport { useSequentialScope } from './use-sequential-scope';\n/**\n * @alpha\n */\nexport const useId = () => {\n    const { get, set, elCtx, iCtx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const containerBase = iCtx.$renderCtx$?.$static$?.$containerState$?.$base$ || '';\n    const base = containerBase ? hashCode(containerBase) : '';\n    const hash = elCtx.$componentQrl$?.getHash() || '';\n    const counter = getNextIndex(iCtx.$renderCtx$) || '';\n    const id = `${base}-${hash}-${counter}`; // If no base and no hash, then \"--#\"\n    return set(id);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWlkLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxHQUFXLEVBQUU7SUFDaEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLGtCQUFrQixFQUFVLENBQUM7SUFDL0QsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFO1FBQ2YsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUVELE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sSUFBSSxFQUFFLENBQUM7SUFDakYsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUMxRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNuRCxNQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyRCxNQUFNLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxJQUFJLElBQUksT0FBTyxFQUFFLENBQUMsQ0FBQyxxQ0FBcUM7SUFDOUUsT0FBTyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TmV4dEluZGV4IH0gZnJvbSAnLi4vcmVuZGVyL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB7IGhhc2hDb2RlIH0gZnJvbSAnLi4vdXRpbC9oYXNoX2NvZGUnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VJZCA9ICgpOiBzdHJpbmcgPT4ge1xuICBjb25zdCB7IGdldCwgc2V0LCBlbEN0eCwgaUN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPHN0cmluZz4oKTtcbiAgaWYgKGdldCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIGdldDtcbiAgfVxuXG4gIGNvbnN0IGNvbnRhaW5lckJhc2UgPSBpQ3R4LiRyZW5kZXJDdHgkPy4kc3RhdGljJD8uJGNvbnRhaW5lclN0YXRlJD8uJGJhc2UkIHx8ICcnO1xuICBjb25zdCBiYXNlID0gY29udGFpbmVyQmFzZSA/IGhhc2hDb2RlKGNvbnRhaW5lckJhc2UpIDogJyc7XG4gIGNvbnN0IGhhc2ggPSBlbEN0eC4kY29tcG9uZW50UXJsJD8uZ2V0SGFzaCgpIHx8ICcnO1xuICBjb25zdCBjb3VudGVyID0gZ2V0TmV4dEluZGV4KGlDdHguJHJlbmRlckN0eCQpIHx8ICcnO1xuICBjb25zdCBpZCA9IGAke2Jhc2V9LSR7aGFzaH0tJHtjb3VudGVyfWA7IC8vIElmIG5vIGJhc2UgYW5kIG5vIGhhc2gsIHRoZW4gXCItLSNcIlxuICByZXR1cm4gc2V0KGlkKTtcbn07XG4iXX0=","import { useInvokeContext } from './use-core';\n/**\n * @alpha\n */\nexport function useServerData(key, defaultValue) {\n    const ctx = useInvokeContext();\n    return ctx.$renderCtx$.$static$.$containerState$.$serverData$[key] ?? defaultValue;\n}\n/**\n * @alpha\n * @deprecated Please use `useServerData` instead.\n */\nexport const useUserContext = useServerData;\n/**\n * @alpha\n * @deprecated Please use `useServerData` instead.\n */\nexport const useEnvData = useServerData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBWTlDOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGFBQWEsQ0FBQyxHQUFXLEVBQUUsWUFBa0I7SUFDM0QsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFZLENBQUM7QUFDckYsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFFNUM7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVNlcnZlckRhdGE8VD4oa2V5OiBzdHJpbmcpOiBUIHwgdW5kZWZpbmVkO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VydmVyRGF0YTxULCBCID0gVD4oa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZTogQik6IFQgfCBCO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlU2VydmVyRGF0YShrZXk6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogYW55KSB7XG4gIGNvbnN0IGN0eCA9IHVzZUludm9rZUNvbnRleHQoKTtcbiAgcmV0dXJuIGN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkLiRzZXJ2ZXJEYXRhJFtrZXldID8/IGRlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBAYWxwaGFcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYHVzZVNlcnZlckRhdGFgIGluc3RlYWQuXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VVc2VyQ29udGV4dCA9IHVzZVNlcnZlckRhdGE7XG5cbi8qKlxuICogQGFscGhhXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGB1c2VTZXJ2ZXJEYXRhYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgdXNlRW52RGF0YSA9IHVzZVNlcnZlckRhdGE7XG4iXX0=","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from '../util/markers';\nimport { qDev } from '../util/qdev';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const STYLE_CACHE = new Map();\nexport const getScopedStyles = (css, scopeId) => {\n    if (qDev) {\n        return scopeStylesheet(css, scopeId);\n    }\n    let styleCss = STYLE_CACHE.get(scopeId);\n    if (!styleCss) {\n        STYLE_CACHE.set(scopeId, (styleCss = scopeStylesheet(css, scopeId)));\n    }\n    return styleCss;\n};\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        const chIdx = idx;\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(chIdx);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping())\n            return;\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':', 'before', 'after', 'first-letter', 'first-line'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NvcGVkLXN0eWxlc2hlZXQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvc3R5bGUvc2NvcGVkLXN0eWxlc2hlZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCO0FBQy9CLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFcEMsMEhBQTBIO0FBQzFILE1BQU0sS0FBSyxHQUFZLEtBQUssQ0FBQztBQUU3QixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVyQyxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFXLEVBQUUsT0FBZSxFQUFVLEVBQUU7SUFDdEUsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPLGVBQWUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDdEM7SUFDRCxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDYixXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0RTtJQUNELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLEdBQVcsRUFBRSxPQUFlLEVBQVUsRUFBRTtJQUN0RSxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLE1BQU0sR0FBRyxHQUFhLEVBQUUsQ0FBQztJQUN6QixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDM0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osSUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLElBQUksSUFBSSxHQUFXLElBQUksQ0FBQztJQUN4QixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDZixLQUFLLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ25ELE9BQU8sR0FBRyxHQUFHLEdBQUcsRUFBRTtRQUNoQixLQUFLLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQixLQUFLLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQzlELEtBQUssSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLEVBQUUsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0UsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2xCLElBQUksRUFBRSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvQixJQUFJLEVBQUUsS0FBSyxTQUFTLEVBQUU7WUFDcEIsR0FBRyxFQUFFLENBQUM7WUFDTixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO1NBQ2pDO1FBQ0QsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQixNQUFNLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDOUMsSUFDRSxZQUFZLEtBQUssTUFBTTtnQkFDdkIsWUFBWSxLQUFLLEdBQUc7Z0JBQ3BCLENBQUMsWUFBWSxLQUFLLEtBQUssSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQzNDLENBQUMsWUFBWSxLQUFLLFVBQVUsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDckQ7Z0JBQ0EsSUFDRSxRQUFRLEtBQUssRUFBRTtvQkFDZixRQUFRLEtBQUssR0FBRztvQkFDaEIsQ0FBQyxRQUFRLEtBQUssS0FBSyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbkMsQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUM7b0JBQ3RELENBQUMsUUFBUSxLQUFLLFVBQVUsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDN0M7b0JBQ0EsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQ3JDLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7NEJBQ2xCLGlFQUFpRTs0QkFDakUsRUFBRSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO3lCQUM5Qjt3QkFDRCxLQUFLOzRCQUNILE9BQU8sQ0FBQyxHQUFHLENBQ1QsT0FBTyxFQUNQLFlBQVksQ0FBQyxZQUFZLENBQUMsRUFDMUIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUN0QixZQUFZLENBQUMsT0FBTyxDQUFDLENBQ3RCLENBQUM7d0JBQ0osb0JBQW9CO3dCQUNwQixJQUFJLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxJQUFJLGlCQUFpQixFQUFFOzRCQUNwRCxJQUFJLE9BQU8sS0FBSyxpQkFBaUIsRUFBRTtnQ0FDakMsSUFBSSxJQUFJLEtBQUssWUFBWSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsRUFBRTtvQ0FDdEQsdURBQXVEO29DQUN2RCxJQUFJLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFO3dDQUN6QixPQUFPO3dDQUNQLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7cUNBQ2hCO3lDQUFNO3dDQUNMLGdCQUFnQjt3Q0FDaEIscUJBQXFCLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO3FDQUNoQztvQ0FDRCxPQUFPLEVBQUUsQ0FBQztpQ0FDWDtxQ0FBTTtvQ0FDTCxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLEVBQUU7d0NBQzFCLHVEQUF1RDt3Q0FDdkQsTUFBTSxNQUFNLEdBQ1YsUUFBUSxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dDQUNwRSxxQkFBcUIsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLENBQUM7cUNBQ3JDO2lDQUNGOzZCQUNGOzRCQUNELElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtnQ0FDMUIsd0VBQXdFO2dDQUN4RSwrREFBK0Q7Z0NBQy9ELCtEQUErRDtnQ0FDL0QsR0FBRyxFQUFFLENBQUM7Z0NBQ04sRUFBRSxHQUFHLE1BQU0sQ0FBQzs2QkFDYjs0QkFDRCxHQUFHO2dDQUNELElBQUksR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksSUFBSSxDQUFDO2dDQUMzQixJQUFJLElBQUksS0FBSyxZQUFZLEVBQUU7b0NBQ3pCLHVDQUF1QztvQ0FDdkMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztvQ0FDZixPQUFPLEVBQUUsQ0FBQztpQ0FDWDs2QkFDRixRQUFRLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFO3lCQUNuQzs2QkFBTTs0QkFDTCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNqQixJQUFJLElBQUksS0FBSyxZQUFZLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtnQ0FDN0MsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtnQ0FDcEMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLHVCQUF1Qjs2QkFDdkM7aUNBQU0sSUFBSSxPQUFPLEtBQUssYUFBYSxFQUFFO2dDQUNwQyx3RUFBd0U7Z0NBQ3hFLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDOzZCQUM5Qjs0QkFDRCxJQUFJLEdBQUcsT0FBTyxDQUFDOzRCQUNmLEVBQUUsSUFBSSxLQUFLLENBQUMsQ0FBQyxtRkFBbUY7eUJBQ2pHO3dCQUNELE1BQU0sQ0FBQyw4Q0FBOEM7cUJBQ3REO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELE1BQU0sR0FBRyxFQUFFLENBQUM7S0FDYjtJQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNYLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUVwQixTQUFTLEtBQUssQ0FBQyxHQUFXO1FBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN0QyxLQUFLLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sR0FBRyxHQUFHLENBQUM7SUFDaEIsQ0FBQztJQUNELFNBQVMscUJBQXFCLENBQUMsR0FBVztRQUN4QyxJQUFJLElBQUksS0FBSyxZQUFZLElBQUksc0JBQXNCLEVBQUU7WUFBRSxPQUFPO1FBRTlELEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELEtBQUssSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUNELFNBQVMsU0FBUyxDQUFDLEdBQWE7UUFDOUIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsNkNBQTZDO1FBQzdELElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDM0IsOEJBQThCO2dCQUM5QixJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtvQkFDcEMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2YsTUFBTTtpQkFDUDthQUNGO1NBQ0Y7UUFDRCxLQUFLLEVBQUUsS0FBSyxJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUUsT0FBTyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLEVBQUU7WUFDNUQsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBVyxDQUFDO1lBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3hFLFNBQVMsS0FBSyxDQUFDO2lCQUNoQjthQUNGO1lBQ0Qsb0JBQW9CO1lBQ3BCLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUMzQixPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUyxzQkFBc0I7UUFDN0IsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDcEYsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHLENBQUMsRUFBVSxFQUFXLEVBQUU7SUFDdEMsT0FBTyxDQUNMLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ3RCLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BCLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsSUFBSSxJQUFJO1FBQ1YsRUFBRSxLQUFLLFVBQVU7UUFDakIsRUFBRSxLQUFLLElBQUksQ0FDWixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEVBQVUsRUFBVyxFQUFFO0lBQ2hELE9BQU8sRUFBRSxLQUFLLEtBQUssSUFBSSxFQUFFLEtBQUssR0FBRyxJQUFJLEVBQUUsS0FBSyxZQUFZLElBQUksRUFBRSxLQUFLLElBQUksSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLElBQVksRUFBVyxFQUFFO0lBQ2xELE9BQU8sQ0FDTCxJQUFJLEtBQUssV0FBVyxJQUFJLElBQUksS0FBSyxjQUFjLElBQUksSUFBSSxLQUFLLFdBQVcsSUFBSSxJQUFJLEtBQUssWUFBWSxDQUNqRyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFVLEVBQVcsRUFBRTtJQUMzQyxPQUFPLEVBQUUsS0FBSyxLQUFLLElBQUksRUFBRSxLQUFLLEdBQUcsSUFBSSxFQUFFLEtBQUssT0FBTyxJQUFJLEVBQUUsS0FBSyxlQUFlLENBQUM7QUFDaEYsQ0FBQyxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUM1QyxPQUFPO1FBQ0wsTUFBTTtRQUNOLHdCQUF3QjtRQUN4QixjQUFjO1FBQ2QseUJBQXlCO1FBQ3pCLGFBQWE7UUFDYixjQUFjO1FBQ2QsZUFBZTtRQUNmLGNBQWM7UUFDZCxrQkFBa0I7UUFDbEIsWUFBWTtRQUNaLGdCQUFnQjtRQUNoQixhQUFhO1FBQ2IsU0FBUztRQUNULE1BQU07UUFDTixjQUFjO1FBQ2QsY0FBYztRQUNkLGtCQUFrQjtRQUNsQixNQUFNO1FBQ04sbUJBQW1CO0tBQ3BCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDVixDQUFDLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxDQUFDLEVBQVUsRUFBVSxFQUFFO0lBQzFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3BGLENBQUMsQ0FBQztBQUVGLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLDJCQUEyQjtBQUMzQyxNQUFNLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxDQUFDLDZCQUE2QjtBQUMvRCxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPO0FBQy9CLE1BQU0sdUJBQXVCLEdBQUcsQ0FBQyxDQUFDLENBQUMsMENBQTBDO0FBQzdFLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFrQjtBQUN6QyxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxrQ0FBa0M7QUFDMUQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMscUJBQXFCO0FBQzlDLE1BQU0sWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVk7QUFDcEMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQyxZQUFZO0FBQ3hDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLFlBQVk7QUFDbEMsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLENBQUMsc0NBQXNDO0FBQ2pFLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxDQUFDLHFDQUFxQztBQUM3RCxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDN0MsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMsaUNBQWlDO0FBQ2xELE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFDLFNBQVM7QUFDbEMsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLENBQUMsU0FBUztBQUNsQyxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxDQUFDLFlBQVk7QUFDekMsaUJBQWlCO0FBQ2pCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLGdCQUFnQjtBQUNqQyxNQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQyxDQUFDLDZCQUE2QjtBQUUzRCxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDZCxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDaEIsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQ3BCLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNyQixNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxzQkFBc0I7QUFDckMsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsc0JBQXNCO0FBQzFDLE1BQU0sZUFBZSxHQUFHLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQjtBQUNsRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDdkMsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLENBQUMscUJBQXFCO0FBQzlDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtBQUN0QyxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDOUMsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDbEQsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDbkQsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUMscUJBQXFCO0FBQ3RDLDBDQUEwQztBQUMxQyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDdEMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMscUJBQXFCO0FBQ3JDLE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtBQUMvQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDcEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMscUJBQXFCO0FBQ3BDLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtBQUN2QyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDM0MsOENBQThDO0FBQzlDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtBQUNwQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDbkMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMscUJBQXFCO0FBQ25DLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtBQUM5QyxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsQ0FBQyxxQkFBcUI7QUFDL0MsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsc0JBQXNCO0FBQzVDLE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxDQUFDLHFCQUFxQjtBQUM1QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxxQkFBcUI7QUFDN0MsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMscUJBQXFCO0FBQ25DLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsdUNBQXVDO0FBQ3ZDLHVDQUF1QztBQUN2Qyx1Q0FBdUM7QUFDdkMsdUNBQXVDO0FBQ3ZDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLHFCQUFxQjtBQUNwQyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsQ0FBQyxxQkFBcUI7QUFDN0MsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLENBQUMscUJBQXFCO0FBYTlDLE1BQU0sZ0JBQWdCLEdBQWUsWUFBWSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdkQsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQztJQUNqQyxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsWUFBWSxDQUFDO0lBQ2pDLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLENBQUM7Q0FDNUMsQ0FBQyxFQUFFLENBQUM7QUFFTCxNQUFNLGFBQWEsR0FBaUIsWUFBWSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDdEQ7UUFDRSxRQUFRO1FBQ1IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQztRQUN6QixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsWUFBWSxDQUFDO1FBQ2pDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFlBQVksQ0FBQztRQUNqRixDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQztRQUNwQztZQUNFLEdBQUc7WUFDSCxLQUFLO1lBQ0wsdUJBQXVCO1lBQ3ZCLEtBQUs7WUFDTCxjQUFjO1lBQ2QsS0FBSztZQUNMLE9BQU87WUFDUCxJQUFJO1lBQ0osU0FBUztZQUNULEtBQUs7U0FDTjtRQUNELENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxXQUFXLENBQUM7UUFDekIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixDQUFDO1FBQ3BDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQztRQUNsQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsc0JBQXNCLENBQUM7UUFDbkMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLGNBQWMsRUFBRSxVQUFVLENBQUM7UUFDckMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsVUFBVSxDQUFDO1FBQzNDLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxXQUFXLENBQUM7UUFDdEIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQztRQUN2QixDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLENBQUM7UUFDdkMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQztRQUN0QixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDO1FBQ3hCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQztRQUM5QixHQUFHLGdCQUFnQjtLQUNwQjtJQUNEO1FBQ0UsMEJBQTBCO1FBQzFCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQztLQUNwQztJQUNEO1FBQ0UsZ0JBQWdCO1FBQ2hCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQztLQUNwQztJQUNEO1FBQ0UsMkJBQTJCO1FBQzNCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQztRQUM3QixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLENBQUM7S0FDcEM7SUFDRDtRQUNFLGVBQWU7UUFDZixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQztRQUN6QyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLENBQUM7S0FDcEM7SUFDRDtRQUNFLGdCQUFnQjtRQUNoQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUM7UUFDN0IsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQztLQUN2QjtJQUNEO1FBQ0UsaUJBQWlCO1FBQ2pCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUM7S0FDdkI7SUFDRDtRQUNFLGdCQUFnQjtRQUNoQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsaUJBQWlCLENBQUM7UUFDdkMsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLFlBQVksQ0FBQztRQUNqQyxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsWUFBWSxDQUFDO0tBQ2xDO0lBQ0Q7UUFDRSxvQkFBb0I7UUFDcEIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDO1FBQzlCLEdBQUcsZ0JBQWdCO0tBQ3BCO0lBQ0Q7UUFDRSxjQUFjO1FBQ2QsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQztRQUN4QixHQUFHLGdCQUFnQjtLQUNwQjtJQUNEO1FBQ0Usa0JBQWtCO1FBQ2xCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUM7UUFDeEIsQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLHNCQUFzQixDQUFDO1FBQzNDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsUUFBUSxDQUFDO1FBQ3BDLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUM7UUFDdkIsR0FBRyxnQkFBZ0I7S0FDcEI7SUFDRDtRQUNFLGVBQWU7UUFDZixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDO1FBQ3ZCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUM7UUFDdEIsR0FBRyxnQkFBZ0I7S0FDcEI7SUFDRDtRQUNFLGVBQWU7UUFDZixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDO1FBQ3RCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUM7UUFDN0IsR0FBRyxnQkFBZ0I7S0FDcEI7SUFDRDtRQUNFLFFBQVE7UUFDUixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDO1FBQ3hCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUM7UUFDdkIsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUM7UUFDekMsR0FBRyxnQkFBZ0I7S0FDcEI7SUFDRDtRQUNFLGdCQUFnQjtRQUNoQixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDO0tBQzFCO0lBQ0Q7UUFDRSxnQkFBZ0I7UUFDaEIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQztLQUMxQjtJQUNEO1FBQ0Usb0JBQW9CO1FBQ3BCLENBQUMsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUM7S0FDNUI7Q0FDRixDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbmltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbi8vIE1ha2Ugc3VyZSB0aGlzIGlzIGFsd2F5cyBzZXQgdG8gYGZhbHNlYCBpbiBwcm9kdWN0aW9uLCBidXQgaXQgaXMgdXNlZnVsIHRvIHNldCBmb3IgYHRydWVgIGluIGRldmVsb3BtZW50IGZvciBkZWJ1Z2dpbmcuXG5jb25zdCBERUJVRzogYm9vbGVhbiA9IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgU1RZTEVfQ0FDSEUgPSBuZXcgTWFwKCk7XG5cbmV4cG9ydCBjb25zdCBnZXRTY29wZWRTdHlsZXMgPSAoY3NzOiBzdHJpbmcsIHNjb3BlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgcmV0dXJuIHNjb3BlU3R5bGVzaGVldChjc3MsIHNjb3BlSWQpO1xuICB9XG4gIGxldCBzdHlsZUNzcyA9IFNUWUxFX0NBQ0hFLmdldChzY29wZUlkKTtcbiAgaWYgKCFzdHlsZUNzcykge1xuICAgIFNUWUxFX0NBQ0hFLnNldChzY29wZUlkLCAoc3R5bGVDc3MgPSBzY29wZVN0eWxlc2hlZXQoY3NzLCBzY29wZUlkKSkpO1xuICB9XG4gIHJldHVybiBzdHlsZUNzcztcbn07XG5cbmV4cG9ydCBjb25zdCBzY29wZVN0eWxlc2hlZXQgPSAoY3NzOiBzdHJpbmcsIHNjb3BlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGVuZCA9IGNzcy5sZW5ndGg7XG4gIGNvbnN0IG91dDogc3RyaW5nW10gPSBbXTtcbiAgY29uc3Qgc3RhY2s6IG51bWJlcltdID0gW107XG4gIGxldCBpZHggPSAwO1xuICBsZXQgbGFzdElkeCA9IGlkeDtcbiAgbGV0IG1vZGU6IG51bWJlciA9IHJ1bGU7XG4gIGxldCBsYXN0Q2ggPSAwO1xuICBERUJVRyAmJiBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgd2hpbGUgKGlkeCA8IGVuZCkge1xuICAgIERFQlVHICYmIGNvbnNvbGUubG9nKGNzcyk7XG4gICAgREVCVUcgJiYgY29uc29sZS5sb2cobmV3IEFycmF5KGlkeCkuZmlsbCgnICcpLmpvaW4oJycpICsgJ14nKTtcbiAgICBERUJVRyAmJiBjb25zb2xlLmxvZygnTU9ERScsIC4uLnN0YWNrLm1hcChtb2RlVG9TdHJpbmcpLCBtb2RlVG9TdHJpbmcobW9kZSkpO1xuICAgIGNvbnN0IGNoSWR4ID0gaWR4O1xuICAgIGxldCBjaCA9IGNzcy5jaGFyQ29kZUF0KGlkeCsrKTtcbiAgICBpZiAoY2ggPT09IEJBQ0tTTEFTSCkge1xuICAgICAgaWR4Kys7XG4gICAgICBjaCA9IEE7IC8vIFByZXRlbmQgaXQncyBhIGxldHRlclxuICAgIH1cbiAgICBjb25zdCBhcmNzID0gU1RBVEVfTUFDSElORVttb2RlXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyY3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGFyYyA9IGFyY3NbaV07XG4gICAgICBjb25zdCBbZXhwZWN0TGFzdENoLCBleHBlY3RDaCwgbmV3TW9kZV0gPSBhcmM7XG4gICAgICBpZiAoXG4gICAgICAgIGV4cGVjdExhc3RDaCA9PT0gbGFzdENoIHx8XG4gICAgICAgIGV4cGVjdExhc3RDaCA9PT0gQU5ZIHx8XG4gICAgICAgIChleHBlY3RMYXN0Q2ggPT09IElERU5UICYmIGlzSWRlbnQobGFzdENoKSkgfHxcbiAgICAgICAgKGV4cGVjdExhc3RDaCA9PT0gV0hJVEVTUEFDRSAmJiBpc1doaXRlU3BhY2UobGFzdENoKSlcbiAgICAgICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZXhwZWN0Q2ggPT09IGNoIHx8XG4gICAgICAgICAgZXhwZWN0Q2ggPT09IEFOWSB8fFxuICAgICAgICAgIChleHBlY3RDaCA9PT0gSURFTlQgJiYgaXNJZGVudChjaCkpIHx8XG4gICAgICAgICAgKGV4cGVjdENoID09PSBOT1RfSURFTlQgJiYgIWlzSWRlbnQoY2gpICYmIGNoICE9PSBET1QpIHx8XG4gICAgICAgICAgKGV4cGVjdENoID09PSBXSElURVNQQUNFICYmIGlzV2hpdGVTcGFjZShjaCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGlmIChhcmMubGVuZ3RoID09IDMgfHwgbG9va0FoZWFkKGFyYykpIHtcbiAgICAgICAgICAgIGlmIChhcmMubGVuZ3RoID4gMykge1xuICAgICAgICAgICAgICAvLyBJZiBtYXRjaGVkIG9uIGxvb2tBaGVhZCB0aGFuIHdlIHdlIGhhdmUgdG8gdXBkYXRlIGN1cnJlbnQgYGNoYFxuICAgICAgICAgICAgICBjaCA9IGNzcy5jaGFyQ29kZUF0KGlkeCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgREVCVUcgJiZcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgJ01BVENIJyxcbiAgICAgICAgICAgICAgICBjaGFyVG9TdHJpbmcoZXhwZWN0TGFzdENoKSxcbiAgICAgICAgICAgICAgICBjaGFyVG9TdHJpbmcoZXhwZWN0Q2gpLFxuICAgICAgICAgICAgICAgIG1vZGVUb1N0cmluZyhuZXdNb2RlKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgLy8gV2UgZm91bmQgYSBtYXRjaCFcbiAgICAgICAgICAgIGlmIChuZXdNb2RlID09PSBFWElUIHx8IG5ld01vZGUgPT0gRVhJVF9JTlNFUlRfU0NPUEUpIHtcbiAgICAgICAgICAgICAgaWYgKG5ld01vZGUgPT09IEVYSVRfSU5TRVJUX1NDT1BFKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IHN0YXJTZWxlY3RvciAmJiAhc2hvdWxkTm90SW5zZXJ0U2NvcGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIGAqYCB3aXRoIHRoZSBzY29waW5nIGVsZW1lbnRDbGFzc0lkU2VsZWN0b3IuXG4gICAgICAgICAgICAgICAgICBpZiAoaXNDaGFpbmVkU2VsZWN0b3IoY2gpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICpmb29cbiAgICAgICAgICAgICAgICAgICAgZmx1c2goaWR4IC0gMik7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyAqIChieSBpdHNlbGYpXG4gICAgICAgICAgICAgICAgICAgIGluc2VydFNjb3BpbmdTZWxlY3RvcihpZHggLSAyKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGxhc3RJZHgrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKCFpc0NoYWluZWRTZWxlY3RvcihjaCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXJlIGV4aXRpbmcgb25lIG9mIHRoZSBTZWxlY3RvciBzbyB3ZSBtYXkgbmVlZCB0b1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPVxuICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdENoID09IE5PVF9JREVOVCA/IDEgOiBleHBlY3RDaCA9PSBDTE9TRV9QQVJFTlRIRVNJUyA/IDIgOiAwO1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRTY29waW5nU2VsZWN0b3IoaWR4IC0gb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGV4cGVjdENoID09PSBOT1RfSURFTlQpIHtcbiAgICAgICAgICAgICAgICAvLyBOT1RfSURFTlQgaXMgbm90IGEgcmVhbCBjaGFyYWN0ZXIgbW9yZSBsaWtlIGxhY2sgb2Ygd2hhdCB3ZSBleHBlY3RlZC5cbiAgICAgICAgICAgICAgICAvLyBpZiBwc2V1ZG9HbG9iYWwgd2UgbmVlZCB0byBnaXZlIGl0IGEgY2hhbmNlIHRvIGV4aXQgYXMgd2VsbC5cbiAgICAgICAgICAgICAgICAvLyBGb3IgdGhpcyByZWFzb24gd2UgbmVlZCB0byByZXBhcnNlIHRoZSBsYXN0IGNoYXJhY3RlciBhZ2Fpbi5cbiAgICAgICAgICAgICAgICBpZHgtLTtcbiAgICAgICAgICAgICAgICBjaCA9IGxhc3RDaDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgbW9kZSA9IHN0YWNrLnBvcCgpIHx8IHJ1bGU7XG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09IHBzZXVkb0dsb2JhbCkge1xuICAgICAgICAgICAgICAgICAgLy8gU2tpcCBvdmVyIHRoZSBgKWAgaW4gYDpnbG9iYWwoLi4uKWAuXG4gICAgICAgICAgICAgICAgICBmbHVzaChpZHggLSAxKTtcbiAgICAgICAgICAgICAgICAgIGxhc3RJZHgrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGlzU2VsZkNsb3NpbmdSdWxlKG1vZGUpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0YWNrLnB1c2gobW9kZSk7XG4gICAgICAgICAgICAgIGlmIChtb2RlID09PSBwc2V1ZG9HbG9iYWwgJiYgbmV3TW9kZSA9PT0gcnVsZSkge1xuICAgICAgICAgICAgICAgIGZsdXNoKGlkeCAtIDgpOyAvLyBgOmdsb2JhbChgLmxlbmd0aFxuICAgICAgICAgICAgICAgIGxhc3RJZHggPSBpZHg7IC8vIHNraXAgb3ZlciBcIjpnbG9iYWwoXCJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChuZXdNb2RlID09PSBwc2V1ZG9FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIGVudGVyaW5nIHBzZXVkb0VsZW1lbnQgYDo6Zm9vYDsgaW5zZXJ0IHNjb3BpbmcgaW4gZnJvbnQgb2YgaXQuXG4gICAgICAgICAgICAgICAgaW5zZXJ0U2NvcGluZ1NlbGVjdG9yKGNoSWR4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBtb2RlID0gbmV3TW9kZTtcbiAgICAgICAgICAgICAgY2ggPT0gU1BBQ0U7IC8vIFByZXRlbmQgbm90IGFuIGlkZW50aWZpZXIgc28gdGhhdCB3ZSBkb24ndCBmbHVzaCBhZ2FpbiBvbiBlbGVtZW50Q2xhc3NJZFNlbGVjdG9yXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhazsgLy8gZ2V0IG91dCBvZiB0aGUgZm9yIGxvb3AgYXMgd2UgZm91bmQgYSBtYXRjaFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsYXN0Q2ggPSBjaDtcbiAgfVxuICBmbHVzaChpZHgpO1xuICByZXR1cm4gb3V0LmpvaW4oJycpO1xuXG4gIGZ1bmN0aW9uIGZsdXNoKGlkeDogbnVtYmVyKSB7XG4gICAgb3V0LnB1c2goY3NzLnN1YnN0cmluZyhsYXN0SWR4LCBpZHgpKTtcbiAgICBERUJVRyAmJiBjb25zb2xlLmxvZygnRkxVU0gnLCBvdXQuam9pbignJykpO1xuICAgIGxhc3RJZHggPSBpZHg7XG4gIH1cbiAgZnVuY3Rpb24gaW5zZXJ0U2NvcGluZ1NlbGVjdG9yKGlkeDogbnVtYmVyKSB7XG4gICAgaWYgKG1vZGUgPT09IHBzZXVkb0dsb2JhbCB8fCBzaG91bGROb3RJbnNlcnRTY29waW5nKCkpIHJldHVybjtcblxuICAgIGZsdXNoKGlkeCk7XG4gICAgb3V0LnB1c2goJy4nLCBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50LCBzY29wZUlkKTtcbiAgICBERUJVRyAmJiBjb25zb2xlLmxvZygnSU5TRVJUJywgb3V0LmpvaW4oJycpKTtcbiAgfVxuICBmdW5jdGlvbiBsb29rQWhlYWQoYXJjOiBTdGF0ZUFyYyk6IGJvb2xlYW4ge1xuICAgIGxldCBwcmVmaXggPSAwOyAvLyBJZ25vcmUgdmVuZG9yIHByZWZpeGVzIHN1Y2ggYXMgYC13ZWJraXQtYC5cbiAgICBpZiAoY3NzLmNoYXJDb2RlQXQoaWR4KSA9PT0gREFTSCkge1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCAxMDsgaSsrKSB7XG4gICAgICAgIC8vIGdpdmUgdXAgYWZ0ZXIgMTAgY2hhcmFjdGVyc1xuICAgICAgICBpZiAoY3NzLmNoYXJDb2RlQXQoaWR4ICsgaSkgPT09IERBU0gpIHtcbiAgICAgICAgICBwcmVmaXggPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB3b3JkczogZm9yIChsZXQgYXJjSW5keCA9IDM7IGFyY0luZHggPCBhcmMubGVuZ3RoOyBhcmNJbmR4KyspIHtcbiAgICAgIGNvbnN0IHR4dCA9IGFyY1thcmNJbmR4XSBhcyBzdHJpbmc7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoKGNzcy5jaGFyQ29kZUF0KGlkeCArIGkgKyBwcmVmaXgpIHwgTE9XRVJDQVNFKSAhPT0gdHh0LmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgICAgICBjb250aW51ZSB3b3JkcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gd2UgZm91bmQgYSBtYXRjaDtcbiAgICAgIGlkeCArPSB0eHQubGVuZ3RoICsgcHJlZml4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZE5vdEluc2VydFNjb3BpbmcoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN0YWNrLmluZGV4T2YocHNldWRvR2xvYmFsKSAhPT0gLTEgfHwgc3RhY2suaW5kZXhPZihhdFJ1bGVTZWxlY3RvcikgIT09IC0xO1xuICB9XG59O1xuXG5jb25zdCBpc0lkZW50ID0gKGNoOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIChcbiAgICAoY2ggPj0gXzAgJiYgY2ggPD0gXzkpIHx8XG4gICAgKGNoID49IEEgJiYgY2ggPD0gWikgfHxcbiAgICAoY2ggPj0gYSAmJiBjaCA8PSB6KSB8fFxuICAgIGNoID49IDB4ODAgfHxcbiAgICBjaCA9PT0gVU5ERVJTQ09SRSB8fFxuICAgIGNoID09PSBEQVNIXG4gICk7XG59O1xuXG5jb25zdCBpc0NoYWluZWRTZWxlY3RvciA9IChjaDogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBjaCA9PT0gQ09MT04gfHwgY2ggPT09IERPVCB8fCBjaCA9PT0gT1BFTl9CUkFDS0VUIHx8IGNoID09PSBIQVNIIHx8IGlzSWRlbnQoY2gpO1xufTtcblxuY29uc3QgaXNTZWxmQ2xvc2luZ1J1bGUgPSAobW9kZTogbnVtYmVyKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiAoXG4gICAgbW9kZSA9PT0gYXRSdWxlQmxvY2sgfHwgbW9kZSA9PT0gYXRSdWxlU2VsZWN0b3IgfHwgbW9kZSA9PT0gYXRSdWxlSW5lcnQgfHwgbW9kZSA9PT0gcHNldWRvR2xvYmFsXG4gICk7XG59O1xuXG5jb25zdCBpc1doaXRlU3BhY2UgPSAoY2g6IG51bWJlcik6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gY2ggPT09IFNQQUNFIHx8IGNoID09PSBUQUIgfHwgY2ggPT09IE5FV0xJTkUgfHwgY2ggPT09IENBUlJJQUdFX1JFVFVSTjtcbn07XG5cbmNvbnN0IG1vZGVUb1N0cmluZyA9IChtb2RlOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gW1xuICAgICdydWxlJyxcbiAgICAnZWxlbWVudENsYXNzSWRTZWxlY3RvcicsXG4gICAgJ3N0YXJTZWxlY3RvcicsXG4gICAgJ3BzZXVkb0NsYXNzV2l0aFNlbGVjdG9yJyxcbiAgICAncHNldWRvQ2xhc3MnLFxuICAgICdwc2V1ZG9HbG9iYWwnLFxuICAgICdwc2V1ZG9FbGVtZW50JyxcbiAgICAnYXR0clNlbGVjdG9yJyxcbiAgICAnaW5lcnRQYXJlbnRoZXNpcycsXG4gICAgJ2luZXJ0QmxvY2snLFxuICAgICdhdFJ1bGVTZWxlY3RvcicsXG4gICAgJ2F0UnVsZUJsb2NrJyxcbiAgICAnYXRJbmVydCcsXG4gICAgJ2JvZHknLFxuICAgICdzdHJpbmdTaW5nbGUnLFxuICAgICdzdHJpbmdEb3VibGUnLFxuICAgICdjb21tZW50TXVsdGlsaW5lJyxcbiAgICAnRVhJVCcsXG4gICAgJ0VYSVRfSU5TRVJUX1NDT1BFJyxcbiAgXVttb2RlXTtcbn07XG5cbmNvbnN0IGNoYXJUb1N0cmluZyA9IChjaDogbnVtYmVyKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIFsnQU5ZJywgJ0lERU5UJywgJ05PVF9JREVOVCcsICdXSElURVNQQUNFJ11bY2hdIHx8IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xufTtcblxuY29uc3QgcnVsZSA9IDA7IC8vIHRvcCBsZXZlbCBpbml0aWFsIHNwYWNlLlxuY29uc3QgZWxlbWVudENsYXNzSWRTZWxlY3RvciA9IDE7IC8vIC5lbGVtZW50Q2xhc3NJZFNlbGVjdG9yIHt9XG5jb25zdCBzdGFyU2VsZWN0b3IgPSAyOyAvLyAqIHt9XG5jb25zdCBwc2V1ZG9DbGFzc1dpdGhTZWxlY3RvciA9IDM7IC8vIDpwc2V1ZG9DbGFzcyhlbGVtZW50Q2xhc3NJZFNlbGVjdG9yKSB7fVxuY29uc3QgcHNldWRvQ2xhc3MgPSA0OyAvLyA6cHNldWRvQ2xhc3Mge31cbmNvbnN0IHBzZXVkb0dsb2JhbCA9IDU7IC8vIDpnbG9iYWwoZWxlbWVudENsYXNzSWRTZWxlY3RvcilcbmNvbnN0IHBzZXVkb0VsZW1lbnQgPSA2OyAvLyA6OnBzZXVkb0VsZW1lbnQge31cbmNvbnN0IGF0dHJTZWxlY3RvciA9IDc7IC8vIFthdHRyXSB7fVxuY29uc3QgaW5lcnRQYXJlbnRoZXNpcyA9IDg7IC8vIChpZ25vcmVkKVxuY29uc3QgaW5lcnRCbG9jayA9IDk7IC8vIHtpZ25vcmVkfVxuY29uc3QgYXRSdWxlU2VsZWN0b3IgPSAxMDsgLy8gQGtleWZyYW1lIGVsZW1lbnRDbGFzc0lkU2VsZWN0b3Ige31cbmNvbnN0IGF0UnVsZUJsb2NrID0gMTE7IC8vIEBtZWRpYSB7ZWxlbWVudENsYXNzSWRTZWxlY3RvciB7fX1cbmNvbnN0IGF0UnVsZUluZXJ0ID0gMTI7IC8vIEBhdFJ1bGUgc29tZXRoaW5nO1xuY29uc3QgYm9keSA9IDEzOyAvLyAuZWxlbWVudENsYXNzSWRTZWxlY3RvciB7Ym9keX1cbmNvbnN0IHN0cmluZ1NpbmdsZSA9IDE0OyAvLyAndGV4dCdcbmNvbnN0IHN0cmluZ0RvdWJsZSA9IDE1OyAvLyAndGV4dCdcbmNvbnN0IGNvbW1lbnRNdWx0aWxpbmUgPSAxNjsgLy8gLyogLi4uICovXG4vLyBOT1QgUkVBTCBNT0RFU1xuY29uc3QgRVhJVCA9IDE3OyAvLyBFeGl0IHRoZSBtb2RlXG5jb25zdCBFWElUX0lOU0VSVF9TQ09QRSA9IDE4OyAvLyBFeGl0IHRoZSBtb2RlIElOU0VSVCBTQ09QRVxuXG5jb25zdCBBTlkgPSAwO1xuY29uc3QgSURFTlQgPSAxO1xuY29uc3QgTk9UX0lERU5UID0gMjtcbmNvbnN0IFdISVRFU1BBQ0UgPSAzO1xuY29uc3QgVEFCID0gOTsgLy8gYFxcdGAuY2hhckNvZGVBdCgwKTtcbmNvbnN0IE5FV0xJTkUgPSAxMDsgLy8gYFxcbmAuY2hhckNvZGVBdCgwKTtcbmNvbnN0IENBUlJJQUdFX1JFVFVSTiA9IDEzOyAvLyBgXFxyYC5jaGFyQ29kZUF0KDApO1xuY29uc3QgU1BBQ0UgPSAzMjsgLy8gYCBgLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBET1VCTEVfUVVPVEUgPSAzNDsgLy8gYFwiYC5jaGFyQ29kZUF0KDApO1xuY29uc3QgSEFTSCA9IDM1OyAvLyBgI2AuY2hhckNvZGVBdCgwKTtcbmNvbnN0IFNJTkdMRV9RVU9URSA9IDM5OyAvLyBgJ2AuY2hhckNvZGVBdCgwKTtcbmNvbnN0IE9QRU5fUEFSRU5USEVTSVMgPSA0MDsgLy8gYChgLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBDTE9TRV9QQVJFTlRIRVNJUyA9IDQxOyAvLyBgKWAuY2hhckNvZGVBdCgwKTtcbmNvbnN0IFNUQVIgPSA0MjsgLy8gYCpgLmNoYXJDb2RlQXQoMCk7XG4vLyBjb25zdCBDT01NQSA9IDQ0OyAvLyBgLGAuY2hhckNvZGVBdCgwKTtcbmNvbnN0IERBU0ggPSA0NTsgLy8gYC1gLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBET1QgPSA0NjsgLy8gYC5gLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBGT1JXQVJEX1NMQVNIID0gNDc7IC8vIGAvYC5jaGFyQ29kZUF0KDApO1xuY29uc3QgXzAgPSA0ODsgLy8gYDBgLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBfOSA9IDU3OyAvLyBgOWAuY2hhckNvZGVBdCgwKTtcbmNvbnN0IENPTE9OID0gNTg7IC8vIGA6YC5jaGFyQ29kZUF0KDApO1xuY29uc3QgU0VNSUNPTE9OID0gNTk7IC8vIGA7YC5jaGFyQ29kZUF0KDApO1xuLy8gY29uc3QgTEVTU19USEFOID0gNjA7IC8vIGA8YC5jaGFyQ29kZUF0KDApO1xuY29uc3QgQVQgPSA2NDsgLy8gYEBgLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBBID0gNjU7IC8vIGBBYC5jaGFyQ29kZUF0KDApO1xuY29uc3QgWiA9IDkwOyAvLyBgWmAuY2hhckNvZGVBdCgwKTtcbmNvbnN0IE9QRU5fQlJBQ0tFVCA9IDkxOyAvLyBgW2AuY2hhckNvZGVBdCgwKTtcbmNvbnN0IENMT1NFX0JSQUNLRVQgPSA5MzsgLy8gYF1gLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBCQUNLU0xBU0ggPSA5MjsgLy8gYFxcXFxgLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBVTkRFUlNDT1JFID0gOTU7IC8vIGBfYC5jaGFyQ29kZUF0KDApO1xuY29uc3QgTE9XRVJDQVNFID0gMHgyMDsgLy8gYGFgLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBhID0gOTc7IC8vIGBhYC5jaGFyQ29kZUF0KDApO1xuLy8gY29uc3QgZCA9IDEwMDsgLy8gYGRgLmNoYXJDb2RlQXQoMCk7XG4vLyBjb25zdCBnID0gMTAzOyAvLyAnZycuY2hhckNvZGVBdCgwKTtcbi8vIGNvbnN0IGggPSAxMDQ7IC8vIGBoYC5jaGFyQ29kZUF0KDApO1xuLy8gY29uc3QgaSA9IDEwNTsgLy8gYGlgLmNoYXJDb2RlQXQoMCk7XG4vLyBjb25zdCBsID0gMTA4OyAvLyBgbGAuY2hhckNvZGVBdCgwKTtcbi8vIGNvbnN0IHQgPSAxMTY7IC8vIGB0YC5jaGFyQ29kZUF0KDApO1xuY29uc3QgeiA9IDEyMjsgLy8gYHpgLmNoYXJDb2RlQXQoMCk7XG5jb25zdCBPUEVOX0JSQUNFID0gMTIzOyAvLyBge2AuY2hhckNvZGVBdCgwKTtcbmNvbnN0IENMT1NFX0JSQUNFID0gMTI1OyAvLyBgfWAuY2hhckNvZGVBdCgwKTtcblxudHlwZSBTdGF0ZUFyYyA9IFtcbiAgLy8vIElmIHRoZSBsYXN0IGNoYXJhY3RlciBpcyB0aGlzOlxuICBudW1iZXIsXG4gIC8vLyBJZiB0aGUgY3VycmVudCBjaGFyYWN0ZXIgaXMgdGhpczpcbiAgbnVtYmVyLFxuICAvLy8gVGhlbiB0cmFuc2l0aW9uIHRvIHRoaXMgc3RhdGU6XG4gIG51bWJlcixcbiAgLy8vIE9wdGlvbmFsIGxvb2sgYWhlYWQgc3RyaW5nc1xuICAuLi5zdHJpbmdbXVxuXTtcblxuY29uc3QgU1RSSU5HU19DT01NRU5UUzogU3RhdGVBcmNbXSA9IC8qX19QVVJFX18qLyAoKCkgPT4gW1xuICBbQU5ZLCBTSU5HTEVfUVVPVEUsIHN0cmluZ1NpbmdsZV0sXG4gIFtBTlksIERPVUJMRV9RVU9URSwgc3RyaW5nRG91YmxlXSxcbiAgW0FOWSwgRk9SV0FSRF9TTEFTSCwgY29tbWVudE11bHRpbGluZSwgJyonXSxcbl0pKCk7XG5cbmNvbnN0IFNUQVRFX01BQ0hJTkU6IFN0YXRlQXJjW11bXSA9IC8qX19QVVJFX18qLyAoKCkgPT4gW1xuICBbXG4gICAgLy8vIHJ1bGVcbiAgICBbQU5ZLCBTVEFSLCBzdGFyU2VsZWN0b3JdLFxuICAgIFtBTlksIE9QRU5fQlJBQ0tFVCwgYXR0clNlbGVjdG9yXSxcbiAgICBbQU5ZLCBDT0xPTiwgcHNldWRvRWxlbWVudCwgJzonLCAnYmVmb3JlJywgJ2FmdGVyJywgJ2ZpcnN0LWxldHRlcicsICdmaXJzdC1saW5lJ10sXG4gICAgW0FOWSwgQ09MT04sIHBzZXVkb0dsb2JhbCwgJ2dsb2JhbCddLFxuICAgIFtcbiAgICAgIEFOWSxcbiAgICAgIENPTE9OLFxuICAgICAgcHNldWRvQ2xhc3NXaXRoU2VsZWN0b3IsXG4gICAgICAnaGFzJyxcbiAgICAgICdob3N0LWNvbnRleHQnLFxuICAgICAgJ25vdCcsXG4gICAgICAnd2hlcmUnLFxuICAgICAgJ2lzJyxcbiAgICAgICdtYXRjaGVzJyxcbiAgICAgICdhbnknLFxuICAgIF0sXG4gICAgW0FOWSwgQ09MT04sIHBzZXVkb0NsYXNzXSxcbiAgICBbQU5ZLCBJREVOVCwgZWxlbWVudENsYXNzSWRTZWxlY3Rvcl0sXG4gICAgW0FOWSwgRE9ULCBlbGVtZW50Q2xhc3NJZFNlbGVjdG9yXSxcbiAgICBbQU5ZLCBIQVNILCBlbGVtZW50Q2xhc3NJZFNlbGVjdG9yXSxcbiAgICBbQU5ZLCBBVCwgYXRSdWxlU2VsZWN0b3IsICdrZXlmcmFtZSddLFxuICAgIFtBTlksIEFULCBhdFJ1bGVCbG9jaywgJ21lZGlhJywgJ3N1cHBvcnRzJ10sXG4gICAgW0FOWSwgQVQsIGF0UnVsZUluZXJ0XSxcbiAgICBbQU5ZLCBPUEVOX0JSQUNFLCBib2R5XSxcbiAgICBbRk9SV0FSRF9TTEFTSCwgU1RBUiwgY29tbWVudE11bHRpbGluZV0sXG4gICAgW0FOWSwgU0VNSUNPTE9OLCBFWElUXSxcbiAgICBbQU5ZLCBDTE9TRV9CUkFDRSwgRVhJVF0sXG4gICAgW0FOWSwgQ0xPU0VfUEFSRU5USEVTSVMsIEVYSVRdLFxuICAgIC4uLlNUUklOR1NfQ09NTUVOVFMsXG4gIF0sXG4gIFtcbiAgICAvLy8gZWxlbWVudENsYXNzSWRTZWxlY3RvclxuICAgIFtBTlksIE5PVF9JREVOVCwgRVhJVF9JTlNFUlRfU0NPUEVdLFxuICBdLFxuICBbXG4gICAgLy8vIHN0YXJTZWxlY3RvclxuICAgIFtBTlksIE5PVF9JREVOVCwgRVhJVF9JTlNFUlRfU0NPUEVdLFxuICBdLFxuICBbXG4gICAgLy8vIHBzZXVkb0NsYXNzV2l0aFNlbGVjdG9yXG4gICAgW0FOWSwgT1BFTl9QQVJFTlRIRVNJUywgcnVsZV0sXG4gICAgW0FOWSwgTk9UX0lERU5ULCBFWElUX0lOU0VSVF9TQ09QRV0sXG4gIF0sXG4gIFtcbiAgICAvLy8gcHNldWRvQ2xhc3NcbiAgICBbQU5ZLCBPUEVOX1BBUkVOVEhFU0lTLCBpbmVydFBhcmVudGhlc2lzXSxcbiAgICBbQU5ZLCBOT1RfSURFTlQsIEVYSVRfSU5TRVJUX1NDT1BFXSxcbiAgXSxcbiAgW1xuICAgIC8vLyBwc2V1ZG9HbG9iYWxcbiAgICBbQU5ZLCBPUEVOX1BBUkVOVEhFU0lTLCBydWxlXSxcbiAgICBbQU5ZLCBOT1RfSURFTlQsIEVYSVRdLFxuICBdLFxuICBbXG4gICAgLy8vIHBzZXVkb0VsZW1lbnRcbiAgICBbQU5ZLCBOT1RfSURFTlQsIEVYSVRdLFxuICBdLFxuICBbXG4gICAgLy8vIGF0dHJTZWxlY3RvclxuICAgIFtBTlksIENMT1NFX0JSQUNLRVQsIEVYSVRfSU5TRVJUX1NDT1BFXSxcbiAgICBbQU5ZLCBTSU5HTEVfUVVPVEUsIHN0cmluZ1NpbmdsZV0sXG4gICAgW0FOWSwgRE9VQkxFX1FVT1RFLCBzdHJpbmdEb3VibGVdLFxuICBdLFxuICBbXG4gICAgLy8vIGluZXJ0UGFyZW50aGVzaXNcbiAgICBbQU5ZLCBDTE9TRV9QQVJFTlRIRVNJUywgRVhJVF0sXG4gICAgLi4uU1RSSU5HU19DT01NRU5UUyxcbiAgXSxcbiAgW1xuICAgIC8vLyBpbmVydEJsb2NrXG4gICAgW0FOWSwgQ0xPU0VfQlJBQ0UsIEVYSVRdLFxuICAgIC4uLlNUUklOR1NfQ09NTUVOVFMsXG4gIF0sXG4gIFtcbiAgICAvLy8gYXRSdWxlU2VsZWN0b3JcbiAgICBbQU5ZLCBDTE9TRV9CUkFDRSwgRVhJVF0sXG4gICAgW1dISVRFU1BBQ0UsIElERU5ULCBlbGVtZW50Q2xhc3NJZFNlbGVjdG9yXSxcbiAgICBbQU5ZLCBDT0xPTiwgcHNldWRvR2xvYmFsLCAnZ2xvYmFsJ10sXG4gICAgW0FOWSwgT1BFTl9CUkFDRSwgYm9keV0sXG4gICAgLi4uU1RSSU5HU19DT01NRU5UUyxcbiAgXSxcbiAgW1xuICAgIC8vLyBhdFJ1bGVCbG9ja1xuICAgIFtBTlksIE9QRU5fQlJBQ0UsIHJ1bGVdLFxuICAgIFtBTlksIFNFTUlDT0xPTiwgRVhJVF0sXG4gICAgLi4uU1RSSU5HU19DT01NRU5UUyxcbiAgXSxcbiAgW1xuICAgIC8vLyBhdFJ1bGVJbmVydFxuICAgIFtBTlksIFNFTUlDT0xPTiwgRVhJVF0sXG4gICAgW0FOWSwgT1BFTl9CUkFDRSwgaW5lcnRCbG9ja10sXG4gICAgLi4uU1RSSU5HU19DT01NRU5UUyxcbiAgXSxcbiAgW1xuICAgIC8vLyBib2R5XG4gICAgW0FOWSwgQ0xPU0VfQlJBQ0UsIEVYSVRdLFxuICAgIFtBTlksIE9QRU5fQlJBQ0UsIGJvZHldLFxuICAgIFtBTlksIE9QRU5fUEFSRU5USEVTSVMsIGluZXJ0UGFyZW50aGVzaXNdLFxuICAgIC4uLlNUUklOR1NfQ09NTUVOVFMsXG4gIF0sXG4gIFtcbiAgICAvLy8gc3RyaW5nU2luZ2xlXG4gICAgW0FOWSwgU0lOR0xFX1FVT1RFLCBFWElUXSxcbiAgXSxcbiAgW1xuICAgIC8vLyBzdHJpbmdEb3VibGVcbiAgICBbQU5ZLCBET1VCTEVfUVVPVEUsIEVYSVRdLFxuICBdLFxuICBbXG4gICAgLy8vIGNvbW1lbnRNdWx0aWxpbmVcbiAgICBbU1RBUiwgRk9SV0FSRF9TTEFTSCwgRVhJVF0sXG4gIF0sXG5dKSgpO1xuIl19","import { styleContent, styleKey } from '../style/qrl-styles';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { getScopedStyles } from '../style/scoped-stylesheet';\nimport { hasStyle } from '../render/execute-component';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { isPromise } from '../util/promises';\nimport { assertDefined } from '../error/assert';\nimport { ComponentStylesPrefixContent } from '../util/markers';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, (str) => str, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    return {\n        scopeId: ComponentStylesPrefixContent + _useStyles(styles, getScopedStyles, true),\n    };\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    assertQrl(styleQrl);\n    const { get, set, iCtx, i, elCtx } = useSequentialScope();\n    if (get) {\n        return get;\n    }\n    const styleId = styleKey(styleQrl, i);\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    set(styleId);\n    if (!elCtx.$appendStyles$) {\n        elCtx.$appendStyles$ = [];\n    }\n    if (!elCtx.$scopeIds$) {\n        elCtx.$scopeIds$ = [];\n    }\n    if (scoped) {\n        elCtx.$scopeIds$.push(styleContent(styleId));\n    }\n    if (hasStyle(containerState, styleId)) {\n        return styleId;\n    }\n    containerState.$styleIds$.add(styleId);\n    const value = styleQrl.$resolveLazy$(containerState.$containerEl$);\n    const appendStyle = (styleText) => {\n        assertDefined(elCtx.$appendStyles$, 'appendStyles must be defined');\n        elCtx.$appendStyles$.push({\n            styleId,\n            content: transform(styleText, styleId),\n        });\n    };\n    if (isPromise(value)) {\n        iCtx.$waitOn$.push(value.then(appendStyle));\n    }\n    else {\n        appendStyle(value);\n    }\n    return styleId;\n};\n//# sourceMappingURL=data:application/json;base64,","import { _createSignal } from '../state/signal';\nimport { isFunction } from '../util/types';\nimport { invoke } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\n/**\n * @alpha\n */\nexport const useSignal = (initialState) => {\n    const { get, set, iCtx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const containerState = iCtx.$renderCtx$.$static$.$containerState$;\n    const value = isFunction(initialState) ? invoke(undefined, initialState) : initialState;\n    const signal = _createSignal(value, containerState, undefined);\n    set(signal);\n    return signal;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNpZ25hbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXNpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFVLE1BQU0saUJBQWlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBVTVEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFjLENBQVEsWUFBb0IsRUFBaUIsRUFBRTtJQUNqRixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxrQkFBa0IsRUFBaUIsQ0FBQztJQUMvRCxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDZixPQUFPLEdBQUcsQ0FBQztLQUNaO0lBRUQsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7SUFDbEUsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQy9GLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBa0IsQ0FBQztJQUNoRixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDWixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBfY3JlYXRlU2lnbmFsLCBTaWduYWwgfSBmcm9tICcuLi9zdGF0ZS9zaWduYWwnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvdHlwZXMnO1xuaW1wb3J0IHsgaW52b2tlIH0gZnJvbSAnLi91c2UtY29yZSc7XG5pbXBvcnQgeyB1c2VTZXF1ZW50aWFsU2NvcGUgfSBmcm9tICcuL3VzZS1zZXF1ZW50aWFsLXNjb3BlJztcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTaWduYWwge1xuICA8VD4oKTogU2lnbmFsPFQgfCB1bmRlZmluZWQ+O1xuICA8VD4odmFsdWU6IFQgfCAoKCkgPT4gVCkpOiBTaWduYWw8VD47XG59XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VTaWduYWw6IFVzZVNpZ25hbCA9IDxTVEFURT4oaW5pdGlhbFN0YXRlPzogU1RBVEUpOiBTaWduYWw8U1RBVEU+ID0+IHtcbiAgY29uc3QgeyBnZXQsIHNldCwgaUN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNpZ25hbDxTVEFURT4+KCk7XG4gIGlmIChnZXQgIT0gbnVsbCkge1xuICAgIHJldHVybiBnZXQ7XG4gIH1cblxuICBjb25zdCBjb250YWluZXJTdGF0ZSA9IGlDdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJDtcbiAgY29uc3QgdmFsdWUgPSBpc0Z1bmN0aW9uKGluaXRpYWxTdGF0ZSkgPyBpbnZva2UodW5kZWZpbmVkLCBpbml0aWFsU3RhdGUgYXMgYW55KSA6IGluaXRpYWxTdGF0ZTtcbiAgY29uc3Qgc2lnbmFsID0gX2NyZWF0ZVNpZ25hbCh2YWx1ZSwgY29udGFpbmVyU3RhdGUsIHVuZGVmaW5lZCkgYXMgU2lnbmFsPFNUQVRFPjtcbiAgc2V0KHNpZ25hbCk7XG4gIHJldHVybiBzaWduYWw7XG59O1xuIl19","import { isServer } from '../platform/platform';\nimport { assertQrl } from '../qrl/qrl-class';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { waitAndRun } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { useTask$, useTaskQrl } from './use-task';\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Deprecated API, equivalent of doing:\n *\n * ```tsx\n * import { useTask$ } from '@builder.io/qwik';\n * import { isServer } from '@builder.io/qwik/build';\n * useTask$(() => {\n *   if (isServer) {\n *     // only runs on server\n *   }\n * });\n * ```\n *\n * @see `useTask`\n * @public\n * @deprecated - use `useTask$()` with `isServer` instead. See\n */\n// </docs>\nexport const useServerMountQrl = (mountQrl) => {\n    const { get, set, iCtx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (isServer()) {\n        assertQrl(mountQrl);\n        mountQrl.$resolveLazy$(iCtx.$renderCtx$.$static$.$containerState$.$containerEl$);\n        waitAndRun(iCtx, mountQrl);\n    }\n    set(true);\n};\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Deprecated API, equivalent of doing:\n *\n * ```tsx\n * import { useTask$ } from '@builder.io/qwik';\n * import { isServer } from '@builder.io/qwik/build';\n * useTask$(() => {\n *   if (isServer) {\n *     // only runs on server\n *   }\n * });\n * ```\n *\n * @see `useTask`\n * @public\n * @deprecated - use `useTask$()` with `isServer` instead. See\n */\n// </docs>\nexport const useServerMount$ = /*#__PURE__*/ implicit$FirstArg(useServerMountQrl);\n// <docs markdown=\"../readme.md#useClientMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientMount instead)\n/**\n * Deprecated API, equivalent of doing:\n *\n * ```tsx\n * import { useTask$ } from '@builder.io/qwik';\n * import { isBrowser } from '@builder.io/qwik/build';\n * useTask$(() => {\n *   if (isBrowser) {\n *     // only runs on server\n *   }\n * });\n * ```\n *\n * @see `useTask`\n * @public\n * @deprecated - use `useTask$()` with `isBrowser` instead. See\n * https://qwik.builder.io/docs/components/lifecycle/#usemountserver\n */\n// </docs>\nexport const useClientMountQrl = (mountQrl) => {\n    const { get, set, iCtx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (!isServer()) {\n        assertQrl(mountQrl);\n        mountQrl.$resolveLazy$(iCtx.$renderCtx$.$static$.$containerState$.$containerEl$);\n        waitAndRun(iCtx, mountQrl);\n    }\n    set(true);\n};\n// <docs markdown=\"../readme.md#useClientMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientMount instead)\n/**\n * Deprecated API, equivalent of doing:\n *\n * ```tsx\n * import { useTask$ } from '@builder.io/qwik';\n * import { isBrowser } from '@builder.io/qwik/build';\n * useTask$(() => {\n *   if (isBrowser) {\n *     // only runs on server\n *   }\n * });\n * ```\n *\n * @see `useTask`\n * @public\n * @deprecated - use `useTask$()` with `isBrowser` instead. See\n * https://qwik.builder.io/docs/components/lifecycle/#usemountserver\n */\n// </docs>\nexport const useClientMount$ = /*#__PURE__*/ implicit$FirstArg(useClientMountQrl);\n/**\n * @beta\n * @deprecated - use `useTask$()` instead\n */\nexport const useMountQrl = useTaskQrl;\n/**\n * @beta\n * @deprecated - use `useTask$()` instead\n */\nexport const useMount$ = /*#__PURE__*/ useTask$;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLW1vdW50LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbW91bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBT2xELGdEQUFnRDtBQUNoRCx5Q0FBeUM7QUFDekMsNkNBQTZDO0FBQzdDOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUksUUFBeUIsRUFBUSxFQUFFO0lBQ3RFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLGtCQUFrQixFQUFXLENBQUM7SUFDekQsSUFBSSxHQUFHLEVBQUU7UUFDUCxPQUFPO0tBQ1I7SUFDRCxJQUFJLFFBQVEsRUFBRSxFQUFFO1FBQ2QsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BCLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDakYsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztLQUM1QjtJQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNaLENBQUMsQ0FBQztBQUVGLGdEQUFnRDtBQUNoRCx5Q0FBeUM7QUFDekMsNkNBQTZDO0FBQzdDOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUVsRixnREFBZ0Q7QUFDaEQseUNBQXlDO0FBQ3pDLDZDQUE2QztBQUM3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBSSxRQUF5QixFQUFRLEVBQUU7SUFDdEUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsa0JBQWtCLEVBQVcsQ0FBQztJQUN6RCxJQUFJLEdBQUcsRUFBRTtRQUNQLE9BQU87S0FDUjtJQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUNmLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwQixRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2pGLFVBQVUsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDNUI7SUFDRCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDWixDQUFDLENBQUM7QUFFRixnREFBZ0Q7QUFDaEQseUNBQXlDO0FBQ3pDLDZDQUE2QztBQUM3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FpQkc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRWxGOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUM7QUFFdEM7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL3FybC9xcmwtY2xhc3MnO1xuaW1wb3J0IHR5cGUgeyBRUkwgfSBmcm9tICcuLi9xcmwvcXJsLnB1YmxpYyc7XG5pbXBvcnQgeyBpbXBsaWNpdCRGaXJzdEFyZyB9IGZyb20gJy4uL3V0aWwvaW1wbGljaXRfZG9sbGFyJztcbmltcG9ydCB0eXBlIHsgVmFsdWVPclByb21pc2UgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IHdhaXRBbmRSdW4gfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuaW1wb3J0IHsgdXNlVGFzayQsIHVzZVRhc2tRcmwgfSBmcm9tICcuL3VzZS10YXNrJztcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIE1vdW50Rm48VD4gPSAoKSA9PiBWYWx1ZU9yUHJvbWlzZTxUPjtcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlU2VydmVyTW91bnRcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU2VydmVyTW91bnQgaW5zdGVhZClcbi8qKlxuICogRGVwcmVjYXRlZCBBUEksIGVxdWl2YWxlbnQgb2YgZG9pbmc6XG4gKlxuICogYGBgdHN4XG4gKiBpbXBvcnQgeyB1c2VUYXNrJCB9IGZyb20gJ0BidWlsZGVyLmlvL3F3aWsnO1xuICogaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrL2J1aWxkJztcbiAqIHVzZVRhc2skKCgpID0+IHtcbiAqICAgaWYgKGlzU2VydmVyKSB7XG4gKiAgICAgLy8gb25seSBydW5zIG9uIHNlcnZlclxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgYHVzZVRhc2tgXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCAtIHVzZSBgdXNlVGFzayQoKWAgd2l0aCBgaXNTZXJ2ZXJgIGluc3RlYWQuIFNlZVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlU2VydmVyTW91bnRRcmwgPSA8VD4obW91bnRRcmw6IFFSTDxNb3VudEZuPFQ+Pik6IHZvaWQgPT4ge1xuICBjb25zdCB7IGdldCwgc2V0LCBpQ3R4IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8Ym9vbGVhbj4oKTtcbiAgaWYgKGdldCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaXNTZXJ2ZXIoKSkge1xuICAgIGFzc2VydFFybChtb3VudFFybCk7XG4gICAgbW91bnRRcmwuJHJlc29sdmVMYXp5JChpQ3R4LiRyZW5kZXJDdHgkLiRzdGF0aWMkLiRjb250YWluZXJTdGF0ZSQuJGNvbnRhaW5lckVsJCk7XG4gICAgd2FpdEFuZFJ1bihpQ3R4LCBtb3VudFFybCk7XG4gIH1cbiAgc2V0KHRydWUpO1xufTtcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlU2VydmVyTW91bnRcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlU2VydmVyTW91bnQgaW5zdGVhZClcbi8qKlxuICogRGVwcmVjYXRlZCBBUEksIGVxdWl2YWxlbnQgb2YgZG9pbmc6XG4gKlxuICogYGBgdHN4XG4gKiBpbXBvcnQgeyB1c2VUYXNrJCB9IGZyb20gJ0BidWlsZGVyLmlvL3F3aWsnO1xuICogaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrL2J1aWxkJztcbiAqIHVzZVRhc2skKCgpID0+IHtcbiAqICAgaWYgKGlzU2VydmVyKSB7XG4gKiAgICAgLy8gb25seSBydW5zIG9uIHNlcnZlclxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgYHVzZVRhc2tgXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCAtIHVzZSBgdXNlVGFzayQoKWAgd2l0aCBgaXNTZXJ2ZXJgIGluc3RlYWQuIFNlZVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlU2VydmVyTW91bnQkID0gLyojX19QVVJFX18qLyBpbXBsaWNpdCRGaXJzdEFyZyh1c2VTZXJ2ZXJNb3VudFFybCk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZUNsaWVudE1vdW50XCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZUNsaWVudE1vdW50IGluc3RlYWQpXG4vKipcbiAqIERlcHJlY2F0ZWQgQVBJLCBlcXVpdmFsZW50IG9mIGRvaW5nOlxuICpcbiAqIGBgYHRzeFxuICogaW1wb3J0IHsgdXNlVGFzayQgfSBmcm9tICdAYnVpbGRlci5pby9xd2lrJztcbiAqIGltcG9ydCB7IGlzQnJvd3NlciB9IGZyb20gJ0BidWlsZGVyLmlvL3F3aWsvYnVpbGQnO1xuICogdXNlVGFzayQoKCkgPT4ge1xuICogICBpZiAoaXNCcm93c2VyKSB7XG4gKiAgICAgLy8gb25seSBydW5zIG9uIHNlcnZlclxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgYHVzZVRhc2tgXG4gKiBAcHVibGljXG4gKiBAZGVwcmVjYXRlZCAtIHVzZSBgdXNlVGFzayQoKWAgd2l0aCBgaXNCcm93c2VyYCBpbnN0ZWFkLiBTZWVcbiAqIGh0dHBzOi8vcXdpay5idWlsZGVyLmlvL2RvY3MvY29tcG9uZW50cy9saWZlY3ljbGUvI3VzZW1vdW50c2VydmVyXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VDbGllbnRNb3VudFFybCA9IDxUPihtb3VudFFybDogUVJMPE1vdW50Rm48VD4+KTogdm9pZCA9PiB7XG4gIGNvbnN0IHsgZ2V0LCBzZXQsIGlDdHggfSA9IHVzZVNlcXVlbnRpYWxTY29wZTxib29sZWFuPigpO1xuICBpZiAoZ2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghaXNTZXJ2ZXIoKSkge1xuICAgIGFzc2VydFFybChtb3VudFFybCk7XG4gICAgbW91bnRRcmwuJHJlc29sdmVMYXp5JChpQ3R4LiRyZW5kZXJDdHgkLiRzdGF0aWMkLiRjb250YWluZXJTdGF0ZSQuJGNvbnRhaW5lckVsJCk7XG4gICAgd2FpdEFuZFJ1bihpQ3R4LCBtb3VudFFybCk7XG4gIH1cbiAgc2V0KHRydWUpO1xufTtcblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlQ2xpZW50TW91bnRcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlQ2xpZW50TW91bnQgaW5zdGVhZClcbi8qKlxuICogRGVwcmVjYXRlZCBBUEksIGVxdWl2YWxlbnQgb2YgZG9pbmc6XG4gKlxuICogYGBgdHN4XG4gKiBpbXBvcnQgeyB1c2VUYXNrJCB9IGZyb20gJ0BidWlsZGVyLmlvL3F3aWsnO1xuICogaW1wb3J0IHsgaXNCcm93c2VyIH0gZnJvbSAnQGJ1aWxkZXIuaW8vcXdpay9idWlsZCc7XG4gKiB1c2VUYXNrJCgoKSA9PiB7XG4gKiAgIGlmIChpc0Jyb3dzZXIpIHtcbiAqICAgICAvLyBvbmx5IHJ1bnMgb24gc2VydmVyXG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSBgdXNlVGFza2BcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIC0gdXNlIGB1c2VUYXNrJCgpYCB3aXRoIGBpc0Jyb3dzZXJgIGluc3RlYWQuIFNlZVxuICogaHR0cHM6Ly9xd2lrLmJ1aWxkZXIuaW8vZG9jcy9jb21wb25lbnRzL2xpZmVjeWNsZS8jdXNlbW91bnRzZXJ2ZXJcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZUNsaWVudE1vdW50JCA9IC8qI19fUFVSRV9fKi8gaW1wbGljaXQkRmlyc3RBcmcodXNlQ2xpZW50TW91bnRRcmwpO1xuXG4vKipcbiAqIEBiZXRhXG4gKiBAZGVwcmVjYXRlZCAtIHVzZSBgdXNlVGFzayQoKWAgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgdXNlTW91bnRRcmwgPSB1c2VUYXNrUXJsO1xuXG4vKipcbiAqIEBiZXRhXG4gKiBAZGVwcmVjYXRlZCAtIHVzZSBgdXNlVGFzayQoKWAgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgdXNlTW91bnQkID0gLyojX19QVVJFX18qLyB1c2VUYXNrJDtcbiJdfQ==","import { qrl } from '../qrl/qrl';\nimport { ERROR_CONTEXT } from '../render/error-handling';\nimport { useContextProvider } from './use-context';\nimport { useOn } from './use-on';\nimport { useStore } from './use-store.public';\n/**\n * @alpha\n */\nexport const useErrorBoundary = () => {\n    const store = useStore({\n        error: undefined,\n    });\n    useOn('error-boundary', qrl('/runtime', 'error', [store]));\n    useContextProvider(ERROR_CONTEXT, store);\n    return store;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVycm9yLWJvdW5kYXJ5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZXJyb3ItYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNqQyxPQUFPLEVBQXNCLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5Qzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQWlDLEVBQUU7SUFDakUsTUFBTSxLQUFLLEdBQXVCLFFBQVEsQ0FBQztRQUN6QyxLQUFLLEVBQUUsU0FBUztLQUNqQixDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0Qsa0JBQWtCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcXJsIH0gZnJvbSAnLi4vcXJsL3FybCc7XG5pbXBvcnQgeyBFcnJvckJvdW5kYXJ5U3RvcmUsIEVSUk9SX0NPTlRFWFQgfSBmcm9tICcuLi9yZW5kZXIvZXJyb3ItaGFuZGxpbmcnO1xuaW1wb3J0IHsgdXNlQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi91c2UtY29udGV4dCc7XG5pbXBvcnQgeyB1c2VPbiB9IGZyb20gJy4vdXNlLW9uJztcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAnLi91c2Utc3RvcmUucHVibGljJztcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUVycm9yQm91bmRhcnkgPSAoKTogUmVhZG9ubHk8RXJyb3JCb3VuZGFyeVN0b3JlPiA9PiB7XG4gIGNvbnN0IHN0b3JlOiBFcnJvckJvdW5kYXJ5U3RvcmUgPSB1c2VTdG9yZSh7XG4gICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgfSk7XG4gIHVzZU9uKCdlcnJvci1ib3VuZGFyeScsIHFybCgnL3J1bnRpbWUnLCAnZXJyb3InLCBbc3RvcmVdKSk7XG4gIHVzZUNvbnRleHRQcm92aWRlcihFUlJPUl9DT05URVhULCBzdG9yZSk7XG5cbiAgcmV0dXJuIHN0b3JlO1xufTtcbiJdfQ==","import { isPromise, then } from '../../util/promises';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { createJSXError, isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { createRenderContext, executeComponent, getNextIndex, isAriaAttribute, jsxToString, pushRenderContext, serializeClass, stringifyStyle, } from '../execute-component';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS, QStyle } from '../../util/markers';\nimport { InternalSSRStream, Virtual, SSRRaw, SSRHint } from '../jsx/utils.public';\nimport { logError, logWarn } from '../../util/log';\nimport { groupListeners, isOnProp, PREVENT_DEFAULT, setEvent, } from '../../state/listeners';\nimport { version } from '../../version';\nimport { addQwikEvent, createContainerState, setRef, } from '../../container/container';\nimport { assertDefined } from '../../error/assert';\nimport { serializeSStyle } from '../../style/qrl-styles';\nimport { qDev, qInspector, seal } from '../../util/qdev';\nimport { qError, QError_canNotRenderHTML } from '../../error/error';\nimport { addSignalSub, isSignal } from '../../state/signal';\nimport { serializeQRLs } from '../../qrl/qrl';\nimport { assertElement } from '../../util/element';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { createContext, HOST_FLAG_DYNAMIC, HOST_FLAG_NEED_ATTACH_LISTENER, Q_CTX, } from '../../state/context';\nimport { createPropsState, createProxy } from '../../state/store';\nimport { _IMMUTABLE, _IMMUTABLE_PREFIX } from '../../state/constants';\nconst FLUSH_COMMENT = '<!--qkssr-f-->';\nconst IS_HEAD = 1 << 0;\nconst IS_HTML = 1 << 2;\nconst IS_TEXT = 1 << 3;\nconst IS_INVISIBLE = 1 << 4;\nconst IS_PHASING = 1 << 5;\nconst IS_ANCHOR = 1 << 6;\nconst IS_BUTTON = 1 << 7;\nconst IS_TABLE = 1 << 8;\nconst createDocument = () => {\n    const doc = { nodeType: 9 };\n    seal(doc);\n    return doc;\n};\n/**\n * @internal\n */\nexport const _renderSSR = async (node, opts) => {\n    const root = opts.containerTagName;\n    const containerEl = createSSRContext(1).$element$;\n    const containerState = createContainerState(containerEl, opts.base ?? '/');\n    containerState.$serverData$.locale = opts.serverData?.locale;\n    const doc = createDocument();\n    const rCtx = createRenderContext(doc, containerState);\n    const headNodes = opts.beforeContent ?? [];\n    const ssrCtx = {\n        $static$: {\n            $contexts$: [],\n            $dynamic$: false,\n            $headNodes$: root === 'html' ? headNodes : [],\n            $locale$: opts.serverData?.locale,\n        },\n        $projectedChildren$: undefined,\n        $projectedCtxs$: undefined,\n        $invocationContext$: undefined,\n    };\n    seal(ssrCtx);\n    let qRender = qDev ? 'ssr-dev' : 'ssr';\n    if (opts.containerAttributes['q:render']) {\n        qRender = `${opts.containerAttributes['q:render']}-${qRender}`;\n    }\n    const containerAttributes = {\n        ...opts.containerAttributes,\n        'q:container': 'paused',\n        'q:version': version ?? 'dev',\n        'q:render': qRender,\n        'q:base': opts.base,\n        'q:locale': opts.serverData?.locale,\n        children: root === 'html' ? [node] : [headNodes, node],\n    };\n    if (root !== 'html') {\n        containerAttributes.class =\n            'qc📦' + (containerAttributes.class ? ' ' + containerAttributes.class : '');\n    }\n    containerState.$serverData$ = {\n        url: opts.url,\n        ...opts.serverData,\n    };\n    node = jsx(root, containerAttributes);\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = Promise.resolve().then(() => renderRoot(node, rCtx, ssrCtx, opts.stream, containerState, opts));\n    await containerState.$renderPromise$;\n};\nconst renderRoot = async (node, rCtx, ssrCtx, stream, containerState, opts) => {\n    const beforeClose = opts.beforeClose;\n    await renderNode(node, rCtx, ssrCtx, stream, 0, beforeClose\n        ? (stream) => {\n            const result = beforeClose(ssrCtx.$static$.$contexts$, containerState, ssrCtx.$static$.$dynamic$);\n            return processData(result, rCtx, ssrCtx, stream, 0, undefined);\n        }\n        : undefined);\n    if (qDev) {\n        if (ssrCtx.$static$.$headNodes$.length > 0) {\n            logError('Missing <head>. Global styles could not be rendered. Please render a <head> element at the root of the app');\n        }\n    }\n    return rCtx;\n};\nconst renderGenerator = async (node, rCtx, ssrCtx, stream, flags) => {\n    stream.write(FLUSH_COMMENT);\n    const generator = node.props.children;\n    let value;\n    if (isFunction(generator)) {\n        const v = generator({\n            write(chunk) {\n                stream.write(chunk);\n                stream.write(FLUSH_COMMENT);\n            },\n        });\n        if (isPromise(v)) {\n            return v;\n        }\n        value = v;\n    }\n    else {\n        value = generator;\n    }\n    for await (const chunk of value) {\n        await processData(chunk, rCtx, ssrCtx, stream, flags, undefined);\n        stream.write(FLUSH_COMMENT);\n    }\n};\nconst renderNodeVirtual = (node, elCtx, extraNodes, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const props = node.props;\n    const renderQrl = props[OnRenderProp];\n    if (renderQrl) {\n        elCtx.$componentQrl$ = renderQrl;\n        return renderSSRComponent(rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose);\n    }\n    let virtualComment = '<!--qv' + renderVirtualAttributes(props);\n    const isSlot = QSlotS in props;\n    const key = node.key != null ? String(node.key) : null;\n    if (isSlot) {\n        assertDefined(rCtx.$cmpCtx$?.$id$, 'hostId must be defined for a slot');\n        virtualComment += ' q:sref=' + rCtx.$cmpCtx$.$id$;\n    }\n    if (key != null) {\n        virtualComment += ' q:key=' + key;\n    }\n    virtualComment += '-->';\n    stream.write(virtualComment);\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = walkChildren(props.children, rCtx, ssrCtx, stream, flags);\n    return then(promise, () => {\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(CLOSE_VIRTUAL);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            assertDefined(key, 'key must be defined for a slot');\n            const content = ssrCtx.$projectedChildren$?.[key];\n            if (content) {\n                const [rCtx, sCtx] = ssrCtx.$projectedCtxs$;\n                const newSlotRctx = pushRenderContext(rCtx);\n                newSlotRctx.$slotCtx$ = elCtx;\n                ssrCtx.$projectedChildren$[key] = undefined;\n                promise = processData(content, newSlotRctx, sCtx, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = then(promise, () => beforeClose(stream));\n        }\n        return then(promise, () => {\n            stream.write(CLOSE_VIRTUAL);\n        });\n    });\n};\nconst CLOSE_VIRTUAL = `<!--/qv-->`;\nconst renderAttributes = (attributes) => {\n    let text = '';\n    for (const prop of Object.keys(attributes)) {\n        if (prop === 'dangerouslySetInnerHTML') {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=\"' + value + '\"');\n        }\n    }\n    return text;\n};\nconst renderVirtualAttributes = (attributes) => {\n    let text = '';\n    for (const prop of Object.keys(attributes)) {\n        if (prop === 'children') {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=' + value + '');\n        }\n    }\n    return text;\n};\nconst renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write('<' + tagName + renderAttributes(attributes) + '>');\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return;\n    }\n    // Render innerHTML\n    const innerHTML = attributes.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n        stream.write(innerHTML);\n    }\n    stream.write(`</${tagName}>`);\n};\nconst renderSSRComponent = (rCtx, ssrCtx, stream, elCtx, node, flags, beforeClose) => {\n    const props = node.props;\n    setComponentProps(rCtx, elCtx, props.props);\n    return then(executeComponent(rCtx, elCtx), (res) => {\n        const hostElement = elCtx.$element$;\n        const newRCtx = res.rCtx;\n        const invocationContext = newInvokeContext(ssrCtx.$static$.$locale$, hostElement, undefined);\n        invocationContext.$subscriber$ = hostElement;\n        invocationContext.$renderCtx$ = newRCtx;\n        const newSSrContext = {\n            ...ssrCtx,\n            $projectedChildren$: splitProjectedChildren(props.children, ssrCtx),\n            $projectedCtxs$: [rCtx, ssrCtx],\n            $invocationContext$: invocationContext,\n        };\n        const extraNodes = [];\n        if (elCtx.$appendStyles$) {\n            const isHTML = !!(flags & IS_HTML);\n            const array = isHTML ? ssrCtx.$static$.$headNodes$ : extraNodes;\n            for (const style of elCtx.$appendStyles$) {\n                array.push(jsx('style', {\n                    [QStyle]: style.styleId,\n                    hidden: '',\n                    dangerouslySetInnerHTML: style.content,\n                }));\n            }\n        }\n        const newID = getNextIndex(rCtx);\n        const scopeId = elCtx.$scopeIds$ ? serializeSStyle(elCtx.$scopeIds$) : undefined;\n        const processedNode = jsx(node.type, {\n            [QScopedStyle]: scopeId,\n            [ELEMENT_ID]: newID,\n            children: res.node,\n        }, node.key);\n        elCtx.$id$ = newID;\n        ssrCtx.$static$.$contexts$.push(elCtx);\n        return renderNodeVirtual(processedNode, elCtx, extraNodes, newRCtx, newSSrContext, stream, flags, (stream) => {\n            if (elCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                const placeholderCtx = createSSRContext(1);\n                const listeners = placeholderCtx.li;\n                listeners.push(...elCtx.li);\n                elCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n                placeholderCtx.$id$ = getNextIndex(rCtx);\n                const attributes = {\n                    type: 'placeholder',\n                    hidden: '',\n                    'q:id': placeholderCtx.$id$,\n                };\n                ssrCtx.$static$.$contexts$.push(placeholderCtx);\n                const groups = groupListeners(listeners);\n                for (const listener of groups) {\n                    const eventName = normalizeInvisibleEvents(listener[0]);\n                    attributes[eventName] = serializeQRLs(listener[1], placeholderCtx);\n                    addQwikEvent(eventName, rCtx.$static$.$containerState$);\n                }\n                renderNodeElementSync('script', attributes, stream);\n            }\n            if (beforeClose) {\n                return then(renderQTemplates(rCtx, newSSrContext, stream), () => beforeClose(stream));\n            }\n            else {\n                return renderQTemplates(rCtx, newSSrContext, stream);\n            }\n        });\n    });\n};\nconst renderQTemplates = (rCtx, ssrContext, stream) => {\n    const projectedChildren = ssrContext.$projectedChildren$;\n    if (projectedChildren) {\n        const nodes = Object.keys(projectedChildren).map((slotName) => {\n            const value = projectedChildren[slotName];\n            if (value) {\n                return jsx('q:template', {\n                    [QSlot]: slotName,\n                    hidden: '',\n                    'aria-hidden': 'true',\n                    children: value,\n                });\n            }\n        });\n        return processData(nodes, rCtx, ssrContext, stream, 0, undefined);\n    }\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] ?? '';\n        }\n        let array = slotMap[slotName];\n        if (!array) {\n            slotMap[slotName] = array = [];\n        }\n        array.push(child);\n    }\n    return slotMap;\n};\nconst createSSRContext = (nodeType) => {\n    const elm = {\n        nodeType,\n        [Q_CTX]: null,\n    };\n    seal(elm);\n    return createContext(elm);\n};\nconst renderNode = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    const tagName = node.type;\n    const hostCtx = rCtx.$cmpCtx$;\n    if (typeof tagName === 'string') {\n        const key = node.key;\n        const props = node.props;\n        const immutableMeta = props[_IMMUTABLE] ?? EMPTY_OBJ;\n        const elCtx = createSSRContext(1);\n        const elm = elCtx.$element$;\n        const isHead = tagName === 'head';\n        let openingElement = '<' + tagName;\n        let useSignal = false;\n        let classStr = '';\n        let htmlStr = null;\n        assertElement(elm);\n        if (qDev && props.class && props.className) {\n            throw new TypeError('Can only have one of class or className');\n        }\n        for (const prop of Object.keys(props)) {\n            if (prop === 'children' || prop === 'dangerouslySetInnerHTML') {\n                continue;\n            }\n            if (prop === 'ref') {\n                setRef(props[prop], elm);\n                continue;\n            }\n            let value = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : props[prop];\n            if (isOnProp(prop)) {\n                setEvent(elCtx.li, prop, value, undefined);\n                continue;\n            }\n            const attrName = processPropKey(prop);\n            if (isSignal(value)) {\n                if (hostCtx) {\n                    const hostEl = hostCtx.$element$;\n                    addSignalSub(1, hostEl, value, elm, attrName);\n                    useSignal = true;\n                }\n                value = value.value;\n            }\n            if (prop.startsWith(PREVENT_DEFAULT)) {\n                addQwikEvent(prop.slice(PREVENT_DEFAULT.length), rCtx.$static$.$containerState$);\n            }\n            const attrValue = processPropValue(attrName, value);\n            if (attrValue != null) {\n                if (attrName === 'class') {\n                    classStr = attrValue;\n                }\n                else if (attrName === 'value' && tagName === 'textarea') {\n                    htmlStr = escapeHtml(attrValue);\n                }\n                else if (isSSRUnsafeAttr(attrName)) {\n                    if (qDev) {\n                        logError('Attribute value is unsafe for SSR');\n                    }\n                }\n                else {\n                    openingElement +=\n                        ' ' + (value === '' ? attrName : attrName + '=\"' + escapeAttr(attrValue) + '\"');\n                }\n            }\n        }\n        const listeners = elCtx.li;\n        if (hostCtx) {\n            if (qDev) {\n                if (tagName === 'html') {\n                    throw qError(QError_canNotRenderHTML);\n                }\n            }\n            if (hostCtx.$scopeIds$?.length) {\n                const extra = hostCtx.$scopeIds$.join(' ');\n                classStr = classStr ? `${extra} ${classStr}` : extra;\n            }\n            if (hostCtx.$flags$ & HOST_FLAG_NEED_ATTACH_LISTENER) {\n                listeners.push(...hostCtx.li);\n                hostCtx.$flags$ &= ~HOST_FLAG_NEED_ATTACH_LISTENER;\n            }\n        }\n        // Reset HOST flags\n        if (qDev) {\n            if (flags & IS_PHASING) {\n                if (!phasingContent[tagName]) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is a <p> or a <pre>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#phrasing-content-2`, node);\n                }\n            }\n            if (tagName === 'table') {\n                flags |= IS_TABLE;\n            }\n            else {\n                if (flags & IS_TABLE && !tableContent[tagName]) {\n                    throw createJSXError(`The <table> element requires that its direct children to be '<tbody>' or '<thead>', instead, '<${tagName}>' was rendered.`, node);\n                }\n                flags &= ~IS_TABLE;\n            }\n            if (tagName === 'button') {\n                if (flags & IS_BUTTON) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <button>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_BUTTON;\n                }\n            }\n            if (tagName === 'a') {\n                if (flags & IS_ANCHOR) {\n                    throw createJSXError(`<${tagName}> can not be rendered because one of its ancestor is already a <a>.\\n\nThis goes against the HTML spec: https://html.spec.whatwg.org/multipage/dom.html#interactive-content`, node);\n                }\n                else {\n                    flags |= IS_ANCHOR;\n                }\n            }\n            if (flags & IS_HEAD) {\n                if (!headContent[tagName]) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid children of the <head> element. https://html.spec.whatwg.org/multipage/dom.html#metadata-content`, node);\n                }\n            }\n            if (flags & IS_HTML) {\n                if (!htmlContent[tagName]) {\n                    throw createJSXError(`<${tagName}> can not be rendered because it's not a valid direct children of the <html> element, only <head> and <body> are allowed.`, node);\n                }\n            }\n            if (startPhasingContent[tagName]) {\n                flags |= IS_PHASING;\n            }\n        }\n        if (isHead) {\n            flags |= IS_HEAD;\n        }\n        if (invisibleElements[tagName]) {\n            flags |= IS_INVISIBLE;\n        }\n        if (textOnlyElements[tagName]) {\n            flags |= IS_TEXT;\n        }\n        if (classStr) {\n            openingElement += ' class=\"' + escapeAttr(classStr) + '\"';\n        }\n        if (listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            const isInvisible = (flags & IS_INVISIBLE) !== 0;\n            for (const listener of groups) {\n                const eventName = isInvisible ? normalizeInvisibleEvents(listener[0]) : listener[0];\n                openingElement += ' ' + eventName + '=\"' + serializeQRLs(listener[1], elCtx) + '\"';\n                addQwikEvent(eventName, rCtx.$static$.$containerState$);\n            }\n        }\n        if (key != null) {\n            openingElement += ' q:key=\"' + key + '\"';\n        }\n        if ('ref' in props || useSignal || listeners.length > 0) {\n            if ('ref' in props || useSignal || listenersNeedId(listeners)) {\n                const newID = getNextIndex(rCtx);\n                openingElement += ' q:id=\"' + newID + '\"';\n                elCtx.$id$ = newID;\n            }\n            ssrCtx.$static$.$contexts$.push(elCtx);\n        }\n        if (flags & IS_HEAD) {\n            openingElement += ' q:head';\n        }\n        if (qDev && qInspector && node.dev && !(flags & IS_HEAD)) {\n            const sanitizedFileName = node?.dev?.fileName?.replace(/\\\\/g, '/');\n            if (sanitizedFileName) {\n                openingElement += ` data-qwik-inspector=\"${encodeURIComponent(sanitizedFileName)}:${node.dev.lineNumber}:${node.dev.columnNumber}\"`;\n            }\n        }\n        openingElement += '>';\n        stream.write(openingElement);\n        if (emptyElements[tagName]) {\n            return;\n        }\n        const innerHTML = props.dangerouslySetInnerHTML ?? htmlStr;\n        if (innerHTML != null) {\n            stream.write(String(innerHTML));\n            stream.write(`</${tagName}>`);\n            return;\n        }\n        if (tagName === 'html') {\n            flags |= IS_HTML;\n        }\n        else {\n            flags &= ~IS_HTML;\n        }\n        const promise = processData(props.children, rCtx, ssrCtx, stream, flags);\n        return then(promise, () => {\n            // If head inject base styles\n            if (isHead) {\n                for (const node of ssrCtx.$static$.$headNodes$) {\n                    renderNodeElementSync(node.type, node.props, stream);\n                }\n                ssrCtx.$static$.$headNodes$.length = 0;\n            }\n            // Fast path\n            if (!beforeClose) {\n                stream.write(`</${tagName}>`);\n                return;\n            }\n            // Inject before close\n            return then(beforeClose(stream), () => {\n                stream.write(`</${tagName}>`);\n            });\n        });\n    }\n    if (tagName === Virtual) {\n        const elCtx = createSSRContext(111);\n        elCtx.$parent$ = rCtx.$cmpCtx$;\n        elCtx.$slotParent$ = rCtx.$slotCtx$;\n        if (hostCtx && hostCtx.$flags$ & HOST_FLAG_DYNAMIC) {\n            addDynamicSlot(hostCtx, elCtx);\n        }\n        return renderNodeVirtual(node, elCtx, undefined, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    if (tagName === SSRRaw) {\n        stream.write(node.props.data);\n        return;\n    }\n    if (tagName === InternalSSRStream) {\n        return renderGenerator(node, rCtx, ssrCtx, stream, flags);\n    }\n    if (tagName === SSRHint && node.props.dynamic === true) {\n        ssrCtx.$static$.$dynamic$ = true;\n    }\n    const res = invoke(ssrCtx.$invocationContext$, tagName, node.props, node.key);\n    return processData(res, rCtx, ssrCtx, stream, flags, beforeClose);\n};\nconst processData = (node, rCtx, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isString(node) || typeof node === 'number') {\n        stream.write(escapeHtml(String(node)));\n    }\n    else if (isJSXNode(node)) {\n        return renderNode(node, rCtx, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isArray(node)) {\n        return walkChildren(node, rCtx, ssrCtx, stream, flags);\n    }\n    else if (isSignal(node)) {\n        const insideText = flags & IS_TEXT;\n        const hostEl = rCtx.$cmpCtx$?.$element$;\n        let value;\n        if (hostEl) {\n            if (!insideText) {\n                value = node.value;\n                const id = getNextIndex(rCtx);\n                addSignalSub(2, hostEl, node, '#' + id, 'data');\n                stream.write(`<!--t=${id}-->${escapeHtml(jsxToString(value))}<!---->`);\n                return;\n            }\n            else {\n                value = invoke(ssrCtx.$invocationContext$, () => node.value);\n            }\n        }\n        stream.write(escapeHtml(jsxToString(value)));\n        return;\n    }\n    else if (isPromise(node)) {\n        stream.write(FLUSH_COMMENT);\n        return node.then((node) => processData(node, rCtx, ssrCtx, stream, flags, beforeClose));\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return;\n    }\n};\nconst walkChildren = (children, rCtx, ssrContext, stream, flags) => {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, rCtx, ssrContext, stream, flags);\n    }\n    if (children.length === 1) {\n        return processData(children[0], rCtx, ssrContext, stream, flags);\n    }\n    if (children.length === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = prevPromise\n            ? {\n                write(chunk) {\n                    if (currentIndex === index) {\n                        stream.write(chunk);\n                    }\n                    else {\n                        buffer.push(chunk);\n                    }\n                },\n            }\n            : stream;\n        const rendered = processData(child, rCtx, ssrContext, localStream, flags);\n        const next = () => {\n            currentIndex++;\n            if (buffers.length > currentIndex) {\n                buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n            }\n        };\n        if (isPromise(rendered) && prevPromise) {\n            return Promise.all([rendered, prevPromise]).then(next);\n        }\n        else if (isPromise(rendered)) {\n            return rendered.then(next);\n        }\n        else if (prevPromise) {\n            return prevPromise.then(next);\n        }\n        else {\n            currentIndex++;\n            return undefined;\n        }\n    }, undefined);\n};\nconst flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nconst _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) &&\n        isFunction(children.type) &&\n        children.type !== SSRRaw &&\n        children.type !== InternalSSRStream &&\n        children.type !== Virtual) {\n        const res = invoke(ssrCtx.$invocationContext$, children.type, children.props, children.key);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst setComponentProps = (rCtx, elCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    const target = createPropsState();\n    elCtx.$props$ = createProxy(target, rCtx.$static$.$containerState$);\n    if (keys.length === 0) {\n        return;\n    }\n    const immutableMeta = (target[_IMMUTABLE] =\n        expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n    for (const prop of keys) {\n        if (prop === 'children' || prop === QSlot) {\n            continue;\n        }\n        if (isSignal(immutableMeta[prop])) {\n            target[_IMMUTABLE_PREFIX + prop] = immutableMeta[prop];\n        }\n        else {\n            target[prop] = expectProps[prop];\n        }\n    }\n};\nconst processPropKey = (prop) => {\n    if (prop === 'htmlFor') {\n        return 'for';\n    }\n    return prop;\n};\nconst processPropValue = (prop, value) => {\n    if (prop === 'style') {\n        return stringifyStyle(value);\n    }\n    if (prop === 'class') {\n        return serializeClass(value);\n    }\n    if (isAriaAttribute(prop) || prop === 'draggable' || prop === 'spellcheck') {\n        return value != null ? String(value) : value;\n    }\n    if (value === false || value == null) {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    return String(value);\n};\nconst invisibleElements = {\n    head: true,\n    style: true,\n    script: true,\n    link: true,\n    meta: true,\n};\nconst textOnlyElements = {\n    title: true,\n    style: true,\n    script: true,\n    noframes: true,\n    textarea: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nconst startPhasingContent = {\n    p: true,\n    pre: true,\n};\nconst htmlContent = {\n    head: true,\n    body: true,\n};\nconst tableContent = {\n    tbody: true,\n    thead: true,\n};\nconst headContent = {\n    meta: true,\n    title: true,\n    link: true,\n    style: true,\n    script: true,\n    noscript: true,\n    template: true,\n    base: true,\n};\nconst phasingContent = {\n    a: true,\n    abbr: true,\n    audio: true,\n    b: true,\n    bdo: true,\n    br: true,\n    button: true,\n    canvas: true,\n    cite: true,\n    code: true,\n    command: true,\n    data: true,\n    datalist: true,\n    dfn: true,\n    em: true,\n    embed: true,\n    i: true,\n    iframe: true,\n    img: true,\n    input: true,\n    kbd: true,\n    keygen: true,\n    label: true,\n    mark: true,\n    math: true,\n    meter: true,\n    noscript: true,\n    object: true,\n    output: true,\n    picture: true,\n    progress: true,\n    q: true,\n    ruby: true,\n    s: true,\n    samp: true,\n    script: true,\n    select: true,\n    small: true,\n    span: true,\n    strong: true,\n    sub: true,\n    sup: true,\n    svg: true,\n    textarea: true,\n    time: true,\n    u: true,\n    var: true,\n    video: true,\n    wbr: true,\n};\nconst ESCAPE_HTML = /[&<>]/g;\nconst ESCAPE_ATTRIBUTES = /[&\"]/g;\nconst escapeHtml = (s) => {\n    return s.replace(ESCAPE_HTML, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            default:\n                return '';\n        }\n    });\n};\nconst escapeAttr = (s) => {\n    return s.replace(ESCAPE_ATTRIBUTES, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '\"':\n                return '&quot;';\n            default:\n                return '';\n        }\n    });\n};\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/; // eslint-disable-line no-control-regex\nexport const isSSRUnsafeAttr = (name) => {\n    return unsafeAttrCharRE.test(name);\n};\nconst listenersNeedId = (listeners) => {\n    return listeners.some((l) => l[1].$captureRef$ && l[1].$captureRef$.length > 0);\n};\nconst addDynamicSlot = (hostCtx, elCtx) => {\n    let dynamicSlots = hostCtx.$dynamicSlots$;\n    if (!dynamicSlots) {\n        hostCtx.$dynamicSlots$ = dynamicSlots = [];\n    }\n    if (!dynamicSlots.includes(elCtx)) {\n        dynamicSlots.push(elCtx);\n    }\n};\nconst normalizeInvisibleEvents = (eventName) => {\n    return eventName === 'on:qvisible' ? 'on-document:qinit' : eventName;\n};\n//# sourceMappingURL=data:application/json;base64,"],"names":["isNode","isElement","tryGetContext","SHOW_COMMENT","FILTER_REJECT","isContainer","createContext","processData","IS_HEAD","setComponentProps","emitEvent","renderRoot"],"mappings":"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AAI,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;IAC5D,IAAI,WAAW,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;IACvE,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;IAC1B,QAAQ,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC;IAC7B,KAAK;IACL,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;IAClB,IAAI,OAAO,QAAQ,CAAC;IACpB,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,YAAY,GAAG,CAAC,WAAW,EAAE,IAAI,KAAK;IACnD,IAAI,OAAO,cAAc,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;IAChD,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,QAAQ,GAAG,CAAC,KAAK,KAAK;IACnC,IAAI,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,CAAC;IAClC,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,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"}