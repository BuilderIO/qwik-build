const qrlResolver=(e,t,o,s,r)=>(void 0===o?t?(s=t.getAttribute("q:base"),r=qrlResolver(e,t.parentNode&&t.parentNode.closest("[q\\:base]"))):s=e.baseURI:o&&(s=o,r=qrlResolver(e,t.closest("[q\\:base]"))),s?new URL(s,r):void 0);((e,t,o)=>{const s=e=>{e.forEach((e=>{if(e.intersectionRatio>0){const o=e.target,s=o.attributes;for(let e=0;e<s.length;e++){const a=s[e],c=a.name,l=a.value;if(c.startsWith("on:")&&l){const e=qrlResolver(t,o,l);e.hash=e.search="";const s=e.toString()+".js";r[s]||(r[s]=s,n(s))}}}}))},r={},n=e=>{if(!a){const e=URL.createObjectURL(new Blob(["((e,a)=>{const s={},t=async(e,n)=>{1!==s[n]&&(s[n]=1,((await a(n)).headers.get(\"Link\")||\"\").replace(/<([^>]*)>/g,t))};e.addEventListener(\"message\",(e=>t(\"\",e.data)))})(self,fetch);"],{type:"text/javascript"}));a=new Worker(e)}a.postMessage(e)};let a;e.addEventListener("load",(()=>{const e=new o(s);t.querySelectorAll("[on\\:\\.]").forEach(e.observe.bind(e))}))})(window,document,IntersectionObserver);