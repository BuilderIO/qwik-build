const QWIK_LOADER = "((e,t,n)=>{const o=\"__q_context__\",r=[\"on:\",\"on-window:\",\"on-document:\"],s=(t,n,o)=>{n=n.replace(/([A-Z])/g,(e=>\"-\"+e.toLowerCase())),e.querySelectorAll(\"[on\"+t+\"\\\\:\"+n+\"]\").forEach((e=>l(e,n,o)))},a=(e,t)=>e.dispatchEvent(new CustomEvent(\"qSymbol\",{detail:{name:t},bubbles:!0,composed:!0})),c=e=>{throw Error(\"QWIK \"+e)},i=(t,n)=>(t=t.closest(\"[q\\\\:container]\"),new URL(n,new URL(t?t.getAttribute(\"q:base\"):e.baseURI,e.baseURI))),l=async(t,n,s)=>{for(const l of r){const r=t.getAttribute(l+n);if(r){t.hasAttribute(\"preventdefault:\"+n)&&s.preventDefault();for(const n of r.split(\"\\n\")){const r=i(t,n);if(r){const n=p(r),i=(window[r.pathname]||await import(r.href.split(\"#\")[0]))[n]||c(r+\" does not export \"+n),l=e[o];try{e[o]=[t,s,r],i(s,t,r)}finally{e[o]=l,a(t,n)}}}}}},p=e=>e.hash.replace(/^#?([^?[|]*).*$/,\"$1\")||\"default\",u=(t,n)=>{if((n=t.target)==e)setTimeout((()=>s(\"-document\",t.type,t)));else for(;n&&n.getAttribute;)l(n,t.type,t),n=t.bubbles?n.parentElement:null},f=e=>(n||(n=new Worker(URL.createObjectURL(new Blob(['addEventListener(\"message\",(e=>e.data.map((e=>fetch(e)))));'],{type:\"text/javascript\"})))),n.postMessage(e.getAttribute(\"q:prefetch\").split(\"\\n\").map((t=>i(e,t)+\"\"))),n),d=n=>{n=e.readyState,t||\"interactive\"!=n&&\"complete\"!=n||(t=1,s(\"\",\"q-resume\",new CustomEvent(\"qResume\")),e.querySelectorAll(\"[q\\\\:prefetch]\").forEach(f))},b=t=>e.addEventListener(t,u,{capture:!0});if(!e.qR){e.qR=1;{const t=e.querySelector(\"script[events]\");if(t)t.getAttribute(\"events\").split(/[\\s,;]+/).forEach(b);else for(const t in e)t.startsWith(\"on\")&&b(t.slice(2))}e.addEventListener(\"readystatechange\",d),d()}})(document);";
const QWIK_LOADER_DEBUG = "(() => {\n    ((doc, hasInitialized, prefetchWorker) => {\n        const ON_PREFIXES = [ \"on:\", \"on-window:\", \"on-document:\" ];\n        const broadcast = (infix, type, ev) => {\n            type = type.replace(/([A-Z])/g, (a => \"-\" + a.toLowerCase()));\n            doc.querySelectorAll(\"[on\" + infix + \"\\\\:\" + type + \"]\").forEach((target => dispatch(target, type, ev)));\n        };\n        const symbolUsed = (el, symbolName) => el.dispatchEvent(new CustomEvent(\"qSymbol\", {\n            detail: {\n                name: symbolName\n            },\n            bubbles: !0,\n            composed: !0\n        }));\n        const error = msg => {\n            throw new Error(\"QWIK \" + msg);\n        };\n        const qrlResolver = (element, qrl) => {\n            element = element.closest(\"[q\\\\:container]\");\n            return new URL(qrl, new URL(element ? element.getAttribute(\"q:base\") : doc.baseURI, doc.baseURI));\n        };\n        const dispatch = async (element, eventName, ev) => {\n            for (const onPrefix of ON_PREFIXES) {\n                const attrValue = element.getAttribute(onPrefix + eventName);\n                if (attrValue) {\n                    element.hasAttribute(\"preventdefault:\" + eventName) && ev.preventDefault();\n                    for (const qrl of attrValue.split(\"\\n\")) {\n                        const url = qrlResolver(element, qrl);\n                        if (url) {\n                            const symbolName = getSymbolName(url);\n                            const handler = (window[url.pathname] || await import(url.href.split(\"#\")[0]))[symbolName] || error(url + \" does not export \" + symbolName);\n                            const previousCtx = doc.__q_context__;\n                            try {\n                                doc.__q_context__ = [ element, ev, url ];\n                                handler(ev, element, url);\n                            } finally {\n                                doc.__q_context__ = previousCtx;\n                                symbolUsed(element, symbolName);\n                            }\n                        }\n                    }\n                }\n            }\n        };\n        const getSymbolName = url => url.hash.replace(/^#?([^?[|]*).*$/, \"$1\") || \"default\";\n        const processEvent = (ev, element) => {\n            if ((element = ev.target) == doc) {\n                setTimeout((() => broadcast(\"-document\", ev.type, ev)));\n            } else {\n                while (element && element.getAttribute) {\n                    dispatch(element, ev.type, ev);\n                    element = ev.bubbles ? element.parentElement : null;\n                }\n            }\n        };\n        const qrlPrefetch = element => {\n            prefetchWorker || (prefetchWorker = new Worker(URL.createObjectURL(new Blob([ 'addEventListener(\"message\",(e=>e.data.map((e=>fetch(e)))));' ], {\n                type: \"text/javascript\"\n            }))));\n            prefetchWorker.postMessage(element.getAttribute(\"q:prefetch\").split(\"\\n\").map((qrl => qrlResolver(element, qrl) + \"\")));\n            return prefetchWorker;\n        };\n        const processReadyStateChange = readyState => {\n            readyState = doc.readyState;\n            if (!hasInitialized && (\"interactive\" == readyState || \"complete\" == readyState)) {\n                hasInitialized = 1;\n                broadcast(\"\", \"q-resume\", new CustomEvent(\"qResume\"));\n                doc.querySelectorAll(\"[q\\\\:prefetch]\").forEach(qrlPrefetch);\n            }\n        };\n        const addDocEventListener = eventName => doc.addEventListener(eventName, processEvent, {\n            capture: !0\n        });\n        if (!doc.qR) {\n            doc.qR = 1;\n            {\n                const scriptTag = doc.querySelector(\"script[events]\");\n                if (scriptTag) {\n                    scriptTag.getAttribute(\"events\").split(/[\\s,;]+/).forEach(addDocEventListener);\n                } else {\n                    for (const key in doc) {\n                        key.startsWith(\"on\") && addDocEventListener(key.slice(2));\n                    }\n                }\n            }\n            doc.addEventListener(\"readystatechange\", processReadyStateChange);\n            processReadyStateChange();\n        }\n    })(document);\n})();";
exports.QWIK_LOADER = QWIK_LOADER;
exports.QWIK_LOADER_DEBUG = QWIK_LOADER_DEBUG;
