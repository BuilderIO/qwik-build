{"version":3,"file":"core.cjs","sources":["../../../dist-dev/tsc-out/packages/qwik/src/core/util/qdev.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/log.js","../../../dist-dev/tsc-out/packages/qwik/src/core/error/error.js","../../../dist-dev/tsc-out/packages/qwik/src/core/assert/assert.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/types.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/markers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/promises.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-core.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/platform/platform.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/implicit_dollar.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/flyweight.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/fast-calls.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-sequential-scope.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-on.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/jsx-runtime.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/utils.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/case.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/operations.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/virtual-element.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-context.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/error-handling.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/execute-component.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/hash_code.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/qrl-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render-dom.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/container.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/visitor.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-lexical-scope.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/signals.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/notify-render.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-watch.js","../../../dist-dev/tsc-out/packages/qwik/src/core/util/event.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-resource.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/serializers.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/store.js","../../../dist-dev/tsc-out/packages/qwik/src/core/props/props.js","../../../dist-dev/tsc-out/packages/qwik/src/core/object/q-object.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl-class.js","../../../dist-dev/tsc-out/packages/qwik/src/core/import/qrl.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/component/component.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/factory.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/jsx/slot.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/version.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/dom/render.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/render/ssr/render-ssr.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-store.public.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-ref.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-env-data.js","../../../dist-dev/tsc-out/packages/qwik/src/core/style/scoped-stylesheet.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-styles.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-signal.js","../../../dist-dev/tsc-out/packages/qwik/src/core/use/use-error-boundary.js"],"sourcesContent":["export const qDev = globalThis.qDev === true;\nexport const qSerialize = globalThis.qSerialize !== false;\nexport const qDynamicPlatform = globalThis.qDynamicPlatform !== false;\nexport const qTest = globalThis.qTest === true;\nexport const qRuntimeQrl = globalThis.qRuntimeQrl === true;\nexport const seal = (obj) => {\n    if (qDev) {\n        Object.seal(obj);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicWRldi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL3FkZXYudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxLQUFLLEtBQUssQ0FBQztBQUMxRCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsZ0JBQWdCLEtBQUssS0FBSyxDQUFDO0FBQ3RFLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQztBQUMvQyxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUM7QUFFM0QsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDL0IsSUFBSSxJQUFJLEVBQUU7UUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ2xCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHFEZXYgPSBnbG9iYWxUaGlzLnFEZXYgPT09IHRydWU7XG5leHBvcnQgY29uc3QgcVNlcmlhbGl6ZSA9IGdsb2JhbFRoaXMucVNlcmlhbGl6ZSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcUR5bmFtaWNQbGF0Zm9ybSA9IGdsb2JhbFRoaXMucUR5bmFtaWNQbGF0Zm9ybSAhPT0gZmFsc2U7XG5leHBvcnQgY29uc3QgcVRlc3QgPSBnbG9iYWxUaGlzLnFUZXN0ID09PSB0cnVlO1xuZXhwb3J0IGNvbnN0IHFSdW50aW1lUXJsID0gZ2xvYmFsVGhpcy5xUnVudGltZVFybCA9PT0gdHJ1ZTtcblxuZXhwb3J0IGNvbnN0IHNlYWwgPSAob2JqOiBhbnkpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBPYmplY3Quc2VhbChvYmopO1xuICB9XG59O1xuXG5kZWNsYXJlIGNvbnN0IGdsb2JhbFRoaXM6IGFueTtcbiJdfQ==","import { qDev } from './qdev';\nexport const isNode = (value) => {\n    return value && typeof value.nodeType === 'number';\n};\nexport const isDocument = (value) => {\n    return value && value.nodeType === 9;\n};\nexport const isElement = (value) => {\n    return value.nodeType === 1;\n};\nexport const isQwikElement = (value) => {\n    return isNode(value) && (value.nodeType === 1 || value.nodeType === 111);\n};\nexport const isVirtualElement = (value) => {\n    return value.nodeType === 111;\n};\nexport const isText = (value) => {\n    return value.nodeType === 3;\n};\nexport const isComment = (value) => {\n    return value.nodeType === 8;\n};\nexport function assertQwikElement(el) {\n    if (qDev) {\n        if (!isQwikElement(el)) {\n            throw new Error('Not a Qwik Element');\n        }\n    }\n}\nexport function assertElement(el) {\n    if (qDev) {\n        if (!isElement(el)) {\n            throw new Error('Not a Qwik Element');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2VsZW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUU5QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFVLEVBQWlCLEVBQUU7SUFDbEQsT0FBTyxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFVLEVBQXFCLEVBQUU7SUFDMUQsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBNEIsRUFBb0IsRUFBRTtJQUMxRSxPQUFPLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEtBQVUsRUFBd0IsRUFBRTtJQUNoRSxPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssR0FBRyxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxLQUE0QixFQUEyQixFQUFFO0lBQ3hGLE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxHQUFHLENBQUM7QUFDaEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBQUMsS0FBVyxFQUFpQixFQUFFO0lBQ25ELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBQ0YsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBVyxFQUFvQixFQUFFO0lBQ3pELE9BQU8sS0FBSyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxVQUFVLGlCQUFpQixDQUFDLEVBQU87SUFDdkMsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztLQUNGO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsRUFBeUI7SUFDckQsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQsIFZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBpc05vZGUgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIE5vZGUgPT4ge1xuICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlLm5vZGVUeXBlID09PSAnbnVtYmVyJztcbn07XG5cbmV4cG9ydCBjb25zdCBpc0RvY3VtZW50ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBEb2N1bWVudCA9PiB7XG4gIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gOTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0VsZW1lbnQgPSAodmFsdWU6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCk6IHZhbHVlIGlzIEVsZW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgPT09IDE7XG59O1xuXG5leHBvcnQgY29uc3QgaXNRd2lrRWxlbWVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUXdpa0VsZW1lbnQgPT4ge1xuICByZXR1cm4gaXNOb2RlKHZhbHVlKSAmJiAodmFsdWUubm9kZVR5cGUgPT09IDEgfHwgdmFsdWUubm9kZVR5cGUgPT09IDExMSk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNWaXJ0dWFsRWxlbWVudCA9ICh2YWx1ZTogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogdmFsdWUgaXMgVmlydHVhbEVsZW1lbnQgPT4ge1xuICByZXR1cm4gdmFsdWUubm9kZVR5cGUgPT09IDExMTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1RleHQgPSAodmFsdWU6IE5vZGUpOiB2YWx1ZSBpcyBUZXh0ID0+IHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlID09PSAzO1xufTtcbmV4cG9ydCBjb25zdCBpc0NvbW1lbnQgPSAodmFsdWU6IE5vZGUpOiB2YWx1ZSBpcyBDb21tZW50ID0+IHtcbiAgcmV0dXJuIHZhbHVlLm5vZGVUeXBlID09PSA4O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFF3aWtFbGVtZW50KGVsOiBhbnkpOiBhc3NlcnRzIGVsIGlzIFF3aWtFbGVtZW50IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzUXdpa0VsZW1lbnQoZWwpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIFF3aWsgRWxlbWVudCcpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RWxlbWVudChlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50KTogYXNzZXJ0cyBlbCBpcyBFbGVtZW50IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzRWxlbWVudChlbCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGEgUXdpayBFbGVtZW50Jyk7XG4gICAgfVxuICB9XG59XG4iXX0=","import { isElement, isNode } from './element';\nimport { qDev } from './qdev';\nconst STYLE = qDev\n    ? `background: #564CE0; color: white; padding: 2px 3px; border-radius: 2px; font-size: 0.8em;`\n    : '';\nexport const logError = (message, ...optionalParams) => {\n    const err = message instanceof Error ? message : new Error(message);\n    // eslint-disable-next-line no-console\n    if (typeof globalThis._handleError === 'function' && message instanceof Error) {\n        globalThis._handleError(message, optionalParams);\n    }\n    else {\n        console.error('%cQWIK ERROR', STYLE, err.message, ...printParams(optionalParams), err.stack);\n    }\n    return err;\n};\nexport const logErrorAndStop = (message, ...optionalParams) => {\n    const err = logError(message, ...optionalParams);\n    // eslint-disable-next-line no-debugger\n    debugger;\n    return err;\n};\nexport const logWarn = (message, ...optionalParams) => {\n    // eslint-disable-next-line no-console\n    if (qDev) {\n        console.warn('%cQWIK WARN', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const logDebug = (message, ...optionalParams) => {\n    if (qDev) {\n        // eslint-disable-next-line no-console\n        console.debug('%cQWIK', STYLE, message, ...printParams(optionalParams));\n    }\n};\nexport const tryGetContext = (element) => {\n    return element['_qc_'];\n};\nconst printParams = (optionalParams) => {\n    if (qDev) {\n        return optionalParams.map((p) => {\n            if (isNode(p) && isElement(p)) {\n                return printElement(p);\n            }\n            return p;\n        });\n    }\n    return optionalParams;\n};\nconst printElement = (el) => {\n    const ctx = tryGetContext(el);\n    const isServer = /*#__PURE__*/ (() => typeof process !== 'undefined' && !!process.versions && !!process.versions.node)();\n    return {\n        tagName: el.tagName,\n        renderQRL: ctx?.$componentQrl$?.getSymbol(),\n        element: isServer ? undefined : el,\n        ctx: isServer ? undefined : ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvbG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxLQUFLLEdBQUcsSUFBSTtJQUNoQixDQUFDLENBQUMsNEZBQTRGO0lBQzlGLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFUCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDbEUsTUFBTSxHQUFHLEdBQUcsT0FBTyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNwRSxzQ0FBc0M7SUFDdEMsSUFBSSxPQUFRLFVBQWtCLENBQUMsWUFBWSxLQUFLLFVBQVUsSUFBSSxPQUFPLFlBQVksS0FBSyxFQUFFO1FBQ3JGLFVBQWtCLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztLQUMzRDtTQUFNO1FBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxPQUFhLEVBQUUsR0FBRyxjQUFxQixFQUFFLEVBQUU7SUFDekUsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLGNBQWMsQ0FBQyxDQUFDO0lBQ2pELHVDQUF1QztJQUN2QyxRQUFRLENBQUM7SUFDVCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxDQUFDLE9BQWEsRUFBRSxHQUFHLGNBQXFCLEVBQUUsRUFBRTtJQUNqRSxzQ0FBc0M7SUFDdEMsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7S0FDN0U7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEdBQUcsY0FBcUIsRUFBRSxFQUFFO0lBQ3JFLElBQUksSUFBSSxFQUFFO1FBQ1Isc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztLQUN6RTtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE9BQW9CLEVBQXdCLEVBQUU7SUFDMUUsT0FBUSxPQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxjQUFxQixFQUFFLEVBQUU7SUFDNUMsSUFBSSxJQUFJLEVBQUU7UUFDUixPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUM5QixJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdCLE9BQU8sWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO1lBQ0QsT0FBTyxDQUFDLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxjQUFjLENBQUM7QUFDeEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxFQUFXLEVBQUUsRUFBRTtJQUNuQyxNQUFNLEdBQUcsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsTUFBTSxRQUFRLEdBQVksYUFBYSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQzVDLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBRXJGLE9BQU87UUFDTCxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU87UUFDbkIsU0FBUyxFQUFFLEdBQUcsRUFBRSxjQUFjLEVBQUUsU0FBUyxFQUFFO1FBQzNDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNsQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUc7S0FDaEMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgUUNvbnRleHQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50IH0gZnJvbSAnLi4vcmVuZGVyL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHsgaXNFbGVtZW50LCBpc05vZGUgfSBmcm9tICcuL2VsZW1lbnQnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmNvbnN0IFNUWUxFID0gcURldlxuICA/IGBiYWNrZ3JvdW5kOiAjNTY0Q0UwOyBjb2xvcjogd2hpdGU7IHBhZGRpbmc6IDJweCAzcHg7IGJvcmRlci1yYWRpdXM6IDJweDsgZm9udC1zaXplOiAwLjhlbTtgXG4gIDogJyc7XG5cbmV4cG9ydCBjb25zdCBsb2dFcnJvciA9IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgY29uc3QgZXJyID0gbWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yID8gbWVzc2FnZSA6IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgaWYgKHR5cGVvZiAoZ2xvYmFsVGhpcyBhcyBhbnkpLl9oYW5kbGVFcnJvciA9PT0gJ2Z1bmN0aW9uJyAmJiBtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAoZ2xvYmFsVGhpcyBhcyBhbnkpLl9oYW5kbGVFcnJvcihtZXNzYWdlLCBvcHRpb25hbFBhcmFtcyk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5lcnJvcignJWNRV0lLIEVSUk9SJywgU1RZTEUsIGVyci5tZXNzYWdlLCAuLi5wcmludFBhcmFtcyhvcHRpb25hbFBhcmFtcyksIGVyci5zdGFjayk7XG4gIH1cbiAgcmV0dXJuIGVycjtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dFcnJvckFuZFN0b3AgPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGNvbnN0IGVyciA9IGxvZ0Vycm9yKG1lc3NhZ2UsIC4uLm9wdGlvbmFsUGFyYW1zKTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlYnVnZ2VyXG4gIGRlYnVnZ2VyO1xuICByZXR1cm4gZXJyO1xufTtcblxuZXhwb3J0IGNvbnN0IGxvZ1dhcm4gPSAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGlmIChxRGV2KSB7XG4gICAgY29uc29sZS53YXJuKCclY1FXSUsgV0FSTicsIFNUWUxFLCBtZXNzYWdlLCAuLi5wcmludFBhcmFtcyhvcHRpb25hbFBhcmFtcykpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgbG9nRGVidWcgPSAobWVzc2FnZT86IHN0cmluZywgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmRlYnVnKCclY1FXSUsnLCBTVFlMRSwgbWVzc2FnZSwgLi4ucHJpbnRQYXJhbXMob3B0aW9uYWxQYXJhbXMpKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRyeUdldENvbnRleHQgPSAoZWxlbWVudDogUXdpa0VsZW1lbnQpOiBRQ29udGV4dCB8IHVuZGVmaW5lZCA9PiB7XG4gIHJldHVybiAoZWxlbWVudCBhcyBhbnkpWydfcWNfJ107XG59O1xuXG5jb25zdCBwcmludFBhcmFtcyA9IChvcHRpb25hbFBhcmFtczogYW55W10pID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICByZXR1cm4gb3B0aW9uYWxQYXJhbXMubWFwKChwKSA9PiB7XG4gICAgICBpZiAoaXNOb2RlKHApICYmIGlzRWxlbWVudChwKSkge1xuICAgICAgICByZXR1cm4gcHJpbnRFbGVtZW50KHApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHA7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbmFsUGFyYW1zO1xufTtcblxuY29uc3QgcHJpbnRFbGVtZW50ID0gKGVsOiBFbGVtZW50KSA9PiB7XG4gIGNvbnN0IGN0eCA9IHRyeUdldENvbnRleHQoZWwpO1xuICBjb25zdCBpc1NlcnZlcjogYm9vbGVhbiA9IC8qI19fUFVSRV9fKi8gKCgpID0+XG4gICAgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICEhcHJvY2Vzcy52ZXJzaW9ucyAmJiAhIXByb2Nlc3MudmVyc2lvbnMubm9kZSkoKTtcblxuICByZXR1cm4ge1xuICAgIHRhZ05hbWU6IGVsLnRhZ05hbWUsXG4gICAgcmVuZGVyUVJMOiBjdHg/LiRjb21wb25lbnRRcmwkPy5nZXRTeW1ib2woKSxcbiAgICBlbGVtZW50OiBpc1NlcnZlciA/IHVuZGVmaW5lZCA6IGVsLFxuICAgIGN0eDogaXNTZXJ2ZXIgPyB1bmRlZmluZWQgOiBjdHgsXG4gIH07XG59O1xuIl19","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport const QError_stringifyClassOrStyle = 0;\nexport const QError_cannotSerializeNode = 1; // 'Can not serialize a HTML Node that is not an Element'\nexport const QError_runtimeQrlNoElement = 2; // `Q-ERROR: '${qrl}' is runtime but no instance found on element.`\nexport const QError_verifySerializable = 3; // 'Only primitive and object literals can be serialized', value,\nexport const QError_errorWhileRendering = 4; // Crash while rendering\nexport const QError_cannotRenderOverExistingContainer = 5; //'You can render over a existing q:container. Skipping render().'\nexport const QError_setProperty = 6; //'Set property'\nexport const QError_qrlOrError = 7;\nexport const QError_onlyObjectWrapped = 8;\nexport const QError_onlyLiteralWrapped = 9;\nexport const QError_qrlIsNotFunction = 10;\nexport const QError_dynamicImportFailed = 11;\nexport const QError_unknownTypeArgument = 12;\nexport const QError_notFoundContext = 13;\nexport const QError_useMethodOutsideContext = 14;\nexport const QError_missingRenderCtx = 15;\nexport const QError_missingDoc = 16;\nexport const QError_immutableProps = 17;\nexport const QError_hostCanOnlyBeAtRoot = 18;\nexport const QError_immutableJsxProps = 19;\nexport const QError_useInvokeContext = 20;\nexport const QError_containerAlreadyPaused = 21;\nexport const QError_canNotMountUseServerMount = 22;\nexport const QError_rootNodeMustBeHTML = 23;\nexport const QError_strictHTMLChildren = 24;\nexport const QError_invalidJsxNodeType = 25;\nexport const QError_trackUseStore = 26;\nexport const QError_missingObjectId = 27;\nexport const QError_invalidContext = 28;\nexport const QError_canNotRenderHTML = 29;\nexport const QError_qrlMissingContainer = 30;\nexport const QError_qrlMissingChunk = 31;\nexport const QError_invalidRefValue = 32;\nexport const qError = (code, ...parts) => {\n    const text = codeToText(code);\n    return logErrorAndStop(text, ...parts);\n};\nexport const codeToText = (code) => {\n    if (qDev) {\n        const MAP = [\n            'Error while serializing class attribute',\n            'Can not serialize a HTML Node that is not an Element',\n            'Rruntime but no instance found on element.',\n            'Only primitive and object literals can be serialized',\n            'Crash while rendering',\n            'You can render over a existing q:container. Skipping render().',\n            'Set property',\n            \"Only function's and 'string's are supported.\",\n            \"Only objects can be wrapped in 'QObject'\",\n            `Only objects literals can be wrapped in 'QObject'`,\n            'QRL is not a function',\n            'Dynamic import not found',\n            'Unknown type argument',\n            'Actual value for useContext() can not be found, make sure some ancestor component has set a value using useContextProvider()',\n            \"Invoking 'use*()' method outside of invocation context.\",\n            'Cant access renderCtx for existing context',\n            'Cant access document for existing context',\n            'props are inmutable',\n            '<div> component can only be used at the root of a Qwik component$()',\n            'Props are immutable by default.',\n            'use- method must be called only at the root level of a component$()',\n            'Container is already paused. Skipping',\n            'Components using useServerMount() can only be mounted in the server, if you need your component to be mounted in the client, use \"useMount$()\" instead',\n            'When rendering directly on top of Document, the root node must be a <html>',\n            'A <html> node must have 2 children. The first one <head> and the second one a <body>',\n            'Invalid JSXNode type. It must be either a function or a string. Found:',\n            'Tracking value changes can only be done to useStore() objects and component props',\n            'Missing Object ID for captured object',\n            'The provided Context reference is not a valid context created by createContext()',\n            '<html> is the root container, it can not be rendered inside a component',\n            'QRLs can not be resolved because it does not have an attached container. This means that the QRL does not know where it belongs inside the DOM, so it cant dynamically import() from a relative path.',\n            'QRLs can not be dynamically resolved, because it does not have a chunk path',\n            'The JSX ref attribute must be a Signal', // 32\n        ];\n        return `Code(${code}): ${MAP[code] ?? ''}`;\n    }\n    else {\n        return `Code(${code})`;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvZXJyb3IvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQUMsQ0FBQztBQUM5QyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUMsQ0FBQyx5REFBeUQ7QUFDdEcsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsQ0FBQyxDQUFDLENBQUMsbUVBQW1FO0FBQ2hILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBQyxDQUFDLGlFQUFpRTtBQUM3RyxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUFDLENBQUMsQ0FBQyx3QkFBd0I7QUFDckUsTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUcsQ0FBQyxDQUFDLENBQUMsa0VBQWtFO0FBQzdILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxDQUFDLGdCQUFnQjtBQUNyRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sd0JBQXdCLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLENBQUMsQ0FBQztBQUMzQyxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxFQUFFLENBQUM7QUFDMUMsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsRUFBRSxDQUFDO0FBQzdDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsRUFBRSxDQUFDO0FBQ2pELE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUMxQyxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7QUFDcEMsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxFQUFFLENBQUM7QUFDM0MsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDZCQUE2QixHQUFHLEVBQUUsQ0FBQztBQUNoRCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBRyxFQUFFLENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsRUFBRSxDQUFDO0FBQzVDLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEVBQUUsQ0FBQztBQUM1QyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxFQUFFLENBQUM7QUFDNUMsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0FBQ3ZDLE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztBQUN6QyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsRUFBRSxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLEVBQUUsQ0FBQztBQUM3QyxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFFLENBQUM7QUFDekMsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBQ3pDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLElBQVksRUFBRSxHQUFHLEtBQVksRUFBUyxFQUFFO0lBQzdELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QixPQUFPLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUNqRCxJQUFJLElBQUksRUFBRTtRQUNSLE1BQU0sR0FBRyxHQUFHO1lBQ1YseUNBQXlDO1lBQ3pDLHNEQUFzRDtZQUN0RCw0Q0FBNEM7WUFDNUMsc0RBQXNEO1lBQ3RELHVCQUF1QjtZQUN2QixnRUFBZ0U7WUFDaEUsY0FBYztZQUNkLDhDQUE4QztZQUM5QywwQ0FBMEM7WUFDMUMsbURBQW1EO1lBQ25ELHVCQUF1QjtZQUN2QiwwQkFBMEI7WUFDMUIsdUJBQXVCO1lBQ3ZCLDhIQUE4SDtZQUM5SCx5REFBeUQ7WUFDekQsNENBQTRDO1lBQzVDLDJDQUEyQztZQUMzQyxxQkFBcUI7WUFDckIscUVBQXFFO1lBQ3JFLGlDQUFpQztZQUNqQyxxRUFBcUU7WUFDckUsdUNBQXVDO1lBQ3ZDLHdKQUF3SjtZQUN4Siw0RUFBNEU7WUFDNUUsc0ZBQXNGO1lBQ3RGLHdFQUF3RTtZQUN4RSxtRkFBbUY7WUFDbkYsdUNBQXVDO1lBQ3ZDLGtGQUFrRjtZQUNsRix5RUFBeUU7WUFDekUsdU1BQXVNO1lBQ3ZNLDZFQUE2RTtZQUM3RSx3Q0FBd0MsRUFBRSxLQUFLO1NBQ2hELENBQUM7UUFDRixPQUFPLFFBQVEsSUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQztLQUM1QztTQUFNO1FBQ0wsT0FBTyxRQUFRLElBQUksR0FBRyxDQUFDO0tBQ3hCO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nRXJyb3JBbmRTdG9wIH0gZnJvbSAnLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5cbmV4cG9ydCBjb25zdCBRRXJyb3Jfc3RyaW5naWZ5Q2xhc3NPclN0eWxlID0gMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY2Fubm90U2VyaWFsaXplTm9kZSA9IDE7IC8vICdDYW4gbm90IHNlcmlhbGl6ZSBhIEhUTUwgTm9kZSB0aGF0IGlzIG5vdCBhbiBFbGVtZW50J1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ydW50aW1lUXJsTm9FbGVtZW50ID0gMjsgLy8gYFEtRVJST1I6ICcke3FybH0nIGlzIHJ1bnRpbWUgYnV0IG5vIGluc3RhbmNlIGZvdW5kIG9uIGVsZW1lbnQuYFxuZXhwb3J0IGNvbnN0IFFFcnJvcl92ZXJpZnlTZXJpYWxpemFibGUgPSAzOyAvLyAnT25seSBwcmltaXRpdmUgYW5kIG9iamVjdCBsaXRlcmFscyBjYW4gYmUgc2VyaWFsaXplZCcsIHZhbHVlLFxuZXhwb3J0IGNvbnN0IFFFcnJvcl9lcnJvcldoaWxlUmVuZGVyaW5nID0gNDsgLy8gQ3Jhc2ggd2hpbGUgcmVuZGVyaW5nXG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbm5vdFJlbmRlck92ZXJFeGlzdGluZ0NvbnRhaW5lciA9IDU7IC8vJ1lvdSBjYW4gcmVuZGVyIG92ZXIgYSBleGlzdGluZyBxOmNvbnRhaW5lci4gU2tpcHBpbmcgcmVuZGVyKCkuJ1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zZXRQcm9wZXJ0eSA9IDY7IC8vJ1NldCBwcm9wZXJ0eSdcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsT3JFcnJvciA9IDc7XG5leHBvcnQgY29uc3QgUUVycm9yX29ubHlPYmplY3RXcmFwcGVkID0gODtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfb25seUxpdGVyYWxXcmFwcGVkID0gOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsSXNOb3RGdW5jdGlvbiA9IDEwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9keW5hbWljSW1wb3J0RmFpbGVkID0gMTE7XG5leHBvcnQgY29uc3QgUUVycm9yX3Vua25vd25UeXBlQXJndW1lbnQgPSAxMjtcbmV4cG9ydCBjb25zdCBRRXJyb3Jfbm90Rm91bmRDb250ZXh0ID0gMTM7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZU1ldGhvZE91dHNpZGVDb250ZXh0ID0gMTQ7XG5leHBvcnQgY29uc3QgUUVycm9yX21pc3NpbmdSZW5kZXJDdHggPSAxNTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ0RvYyA9IDE2O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9pbW11dGFibGVQcm9wcyA9IDE3O1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9ob3N0Q2FuT25seUJlQXRSb290ID0gMTg7XG5leHBvcnQgY29uc3QgUUVycm9yX2ltbXV0YWJsZUpzeFByb3BzID0gMTk7XG5leHBvcnQgY29uc3QgUUVycm9yX3VzZUludm9rZUNvbnRleHQgPSAyMDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfY29udGFpbmVyQWxyZWFkeVBhdXNlZCA9IDIxO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9jYW5Ob3RNb3VudFVzZVNlcnZlck1vdW50ID0gMjI7XG5leHBvcnQgY29uc3QgUUVycm9yX3Jvb3ROb2RlTXVzdEJlSFRNTCA9IDIzO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9zdHJpY3RIVE1MQ2hpbGRyZW4gPSAyNDtcbmV4cG9ydCBjb25zdCBRRXJyb3JfaW52YWxpZEpzeE5vZGVUeXBlID0gMjU7XG5leHBvcnQgY29uc3QgUUVycm9yX3RyYWNrVXNlU3RvcmUgPSAyNjtcbmV4cG9ydCBjb25zdCBRRXJyb3JfbWlzc2luZ09iamVjdElkID0gMjc7XG5leHBvcnQgY29uc3QgUUVycm9yX2ludmFsaWRDb250ZXh0ID0gMjg7XG5leHBvcnQgY29uc3QgUUVycm9yX2Nhbk5vdFJlbmRlckhUTUwgPSAyOTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfcXJsTWlzc2luZ0NvbnRhaW5lciA9IDMwO1xuZXhwb3J0IGNvbnN0IFFFcnJvcl9xcmxNaXNzaW5nQ2h1bmsgPSAzMTtcbmV4cG9ydCBjb25zdCBRRXJyb3JfaW52YWxpZFJlZlZhbHVlID0gMzI7XG5leHBvcnQgY29uc3QgcUVycm9yID0gKGNvZGU6IG51bWJlciwgLi4ucGFydHM6IGFueVtdKTogRXJyb3IgPT4ge1xuICBjb25zdCB0ZXh0ID0gY29kZVRvVGV4dChjb2RlKTtcbiAgcmV0dXJuIGxvZ0Vycm9yQW5kU3RvcCh0ZXh0LCAuLi5wYXJ0cyk7XG59O1xuXG5leHBvcnQgY29uc3QgY29kZVRvVGV4dCA9IChjb2RlOiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBpZiAocURldikge1xuICAgIGNvbnN0IE1BUCA9IFtcbiAgICAgICdFcnJvciB3aGlsZSBzZXJpYWxpemluZyBjbGFzcyBhdHRyaWJ1dGUnLCAvLyAwXG4gICAgICAnQ2FuIG5vdCBzZXJpYWxpemUgYSBIVE1MIE5vZGUgdGhhdCBpcyBub3QgYW4gRWxlbWVudCcsIC8vIDFcbiAgICAgICdScnVudGltZSBidXQgbm8gaW5zdGFuY2UgZm91bmQgb24gZWxlbWVudC4nLCAvLyAyXG4gICAgICAnT25seSBwcmltaXRpdmUgYW5kIG9iamVjdCBsaXRlcmFscyBjYW4gYmUgc2VyaWFsaXplZCcsIC8vIDNcbiAgICAgICdDcmFzaCB3aGlsZSByZW5kZXJpbmcnLCAvLyA0XG4gICAgICAnWW91IGNhbiByZW5kZXIgb3ZlciBhIGV4aXN0aW5nIHE6Y29udGFpbmVyLiBTa2lwcGluZyByZW5kZXIoKS4nLCAvLyA1XG4gICAgICAnU2V0IHByb3BlcnR5JywgLy8gNlxuICAgICAgXCJPbmx5IGZ1bmN0aW9uJ3MgYW5kICdzdHJpbmcncyBhcmUgc3VwcG9ydGVkLlwiLCAvLyA3XG4gICAgICBcIk9ubHkgb2JqZWN0cyBjYW4gYmUgd3JhcHBlZCBpbiAnUU9iamVjdCdcIiwgLy8gOFxuICAgICAgYE9ubHkgb2JqZWN0cyBsaXRlcmFscyBjYW4gYmUgd3JhcHBlZCBpbiAnUU9iamVjdCdgLCAvLyA5XG4gICAgICAnUVJMIGlzIG5vdCBhIGZ1bmN0aW9uJywgLy8gMTBcbiAgICAgICdEeW5hbWljIGltcG9ydCBub3QgZm91bmQnLCAvLyAxMVxuICAgICAgJ1Vua25vd24gdHlwZSBhcmd1bWVudCcsIC8vIDEyXG4gICAgICAnQWN0dWFsIHZhbHVlIGZvciB1c2VDb250ZXh0KCkgY2FuIG5vdCBiZSBmb3VuZCwgbWFrZSBzdXJlIHNvbWUgYW5jZXN0b3IgY29tcG9uZW50IGhhcyBzZXQgYSB2YWx1ZSB1c2luZyB1c2VDb250ZXh0UHJvdmlkZXIoKScsIC8vIDEzXG4gICAgICBcIkludm9raW5nICd1c2UqKCknIG1ldGhvZCBvdXRzaWRlIG9mIGludm9jYXRpb24gY29udGV4dC5cIiwgLy8gMTRcbiAgICAgICdDYW50IGFjY2VzcyByZW5kZXJDdHggZm9yIGV4aXN0aW5nIGNvbnRleHQnLCAvLyAxNVxuICAgICAgJ0NhbnQgYWNjZXNzIGRvY3VtZW50IGZvciBleGlzdGluZyBjb250ZXh0JywgLy8gMTZcbiAgICAgICdwcm9wcyBhcmUgaW5tdXRhYmxlJywgLy8gMTdcbiAgICAgICc8ZGl2PiBjb21wb25lbnQgY2FuIG9ubHkgYmUgdXNlZCBhdCB0aGUgcm9vdCBvZiBhIFF3aWsgY29tcG9uZW50JCgpJywgLy8gMThcbiAgICAgICdQcm9wcyBhcmUgaW1tdXRhYmxlIGJ5IGRlZmF1bHQuJywgLy8gMTlcbiAgICAgICd1c2UtIG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBvbmx5IGF0IHRoZSByb290IGxldmVsIG9mIGEgY29tcG9uZW50JCgpJywgLy8gMjBcbiAgICAgICdDb250YWluZXIgaXMgYWxyZWFkeSBwYXVzZWQuIFNraXBwaW5nJywgLy8gMjFcbiAgICAgICdDb21wb25lbnRzIHVzaW5nIHVzZVNlcnZlck1vdW50KCkgY2FuIG9ubHkgYmUgbW91bnRlZCBpbiB0aGUgc2VydmVyLCBpZiB5b3UgbmVlZCB5b3VyIGNvbXBvbmVudCB0byBiZSBtb3VudGVkIGluIHRoZSBjbGllbnQsIHVzZSBcInVzZU1vdW50JCgpXCIgaW5zdGVhZCcsIC8vIDIyXG4gICAgICAnV2hlbiByZW5kZXJpbmcgZGlyZWN0bHkgb24gdG9wIG9mIERvY3VtZW50LCB0aGUgcm9vdCBub2RlIG11c3QgYmUgYSA8aHRtbD4nLCAvLyAyM1xuICAgICAgJ0EgPGh0bWw+IG5vZGUgbXVzdCBoYXZlIDIgY2hpbGRyZW4uIFRoZSBmaXJzdCBvbmUgPGhlYWQ+IGFuZCB0aGUgc2Vjb25kIG9uZSBhIDxib2R5PicsIC8vIDI0XG4gICAgICAnSW52YWxpZCBKU1hOb2RlIHR5cGUuIEl0IG11c3QgYmUgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmcuIEZvdW5kOicsIC8vIDI1XG4gICAgICAnVHJhY2tpbmcgdmFsdWUgY2hhbmdlcyBjYW4gb25seSBiZSBkb25lIHRvIHVzZVN0b3JlKCkgb2JqZWN0cyBhbmQgY29tcG9uZW50IHByb3BzJywgLy8gMjZcbiAgICAgICdNaXNzaW5nIE9iamVjdCBJRCBmb3IgY2FwdHVyZWQgb2JqZWN0JywgLy8gMjdcbiAgICAgICdUaGUgcHJvdmlkZWQgQ29udGV4dCByZWZlcmVuY2UgaXMgbm90IGEgdmFsaWQgY29udGV4dCBjcmVhdGVkIGJ5IGNyZWF0ZUNvbnRleHQoKScsIC8vIDI4XG4gICAgICAnPGh0bWw+IGlzIHRoZSByb290IGNvbnRhaW5lciwgaXQgY2FuIG5vdCBiZSByZW5kZXJlZCBpbnNpZGUgYSBjb21wb25lbnQnLCAvLyAyOVxuICAgICAgJ1FSTHMgY2FuIG5vdCBiZSByZXNvbHZlZCBiZWNhdXNlIGl0IGRvZXMgbm90IGhhdmUgYW4gYXR0YWNoZWQgY29udGFpbmVyLiBUaGlzIG1lYW5zIHRoYXQgdGhlIFFSTCBkb2VzIG5vdCBrbm93IHdoZXJlIGl0IGJlbG9uZ3MgaW5zaWRlIHRoZSBET00sIHNvIGl0IGNhbnQgZHluYW1pY2FsbHkgaW1wb3J0KCkgZnJvbSBhIHJlbGF0aXZlIHBhdGguJywgLy8gMzBcbiAgICAgICdRUkxzIGNhbiBub3QgYmUgZHluYW1pY2FsbHkgcmVzb2x2ZWQsIGJlY2F1c2UgaXQgZG9lcyBub3QgaGF2ZSBhIGNodW5rIHBhdGgnLCAvLyAzMVxuICAgICAgJ1RoZSBKU1ggcmVmIGF0dHJpYnV0ZSBtdXN0IGJlIGEgU2lnbmFsJywgLy8gMzJcbiAgICBdO1xuICAgIHJldHVybiBgQ29kZSgke2NvZGV9KTogJHtNQVBbY29kZV0gPz8gJyd9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYENvZGUoJHtjb2RlfSlgO1xuICB9XG59O1xuIl19","import { logErrorAndStop } from '../util/log';\nimport { qDev } from '../util/qdev';\nexport function assertDefined(value, text, ...parts) {\n    if (qDev) {\n        if (value != null)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertEqual(value1, value2, text, ...parts) {\n    if (qDev) {\n        if (value1 === value2)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertTrue(value1, text, ...parts) {\n    if (qDev) {\n        if (value1 === true)\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\nexport function assertNumber(value1, text, ...parts) {\n    if (qDev) {\n        if (typeof value1 === 'number')\n            return;\n        throw logErrorAndStop(text, ...parts);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL2Fzc2VydC9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDLE1BQU0sVUFBVSxhQUFhLENBQzNCLEtBQVEsRUFDUixJQUFZLEVBQ1osR0FBRyxLQUFZO0lBRWYsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLEtBQUssSUFBSSxJQUFJO1lBQUUsT0FBTztRQUMxQixNQUFNLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUN6QixNQUFXLEVBQ1gsTUFBVyxFQUNYLElBQVksRUFDWixHQUFHLEtBQVk7SUFFZixJQUFJLElBQUksRUFBRTtRQUNSLElBQUksTUFBTSxLQUFLLE1BQU07WUFBRSxPQUFPO1FBQzlCLE1BQU0sZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0tBQ3ZDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQUMsTUFBVyxFQUFFLElBQVksRUFBRSxHQUFHLEtBQVk7SUFDbkUsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLE1BQU0sS0FBSyxJQUFJO1lBQUUsT0FBTztRQUM1QixNQUFNLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QztBQUNILENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQVcsRUFBRSxJQUFZLEVBQUUsR0FBRyxLQUFZO0lBQ3JFLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRO1lBQUUsT0FBTztRQUN2QyxNQUFNLGVBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztLQUN2QztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dFcnJvckFuZFN0b3AgfSBmcm9tICcuLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydERlZmluZWQ8VD4oXG4gIHZhbHVlOiBULFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZSBpcyBOb25OdWxsYWJsZTxUPiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlICE9IG51bGwpIHJldHVybjtcbiAgICB0aHJvdyBsb2dFcnJvckFuZFN0b3AodGV4dCwgLi4ucGFydHMpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFcXVhbChcbiAgdmFsdWUxOiBhbnksXG4gIHZhbHVlMjogYW55LFxuICB0ZXh0OiBzdHJpbmcsXG4gIC4uLnBhcnRzOiBhbnlbXVxuKTogYXNzZXJ0cyB2YWx1ZTEgaXMgdHlwZW9mIHZhbHVlMiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHZhbHVlMSA9PT0gdmFsdWUyKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHJ1ZSh2YWx1ZTE6IGFueSwgdGV4dDogc3RyaW5nLCAuLi5wYXJ0czogYW55W10pOiBhc3NlcnRzIHZhbHVlMSBpcyB0cnVlIHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAodmFsdWUxID09PSB0cnVlKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKHZhbHVlMTogYW55LCB0ZXh0OiBzdHJpbmcsIC4uLnBhcnRzOiBhbnlbXSk6IGFzc2VydHMgdmFsdWUxIGlzIG51bWJlciB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZTEgPT09ICdudW1iZXInKSByZXR1cm47XG4gICAgdGhyb3cgbG9nRXJyb3JBbmRTdG9wKHRleHQsIC4uLnBhcnRzKTtcbiAgfVxufVxuIl19","/**\n * @private\n */\nexport const isHtmlElement = (node) => {\n    return node ? node.nodeType === 1 : false;\n};\nexport const isSerializableObject = (v) => {\n    const proto = Object.getPrototypeOf(v);\n    return proto === Object.prototype || proto === null;\n};\nexport const isObject = (v) => {\n    return v && typeof v === 'object';\n};\nexport const isArray = (v) => {\n    return Array.isArray(v);\n};\nexport const isString = (v) => {\n    return typeof v === 'string';\n};\nexport const isFunction = (v) => {\n    return typeof v === 'function';\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC90eXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLElBQVMsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUM1QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO0lBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsT0FBTyxLQUFLLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQ3RELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBWSxFQUFFO0lBQzNDLE9BQU8sQ0FBQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFNLEVBQWMsRUFBRTtJQUM1QyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBTSxFQUFlLEVBQUU7SUFDOUMsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDL0IsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBTSxFQUFpQixFQUFFO0lBQ2xELE9BQU8sT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2pDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGlzSHRtbEVsZW1lbnQgPSAobm9kZTogYW55KTogbm9kZSBpcyBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSAxIDogZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTZXJpYWxpemFibGVPYmplY3QgPSAodjogYW55KSA9PiB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHYpO1xuICByZXR1cm4gcHJvdG8gPT09IE9iamVjdC5wcm90b3R5cGUgfHwgcHJvdG8gPT09IG51bGw7XG59O1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAodjogYW55KTogdiBpcyBhbnkgPT4ge1xuICByZXR1cm4gdiAmJiB0eXBlb2YgdiA9PT0gJ29iamVjdCc7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBcnJheSA9ICh2OiBhbnkpOiB2IGlzIGFueVtdID0+IHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG59O1xuXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAodjogYW55KTogdiBpcyBzdHJpbmcgPT4ge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRnVuY3Rpb24gPSAodjogYW55KTogdiBpcyBGdW5jdGlvbiA9PiB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgYSB2YWx1ZSB3aGljaCBpcyBlaXRoZXIgcmVzb2x2ZSBvciBhIHByb21pc2UuXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFZhbHVlT3JQcm9taXNlPFQ+ID0gVCB8IFByb21pc2U8VD47XG4iXX0=","/**\n * State factory of the component.\n */\nexport const OnRenderProp = 'q:renderFn';\n/**\n * Component style host prefix\n */\nexport const ComponentStylesPrefixHost = '💎';\n/**\n * Component style content prefix\n */\nexport const ComponentStylesPrefixContent = '⭐️';\n/**\n * Prefix used to identify on listeners.\n */\nexport const EventPrefix = 'on:';\n/**\n * Attribute used to mark that an event listener is attached.\n */\nexport const EventAny = 'on:.';\n/**\n * `<some-element q:slot=\"...\">`\n */\nexport const QSlot = 'q:slot';\nexport const QSlotRef = 'q:sref';\nexport const QSlotS = 'q:s';\nexport const QStyle = 'q:style';\nexport const QScopedStyle = 'q:sstyle';\nexport const QCtxAttr = 'q:ctx';\nexport const QContainerAttr = 'q:container';\nexport const QContainerSelector = '[q\\\\:container]';\nexport const RenderEvent = 'qRender';\n/**\n * `<q:slot name=\"...\">`\n */\nexport const QSlotInertName = '\\u0000';\nexport const ELEMENT_ID = 'q:id';\nexport const ELEMENT_ID_SELECTOR = '[q\\\\:id]';\nexport const ELEMENT_ID_PREFIX = '#';\nexport const ELEMENT_ID_Q_PROPS_PREFIX = '&';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2Vycy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL21hcmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDO0FBRTlDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSxDQUFDO0FBRWpEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUM7QUFDL0I7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDO0FBQzlCLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQztBQUVoQyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsYUFBYSxDQUFDO0FBRTVDLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGlCQUFpQixDQUFDO0FBRXBELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUM7QUFDckM7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsVUFBVSxDQUFDO0FBQzlDLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztBQUNyQyxNQUFNLENBQUMsTUFBTSx5QkFBeUIsR0FBRyxHQUFHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN0YXRlIGZhY3Rvcnkgb2YgdGhlIGNvbXBvbmVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IE9uUmVuZGVyUHJvcCA9ICdxOnJlbmRlckZuJztcblxuLyoqXG4gKiBDb21wb25lbnQgc3R5bGUgaG9zdCBwcmVmaXhcbiAqL1xuZXhwb3J0IGNvbnN0IENvbXBvbmVudFN0eWxlc1ByZWZpeEhvc3QgPSAn8J+Sjic7XG5cbi8qKlxuICogQ29tcG9uZW50IHN0eWxlIGNvbnRlbnQgcHJlZml4XG4gKi9cbmV4cG9ydCBjb25zdCBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ID0gJ+KtkO+4jyc7XG5cbi8qKlxuICogUHJlZml4IHVzZWQgdG8gaWRlbnRpZnkgb24gbGlzdGVuZXJzLlxuICovXG5leHBvcnQgY29uc3QgRXZlbnRQcmVmaXggPSAnb246JztcblxuLyoqXG4gKiBBdHRyaWJ1dGUgdXNlZCB0byBtYXJrIHRoYXQgYW4gZXZlbnQgbGlzdGVuZXIgaXMgYXR0YWNoZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBFdmVudEFueSA9ICdvbjouJztcbi8qKlxuICogYDxzb21lLWVsZW1lbnQgcTpzbG90PVwiLi4uXCI+YFxuICovXG5leHBvcnQgY29uc3QgUVNsb3QgPSAncTpzbG90JztcbmV4cG9ydCBjb25zdCBRU2xvdFJlZiA9ICdxOnNyZWYnO1xuZXhwb3J0IGNvbnN0IFFTbG90UyA9ICdxOnMnO1xuZXhwb3J0IGNvbnN0IFFTdHlsZSA9ICdxOnN0eWxlJztcbmV4cG9ydCBjb25zdCBRU2NvcGVkU3R5bGUgPSAncTpzc3R5bGUnO1xuZXhwb3J0IGNvbnN0IFFDdHhBdHRyID0gJ3E6Y3R4JztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJBdHRyID0gJ3E6Y29udGFpbmVyJztcblxuZXhwb3J0IGNvbnN0IFFDb250YWluZXJTZWxlY3RvciA9ICdbcVxcXFw6Y29udGFpbmVyXSc7XG5cbmV4cG9ydCBjb25zdCBSZW5kZXJFdmVudCA9ICdxUmVuZGVyJztcbi8qKlxuICogYDxxOnNsb3QgbmFtZT1cIi4uLlwiPmBcbiAqL1xuZXhwb3J0IGNvbnN0IFFTbG90SW5lcnROYW1lID0gJ1xcdTAwMDAnO1xuXG5leHBvcnQgY29uc3QgRUxFTUVOVF9JRCA9ICdxOmlkJztcbmV4cG9ydCBjb25zdCBFTEVNRU5UX0lEX1NFTEVDVE9SID0gJ1txXFxcXDppZF0nO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUFJFRklYID0gJyMnO1xuZXhwb3J0IGNvbnN0IEVMRU1FTlRfSURfUV9QUk9QU19QUkVGSVggPSAnJic7XG4iXX0=","export const isPromise = (value) => {\n    return value instanceof Promise;\n};\nexport const safeCall = (call, thenFn, rejectFn) => {\n    try {\n        const promise = call();\n        if (isPromise(promise)) {\n            return promise.then(thenFn, rejectFn);\n        }\n        else {\n            return thenFn(promise);\n        }\n    }\n    catch (e) {\n        return rejectFn(e);\n    }\n};\nexport const then = (promise, thenFn) => {\n    return isPromise(promise) ? promise.then(thenFn) : thenFn(promise);\n};\nexport const promiseAll = (promises) => {\n    const hasPromise = promises.some(isPromise);\n    if (hasPromise) {\n        return Promise.all(promises);\n    }\n    return promises;\n};\nexport const isNotNullable = (v) => {\n    return v != null;\n};\nexport const delay = (timeout) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWlzZXMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9wcm9taXNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxLQUFVLEVBQXlCLEVBQUU7SUFDN0QsT0FBTyxLQUFLLFlBQVksT0FBTyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixJQUE2QixFQUM3QixNQUE4QyxFQUM5QyxRQUE0QixFQUNMLEVBQUU7SUFDekIsSUFBSTtRQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksRUFBRSxDQUFDO1FBQ3ZCLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ3RCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDOUM7YUFBTTtZQUNMLE9BQU8sTUFBTSxDQUFDLE9BQWMsQ0FBQyxDQUFDO1NBQy9CO0tBQ0Y7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQ2xCLE9BQTBCLEVBQzFCLE1BQThDLEVBQzNCLEVBQUU7SUFDckIsT0FBTyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFjLENBQUMsQ0FBQztBQUNuRixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsUUFBVyxFQUNrRCxFQUFFO0lBQy9ELE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUMsSUFBSSxVQUFVLEVBQUU7UUFDZCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDOUI7SUFDRCxPQUFPLFFBQWUsQ0FBQztBQUN6QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBSSxDQUFJLEVBQXVCLEVBQUU7SUFDNUQsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQ25CLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixVQUFVLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZU9yUHJvbWlzZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBQcm9taXNlVHJlZTxUPiA9IFQgfCBQcm9taXNlPFQ+IHwgUHJvbWlzZTxUW10+IHwgQXJyYXk8UHJvbWlzZVRyZWU8VD4+O1xuXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlPGFueT4gPT4ge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHNhZmVDYWxsID0gPFQsIEIsIEM+KFxuICBjYWxsOiAoKSA9PiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPixcbiAgcmVqZWN0Rm46IChyZWFzb246IGFueSkgPT4gQ1xuKTogVmFsdWVPclByb21pc2U8QiB8IEM+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwcm9taXNlID0gY2FsbCgpO1xuICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4odGhlbkZuIGFzIGFueSwgcmVqZWN0Rm4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gcmVqZWN0Rm4oZSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB0aGVuID0gPFQsIEI+KFxuICBwcm9taXNlOiBWYWx1ZU9yUHJvbWlzZTxUPixcbiAgdGhlbkZuOiAoYXJnOiBBd2FpdGVkPFQ+KSA9PiBWYWx1ZU9yUHJvbWlzZTxCPlxuKTogVmFsdWVPclByb21pc2U8Qj4gPT4ge1xuICByZXR1cm4gaXNQcm9taXNlKHByb21pc2UpID8gcHJvbWlzZS50aGVuKHRoZW5GbiBhcyBhbnkpIDogdGhlbkZuKHByb21pc2UgYXMgYW55KTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9taXNlQWxsID0gPFQgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10gfCBbXT4oXG4gIHByb21pc2VzOiBUXG4pOiBWYWx1ZU9yUHJvbWlzZTx7IC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogQXdhaXRlZDxUW1BdPiB9PiA9PiB7XG4gIGNvbnN0IGhhc1Byb21pc2UgPSBwcm9taXNlcy5zb21lKGlzUHJvbWlzZSk7XG4gIGlmIChoYXNQcm9taXNlKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgfVxuICByZXR1cm4gcHJvbWlzZXMgYXMgYW55O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzTm90TnVsbGFibGUgPSA8VD4odjogVCk6IHYgaXMgTm9uTnVsbGFibGU8VD4gPT4ge1xuICByZXR1cm4gdiAhPSBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ID0gKHRpbWVvdXQ6IG51bWJlcikgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXQpO1xuICB9KTtcbn07XG4iXX0=","import { isArray } from '../util/types';\nimport { assertDefined } from '../assert/assert';\nimport { QContainerSelector, RenderEvent } from '../util/markers';\nimport { qError, QError_useInvokeContext, QError_useMethodOutsideContext } from '../error/error';\nimport { seal } from '../util/qdev';\nimport { isPromise } from '../util/promises';\nlet _context;\nexport const tryGetInvokeContext = () => {\n    if (!_context) {\n        const context = typeof document !== 'undefined' && document && document.__q_context__;\n        if (!context) {\n            return undefined;\n        }\n        if (isArray(context)) {\n            return (document.__q_context__ = newInvokeContextFromTuple(context));\n        }\n        return context;\n    }\n    return _context;\n};\nexport const getInvokeContext = () => {\n    const ctx = tryGetInvokeContext();\n    if (!ctx) {\n        throw qError(QError_useMethodOutsideContext);\n    }\n    return ctx;\n};\nexport const useInvokeContext = () => {\n    const ctx = getInvokeContext();\n    if (ctx.$event$ !== RenderEvent) {\n        throw qError(QError_useInvokeContext);\n    }\n    assertDefined(ctx.$hostElement$, `invoke: $hostElement$ must be defined`, ctx);\n    assertDefined(ctx.$waitOn$, `invoke: $waitOn$ must be defined`, ctx);\n    assertDefined(ctx.$renderCtx$, `invoke: $renderCtx$ must be defined`, ctx);\n    assertDefined(ctx.$subscriber$, `invoke: $subscriber$ must be defined`, ctx);\n    return ctx;\n};\nexport const useBindInvokeContext = (callback) => {\n    if (callback == null) {\n        return callback;\n    }\n    const ctx = getInvokeContext();\n    return ((...args) => {\n        return invoke(ctx, callback.bind(undefined, ...args));\n    });\n};\nexport const invoke = (context, fn, ...args) => {\n    const previousContext = _context;\n    let returnValue;\n    try {\n        _context = context;\n        returnValue = fn.apply(null, args);\n    }\n    finally {\n        _context = previousContext;\n    }\n    return returnValue;\n};\nexport const waitAndRun = (ctx, callback) => {\n    const waitOn = ctx.$waitOn$;\n    if (waitOn.length === 0) {\n        const result = callback();\n        if (isPromise(result)) {\n            waitOn.push(result);\n        }\n    }\n    else {\n        waitOn.push(Promise.all(waitOn).then(callback));\n    }\n};\nexport const newInvokeContextFromTuple = (context) => {\n    const element = context[0];\n    return newInvokeContext(undefined, element, context[1], context[2]);\n};\nexport const newInvokeContext = (hostElement, element, event, url) => {\n    const ctx = {\n        $seq$: 0,\n        $hostElement$: hostElement,\n        $element$: element,\n        $event$: event,\n        $url$: url,\n        $qrl$: undefined,\n        $props$: undefined,\n        $renderCtx$: undefined,\n        $subscriber$: undefined,\n        $waitOn$: undefined,\n    };\n    seal(ctx);\n    return ctx;\n};\nexport const getWrappingContainer = (el) => {\n    return el.closest(QContainerSelector);\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../assert/assert';\nimport { qDynamicPlatform } from './qdev';\nexport const getDocument = (node) => {\n    if (!qDynamicPlatform) {\n        return document;\n    }\n    if (typeof document !== 'undefined') {\n        return document;\n    }\n    if (node.nodeType === 9) {\n        return node;\n    }\n    const doc = node.ownerDocument;\n    assertDefined(doc, 'doc must be defined');\n    return doc;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZG9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUMsSUFBNEIsRUFBWSxFQUFFO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixPQUFPLFFBQVEsQ0FBQztLQUNqQjtJQUNELElBQUksT0FBTyxRQUFRLEtBQUssV0FBVyxFQUFFO1FBQ25DLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsRUFBRTtRQUN2QixPQUFPLElBQXVCLENBQUM7S0FDaEM7SUFDRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQy9CLGFBQWEsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxQyxPQUFPLEdBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi9hc3NlcnQvYXNzZXJ0JztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuLi9yZW5kZXIvZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5pbXBvcnQgeyBxRHluYW1pY1BsYXRmb3JtIH0gZnJvbSAnLi9xZGV2JztcblxuZXhwb3J0IGNvbnN0IGdldERvY3VtZW50ID0gKG5vZGU6IFF3aWtFbGVtZW50IHwgRG9jdW1lbnQpOiBEb2N1bWVudCA9PiB7XG4gIGlmICghcUR5bmFtaWNQbGF0Zm9ybSkge1xuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOSkge1xuICAgIHJldHVybiBub2RlIGFzIGFueSBhcyBEb2N1bWVudDtcbiAgfVxuICBjb25zdCBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gIGFzc2VydERlZmluZWQoZG9jLCAnZG9jIG11c3QgYmUgZGVmaW5lZCcpO1xuICByZXR1cm4gZG9jITtcbn07XG4iXX0=","import { qDynamicPlatform } from '../util/qdev';\nimport { isObject } from '../util/types';\nexport const createPlatform = () => {\n    return {\n        isServer: false,\n        importSymbol(containerEl, url, symbolName) {\n            const urlDoc = toUrl(containerEl.ownerDocument, containerEl, url).toString();\n            const urlCopy = new URL(urlDoc);\n            urlCopy.hash = '';\n            urlCopy.search = '';\n            const importURL = urlCopy.href;\n            return import(/* @vite-ignore */ importURL).then((mod) => {\n                return findSymbol(mod, symbolName);\n            });\n        },\n        raf: (fn) => {\n            return new Promise((resolve) => {\n                requestAnimationFrame(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        nextTick: (fn) => {\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    resolve(fn());\n                });\n            });\n        },\n        chunkForSymbol() {\n            return undefined;\n        },\n    };\n};\nconst findSymbol = (module, symbol) => {\n    if (symbol in module) {\n        return module[symbol];\n    }\n    for (const v of Object.values(module)) {\n        if (isObject(v) && symbol in v) {\n            return v[symbol];\n        }\n    }\n};\n/**\n * Convert relative base URI and relative URL into a fully qualified URL.\n *\n * @param base -`QRL`s are relative, and therefore they need a base for resolution.\n *    - `Element` use `base.ownerDocument.baseURI`\n *    - `Document` use `base.baseURI`\n *    - `string` use `base` as is\n *    - `QConfig` use `base.baseURI`\n * @param url - relative URL\n * @returns fully qualified URL.\n */\nexport const toUrl = (doc, containerEl, url) => {\n    const baseURI = doc.baseURI;\n    const base = new URL(containerEl.getAttribute('q:base') ?? baseURI, baseURI);\n    return new URL(url, base);\n};\nlet _platform = createPlatform();\n// <docs markdown=\"./readme.md#setPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#setPlatform instead)\n/**\n * Sets the `CorePlatform`.\n *\n * This is useful to override the platform in tests to change the behavior of,\n * `requestAnimationFrame`, and import resolution.\n *\n * @param doc - The document of the application for which the platform is needed.\n * @param platform - The platform to use.\n * @alpha\n */\n// </docs>\nexport const setPlatform = (plt) => (_platform = plt);\n// <docs markdown=\"./readme.md#getPlatform\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ./readme.md#getPlatform instead)\n/**\n * Retrieve the `CorePlatform`.\n *\n * The `CorePlatform` is also responsible for retrieving the Manifest, that contains mappings\n * from symbols to javascript import chunks. For this reason, `CorePlatform` can't be global, but\n * is specific to the application currently running. On server it is possible that many different\n * applications are running in a single server instance, and for this reason the `CorePlatform`\n * is associated with the application document.\n *\n * @param docOrNode - The document (or node) of the application for which the platform is needed.\n * @alpha\n */\n// </docs>\nexport const getPlatform = () => {\n    return _platform;\n};\nexport const isServer = () => {\n    if (qDynamicPlatform) {\n        return _platform.isServer;\n    }\n    return false;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0uanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcGxhdGZvcm0vcGxhdGZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHekMsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLEdBQWlCLEVBQUU7SUFDL0MsT0FBTztRQUNMLFFBQVEsRUFBRSxLQUFLO1FBQ2YsWUFBWSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUUsVUFBVTtZQUN2QyxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDN0UsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDaEMsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7WUFDbEIsT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7WUFDcEIsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztZQUMvQixPQUFPLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDdkQsT0FBTyxVQUFVLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ1YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM3QixxQkFBcUIsQ0FBQyxHQUFHLEVBQUU7b0JBQ3pCLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2YsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUM3QixVQUFVLENBQUMsR0FBRyxFQUFFO29CQUNkLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNoQixDQUFDLENBQUMsQ0FBQztZQUNMLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUNELGNBQWM7WUFDWixPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGLE1BQU0sVUFBVSxHQUFHLENBQUMsTUFBVyxFQUFFLE1BQWMsRUFBRSxFQUFFO0lBQ2pELElBQUksTUFBTSxJQUFJLE1BQU0sRUFBRTtRQUNwQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN2QjtJQUNELEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUNyQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzlCLE9BQVEsQ0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNCO0tBQ0Y7QUFDSCxDQUFDLENBQUM7QUFFRjs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBYSxFQUFFLFdBQXdCLEVBQUUsR0FBaUIsRUFBTyxFQUFFO0lBQ3ZGLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7SUFDNUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsT0FBTyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBRUYsSUFBSSxTQUFTLEdBQUcsY0FBYyxFQUFFLENBQUM7QUFFakMsNENBQTRDO0FBQzVDLHlDQUF5QztBQUN6Qyx5Q0FBeUM7QUFDekM7Ozs7Ozs7OztHQVNHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUFDLEdBQWlCLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0FBRXBFLDRDQUE0QztBQUM1Qyx5Q0FBeUM7QUFDekMseUNBQXlDO0FBQ3pDOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxHQUFHLEVBQUU7SUFDOUIsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtJQUMzQixJQUFJLGdCQUFnQixFQUFFO1FBQ3BCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztLQUMzQjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4uL3JlbmRlci9kb20vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7IHFEeW5hbWljUGxhdGZvcm0gfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgQ29yZVBsYXRmb3JtIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQbGF0Zm9ybSA9ICgpOiBDb3JlUGxhdGZvcm0gPT4ge1xuICByZXR1cm4ge1xuICAgIGlzU2VydmVyOiBmYWxzZSxcbiAgICBpbXBvcnRTeW1ib2woY29udGFpbmVyRWwsIHVybCwgc3ltYm9sTmFtZSkge1xuICAgICAgY29uc3QgdXJsRG9jID0gdG9VcmwoY29udGFpbmVyRWwub3duZXJEb2N1bWVudCwgY29udGFpbmVyRWwsIHVybCkudG9TdHJpbmcoKTtcbiAgICAgIGNvbnN0IHVybENvcHkgPSBuZXcgVVJMKHVybERvYyk7XG4gICAgICB1cmxDb3B5Lmhhc2ggPSAnJztcbiAgICAgIHVybENvcHkuc2VhcmNoID0gJyc7XG4gICAgICBjb25zdCBpbXBvcnRVUkwgPSB1cmxDb3B5LmhyZWY7XG4gICAgICByZXR1cm4gaW1wb3J0KC8qIEB2aXRlLWlnbm9yZSAqLyBpbXBvcnRVUkwpLnRoZW4oKG1vZCkgPT4ge1xuICAgICAgICByZXR1cm4gZmluZFN5bWJvbChtb2QsIHN5bWJvbE5hbWUpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICByYWY6IChmbikgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShmbigpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG5leHRUaWNrOiAoZm4pID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2h1bmtGb3JTeW1ib2woKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gIH07XG59O1xuY29uc3QgZmluZFN5bWJvbCA9IChtb2R1bGU6IGFueSwgc3ltYm9sOiBzdHJpbmcpID0+IHtcbiAgaWYgKHN5bWJvbCBpbiBtb2R1bGUpIHtcbiAgICByZXR1cm4gbW9kdWxlW3N5bWJvbF07XG4gIH1cbiAgZm9yIChjb25zdCB2IG9mIE9iamVjdC52YWx1ZXMobW9kdWxlKSkge1xuICAgIGlmIChpc09iamVjdCh2KSAmJiBzeW1ib2wgaW4gdikge1xuICAgICAgcmV0dXJuICh2IGFzIGFueSlbc3ltYm9sXTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ29udmVydCByZWxhdGl2ZSBiYXNlIFVSSSBhbmQgcmVsYXRpdmUgVVJMIGludG8gYSBmdWxseSBxdWFsaWZpZWQgVVJMLlxuICpcbiAqIEBwYXJhbSBiYXNlIC1gUVJMYHMgYXJlIHJlbGF0aXZlLCBhbmQgdGhlcmVmb3JlIHRoZXkgbmVlZCBhIGJhc2UgZm9yIHJlc29sdXRpb24uXG4gKiAgICAtIGBFbGVtZW50YCB1c2UgYGJhc2Uub3duZXJEb2N1bWVudC5iYXNlVVJJYFxuICogICAgLSBgRG9jdW1lbnRgIHVzZSBgYmFzZS5iYXNlVVJJYFxuICogICAgLSBgc3RyaW5nYCB1c2UgYGJhc2VgIGFzIGlzXG4gKiAgICAtIGBRQ29uZmlnYCB1c2UgYGJhc2UuYmFzZVVSSWBcbiAqIEBwYXJhbSB1cmwgLSByZWxhdGl2ZSBVUkxcbiAqIEByZXR1cm5zIGZ1bGx5IHF1YWxpZmllZCBVUkwuXG4gKi9cbmV4cG9ydCBjb25zdCB0b1VybCA9IChkb2M6IERvY3VtZW50LCBjb250YWluZXJFbDogUXdpa0VsZW1lbnQsIHVybDogc3RyaW5nIHwgVVJMKTogVVJMID0+IHtcbiAgY29uc3QgYmFzZVVSSSA9IGRvYy5iYXNlVVJJO1xuICBjb25zdCBiYXNlID0gbmV3IFVSTChjb250YWluZXJFbC5nZXRBdHRyaWJ1dGUoJ3E6YmFzZScpID8/IGJhc2VVUkksIGJhc2VVUkkpO1xuICByZXR1cm4gbmV3IFVSTCh1cmwsIGJhc2UpO1xufTtcblxubGV0IF9wbGF0Zm9ybSA9IGNyZWF0ZVBsYXRmb3JtKCk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi9yZWFkbWUubWQjc2V0UGxhdGZvcm1cIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuL3JlYWRtZS5tZCNzZXRQbGF0Zm9ybSBpbnN0ZWFkKVxuLyoqXG4gKiBTZXRzIHRoZSBgQ29yZVBsYXRmb3JtYC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCB0byBvdmVycmlkZSB0aGUgcGxhdGZvcm0gaW4gdGVzdHMgdG8gY2hhbmdlIHRoZSBiZWhhdmlvciBvZixcbiAqIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgLCBhbmQgaW1wb3J0IHJlc29sdXRpb24uXG4gKlxuICogQHBhcmFtIGRvYyAtIFRoZSBkb2N1bWVudCBvZiB0aGUgYXBwbGljYXRpb24gZm9yIHdoaWNoIHRoZSBwbGF0Zm9ybSBpcyBuZWVkZWQuXG4gKiBAcGFyYW0gcGxhdGZvcm0gLSBUaGUgcGxhdGZvcm0gdG8gdXNlLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCBzZXRQbGF0Zm9ybSA9IChwbHQ6IENvcmVQbGF0Zm9ybSkgPT4gKF9wbGF0Zm9ybSA9IHBsdCk7XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi9yZWFkbWUubWQjZ2V0UGxhdGZvcm1cIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuL3JlYWRtZS5tZCNnZXRQbGF0Zm9ybSBpbnN0ZWFkKVxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYENvcmVQbGF0Zm9ybWAuXG4gKlxuICogVGhlIGBDb3JlUGxhdGZvcm1gIGlzIGFsc28gcmVzcG9uc2libGUgZm9yIHJldHJpZXZpbmcgdGhlIE1hbmlmZXN0LCB0aGF0IGNvbnRhaW5zIG1hcHBpbmdzXG4gKiBmcm9tIHN5bWJvbHMgdG8gamF2YXNjcmlwdCBpbXBvcnQgY2h1bmtzLiBGb3IgdGhpcyByZWFzb24sIGBDb3JlUGxhdGZvcm1gIGNhbid0IGJlIGdsb2JhbCwgYnV0XG4gKiBpcyBzcGVjaWZpYyB0byB0aGUgYXBwbGljYXRpb24gY3VycmVudGx5IHJ1bm5pbmcuIE9uIHNlcnZlciBpdCBpcyBwb3NzaWJsZSB0aGF0IG1hbnkgZGlmZmVyZW50XG4gKiBhcHBsaWNhdGlvbnMgYXJlIHJ1bm5pbmcgaW4gYSBzaW5nbGUgc2VydmVyIGluc3RhbmNlLCBhbmQgZm9yIHRoaXMgcmVhc29uIHRoZSBgQ29yZVBsYXRmb3JtYFxuICogaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0gZG9jT3JOb2RlIC0gVGhlIGRvY3VtZW50IChvciBub2RlKSBvZiB0aGUgYXBwbGljYXRpb24gZm9yIHdoaWNoIHRoZSBwbGF0Zm9ybSBpcyBuZWVkZWQuXG4gKiBAYWxwaGFcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IGdldFBsYXRmb3JtID0gKCkgPT4ge1xuICByZXR1cm4gX3BsYXRmb3JtO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2VydmVyID0gKCkgPT4ge1xuICBpZiAocUR5bmFtaWNQbGF0Zm9ybSkge1xuICAgIHJldHVybiBfcGxhdGZvcm0uaXNTZXJ2ZXI7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbiJdfQ==","import { $ } from '../import/qrl.public';\n// <docs markdown=\"../readme.md#implicit$FirstArg\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#implicit$FirstArg instead)\n/**\n * Create a `____$(...)` convenience method from `___(...)`.\n *\n * It is very common for functions to take a lazy-loadable resource as a first argument. For this\n * reason, the Qwik Optimizer automatically extracts the first argument from any function which\n * ends in `$`.\n *\n * This means that `foo$(arg0)` and `foo($(arg0))` are equivalent with respect to Qwik Optimizer.\n * The former is just a shorthand for the latter.\n *\n * For example, these function calls are equivalent:\n *\n * - `component$(() => {...})` is same as `component($(() => {...}))`\n *\n * ```tsx\n * export function myApi(callback: QRL<() => void>): void {\n *   // ...\n * }\n *\n * export const myApi$ = implicit$FirstArg(myApi);\n * // type of myApi$: (callback: () => void): void\n *\n * // can be used as:\n * myApi$(() => console.log('callback'));\n *\n * // will be transpiled to:\n * // FILE: <current file>\n * myApi(qrl('./chunk-abc.js', 'callback'));\n *\n * // FILE: chunk-abc.js\n * export const callback = () => console.log('callback');\n * ```\n *\n * @param fn - a function that should have its first argument automatically `$`.\n * @alpha\n */\n// </docs>\nexport const implicit$FirstArg = (fn) => {\n    return function (first, ...rest) {\n        return fn.call(null, $(first), ...rest);\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wbGljaXRfZG9sbGFyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaW1wbGljaXRfZG9sbGFyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxDQUFDLEVBQU8sTUFBTSxzQkFBc0IsQ0FBQztBQUU5QyxtREFBbUQ7QUFDbkQseUNBQXlDO0FBQ3pDLGdEQUFnRDtBQUNoRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQ0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FDL0IsRUFBNkMsRUFDTCxFQUFFO0lBQzFDLE9BQU8sVUFBVSxLQUFZLEVBQUUsR0FBRyxJQUFVO1FBQzFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgJCwgUVJMIH0gZnJvbSAnLi4vaW1wb3J0L3FybC5wdWJsaWMnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZ1wiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCNpbXBsaWNpdCRGaXJzdEFyZyBpbnN0ZWFkKVxuLyoqXG4gKiBDcmVhdGUgYSBgX19fXyQoLi4uKWAgY29udmVuaWVuY2UgbWV0aG9kIGZyb20gYF9fXyguLi4pYC5cbiAqXG4gKiBJdCBpcyB2ZXJ5IGNvbW1vbiBmb3IgZnVuY3Rpb25zIHRvIHRha2UgYSBsYXp5LWxvYWRhYmxlIHJlc291cmNlIGFzIGEgZmlyc3QgYXJndW1lbnQuIEZvciB0aGlzXG4gKiByZWFzb24sIHRoZSBRd2lrIE9wdGltaXplciBhdXRvbWF0aWNhbGx5IGV4dHJhY3RzIHRoZSBmaXJzdCBhcmd1bWVudCBmcm9tIGFueSBmdW5jdGlvbiB3aGljaFxuICogZW5kcyBpbiBgJGAuXG4gKlxuICogVGhpcyBtZWFucyB0aGF0IGBmb28kKGFyZzApYCBhbmQgYGZvbygkKGFyZzApKWAgYXJlIGVxdWl2YWxlbnQgd2l0aCByZXNwZWN0IHRvIFF3aWsgT3B0aW1pemVyLlxuICogVGhlIGZvcm1lciBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgbGF0dGVyLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGVzZSBmdW5jdGlvbiBjYWxscyBhcmUgZXF1aXZhbGVudDpcbiAqXG4gKiAtIGBjb21wb25lbnQkKCgpID0+IHsuLi59KWAgaXMgc2FtZSBhcyBgY29tcG9uZW50KCQoKCkgPT4gey4uLn0pKWBcbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiBteUFwaShjYWxsYmFjazogUVJMPCgpID0+IHZvaWQ+KTogdm9pZCB7XG4gKiAgIC8vIC4uLlxuICogfVxuICpcbiAqIGV4cG9ydCBjb25zdCBteUFwaSQgPSBpbXBsaWNpdCRGaXJzdEFyZyhteUFwaSk7XG4gKiAvLyB0eXBlIG9mIG15QXBpJDogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogdm9pZFxuICpcbiAqIC8vIGNhbiBiZSB1c2VkIGFzOlxuICogbXlBcGkkKCgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyB3aWxsIGJlIHRyYW5zcGlsZWQgdG86XG4gKiAvLyBGSUxFOiA8Y3VycmVudCBmaWxlPlxuICogbXlBcGkocXJsKCcuL2NodW5rLWFiYy5qcycsICdjYWxsYmFjaycpKTtcbiAqXG4gKiAvLyBGSUxFOiBjaHVuay1hYmMuanNcbiAqIGV4cG9ydCBjb25zdCBjYWxsYmFjayA9ICgpID0+IGNvbnNvbGUubG9nKCdjYWxsYmFjaycpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGZuIC0gYSBmdW5jdGlvbiB0aGF0IHNob3VsZCBoYXZlIGl0cyBmaXJzdCBhcmd1bWVudCBhdXRvbWF0aWNhbGx5IGAkYC5cbiAqIEBhbHBoYVxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgaW1wbGljaXQkRmlyc3RBcmcgPSA8RklSU1QsIFJFU1QgZXh0ZW5kcyBhbnlbXSwgUkVUPihcbiAgZm46IChmaXJzdDogUVJMPEZJUlNUPiwgLi4ucmVzdDogUkVTVCkgPT4gUkVUXG4pOiAoKGZpcnN0OiBGSVJTVCwgLi4ucmVzdDogUkVTVCkgPT4gUkVUKSA9PiB7XG4gIHJldHVybiBmdW5jdGlvbiAoZmlyc3Q6IEZJUlNULCAuLi5yZXN0OiBSRVNUKTogUkVUIHtcbiAgICByZXR1cm4gZm4uY2FsbChudWxsLCAkKGZpcnN0KSwgLi4ucmVzdCk7XG4gIH07XG59O1xuIl19","import { qDev } from './qdev';\nexport const EMPTY_ARRAY = [];\nexport const EMPTY_OBJ = {};\nif (qDev) {\n    Object.freeze(EMPTY_ARRAY);\n    Object.freeze(EMPTY_OBJ);\n    Error.stackTraceLimit = 9999;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx5d2VpZ2h0LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvZmx5d2VpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDO0FBRTVCLElBQUksSUFBSSxFQUFFO0lBQ1IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO0NBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcURldiB9IGZyb20gJy4vcWRldic7XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWSA9IFtdO1xuZXhwb3J0IGNvbnN0IEVNUFRZX09CSiA9IHt9O1xuXG5pZiAocURldikge1xuICBPYmplY3QuZnJlZXplKEVNUFRZX0FSUkFZKTtcbiAgT2JqZWN0LmZyZWV6ZShFTVBUWV9PQkopO1xuICBFcnJvci5zdGFja1RyYWNlTGltaXQgPSA5OTk5O1xufVxuIl19","import { EMPTY_ARRAY } from '../util/flyweight';\nimport { assertQrl, createQRL, emitEvent, getSymbolHash } from './qrl-class';\nimport { isFunction, isString } from '../util/types';\nimport { qError, QError_dynamicImportFailed, QError_qrlMissingChunk, QError_unknownTypeArgument, } from '../error/error';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { getPlatform } from '../platform/platform';\nimport { assertTrue } from '../assert/assert';\nimport { assertElement } from '../util/element';\n// https://regexr.com/68v72\nconst EXTRACT_IMPORT_PATH = /\\(\\s*(['\"])([^\\1]+)\\1\\s*\\)/;\n// https://regexr.com/690ds\nconst EXTRACT_SELF_IMPORT = /Promise\\s*\\.\\s*resolve/;\n// https://regexr.com/6a83h\nconst EXTRACT_FILE_NAME = /[\\\\/(]([\\w\\d.\\-_]+\\.(js|ts)x?):/;\nconst announcedQRL = /*@__PURE__*/ new Set();\n// <docs markdown=\"../readme.md#qrl\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#qrl instead)\n/**\n * Used by Qwik Optimizer to point to lazy-loaded resources.\n *\n * This function should be used by the Qwik Optimizer only. The function should not be directly\n * referred to in the source code of the application.\n *\n * @see `QRL`, `$(...)`\n *\n * @param chunkOrFn - Chunk name (or function which is stringified to extract chunk name)\n * @param symbol - Symbol to lazy load\n * @param lexicalScopeCapture - a set of lexically scoped variables to capture.\n * @alpha\n */\n// </docs>\nexport const qrl = (chunkOrFn, symbol, lexicalScopeCapture = EMPTY_ARRAY) => {\n    let chunk = null;\n    let symbolFn = null;\n    if (isFunction(chunkOrFn)) {\n        symbolFn = chunkOrFn;\n        if (qSerialize) {\n            let match;\n            const srcCode = String(chunkOrFn);\n            if ((match = srcCode.match(EXTRACT_IMPORT_PATH)) && match[2]) {\n                chunk = match[2];\n            }\n            else if ((match = srcCode.match(EXTRACT_SELF_IMPORT))) {\n                const ref = 'QWIK-SELF';\n                const frames = new Error(ref).stack.split('\\n');\n                const start = frames.findIndex((f) => f.includes(ref));\n                const frame = frames[start + 2];\n                match = frame.match(EXTRACT_FILE_NAME);\n                if (!match) {\n                    chunk = 'main';\n                }\n                else {\n                    chunk = match[1];\n                }\n            }\n            else {\n                throw qError(QError_dynamicImportFailed, srcCode);\n            }\n        }\n    }\n    else if (isString(chunkOrFn)) {\n        chunk = chunkOrFn;\n    }\n    else {\n        throw qError(QError_unknownTypeArgument, chunkOrFn);\n    }\n    if (announcedQRL.has(symbol)) {\n        // Emit event\n        announcedQRL.add(symbol);\n        emitEvent('qprefetch', {\n            symbols: [getSymbolHash(symbol)],\n        });\n    }\n    // Unwrap subscribers\n    return createQRL(chunk, symbol, null, symbolFn, null, lexicalScopeCapture, null);\n};\n/**\n * @internal\n */\nexport const inlinedQrl = (symbol, symbolName, lexicalScopeCapture = EMPTY_ARRAY) => {\n    // Unwrap subscribers\n    return createQRL(null, symbolName, symbol, null, null, lexicalScopeCapture, null);\n};\n/**\n * @internal\n */\nexport const qrlDEV = (chunkOrFn, symbol, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const newQrl = qrl(chunkOrFn, symbol, lexicalScopeCapture);\n    newQrl.$dev$ = opts;\n    return newQrl;\n};\n/**\n * @internal\n */\nexport const inlinedQrlDEV = (symbol, symbolName, opts, lexicalScopeCapture = EMPTY_ARRAY) => {\n    const qrl = inlinedQrl(symbol, symbolName, lexicalScopeCapture);\n    qrl.$dev$ = opts;\n    return qrl;\n};\nexport const serializeQRL = (qrl, opts = {}) => {\n    assertTrue(qSerialize, 'In order to serialize a QRL, qSerialize must be true');\n    assertQrl(qrl);\n    let symbol = qrl.$symbol$;\n    let chunk = qrl.$chunk$;\n    const refSymbol = qrl.$refSymbol$ ?? symbol;\n    const platform = getPlatform();\n    if (platform) {\n        const result = platform.chunkForSymbol(refSymbol);\n        if (result) {\n            chunk = result[1];\n            if (!qrl.$refSymbol$) {\n                symbol = result[0];\n            }\n        }\n    }\n    if (qRuntimeQrl && !chunk) {\n        chunk = '/runtimeQRL';\n        symbol = '_';\n    }\n    if (!chunk) {\n        throw qError(QError_qrlMissingChunk, qrl);\n    }\n    if (chunk.startsWith('./')) {\n        chunk = chunk.slice(2);\n    }\n    const parts = [chunk, '#', symbol];\n    const capture = qrl.$capture$;\n    const captureRef = qrl.$captureRef$;\n    if (captureRef && captureRef.length) {\n        if (opts.$getObjId$) {\n            const capture = captureRef.map(opts.$getObjId$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n        else if (opts.$addRefMap$) {\n            const capture = captureRef.map(opts.$addRefMap$);\n            parts.push(`[${capture.join(' ')}]`);\n        }\n    }\n    else if (capture && capture.length > 0) {\n        parts.push(`[${capture.join(' ')}]`);\n    }\n    return parts.join('');\n};\nexport const serializeQRLs = (existingQRLs, elCtx) => {\n    assertElement(elCtx.$element$);\n    const opts = {\n        $element$: elCtx.$element$,\n        $addRefMap$: (obj) => addToArray(elCtx.$refMap$, obj),\n    };\n    return existingQRLs.map((qrl) => serializeQRL(qrl, opts)).join('\\n');\n};\n/**\n * `./chunk#symbol[captures]\n */\nexport const parseQRL = (qrl, containerEl) => {\n    const endIdx = qrl.length;\n    const hashIdx = indexOf(qrl, 0, '#');\n    const captureIdx = indexOf(qrl, hashIdx, '[');\n    const chunkEndIdx = Math.min(hashIdx, captureIdx);\n    const chunk = qrl.substring(0, chunkEndIdx);\n    const symbolStartIdx = hashIdx == endIdx ? hashIdx : hashIdx + 1;\n    const symbolEndIdx = captureIdx;\n    // TODO\n    const symbol = symbolStartIdx == symbolEndIdx ? 'default' : qrl.substring(symbolStartIdx, symbolEndIdx);\n    const captureStartIdx = captureIdx;\n    const captureEndIdx = endIdx;\n    const capture = captureStartIdx === captureEndIdx\n        ? EMPTY_ARRAY\n        : qrl.substring(captureStartIdx + 1, captureEndIdx - 1).split(' ');\n    const iQrl = createQRL(chunk, symbol, null, null, capture, null, null);\n    if (containerEl) {\n        iQrl.$setContainer$(containerEl);\n    }\n    return iQrl;\n};\nconst indexOf = (text, startIdx, char) => {\n    const endIdx = text.length;\n    const charIdx = text.indexOf(char, startIdx == endIdx ? 0 : startIdx);\n    return charIdx == -1 ? endIdx : charIdx;\n};\nconst addToArray = (array, obj) => {\n    const index = array.indexOf(obj);\n    if (index === -1) {\n        array.push(obj);\n        return array.length - 1;\n    }\n    return index;\n};\n//# sourceMappingURL=data:application/json;base64,","export const directSetAttribute = (el, prop, value) => {\n    return el.setAttribute(prop, value);\n};\nexport const directGetAttribute = (el, prop) => {\n    return el.getAttribute(prop);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFzdC1jYWxscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZmFzdC1jYWxscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBYSxFQUFFLEVBQUU7SUFDakYsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsRUFBRTtJQUNsRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4vZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5cbmV4cG9ydCBjb25zdCBkaXJlY3RTZXRBdHRyaWJ1dGUgPSAoZWw6IFF3aWtFbGVtZW50LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGVsLnNldEF0dHJpYnV0ZShwcm9wLCB2YWx1ZSk7XG59O1xuXG5leHBvcnQgY29uc3QgZGlyZWN0R2V0QXR0cmlidXRlID0gKGVsOiBRd2lrRWxlbWVudCwgcHJvcDogc3RyaW5nKSA9PiB7XG4gIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUocHJvcCk7XG59O1xuIl19","import { parseQRL } from '../import/qrl';\nimport { assertQrl, isQrl } from '../import/qrl-class';\nimport { inflateQrl, normalizeOnProp } from './props';\nimport { $ } from '../import/qrl.public';\nimport { QScopedStyle } from '../util/markers';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { isArray } from '../util/types';\nimport { assertTrue } from '../assert/assert';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { qRuntimeQrl, qSerialize } from '../util/qdev';\nconst ON_PROP_REGEX = /^(on|window:|document:)/;\nexport const isOnProp = (prop) => {\n    return prop.endsWith('$') && ON_PROP_REGEX.test(prop);\n};\nexport const addQRLListener = (listeners, add) => {\n    for (const entry of add) {\n        const prop = entry[0];\n        const hash = entry[1].$hash$;\n        let replaced = false;\n        for (let i = 0; i < listeners.length; i++) {\n            const existing = listeners[i];\n            if (existing[0] === prop && existing[1].$hash$ === hash) {\n                listeners.splice(i, 1, entry);\n                replaced = true;\n                break;\n            }\n        }\n        if (!replaced) {\n            listeners.push(entry);\n        }\n    }\n};\nexport const groupListeners = (listeners) => {\n    if (listeners.length === 0) {\n        return EMPTY_ARRAY;\n    }\n    if (listeners.length === 1) {\n        const listener = listeners[0];\n        return [[listener[0], [listener[1]]]];\n    }\n    const keys = [];\n    for (let i = 0; i < listeners.length; i++) {\n        const eventName = listeners[i][0];\n        if (!keys.includes(eventName)) {\n            keys.push(eventName);\n        }\n    }\n    return keys.map((eventName) => {\n        return [eventName, listeners.filter((l) => l[0] === eventName).map((a) => a[1])];\n    });\n};\nexport const setEvent = (existingListeners, prop, input, containerEl) => {\n    assertTrue(prop.endsWith('$'), 'render: event property does not end with $', prop);\n    prop = normalizeOnProp(prop.slice(0, -1));\n    const listeners = isArray(input)\n        ? input.map((q) => [prop, ensureQrl(q, containerEl)])\n        : [[prop, ensureQrl(input, containerEl)]];\n    addQRLListener(existingListeners, listeners);\n    return prop;\n};\nconst ensureQrl = (value, containerEl) => {\n    if (qSerialize && !qRuntimeQrl) {\n        assertQrl(value);\n        value.$setContainer$(containerEl);\n        return value;\n    }\n    const qrl = isQrl(value) ? value : $(value);\n    qrl.$setContainer$(containerEl);\n    return qrl;\n};\nexport const getDomListeners = (elCtx, containerEl) => {\n    const attributes = elCtx.$element$.attributes;\n    const listeners = [];\n    for (let i = 0; i < attributes.length; i++) {\n        const { name, value } = attributes.item(i);\n        if (name.startsWith('on:') ||\n            name.startsWith('on-window:') ||\n            name.startsWith('on-document:')) {\n            const urls = value.split('\\n');\n            for (const url of urls) {\n                const qrl = parseQRL(url, containerEl);\n                if (qrl.$capture$) {\n                    inflateQrl(qrl, elCtx);\n                }\n                listeners.push([name, qrl]);\n            }\n        }\n    }\n    return listeners;\n};\nexport const getScopeIds = (el) => {\n    const scoped = directGetAttribute(el, QScopedStyle);\n    if (scoped) {\n        return scoped.split(' ');\n    }\n    return [];\n};\n//# sourceMappingURL=data:application/json;base64,","import { verifySerializable } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { qDev } from '../util/qdev';\nimport { useInvokeContext } from './use-core';\nexport const useSequentialScope = () => {\n    const ctx = useInvokeContext();\n    const i = ctx.$seq$;\n    const hostElement = ctx.$hostElement$;\n    const elCtx = getContext(hostElement);\n    const seq = elCtx.$seq$ ? elCtx.$seq$ : (elCtx.$seq$ = []);\n    ctx.$seq$++;\n    const set = (value) => {\n        if (qDev) {\n            verifySerializable(value);\n        }\n        return (seq[i] = value);\n    };\n    return {\n        get: seq[i],\n        set,\n        i,\n        ctx,\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNlcXVlbnRpYWwtc2NvcGUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXNlL3VzZS1zZXF1ZW50aWFsLXNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBdUIsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFTbkUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsR0FBMEIsRUFBRTtJQUM1RCxNQUFNLEdBQUcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7SUFDcEIsTUFBTSxXQUFXLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUN0QyxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRTNELEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNaLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBUSxFQUFFLEVBQUU7UUFDdkIsSUFBSSxJQUFJLEVBQUU7WUFDUixrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQjtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBQ0YsT0FBTztRQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ1gsR0FBRztRQUNILENBQUM7UUFDRCxHQUFHO0tBQ0osQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlcmlmeVNlcmlhbGl6YWJsZSB9IGZyb20gJy4uL29iamVjdC9xLW9iamVjdCc7XG5pbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgcURldiB9IGZyb20gJy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyBSZW5kZXJJbnZva2VDb250ZXh0LCB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VxdWVudGlhbFNjb3BlPFQ+IHtcbiAgcmVhZG9ubHkgZ2V0OiBUIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBzZXQ6ICh2OiBUKSA9PiBUO1xuICByZWFkb25seSBpOiBudW1iZXI7XG4gIHJlYWRvbmx5IGN0eDogUmVuZGVySW52b2tlQ29udGV4dDtcbn1cblxuZXhwb3J0IGNvbnN0IHVzZVNlcXVlbnRpYWxTY29wZSA9IDxUPigpOiBTZXF1ZW50aWFsU2NvcGU8VD4gPT4ge1xuICBjb25zdCBjdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIGNvbnN0IGkgPSBjdHguJHNlcSQ7XG4gIGNvbnN0IGhvc3RFbGVtZW50ID0gY3R4LiRob3N0RWxlbWVudCQ7XG4gIGNvbnN0IGVsQ3R4ID0gZ2V0Q29udGV4dChob3N0RWxlbWVudCk7XG4gIGNvbnN0IHNlcSA9IGVsQ3R4LiRzZXEkID8gZWxDdHguJHNlcSQgOiAoZWxDdHguJHNlcSQgPSBbXSk7XG5cbiAgY3R4LiRzZXEkKys7XG4gIGNvbnN0IHNldCA9ICh2YWx1ZTogVCkgPT4ge1xuICAgIGlmIChxRGV2KSB7XG4gICAgICB2ZXJpZnlTZXJpYWxpemFibGUodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gKHNlcVtpXSA9IHZhbHVlKTtcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IHNlcVtpXSxcbiAgICBzZXQsXG4gICAgaSxcbiAgICBjdHgsXG4gIH07XG59O1xuIl19","import { assertQrl } from '../import/qrl-class';\nimport { getContext, normalizeOnProp } from '../props/props';\nimport { addQRLListener } from '../props/props-on';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { useInvokeContext } from './use-core';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { Watch, WatchFlagsIsCleanup } from './use-watch';\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * It can be used to release resources, abort network requests, stop timers...\n *\n * @alpha\n * @deprecated Use the cleanup() function of `useWatch$()`, `useResource$()` or\n * `useClientEffect$()` instead.\n */\n// </docs>\nexport const useCleanupQrl = (unmountFn) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (!get) {\n        assertQrl(unmountFn);\n        const el = ctx.$hostElement$;\n        const watch = new Watch(WatchFlagsIsCleanup, i, el, unmountFn, undefined);\n        const elCtx = getContext(el);\n        set(true);\n        if (!elCtx.$watches$) {\n            elCtx.$watches$ = [];\n        }\n        elCtx.$watches$.push(watch);\n    }\n};\n// <docs markdown=\"../readme.md#useCleanup\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useCleanup instead)\n/**\n * It can be used to release resources, abort network requests, stop timers...\n *\n * @alpha\n * @deprecated Use the cleanup() function of `useWatch$()`, `useResource$()` or\n * `useClientEffect$()` instead.\n */\n// </docs>\nexport const useCleanup$ = /*#__PURE__*/ implicit$FirstArg(useCleanupQrl);\n// <docs markdown=\"../readme.md#useOn\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOn instead)\n/**\n * Register a listener on the current component's host element.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX. Otherwise, it's adding a JSX listener in the `<div>` is a better idea.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * @alpha\n */\n// </docs>\nexport const useOn = (event, eventQrl) => _useOn(`on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnDocument\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnDocument instead)\n/**\n * Register a listener on `document`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useScroll() {\n *   useOnDocument(\n *     'scroll',\n *     $((event) => {\n *       console.log('body scrolled', event);\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useScroll();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnDocument = (event, eventQrl) => _useOn(`document:on-${event}`, eventQrl);\n// <docs markdown=\"../readme.md#useOnWindow\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useOnWindow instead)\n/**\n * Register a listener on `window`.\n *\n * Used to programmatically add event listeners. Useful from custom `use*` methods, which do not\n * have access to the JSX.\n *\n * @see `useOn`, `useOnWindow`, `useOnDocument`.\n *\n * ```tsx\n * function useAnalytics() {\n *   useOnWindow(\n *     'popstate',\n *     $((event) => {\n *       console.log('navigation happened', event);\n *       // report to analytics\n *     })\n *   );\n * }\n *\n * const Cmp = component$(() => {\n *   useAnalytics();\n *   return <div>Profit!</div>;\n * });\n * ```\n *\n * @alpha\n */\n// </docs>\nexport const useOnWindow = (event, eventQrl) => _useOn(`window:on-${event}`, eventQrl);\nconst _useOn = (eventName, eventQrl) => {\n    const invokeCtx = useInvokeContext();\n    const elCtx = getContext(invokeCtx.$hostElement$);\n    assertQrl(eventQrl);\n    addQRLListener(elCtx.li, [[normalizeOnProp(eventName), eventQrl]]);\n    elCtx.$needAttachListeners$ = true;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qDev, qSerialize, seal } from '../../util/qdev';\nimport { logWarn } from '../../util/log';\nimport { isFunction, isObject, isString } from '../../util/types';\nimport { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { isQrl } from '../../import/qrl-class';\n/**\n * @public\n */\nexport const jsx = (type, props, key) => {\n    if (qDev) {\n        if (!isString(type) && !isFunction(type)) {\n            throw qError(QError_invalidJsxNodeType, type);\n        }\n        if (qSerialize && props) {\n            for (const prop of Object.keys(props)) {\n                if (prop.endsWith('$') && !isQrl(props[prop])) {\n                    throw qError(QError_invalidJsxNodeType, type);\n                }\n            }\n        }\n    }\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, props, processed);\n    seal(node);\n    return node;\n};\nexport const SKIP_RENDER_TYPE = ':skipRender';\nexport class JSXNodeImpl {\n    constructor(type, props, key = null) {\n        this.type = type;\n        this.props = props;\n        this.key = key;\n    }\n}\nexport const isJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof JSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && 'key' in n && 'props' in n && 'type' in n) {\n            logWarn(`Duplicate implementations of \"JSXNode\" found`);\n            return true;\n        }\n        return false;\n    }\n    else {\n        return n instanceof JSXNodeImpl;\n    }\n};\n/**\n * @public\n */\nexport const Fragment = (props) => props.children;\n/**\n * @public\n */\nexport const jsxDEV = (type, props, key, isStatic, opts, ctx) => {\n    if (qDev) {\n        if (!isString(type) && !isFunction(type)) {\n            throw qError(QError_invalidJsxNodeType, type);\n        }\n    }\n    const processed = key == null ? null : String(key);\n    const node = new JSXNodeImpl(type, props, processed);\n    node.dev = {\n        isStatic,\n        ctx,\n        ...opts,\n    };\n    seal(node);\n    return node;\n};\nexport { jsx as jsxs };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianN4LXJ1bnRpbWUuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9qc3gtcnVudGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEUsT0FBTyxFQUFFLE1BQU0sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUUvQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUNqQixJQUFPLEVBQ1AsS0FBNkUsRUFDN0UsR0FBNEIsRUFDaEIsRUFBRTtJQUNkLElBQUksSUFBSSxFQUFFO1FBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QyxNQUFNLE1BQU0sQ0FBQyx5QkFBeUIsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMvQztRQUNELElBQUksVUFBVSxJQUFJLEtBQUssRUFBRTtZQUN2QixLQUFLLE1BQU0sSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRTtvQkFDN0MsTUFBTSxNQUFNLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQy9DO2FBQ0Y7U0FDRjtLQUNGO0lBQ0QsTUFBTSxTQUFTLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbkQsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFXLENBQUksSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDWCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLGFBQWEsQ0FBQztBQUU5QyxNQUFNLE9BQU8sV0FBVztJQUV0QixZQUNTLElBQU8sRUFDUCxLQUE2RSxFQUM3RSxNQUFxQixJQUFJO1FBRnpCLFNBQUksR0FBSixJQUFJLENBQUc7UUFDUCxVQUFLLEdBQUwsS0FBSyxDQUF3RTtRQUM3RSxRQUFHLEdBQUgsR0FBRyxDQUFzQjtJQUMvQixDQUFDO0NBQ0w7QUFFRCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFNLEVBQWdCLEVBQUU7SUFDaEQsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsWUFBWSxXQUFXLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzVELE9BQU8sQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1lBQ3hELE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkO1NBQU07UUFDTCxPQUFPLENBQUMsWUFBWSxXQUFXLENBQUM7S0FDakM7QUFDSCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBMEMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFlLENBQUM7QUFRaEc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FDcEIsSUFBTyxFQUNQLEtBQTZFLEVBQzdFLEdBQXVDLEVBQ3ZDLFFBQWlCLEVBQ2pCLElBQWdCLEVBQ2hCLEdBQVEsRUFDSSxFQUFFO0lBQ2QsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sTUFBTSxDQUFDLHlCQUF5QixFQUFFLElBQUksQ0FBQyxDQUFDO1NBQy9DO0tBQ0Y7SUFDRCxNQUFNLFNBQVMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuRCxNQUFNLElBQUksR0FBRyxJQUFJLFdBQVcsQ0FBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQyxHQUFHLEdBQUc7UUFDVCxRQUFRO1FBQ1IsR0FBRztRQUNILEdBQUcsSUFBSTtLQUNSLENBQUM7SUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDWCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUlGLE9BQU8sRUFBRSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERldkpTWCwgRnVuY3Rpb25Db21wb25lbnQsIEpTWE5vZGUgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgUXdpa0pTWCB9IGZyb20gJy4vdHlwZXMvanN4LXF3aWsnO1xuaW1wb3J0IHsgcURldiwgcVNlcmlhbGl6ZSwgc2VhbCB9IGZyb20gJy4uLy4uL3V0aWwvcWRldic7XG5pbXBvcnQgeyBsb2dXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9sb2cnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNPYmplY3QsIGlzU3RyaW5nIH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBxRXJyb3IsIFFFcnJvcl9pbnZhbGlkSnN4Tm9kZVR5cGUgfSBmcm9tICcuLi8uLi9lcnJvci9lcnJvcic7XG5pbXBvcnQgeyBpc1FybCB9IGZyb20gJy4uLy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGpzeCA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8YW55Pj4oXG4gIHR5cGU6IFQsXG4gIHByb3BzOiBUIGV4dGVuZHMgRnVuY3Rpb25Db21wb25lbnQ8aW5mZXIgUFJPUFM+ID8gUFJPUFMgOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBrZXk/OiBzdHJpbmcgfCBudW1iZXIgfCBudWxsXG4pOiBKU1hOb2RlPFQ+ID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAoIWlzU3RyaW5nKHR5cGUpICYmICFpc0Z1bmN0aW9uKHR5cGUpKSB7XG4gICAgICB0aHJvdyBxRXJyb3IoUUVycm9yX2ludmFsaWRKc3hOb2RlVHlwZSwgdHlwZSk7XG4gICAgfVxuICAgIGlmIChxU2VyaWFsaXplICYmIHByb3BzKSB7XG4gICAgICBmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmtleXMocHJvcHMpKSB7XG4gICAgICAgIGlmIChwcm9wLmVuZHNXaXRoKCckJykgJiYgIWlzUXJsKHByb3BzW3Byb3BdKSkge1xuICAgICAgICAgIHRocm93IHFFcnJvcihRRXJyb3JfaW52YWxpZEpzeE5vZGVUeXBlLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBjb25zdCBwcm9jZXNzZWQgPSBrZXkgPT0gbnVsbCA/IG51bGwgOiBTdHJpbmcoa2V5KTtcbiAgY29uc3Qgbm9kZSA9IG5ldyBKU1hOb2RlSW1wbDxUPih0eXBlLCBwcm9wcywgcHJvY2Vzc2VkKTtcbiAgc2VhbChub2RlKTtcbiAgcmV0dXJuIG5vZGU7XG59O1xuXG5leHBvcnQgY29uc3QgU0tJUF9SRU5ERVJfVFlQRSA9ICc6c2tpcFJlbmRlcic7XG5cbmV4cG9ydCBjbGFzcyBKU1hOb2RlSW1wbDxUPiBpbXBsZW1lbnRzIEpTWE5vZGU8VD4ge1xuICBkZXY/OiBEZXZKU1g7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyB0eXBlOiBULFxuICAgIHB1YmxpYyBwcm9wczogVCBleHRlbmRzIEZ1bmN0aW9uQ29tcG9uZW50PGluZmVyIFBST1BTPiA/IFBST1BTIDogUmVjb3JkPHN0cmluZywgYW55PixcbiAgICBwdWJsaWMga2V5OiBzdHJpbmcgfCBudWxsID0gbnVsbFxuICApIHt9XG59XG5cbmV4cG9ydCBjb25zdCBpc0pTWE5vZGUgPSAobjogYW55KTogbiBpcyBKU1hOb2RlID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICBpZiAobiBpbnN0YW5jZW9mIEpTWE5vZGVJbXBsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KG4pICYmICdrZXknIGluIG4gJiYgJ3Byb3BzJyBpbiBuICYmICd0eXBlJyBpbiBuKSB7XG4gICAgICBsb2dXYXJuKGBEdXBsaWNhdGUgaW1wbGVtZW50YXRpb25zIG9mIFwiSlNYTm9kZVwiIGZvdW5kYCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuIGluc3RhbmNlb2YgSlNYTm9kZUltcGw7XG4gIH1cbn07XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgRnJhZ21lbnQ6IEZ1bmN0aW9uQ29tcG9uZW50PHsgY2hpbGRyZW4/OiBhbnkgfT4gPSAocHJvcHMpID0+IHByb3BzLmNoaWxkcmVuIGFzIGFueTtcblxuaW50ZXJmYWNlIEpzeERldk9wdHMge1xuICBmaWxlTmFtZTogc3RyaW5nO1xuICBsaW5lTnVtYmVyOiBudW1iZXI7XG4gIGNvbHVtbk51bWJlcjogbnVtYmVyO1xufVxuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGpzeERFViA9IDxUIGV4dGVuZHMgc3RyaW5nIHwgRnVuY3Rpb25Db21wb25lbnQ8YW55Pj4oXG4gIHR5cGU6IFQsXG4gIHByb3BzOiBUIGV4dGVuZHMgRnVuY3Rpb25Db21wb25lbnQ8aW5mZXIgUFJPUFM+ID8gUFJPUFMgOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBrZXk6IHN0cmluZyB8IG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQsXG4gIGlzU3RhdGljOiBib29sZWFuLFxuICBvcHRzOiBKc3hEZXZPcHRzLFxuICBjdHg6IGFueVxuKTogSlNYTm9kZTxUPiA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKCFpc1N0cmluZyh0eXBlKSAmJiAhaXNGdW5jdGlvbih0eXBlKSkge1xuICAgICAgdGhyb3cgcUVycm9yKFFFcnJvcl9pbnZhbGlkSnN4Tm9kZVR5cGUsIHR5cGUpO1xuICAgIH1cbiAgfVxuICBjb25zdCBwcm9jZXNzZWQgPSBrZXkgPT0gbnVsbCA/IG51bGwgOiBTdHJpbmcoa2V5KTtcbiAgY29uc3Qgbm9kZSA9IG5ldyBKU1hOb2RlSW1wbDxUPih0eXBlLCBwcm9wcywgcHJvY2Vzc2VkKTtcbiAgbm9kZS5kZXYgPSB7XG4gICAgaXNTdGF0aWMsXG4gICAgY3R4LFxuICAgIC4uLm9wdHMsXG4gIH07XG4gIHNlYWwobm9kZSk7XG4gIHJldHVybiBub2RlO1xufTtcblxuZXhwb3J0IHR5cGUgeyBRd2lrSlNYIGFzIEpTWCB9O1xuXG5leHBvcnQgeyBqc3ggYXMganN4cyB9O1xuIl19","import { jsx } from '../jsx/jsx-runtime';\nexport const QOnce = 'qonce';\n/**\n * @alpha\n */\nexport const SkipRender = Symbol('skip render');\nexport const RenderOnce = (props, key) => {\n    return jsx(Virtual, {\n        ...props,\n        [QOnce]: '',\n    }, key);\n};\n/**\n * @alpha\n */\nexport const Fragment = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRComment = (() => null);\n/**\n * @alpha\n */\nexport const Virtual = ((props) => props.children);\n/**\n * @alpha\n */\nexport const SSRStreamBlock = (props) => {\n    return [\n        jsx(SSRComment, { data: 'qkssr-pu' }),\n        props.children,\n        jsx(SSRComment, { data: 'qkssr-po' }),\n    ];\n};\n/**\n * @alpha\n */\nexport const SSRStream = (props, key) => jsx(RenderOnce, { children: jsx(InternalSSRStream, props) }, key);\nexport const InternalSSRStream = () => null;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9qc3gvdXRpbHMucHVibGljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUt6QyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDO0FBRTdCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFZLE1BQU0sQ0FBQyxhQUFhLENBQVEsQ0FBQztBQUVoRSxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQTBDLENBQUMsS0FBVSxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ25GLE9BQU8sR0FBRyxDQUNSLE9BQU8sRUFDUDtRQUNFLEdBQUcsS0FBSztRQUNSLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtLQUNaLEVBQ0QsR0FBRyxDQUNKLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBMEIsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBUSxDQUFDO0FBRXZGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUF3QyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBUSxDQUFDO0FBRW5GOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUEyQyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FDN0UsS0FBSyxDQUFDLFFBQVEsQ0FBUSxDQUFDO0FBRXpCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUEwQyxDQUFDLEtBQUssRUFBRSxFQUFFO0lBQzdFLE9BQU87UUFDTCxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxRQUFRO1FBQ2QsR0FBRyxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztLQUMvQixDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBWUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQW1DLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQ3RFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFcEUsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQW1DLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzeCB9IGZyb20gJy4uL2pzeC9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IFN0cmVhbVdyaXRlciB9IGZyb20gJy4uL3Nzci9yZW5kZXItc3NyJztcbmltcG9ydCB0eXBlIHsgRnVuY3Rpb25Db21wb25lbnQsIEpTWE5vZGUgfSBmcm9tICcuL3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB0eXBlIHsgSlNYQ2hpbGRyZW4gfSBmcm9tICcuL3R5cGVzL2pzeC1xd2lrLWF0dHJpYnV0ZXMnO1xuXG5leHBvcnQgY29uc3QgUU9uY2UgPSAncW9uY2UnO1xuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgU2tpcFJlbmRlcjogSlNYTm9kZSA9IFN5bWJvbCgnc2tpcCByZW5kZXInKSBhcyBhbnk7XG5cbmV4cG9ydCBjb25zdCBSZW5kZXJPbmNlOiBGdW5jdGlvbkNvbXBvbmVudDx7IGNoaWxkcmVuPzogYW55IH0+ID0gKHByb3BzOiBhbnksIGtleSkgPT4ge1xuICByZXR1cm4ganN4KFxuICAgIFZpcnR1YWwsXG4gICAge1xuICAgICAgLi4ucHJvcHMsXG4gICAgICBbUU9uY2VdOiAnJyxcbiAgICB9LFxuICAgIGtleVxuICApO1xufTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IEZyYWdtZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7fT4gPSAoKHByb3BzOiBhbnkpID0+IHByb3BzLmNoaWxkcmVuKSBhcyBhbnk7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBTU1JDb21tZW50OiBGdW5jdGlvbkNvbXBvbmVudDx7IGRhdGE6IHN0cmluZyB9PiA9ICgoKSA9PiBudWxsKSBhcyBhbnk7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCBWaXJ0dWFsOiBGdW5jdGlvbkNvbXBvbmVudDxSZWNvcmQ8c3RyaW5nLCBhbnk+PiA9ICgocHJvcHM6IGFueSkgPT5cbiAgcHJvcHMuY2hpbGRyZW4pIGFzIGFueTtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNTUlN0cmVhbUJsb2NrOiBGdW5jdGlvbkNvbXBvbmVudDx7IGNoaWxkcmVuPzogYW55IH0+ID0gKHByb3BzKSA9PiB7XG4gIHJldHVybiBbXG4gICAganN4KFNTUkNvbW1lbnQsIHsgZGF0YTogJ3Frc3NyLXB1JyB9KSxcbiAgICBwcm9wcy5jaGlsZHJlbixcbiAgICBqc3goU1NSQ29tbWVudCwgeyBkYXRhOiAncWtzc3ItcG8nIH0pLFxuICBdIGFzIGFueTtcbn07XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RyZWFtUHJvcHMge1xuICBjaGlsZHJlbjpcbiAgICB8IEFzeW5jR2VuZXJhdG9yPEpTWENoaWxkcmVuLCB2b2lkLCBhbnk+XG4gICAgfCAoKHN0cmVhbTogU3RyZWFtV3JpdGVyKSA9PiBQcm9taXNlPHZvaWQ+KVxuICAgIHwgKCgpID0+IEFzeW5jR2VuZXJhdG9yPEpTWENoaWxkcmVuLCB2b2lkLCBhbnk+KTtcbn1cblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IFNTUlN0cmVhbTogRnVuY3Rpb25Db21wb25lbnQ8U3RyZWFtUHJvcHM+ID0gKHByb3BzLCBrZXkpID0+XG4gIGpzeChSZW5kZXJPbmNlLCB7IGNoaWxkcmVuOiBqc3goSW50ZXJuYWxTU1JTdHJlYW0sIHByb3BzKSB9LCBrZXkpO1xuXG5leHBvcnQgY29uc3QgSW50ZXJuYWxTU1JTdHJlYW06IEZ1bmN0aW9uQ29tcG9uZW50PFN0cmVhbVByb3BzPiA9ICgpID0+IG51bGw7XG4iXX0=","export const fromCamelToKebabCase = (text) => {\n    return text.replace(/([A-Z])/g, '-$1').toLowerCase();\n};\nexport const fromKebabToCamelCase = (text) => {\n    return text.replace(/-./g, (x) => x[1].toUpperCase());\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91dGlsL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxJQUFZLEVBQVUsRUFBRTtJQUMzRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQUMsSUFBWSxFQUFVLEVBQUU7SUFDM0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZyb21DYW1lbFRvS2ViYWJDYXNlID0gKHRleHQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiB0ZXh0LnJlcGxhY2UoLyhbQS1aXSkvZywgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZnJvbUtlYmFiVG9DYW1lbENhc2UgPSAodGV4dDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSgvLS4vZywgKHgpID0+IHhbMV0udG9VcHBlckNhc2UoKSk7XG59O1xuIl19","import { assertDefined } from '../../assert/assert';\nimport { codeToText, QError_setProperty } from '../../error/error';\nimport { getDocument } from '../../util/dom';\nimport { logDebug, logError, logWarn } from '../../util/log';\nimport { QSlot, QSlotRef, QStyle } from '../../util/markers';\nimport { qDev } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { cleanupTree, directAppendChild, directInsertBefore, directRemoveChild, getChildren, isSlotTemplate, SVG_NS, } from './visitor';\nexport const setAttribute = (ctx, el, prop, value) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setAttribute,\n            $args$: [el, prop, value],\n        });\n    }\n    else {\n        _setAttribute(el, prop, value);\n    }\n};\nconst _setAttribute = (el, prop, value) => {\n    if (value == null || value === false) {\n        el.removeAttribute(prop);\n    }\n    else {\n        const str = value === true ? '' : String(value);\n        directSetAttribute(el, prop, str);\n    }\n};\nexport const setProperty = (ctx, node, key, value) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setProperty,\n            $args$: [node, key, value],\n        });\n    }\n    else {\n        _setProperty(node, key, value);\n    }\n};\nconst _setProperty = (node, key, value) => {\n    try {\n        node[key] = value == null ? '' : value;\n    }\n    catch (err) {\n        logError(codeToText(QError_setProperty), { node, key, value }, err);\n    }\n};\nexport const createElement = (doc, expectTag, isSvg) => {\n    const el = isSvg ? doc.createElementNS(SVG_NS, expectTag) : doc.createElement(expectTag);\n    return el;\n};\nexport const insertBefore = (ctx, parent, newChild, refChild) => {\n    ctx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, refChild ? refChild : null],\n    });\n    return newChild;\n};\nexport const appendChild = (ctx, parent, newChild) => {\n    ctx.$operations$.push({\n        $operation$: directAppendChild,\n        $args$: [parent, newChild],\n    });\n    return newChild;\n};\nexport const appendHeadStyle = (ctx, styleTask) => {\n    ctx.$containerState$.$styleIds$.add(styleTask.styleId);\n    ctx.$postOperations$.push({\n        $operation$: _appendHeadStyle,\n        $args$: [ctx.$containerState$.$containerEl$, styleTask],\n    });\n};\nexport const setClasslist = (ctx, elm, toRemove, toAdd) => {\n    if (ctx) {\n        ctx.$operations$.push({\n            $operation$: _setClasslist,\n            $args$: [elm, toRemove, toAdd],\n        });\n    }\n    else {\n        _setClasslist(elm, toRemove, toAdd);\n    }\n};\nexport const _setClasslist = (elm, toRemove, toAdd) => {\n    const classList = elm.classList;\n    classList.remove(...toRemove);\n    classList.add(...toAdd);\n};\nexport const _appendHeadStyle = (containerEl, styleTask) => {\n    const doc = getDocument(containerEl);\n    const isDoc = doc.documentElement === containerEl;\n    const headEl = doc.head;\n    const style = doc.createElement('style');\n    if (isDoc && !headEl) {\n        logWarn('document.head is undefined');\n    }\n    directSetAttribute(style, QStyle, styleTask.styleId);\n    style.textContent = styleTask.content;\n    if (isDoc && headEl) {\n        directAppendChild(headEl, style);\n    }\n    else {\n        directInsertBefore(containerEl, style, containerEl.firstChild);\n    }\n};\nexport const prepend = (ctx, parent, newChild) => {\n    ctx.$operations$.push({\n        $operation$: directInsertBefore,\n        $args$: [parent, newChild, parent.firstChild],\n    });\n};\nexport const removeNode = (ctx, el) => {\n    ctx.$operations$.push({\n        $operation$: _removeNode,\n        $args$: [el, ctx],\n    });\n};\nconst _removeNode = (el, staticCtx) => {\n    const parent = el.parentElement;\n    if (parent) {\n        if (el.nodeType === 1 || el.nodeType === 111) {\n            const subsManager = staticCtx.$containerState$.$subsManager$;\n            cleanupTree(el, staticCtx, subsManager, true);\n        }\n        directRemoveChild(parent, el);\n    }\n    else if (qDev) {\n        logWarn('Trying to remove component already removed', el);\n    }\n};\nexport const createTemplate = (doc, slotName) => {\n    const template = createElement(doc, 'q:template', false);\n    directSetAttribute(template, QSlot, slotName);\n    directSetAttribute(template, 'hidden', '');\n    directSetAttribute(template, 'aria-hidden', 'true');\n    return template;\n};\nexport const executeDOMRender = (ctx) => {\n    for (const op of ctx.$operations$) {\n        op.$operation$.apply(undefined, op.$args$);\n    }\n    resolveSlotProjection(ctx);\n};\nexport const getKey = (el) => {\n    return directGetAttribute(el, 'q:key');\n};\nexport const setKey = (el, key) => {\n    if (key !== null) {\n        directSetAttribute(el, 'q:key', key);\n    }\n};\nexport const resolveSlotProjection = (ctx) => {\n    // Slots removed\n    const subsManager = ctx.$containerState$.$subsManager$;\n    for (const slotEl of ctx.$rmSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const slotChildren = getChildren(slotEl, 'root');\n        if (slotChildren.length > 0) {\n            const sref = slotEl.getAttribute(QSlotRef);\n            const hostCtx = ctx.$roots$.find((r) => r.$id$ === sref);\n            if (hostCtx) {\n                const template = createTemplate(ctx.$doc$, key);\n                const hostElm = hostCtx.$element$;\n                for (const child of slotChildren) {\n                    directAppendChild(template, child);\n                }\n                directInsertBefore(hostElm, template, hostElm.firstChild);\n            }\n            else {\n                // If slot content cannot be relocated, it means it's content is definively removed\n                // Cleanup needs to be executed\n                cleanupTree(slotEl, ctx, subsManager, false);\n            }\n        }\n    }\n    // Slots added\n    for (const [slotEl, hostElm] of ctx.$addSlots$) {\n        const key = getKey(slotEl);\n        assertDefined(key, 'slots must have a key');\n        const template = Array.from(hostElm.childNodes).find((node) => {\n            return isSlotTemplate(node) && node.getAttribute(QSlot) === key;\n        });\n        if (template) {\n            const children = getChildren(template, 'root');\n            children.forEach((child) => {\n                directAppendChild(slotEl, child);\n            });\n            template.remove();\n        }\n    }\n};\nexport const createTextNode = (doc, text) => {\n    return doc.createTextNode(text);\n};\nexport const printRenderStats = (ctx) => {\n    if (qDev) {\n        if (typeof window !== 'undefined' && window.document != null) {\n            const byOp = {};\n            for (const op of ctx.$operations$) {\n                byOp[op.$operation$.name] = (byOp[op.$operation$.name] ?? 0) + 1;\n            }\n            const stats = {\n                byOp,\n                roots: ctx.$roots$.map((ctx) => ctx.$element$),\n                hostElements: Array.from(ctx.$hostElements$),\n                operations: ctx.$operations$.map((v) => [v.$operation$.name, ...v.$args$]),\n            };\n            const noOps = ctx.$operations$.length === 0;\n            logDebug('Render stats.', noOps ? 'No operations' : '', stats);\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL29wZXJhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0QsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUd2RSxPQUFPLEVBQ0wsV0FBVyxFQUNYLGlCQUFpQixFQUNqQixrQkFBa0IsRUFDbEIsaUJBQWlCLEVBQ2pCLFdBQVcsRUFDWCxjQUFjLEVBQ2QsTUFBTSxHQUNQLE1BQU0sV0FBVyxDQUFDO0FBRW5CLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUMxQixHQUFvQyxFQUNwQyxFQUFlLEVBQ2YsSUFBWSxFQUNaLEtBQVUsRUFDVixFQUFFO0lBQ0YsSUFBSSxHQUFHLEVBQUU7UUFDUCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNwQixXQUFXLEVBQUUsYUFBYTtZQUMxQixNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQztTQUMxQixDQUFDLENBQUM7S0FDSjtTQUFNO1FBQ0wsYUFBYSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDaEM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQWUsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDbEUsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7UUFDcEMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUMxQjtTQUFNO1FBQ0wsTUFBTSxHQUFHLEdBQUcsS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEQsa0JBQWtCLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNuQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxDQUN6QixHQUFvQyxFQUNwQyxJQUFTLEVBQ1QsR0FBVyxFQUNYLEtBQVUsRUFDVixFQUFFO0lBQ0YsSUFBSSxHQUFHLEVBQUU7UUFDUCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNwQixXQUFXLEVBQUUsWUFBWTtZQUN6QixNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQztTQUMzQixDQUFDLENBQUM7S0FDSjtTQUFNO1FBQ0wsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDaEM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLFlBQVksR0FBRyxDQUFDLElBQVMsRUFBRSxHQUFXLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDMUQsSUFBSTtRQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUN4QztJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osUUFBUSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUNyRTtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLEdBQWEsRUFBRSxTQUFpQixFQUFFLEtBQWMsRUFBVyxFQUFFO0lBQ3pGLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFekYsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FDMUIsR0FBd0IsRUFDeEIsTUFBbUIsRUFDbkIsUUFBVyxFQUNYLFFBQWtELEVBQy9DLEVBQUU7SUFDTCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUNwQixXQUFXLEVBQUUsa0JBQWtCO1FBQy9CLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztLQUN2RCxDQUFDLENBQUM7SUFDSCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FDekIsR0FBd0IsRUFDeEIsTUFBbUIsRUFDbkIsUUFBVyxFQUNSLEVBQUU7SUFDTCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztRQUNwQixXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLE1BQU0sRUFBRSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7S0FDM0IsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBd0IsRUFBRSxTQUFzQixFQUFFLEVBQUU7SUFDbEYsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7UUFDeEIsV0FBVyxFQUFFLGdCQUFnQjtRQUM3QixNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLFNBQVMsQ0FBQztLQUN4RCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FDMUIsR0FBb0MsRUFDcEMsR0FBWSxFQUNaLFFBQWtCLEVBQ2xCLEtBQWUsRUFDZixFQUFFO0lBQ0YsSUFBSSxHQUFHLEVBQUU7UUFDUCxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNwQixXQUFXLEVBQUUsYUFBYTtZQUMxQixNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQztTQUMvQixDQUFDLENBQUM7S0FDSjtTQUFNO1FBQ0wsYUFBYSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDckM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFZLEVBQUUsUUFBa0IsRUFBRSxLQUFlLEVBQUUsRUFBRTtJQUNqRixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsU0FBUyxDQUFDO0lBQ2hDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztJQUM5QixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUM7QUFDMUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxXQUFvQixFQUFFLFNBQXNCLEVBQUUsRUFBRTtJQUMvRSxNQUFNLEdBQUcsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDckMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLGVBQWUsS0FBSyxXQUFXLENBQUM7SUFDbEQsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztJQUN4QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pDLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ3BCLE9BQU8sQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0tBQ3ZDO0lBQ0Qsa0JBQWtCLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsS0FBSyxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3RDLElBQUksS0FBSyxJQUFJLE1BQU0sRUFBRTtRQUNuQixpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDbEM7U0FBTTtRQUNMLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQ2hFO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBd0IsRUFBRSxNQUFtQixFQUFFLFFBQWMsRUFBRSxFQUFFO0lBQ3ZGLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ3BCLFdBQVcsRUFBRSxrQkFBa0I7UUFDL0IsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDO0tBQzlDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQXdCLEVBQUUsRUFBeUIsRUFBRSxFQUFFO0lBQ2hGLEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ3BCLFdBQVcsRUFBRSxXQUFXO1FBQ3hCLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7S0FDbEIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxFQUF5QixFQUFFLFNBQThCLEVBQUUsRUFBRTtJQUNoRixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQ2hDLElBQUksTUFBTSxFQUFFO1FBQ1YsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxLQUFLLEdBQUcsRUFBRTtZQUM1QyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDO1lBQzdELFdBQVcsQ0FBQyxFQUFhLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMxRDtRQUNELGlCQUFpQixDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztLQUMvQjtTQUFNLElBQUksSUFBSSxFQUFFO1FBQ2YsT0FBTyxDQUFDLDRDQUE0QyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQzNEO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsR0FBYSxFQUFFLFFBQWdCLEVBQUUsRUFBRTtJQUNoRSxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6RCxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0Msa0JBQWtCLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVwRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQXdCLEVBQUUsRUFBRTtJQUMzRCxLQUFLLE1BQU0sRUFBRSxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUU7UUFDakMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM1QztJQUNELHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzdCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEVBQWUsRUFBaUIsRUFBRTtJQUN2RCxPQUFPLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxFQUFlLEVBQUUsR0FBa0IsRUFBRSxFQUFFO0lBQzVELElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtRQUNoQixrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxHQUF3QixFQUFFLEVBQUU7SUFDaEUsZ0JBQWdCO0lBQ2hCLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7SUFDdkQsS0FBSyxNQUFNLE1BQU0sSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFO1FBQ2xDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixhQUFhLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFFNUMsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNqRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzNCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0MsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDekQsSUFBSSxPQUFPLEVBQUU7Z0JBQ1gsTUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ2hELE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7Z0JBQ2xDLEtBQUssTUFBTSxLQUFLLElBQUksWUFBWSxFQUFFO29CQUNoQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7aUJBQ3BDO2dCQUNELGtCQUFrQixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzNEO2lCQUFNO2dCQUNMLG1GQUFtRjtnQkFDbkYsK0JBQStCO2dCQUMvQixXQUFXLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDOUM7U0FDRjtLQUNGO0lBRUQsY0FBYztJQUNkLEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxFQUFFO1FBQzlDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzQixhQUFhLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFFNUMsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDNUQsT0FBTyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUM7UUFDbEUsQ0FBQyxDQUF3QixDQUFDO1FBQzFCLElBQUksUUFBUSxFQUFFO1lBQ1osTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUMvQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ3pCLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQztZQUNILFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNuQjtLQUNGO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQUMsR0FBYSxFQUFFLElBQVksRUFBUSxFQUFFO0lBQ2xFLE9BQU8sR0FBRyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLEdBQXdCLEVBQUUsRUFBRTtJQUMzRCxJQUFJLElBQUksRUFBRTtRQUNSLElBQUksT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO1lBQzVELE1BQU0sSUFBSSxHQUEyQixFQUFFLENBQUM7WUFDeEMsS0FBSyxNQUFNLEVBQUUsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNsRTtZQUNELE1BQU0sS0FBSyxHQUFHO2dCQUNaLElBQUk7Z0JBQ0osS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO2dCQUM5QyxZQUFZLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO2dCQUM1QyxVQUFVLEVBQUUsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDM0UsQ0FBQztZQUNGLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztZQUM1QyxRQUFRLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDaEU7S0FDRjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydERlZmluZWQgfSBmcm9tICcuLi8uLi9hc3NlcnQvYXNzZXJ0JztcbmltcG9ydCB7IGNvZGVUb1RleHQsIFFFcnJvcl9zZXRQcm9wZXJ0eSB9IGZyb20gJy4uLy4uL2Vycm9yL2Vycm9yJztcbmltcG9ydCB0eXBlIHsgU3R5bGVBcHBlbmQgfSBmcm9tICcuLi8uLi91c2UvdXNlLWNvcmUnO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5pbXBvcnQgeyBsb2dEZWJ1ZywgbG9nRXJyb3IsIGxvZ1dhcm4gfSBmcm9tICcuLi8uLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBRU2xvdCwgUVNsb3RSZWYsIFFTdHlsZSB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IGRpcmVjdEdldEF0dHJpYnV0ZSwgZGlyZWN0U2V0QXR0cmlidXRlIH0gZnJvbSAnLi4vZmFzdC1jYWxscyc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlclN0YXRpY0NvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IFF3aWtFbGVtZW50LCBWaXJ0dWFsRWxlbWVudCB9IGZyb20gJy4vdmlydHVhbC1lbGVtZW50JztcbmltcG9ydCB7XG4gIGNsZWFudXBUcmVlLFxuICBkaXJlY3RBcHBlbmRDaGlsZCxcbiAgZGlyZWN0SW5zZXJ0QmVmb3JlLFxuICBkaXJlY3RSZW1vdmVDaGlsZCxcbiAgZ2V0Q2hpbGRyZW4sXG4gIGlzU2xvdFRlbXBsYXRlLFxuICBTVkdfTlMsXG59IGZyb20gJy4vdmlzaXRvcic7XG5cbmV4cG9ydCBjb25zdCBzZXRBdHRyaWJ1dGUgPSAoXG4gIGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCB8IHVuZGVmaW5lZCxcbiAgZWw6IFF3aWtFbGVtZW50LFxuICBwcm9wOiBzdHJpbmcsXG4gIHZhbHVlOiBhbnlcbikgPT4ge1xuICBpZiAoY3R4KSB7XG4gICAgY3R4LiRvcGVyYXRpb25zJC5wdXNoKHtcbiAgICAgICRvcGVyYXRpb24kOiBfc2V0QXR0cmlidXRlLFxuICAgICAgJGFyZ3MkOiBbZWwsIHByb3AsIHZhbHVlXSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBfc2V0QXR0cmlidXRlKGVsLCBwcm9wLCB2YWx1ZSk7XG4gIH1cbn07XG5cbmNvbnN0IF9zZXRBdHRyaWJ1dGUgPSAoZWw6IFF3aWtFbGVtZW50LCBwcm9wOiBzdHJpbmcsIHZhbHVlOiBhbnkpID0+IHtcbiAgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09IGZhbHNlKSB7XG4gICAgZWwucmVtb3ZlQXR0cmlidXRlKHByb3ApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHN0ciA9IHZhbHVlID09PSB0cnVlID8gJycgOiBTdHJpbmcodmFsdWUpO1xuICAgIGRpcmVjdFNldEF0dHJpYnV0ZShlbCwgcHJvcCwgc3RyKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNldFByb3BlcnR5ID0gKFxuICBjdHg6IFJlbmRlclN0YXRpY0NvbnRleHQgfCB1bmRlZmluZWQsXG4gIG5vZGU6IGFueSxcbiAga2V5OiBzdHJpbmcsXG4gIHZhbHVlOiBhbnlcbikgPT4ge1xuICBpZiAoY3R4KSB7XG4gICAgY3R4LiRvcGVyYXRpb25zJC5wdXNoKHtcbiAgICAgICRvcGVyYXRpb24kOiBfc2V0UHJvcGVydHksXG4gICAgICAkYXJncyQ6IFtub2RlLCBrZXksIHZhbHVlXSxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBfc2V0UHJvcGVydHkobm9kZSwga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbmNvbnN0IF9zZXRQcm9wZXJ0eSA9IChub2RlOiBhbnksIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiB7XG4gIHRyeSB7XG4gICAgbm9kZVtrZXldID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZ0Vycm9yKGNvZGVUb1RleHQoUUVycm9yX3NldFByb3BlcnR5KSwgeyBub2RlLCBrZXksIHZhbHVlIH0sIGVycik7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50ID0gKGRvYzogRG9jdW1lbnQsIGV4cGVjdFRhZzogc3RyaW5nLCBpc1N2ZzogYm9vbGVhbik6IEVsZW1lbnQgPT4ge1xuICBjb25zdCBlbCA9IGlzU3ZnID8gZG9jLmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIGV4cGVjdFRhZykgOiBkb2MuY3JlYXRlRWxlbWVudChleHBlY3RUYWcpO1xuXG4gIHJldHVybiBlbDtcbn07XG5cbmV4cG9ydCBjb25zdCBpbnNlcnRCZWZvcmUgPSA8VCBleHRlbmRzIE5vZGUgfCBWaXJ0dWFsRWxlbWVudD4oXG4gIGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCxcbiAgcGFyZW50OiBRd2lrRWxlbWVudCxcbiAgbmV3Q2hpbGQ6IFQsXG4gIHJlZkNoaWxkOiBOb2RlIHwgVmlydHVhbEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkXG4pOiBUID0+IHtcbiAgY3R4LiRvcGVyYXRpb25zJC5wdXNoKHtcbiAgICAkb3BlcmF0aW9uJDogZGlyZWN0SW5zZXJ0QmVmb3JlLFxuICAgICRhcmdzJDogW3BhcmVudCwgbmV3Q2hpbGQsIHJlZkNoaWxkID8gcmVmQ2hpbGQgOiBudWxsXSxcbiAgfSk7XG4gIHJldHVybiBuZXdDaGlsZDtcbn07XG5cbmV4cG9ydCBjb25zdCBhcHBlbmRDaGlsZCA9IDxUIGV4dGVuZHMgTm9kZSB8IFZpcnR1YWxFbGVtZW50PihcbiAgY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBwYXJlbnQ6IFF3aWtFbGVtZW50LFxuICBuZXdDaGlsZDogVFxuKTogVCA9PiB7XG4gIGN0eC4kb3BlcmF0aW9ucyQucHVzaCh7XG4gICAgJG9wZXJhdGlvbiQ6IGRpcmVjdEFwcGVuZENoaWxkLFxuICAgICRhcmdzJDogW3BhcmVudCwgbmV3Q2hpbGRdLFxuICB9KTtcbiAgcmV0dXJuIG5ld0NoaWxkO1xufTtcblxuZXhwb3J0IGNvbnN0IGFwcGVuZEhlYWRTdHlsZSA9IChjdHg6IFJlbmRlclN0YXRpY0NvbnRleHQsIHN0eWxlVGFzazogU3R5bGVBcHBlbmQpID0+IHtcbiAgY3R4LiRjb250YWluZXJTdGF0ZSQuJHN0eWxlSWRzJC5hZGQoc3R5bGVUYXNrLnN0eWxlSWQpO1xuICBjdHguJHBvc3RPcGVyYXRpb25zJC5wdXNoKHtcbiAgICAkb3BlcmF0aW9uJDogX2FwcGVuZEhlYWRTdHlsZSxcbiAgICAkYXJncyQ6IFtjdHguJGNvbnRhaW5lclN0YXRlJC4kY29udGFpbmVyRWwkLCBzdHlsZVRhc2tdLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRDbGFzc2xpc3QgPSAoXG4gIGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCB8IHVuZGVmaW5lZCxcbiAgZWxtOiBFbGVtZW50LFxuICB0b1JlbW92ZTogc3RyaW5nW10sXG4gIHRvQWRkOiBzdHJpbmdbXVxuKSA9PiB7XG4gIGlmIChjdHgpIHtcbiAgICBjdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICAgJG9wZXJhdGlvbiQ6IF9zZXRDbGFzc2xpc3QsXG4gICAgICAkYXJncyQ6IFtlbG0sIHRvUmVtb3ZlLCB0b0FkZF0sXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgX3NldENsYXNzbGlzdChlbG0sIHRvUmVtb3ZlLCB0b0FkZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBfc2V0Q2xhc3NsaXN0ID0gKGVsbTogRWxlbWVudCwgdG9SZW1vdmU6IHN0cmluZ1tdLCB0b0FkZDogc3RyaW5nW10pID0+IHtcbiAgY29uc3QgY2xhc3NMaXN0ID0gZWxtLmNsYXNzTGlzdDtcbiAgY2xhc3NMaXN0LnJlbW92ZSguLi50b1JlbW92ZSk7XG4gIGNsYXNzTGlzdC5hZGQoLi4udG9BZGQpO1xufTtcblxuZXhwb3J0IGNvbnN0IF9hcHBlbmRIZWFkU3R5bGUgPSAoY29udGFpbmVyRWw6IEVsZW1lbnQsIHN0eWxlVGFzazogU3R5bGVBcHBlbmQpID0+IHtcbiAgY29uc3QgZG9jID0gZ2V0RG9jdW1lbnQoY29udGFpbmVyRWwpO1xuICBjb25zdCBpc0RvYyA9IGRvYy5kb2N1bWVudEVsZW1lbnQgPT09IGNvbnRhaW5lckVsO1xuICBjb25zdCBoZWFkRWwgPSBkb2MuaGVhZDtcbiAgY29uc3Qgc3R5bGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgaWYgKGlzRG9jICYmICFoZWFkRWwpIHtcbiAgICBsb2dXYXJuKCdkb2N1bWVudC5oZWFkIGlzIHVuZGVmaW5lZCcpO1xuICB9XG4gIGRpcmVjdFNldEF0dHJpYnV0ZShzdHlsZSwgUVN0eWxlLCBzdHlsZVRhc2suc3R5bGVJZCk7XG4gIHN0eWxlLnRleHRDb250ZW50ID0gc3R5bGVUYXNrLmNvbnRlbnQ7XG4gIGlmIChpc0RvYyAmJiBoZWFkRWwpIHtcbiAgICBkaXJlY3RBcHBlbmRDaGlsZChoZWFkRWwsIHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICBkaXJlY3RJbnNlcnRCZWZvcmUoY29udGFpbmVyRWwsIHN0eWxlLCBjb250YWluZXJFbC5maXJzdENoaWxkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHByZXBlbmQgPSAoY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LCBwYXJlbnQ6IFF3aWtFbGVtZW50LCBuZXdDaGlsZDogTm9kZSkgPT4ge1xuICBjdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICRvcGVyYXRpb24kOiBkaXJlY3RJbnNlcnRCZWZvcmUsXG4gICAgJGFyZ3MkOiBbcGFyZW50LCBuZXdDaGlsZCwgcGFyZW50LmZpcnN0Q2hpbGRdLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCByZW1vdmVOb2RlID0gKGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCwgZWw6IE5vZGUgfCBWaXJ0dWFsRWxlbWVudCkgPT4ge1xuICBjdHguJG9wZXJhdGlvbnMkLnB1c2goe1xuICAgICRvcGVyYXRpb24kOiBfcmVtb3ZlTm9kZSxcbiAgICAkYXJncyQ6IFtlbCwgY3R4XSxcbiAgfSk7XG59O1xuXG5jb25zdCBfcmVtb3ZlTm9kZSA9IChlbDogTm9kZSB8IFZpcnR1YWxFbGVtZW50LCBzdGF0aWNDdHg6IFJlbmRlclN0YXRpY0NvbnRleHQpID0+IHtcbiAgY29uc3QgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDtcbiAgaWYgKHBhcmVudCkge1xuICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMSB8fCBlbC5ub2RlVHlwZSA9PT0gMTExKSB7XG4gICAgICBjb25zdCBzdWJzTWFuYWdlciA9IHN0YXRpY0N0eC4kY29udGFpbmVyU3RhdGUkLiRzdWJzTWFuYWdlciQ7XG4gICAgICBjbGVhbnVwVHJlZShlbCBhcyBFbGVtZW50LCBzdGF0aWNDdHgsIHN1YnNNYW5hZ2VyLCB0cnVlKTtcbiAgICB9XG4gICAgZGlyZWN0UmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gIH0gZWxzZSBpZiAocURldikge1xuICAgIGxvZ1dhcm4oJ1RyeWluZyB0byByZW1vdmUgY29tcG9uZW50IGFscmVhZHkgcmVtb3ZlZCcsIGVsKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRlbXBsYXRlID0gKGRvYzogRG9jdW1lbnQsIHNsb3ROYW1lOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgdGVtcGxhdGUgPSBjcmVhdGVFbGVtZW50KGRvYywgJ3E6dGVtcGxhdGUnLCBmYWxzZSk7XG4gIGRpcmVjdFNldEF0dHJpYnV0ZSh0ZW1wbGF0ZSwgUVNsb3QsIHNsb3ROYW1lKTtcbiAgZGlyZWN0U2V0QXR0cmlidXRlKHRlbXBsYXRlLCAnaGlkZGVuJywgJycpO1xuICBkaXJlY3RTZXRBdHRyaWJ1dGUodGVtcGxhdGUsICdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVET01SZW5kZXIgPSAoY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0KSA9PiB7XG4gIGZvciAoY29uc3Qgb3Agb2YgY3R4LiRvcGVyYXRpb25zJCkge1xuICAgIG9wLiRvcGVyYXRpb24kLmFwcGx5KHVuZGVmaW5lZCwgb3AuJGFyZ3MkKTtcbiAgfVxuICByZXNvbHZlU2xvdFByb2plY3Rpb24oY3R4KTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRLZXkgPSAoZWw6IFF3aWtFbGVtZW50KTogc3RyaW5nIHwgbnVsbCA9PiB7XG4gIHJldHVybiBkaXJlY3RHZXRBdHRyaWJ1dGUoZWwsICdxOmtleScpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldEtleSA9IChlbDogUXdpa0VsZW1lbnQsIGtleTogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgZGlyZWN0U2V0QXR0cmlidXRlKGVsLCAncTprZXknLCBrZXkpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVzb2x2ZVNsb3RQcm9qZWN0aW9uID0gKGN0eDogUmVuZGVyU3RhdGljQ29udGV4dCkgPT4ge1xuICAvLyBTbG90cyByZW1vdmVkXG4gIGNvbnN0IHN1YnNNYW5hZ2VyID0gY3R4LiRjb250YWluZXJTdGF0ZSQuJHN1YnNNYW5hZ2VyJDtcbiAgZm9yIChjb25zdCBzbG90RWwgb2YgY3R4LiRybVNsb3RzJCkge1xuICAgIGNvbnN0IGtleSA9IGdldEtleShzbG90RWwpO1xuICAgIGFzc2VydERlZmluZWQoa2V5LCAnc2xvdHMgbXVzdCBoYXZlIGEga2V5Jyk7XG5cbiAgICBjb25zdCBzbG90Q2hpbGRyZW4gPSBnZXRDaGlsZHJlbihzbG90RWwsICdyb290Jyk7XG4gICAgaWYgKHNsb3RDaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBzcmVmID0gc2xvdEVsLmdldEF0dHJpYnV0ZShRU2xvdFJlZik7XG4gICAgICBjb25zdCBob3N0Q3R4ID0gY3R4LiRyb290cyQuZmluZCgocikgPT4gci4kaWQkID09PSBzcmVmKTtcbiAgICAgIGlmIChob3N0Q3R4KSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlID0gY3JlYXRlVGVtcGxhdGUoY3R4LiRkb2MkLCBrZXkpO1xuICAgICAgICBjb25zdCBob3N0RWxtID0gaG9zdEN0eC4kZWxlbWVudCQ7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygc2xvdENoaWxkcmVuKSB7XG4gICAgICAgICAgZGlyZWN0QXBwZW5kQ2hpbGQodGVtcGxhdGUsIGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBkaXJlY3RJbnNlcnRCZWZvcmUoaG9zdEVsbSwgdGVtcGxhdGUsIGhvc3RFbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBzbG90IGNvbnRlbnQgY2Fubm90IGJlIHJlbG9jYXRlZCwgaXQgbWVhbnMgaXQncyBjb250ZW50IGlzIGRlZmluaXZlbHkgcmVtb3ZlZFxuICAgICAgICAvLyBDbGVhbnVwIG5lZWRzIHRvIGJlIGV4ZWN1dGVkXG4gICAgICAgIGNsZWFudXBUcmVlKHNsb3RFbCwgY3R4LCBzdWJzTWFuYWdlciwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFNsb3RzIGFkZGVkXG4gIGZvciAoY29uc3QgW3Nsb3RFbCwgaG9zdEVsbV0gb2YgY3R4LiRhZGRTbG90cyQpIHtcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoc2xvdEVsKTtcbiAgICBhc3NlcnREZWZpbmVkKGtleSwgJ3Nsb3RzIG11c3QgaGF2ZSBhIGtleScpO1xuXG4gICAgY29uc3QgdGVtcGxhdGUgPSBBcnJheS5mcm9tKGhvc3RFbG0uY2hpbGROb2RlcykuZmluZCgobm9kZSkgPT4ge1xuICAgICAgcmV0dXJuIGlzU2xvdFRlbXBsYXRlKG5vZGUpICYmIG5vZGUuZ2V0QXR0cmlidXRlKFFTbG90KSA9PT0ga2V5O1xuICAgIH0pIGFzIEVsZW1lbnQgfCB1bmRlZmluZWQ7XG4gICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGdldENoaWxkcmVuKHRlbXBsYXRlLCAncm9vdCcpO1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgZGlyZWN0QXBwZW5kQ2hpbGQoc2xvdEVsLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICAgIHRlbXBsYXRlLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZVRleHROb2RlID0gKGRvYzogRG9jdW1lbnQsIHRleHQ6IHN0cmluZyk6IFRleHQgPT4ge1xuICByZXR1cm4gZG9jLmNyZWF0ZVRleHROb2RlKHRleHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHByaW50UmVuZGVyU3RhdHMgPSAoY3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0KSA9PiB7XG4gIGlmIChxRGV2KSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBieU9wOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge307XG4gICAgICBmb3IgKGNvbnN0IG9wIG9mIGN0eC4kb3BlcmF0aW9ucyQpIHtcbiAgICAgICAgYnlPcFtvcC4kb3BlcmF0aW9uJC5uYW1lXSA9IChieU9wW29wLiRvcGVyYXRpb24kLm5hbWVdID8/IDApICsgMTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXRzID0ge1xuICAgICAgICBieU9wLFxuICAgICAgICByb290czogY3R4LiRyb290cyQubWFwKChjdHgpID0+IGN0eC4kZWxlbWVudCQpLFxuICAgICAgICBob3N0RWxlbWVudHM6IEFycmF5LmZyb20oY3R4LiRob3N0RWxlbWVudHMkKSxcbiAgICAgICAgb3BlcmF0aW9uczogY3R4LiRvcGVyYXRpb25zJC5tYXAoKHYpID0+IFt2LiRvcGVyYXRpb24kLm5hbWUsIC4uLnYuJGFyZ3MkXSksXG4gICAgICB9O1xuICAgICAgY29uc3Qgbm9PcHMgPSBjdHguJG9wZXJhdGlvbnMkLmxlbmd0aCA9PT0gMDtcbiAgICAgIGxvZ0RlYnVnKCdSZW5kZXIgc3RhdHMuJywgbm9PcHMgPyAnTm8gb3BlcmF0aW9ucycgOiAnJywgc3RhdHMpO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==","import { assertEqual, assertTrue } from '../../assert/assert';\nimport { isComment, isElement, isQwikElement, isVirtualElement } from '../../util/element';\nimport { qSerialize, seal } from '../../util/qdev';\nimport { directGetAttribute } from '../fast-calls';\nimport { createElement } from './operations';\nimport { getChildren } from './visitor';\nconst VIRTUAL_SYMBOL = '__virtual';\nexport const newVirtualElement = (doc) => {\n    const open = doc.createComment('qv ');\n    const close = doc.createComment('/qv');\n    return new VirtualElementImpl(open, close);\n};\nexport const parseVirtualAttributes = (str) => {\n    if (!str) {\n        return new Map();\n    }\n    const attributes = str.split(' ');\n    return new Map(attributes.map((attr) => {\n        const index = attr.indexOf('=');\n        if (index >= 0) {\n            return [attr.slice(0, index), unescape(attr.slice(index + 1))];\n        }\n        else {\n            return [attr, ''];\n        }\n    }));\n};\nexport const serializeVirtualAttributes = (map) => {\n    const attributes = [];\n    map.forEach((value, key) => {\n        if (!value) {\n            attributes.push(`${key}`);\n        }\n        else {\n            attributes.push(`${key}=${escape(value)}`);\n        }\n    });\n    return attributes.join(' ');\n};\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nexport const walkerVirtualByAttribute = (el, prop, value) => {\n    return el.ownerDocument.createTreeWalker(el, SHOW_COMMENT, {\n        acceptNode(c) {\n            const virtual = getVirtualElement(c);\n            if (virtual) {\n                return directGetAttribute(virtual, prop) === value ? FILTER_ACCEPT : FILTER_REJECT;\n            }\n            return FILTER_REJECT;\n        },\n    });\n};\nexport const queryVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const open = walker.firstChild();\n    if (open) {\n        return getVirtualElement(open);\n    }\n    return null;\n};\nexport const queryAllVirtualByAttribute = (el, prop, value) => {\n    const walker = walkerVirtualByAttribute(el, prop, value);\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(getVirtualElement(currentNode));\n    }\n    return pars;\n};\nexport const escape = (s) => {\n    return s.replace(/ /g, '+');\n};\nexport const unescape = (s) => {\n    return s.replace(/\\+/g, ' ');\n};\nexport const VIRTUAL = ':virtual';\nexport class VirtualElementImpl {\n    constructor(open, close) {\n        this.open = open;\n        this.close = close;\n        this._qc_ = null;\n        this.nodeType = 111;\n        this.localName = VIRTUAL;\n        this.nodeName = VIRTUAL;\n        const doc = (this.ownerDocument = open.ownerDocument);\n        this.template = createElement(doc, 'template', false);\n        this.attributes = parseVirtualAttributes(open.data.slice(3));\n        assertTrue(open.data.startsWith('qv '), 'comment is not a qv');\n        open[VIRTUAL_SYMBOL] = this;\n        seal(this);\n    }\n    insertBefore(node, ref) {\n        const parent = this.parentElement;\n        if (parent) {\n            const ref2 = ref ? ref : this.close;\n            parent.insertBefore(node, ref2);\n        }\n        else {\n            this.template.insertBefore(node, ref);\n        }\n        return node;\n    }\n    remove() {\n        const parent = this.parentElement;\n        if (parent) {\n            const ch = Array.from(this.childNodes);\n            assertEqual(this.template.childElementCount, 0, 'children should be empty');\n            parent.removeChild(this.open);\n            this.template.append(...ch);\n            parent.removeChild(this.close);\n        }\n    }\n    appendChild(node) {\n        return this.insertBefore(node, null);\n    }\n    insertBeforeTo(newParent, child) {\n        const ch = Array.from(this.childNodes);\n        // TODO\n        // if (this.parentElement) {\n        //   console.warn('already attached');\n        // }\n        newParent.insertBefore(this.open, child);\n        for (const c of ch) {\n            newParent.insertBefore(c, child);\n        }\n        newParent.insertBefore(this.close, child);\n        assertEqual(this.template.childElementCount, 0, 'children should be empty');\n    }\n    appendTo(newParent) {\n        this.insertBeforeTo(newParent, null);\n    }\n    get namespaceURI() {\n        return this.parentElement?.namespaceURI ?? '';\n    }\n    removeChild(child) {\n        if (this.parentElement) {\n            this.parentElement.removeChild(child);\n        }\n        else {\n            this.template.removeChild(child);\n        }\n    }\n    getAttribute(prop) {\n        return this.attributes.get(prop) ?? null;\n    }\n    hasAttribute(prop) {\n        return this.attributes.has(prop);\n    }\n    setAttribute(prop, value) {\n        this.attributes.set(prop, value);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    removeAttribute(prop) {\n        this.attributes.delete(prop);\n        if (qSerialize) {\n            this.open.data = updateComment(this.attributes);\n        }\n    }\n    matches(_) {\n        return false;\n    }\n    compareDocumentPosition(other) {\n        return this.open.compareDocumentPosition(other);\n    }\n    closest(query) {\n        const parent = this.parentElement;\n        if (parent) {\n            return parent.closest(query);\n        }\n        return null;\n    }\n    querySelectorAll(query) {\n        const result = [];\n        const ch = getChildren(this, 'elements');\n        ch.forEach((el) => {\n            if (isQwikElement(el)) {\n                if (el.matches(query)) {\n                    result.push(el);\n                }\n                result.concat(Array.from(el.querySelectorAll(query)));\n            }\n        });\n        return result;\n    }\n    querySelector(query) {\n        for (const el of this.childNodes) {\n            if (isElement(el)) {\n                if (el.matches(query)) {\n                    return el;\n                }\n                const v = el.querySelector(query);\n                if (v !== null) {\n                    return v;\n                }\n            }\n        }\n        return null;\n    }\n    get firstChild() {\n        if (this.parentElement) {\n            const first = this.open.nextSibling;\n            if (first === this.close) {\n                return null;\n            }\n            return first;\n        }\n        else {\n            return this.template.firstChild;\n        }\n    }\n    get nextSibling() {\n        return this.close.nextSibling;\n    }\n    get previousSibling() {\n        return this.open.previousSibling;\n    }\n    get childNodes() {\n        if (!this.parentElement) {\n            return this.template.childNodes;\n        }\n        const nodes = [];\n        let node = this.open;\n        while ((node = node.nextSibling)) {\n            if (node !== this.close) {\n                nodes.push(node);\n            }\n            else {\n                break;\n            }\n        }\n        return nodes;\n    }\n    get isConnected() {\n        return this.open.isConnected;\n    }\n    get parentElement() {\n        return this.open.parentElement;\n    }\n}\nconst updateComment = (attributes) => {\n    return `qv ${serializeVirtualAttributes(attributes)}`;\n};\nexport const processVirtualNodes = (node) => {\n    if (node == null) {\n        return null;\n    }\n    if (isComment(node)) {\n        const virtual = getVirtualElement(node);\n        if (virtual) {\n            return virtual;\n        }\n    }\n    return node;\n};\nexport const getVirtualElement = (open) => {\n    const virtual = open[VIRTUAL_SYMBOL];\n    if (virtual) {\n        return virtual;\n    }\n    if (open.data.startsWith('qv ')) {\n        const close = findClose(open);\n        return new VirtualElementImpl(open, close);\n    }\n    return null;\n};\nexport const findClose = (open) => {\n    let node = open.nextSibling;\n    let stack = 1;\n    while (node) {\n        if (isComment(node)) {\n            if (node.data.startsWith('qv ')) {\n                stack++;\n            }\n            else if (node.data === '/qv') {\n                stack--;\n                if (stack === 0) {\n                    return node;\n                }\n            }\n        }\n        node = node.nextSibling;\n    }\n    throw new Error('close not found');\n};\nexport const getRootNode = (node) => {\n    if (node == null) {\n        return null; // TODO\n    }\n    if (isVirtualElement(node)) {\n        return node.open;\n    }\n    else {\n        return node;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { fromCamelToKebabCase } from '../util/case';\nimport { getContext, tryGetContext } from '../props/props';\nimport { qError, QError_invalidContext, QError_notFoundContext } from '../error/error';\nimport { verifySerializable } from '../object/q-object';\nimport { qDev } from '../util/qdev';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { getVirtualElement } from '../render/dom/virtual-element';\nimport { isComment } from '../util/element';\nimport { assertTrue } from '../assert/assert';\n// <docs markdown=\"../readme.md#createContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#createContext instead)\n/**\n * Create a context ID to be used in your application.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * Use `createContext()` to create a `Context`. `Context` is just a serializable identifier for\n * the context. It is not the context value itself. See `useContextProvider()` and `useContext()`\n * for the values. Qwik needs a serializable ID for the context so that the it can track context\n * providers and consumers in a way that survives resumability.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param name - The name of the context.\n * @public\n */\n// </docs>\nexport const createContext = (name) => {\n    assertTrue(/^[\\w/.-]+$/.test(name), 'Context name must only contain A-Z,a-z,0-9, _', name);\n    return /*#__PURE__*/ Object.freeze({\n        id: fromCamelToKebabCase(name),\n    });\n};\n// <docs markdown=\"../readme.md#useContextProvider\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContextProvider instead)\n/**\n * Assign a value to a Context.\n *\n * Use `useContextProvider()` to assign a value to a context. The assignment happens in the\n * component's function. Once assign use `useContext()` in any child component to retrieve the\n * value.\n *\n * Context is a way to pass stores to the child components without prop-drilling.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to assign a value to.\n * @param value - The value to assign to the context.\n * @public\n */\n// </docs>\nexport const useContextProvider = (context, newValue) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get !== undefined) {\n        return;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const hostElement = ctx.$hostElement$;\n    const hostCtx = getContext(hostElement);\n    let contexts = hostCtx.$contexts$;\n    if (!contexts) {\n        hostCtx.$contexts$ = contexts = new Map();\n    }\n    if (qDev) {\n        verifySerializable(newValue);\n    }\n    contexts.set(context.id, newValue);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useContext\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useContext instead)\n/**\n * Retrive Context value.\n *\n * Use `useContext()` to retrieve the value of context in a component. To retrieve a value a\n * parent component needs to invoke `useContextProvider()` to assign a value.\n *\n * ### Example\n *\n * ```tsx\n * // Declare the Context type.\n * interface TodosStore {\n *   items: string[];\n * }\n * // Create a Context ID (no data is saved here.)\n * // You will use this ID to both create and retrieve the Context.\n * export const TodosContext = createContext<TodosStore>('Todos');\n *\n * // Example of providing context to child components.\n * export const App = component$(() => {\n *   useContextProvider(\n *     TodosContext,\n *     useStore<TodosStore>({\n *       items: ['Learn Qwik', 'Build Qwik app', 'Profit'],\n *     })\n *   );\n *\n *   return <Items />;\n * });\n *\n * // Example of retrieving the context provided by a parent component.\n * export const Items = component$(() => {\n *   const todos = useContext(TodosContext);\n *   return (\n *     <ul>\n *       {todos.items.map((item) => (\n *         <li>{item}</li>\n *       ))}\n *     </ul>\n *   );\n * });\n *\n * ```\n * @param context - The context to retrieve a value from.\n * @public\n */\n// </docs>\nexport const useContext = (context, defaultValue) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get !== undefined) {\n        return get;\n    }\n    if (qDev) {\n        validateContext(context);\n    }\n    const value = resolveContext(context, ctx.$hostElement$, ctx.$renderCtx$);\n    if (value !== undefined) {\n        return set(value);\n    }\n    if (defaultValue !== undefined) {\n        return set(defaultValue);\n    }\n    throw qError(QError_notFoundContext, context.id);\n};\nexport const resolveContext = (context, hostElement, rctx) => {\n    const contextID = context.id;\n    if (rctx) {\n        const contexts = rctx.$localStack$;\n        for (let i = contexts.length - 1; i >= 0; i--) {\n            const ctx = contexts[i];\n            hostElement = ctx.$element$;\n            if (ctx.$contexts$) {\n                const found = ctx.$contexts$.get(contextID);\n                if (found) {\n                    return found;\n                }\n            }\n        }\n    }\n    if (hostElement.closest) {\n        const value = queryContextFromDom(hostElement, contextID);\n        if (value !== undefined) {\n            return value;\n        }\n    }\n    return undefined;\n};\nexport const queryContextFromDom = (hostElement, contextId) => {\n    let element = hostElement;\n    while (element) {\n        let node = element;\n        let virtual;\n        while (node && (virtual = findVirtual(node))) {\n            const contexts = tryGetContext(virtual)?.$contexts$;\n            if (contexts) {\n                if (contexts.has(contextId)) {\n                    return contexts.get(contextId);\n                }\n            }\n            node = virtual;\n        }\n        element = element.parentElement;\n    }\n    return undefined;\n};\nexport const findVirtual = (el) => {\n    let node = el;\n    let stack = 1;\n    while ((node = node.previousSibling)) {\n        if (isComment(node)) {\n            if (node.data === '/qv') {\n                stack++;\n            }\n            else if (node.data.startsWith('qv ')) {\n                stack--;\n                if (stack === 0) {\n                    return getVirtualElement(node);\n                }\n            }\n        }\n    }\n    return null;\n};\nexport const validateContext = (context) => {\n    if (!isObject(context) || typeof context.id !== 'string' || context.id.length === 0) {\n        throw qError(QError_invalidContext, context);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { isServer } from '../platform/platform';\nimport { getContext } from '../props/props';\nimport { createContext, resolveContext } from '../use/use-context';\nimport { isVirtualElement } from '../util/element';\nimport { qDev } from '../util/qdev';\nexport const ERROR_CONTEXT = /*#__PURE__*/ createContext('qk-error');\nexport const handleError = (err, hostElement, rctx) => {\n    if (qDev) {\n        // Clean vdom\n        if (!isServer() && isVirtualElement(hostElement)) {\n            getContext(hostElement).$vdom$ = null;\n            const errorDiv = document.createElement('errored-host');\n            if (err && err instanceof Error) {\n                errorDiv.props = { error: err };\n            }\n            errorDiv.setAttribute('q:key', '_error_');\n            errorDiv.append(...hostElement.childNodes);\n            hostElement.appendChild(errorDiv);\n        }\n        if (err && err instanceof Error) {\n            if (!('hostElement' in err)) {\n                err['hostElement'] = hostElement;\n            }\n        }\n        if (!isRecoverable(err)) {\n            throw err;\n        }\n    }\n    if (isServer()) {\n        throw err;\n    }\n    else {\n        const errorStore = resolveContext(ERROR_CONTEXT, hostElement, rctx);\n        if (errorStore === undefined) {\n            throw err;\n        }\n        errorStore.error = err;\n    }\n};\nconst isRecoverable = (err) => {\n    if (err && err instanceof Error) {\n        if ('plugin' in err) {\n            return false;\n        }\n    }\n    return true;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2Vycm9yLWhhbmRsaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBUXBDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFxQixVQUFVLENBQUMsQ0FBQztBQUV6RixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFRLEVBQUUsV0FBd0IsRUFBRSxJQUFvQixFQUFFLEVBQUU7SUFDdEYsSUFBSSxJQUFJLEVBQUU7UUFDUixhQUFhO1FBQ2IsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2hELFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1lBQ3RDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDeEQsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtnQkFDOUIsUUFBZ0IsQ0FBQyxLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUM7YUFDMUM7WUFDRCxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztZQUMxQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzNDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbkM7UUFFRCxJQUFJLEdBQUcsSUFBSSxHQUFHLFlBQVksS0FBSyxFQUFFO1lBQy9CLElBQUksQ0FBQyxDQUFDLGFBQWEsSUFBSSxHQUFHLENBQUMsRUFBRTtnQkFDMUIsR0FBVyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFdBQVcsQ0FBQzthQUMzQztTQUNGO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN2QixNQUFNLEdBQUcsQ0FBQztTQUNYO0tBQ0Y7SUFDRCxJQUFJLFFBQVEsRUFBRSxFQUFFO1FBQ2QsTUFBTSxHQUFHLENBQUM7S0FDWDtTQUFNO1FBQ0wsTUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDcEUsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzVCLE1BQU0sR0FBRyxDQUFDO1NBQ1g7UUFDRCxVQUFVLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQztLQUN4QjtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBUSxFQUFFLEVBQUU7SUFDakMsSUFBSSxHQUFHLElBQUksR0FBRyxZQUFZLEtBQUssRUFBRTtRQUMvQixJQUFJLFFBQVEsSUFBSSxHQUFHLEVBQUU7WUFDbkIsT0FBTyxLQUFLLENBQUM7U0FDZDtLQUNGO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4uL3BsYXRmb3JtL3BsYXRmb3JtJztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCByZXNvbHZlQ29udGV4dCB9IGZyb20gJy4uL3VzZS91c2UtY29udGV4dCc7XG5pbXBvcnQgeyBpc1ZpcnR1YWxFbGVtZW50IH0gZnJvbSAnLi4vdXRpbC9lbGVtZW50JztcbmltcG9ydCB7IHFEZXYgfSBmcm9tICcuLi91dGlsL3FkZXYnO1xuaW1wb3J0IHR5cGUgeyBRd2lrRWxlbWVudCB9IGZyb20gJy4vZG9tL3ZpcnR1YWwtZWxlbWVudCc7XG5pbXBvcnQgdHlwZSB7IFJlbmRlckNvbnRleHQgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBFcnJvckJvdW5kYXJ5U3RvcmUge1xuICBlcnJvcjogYW55IHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY29uc3QgRVJST1JfQ09OVEVYVCA9IC8qI19fUFVSRV9fKi8gY3JlYXRlQ29udGV4dDxFcnJvckJvdW5kYXJ5U3RvcmU+KCdxay1lcnJvcicpO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlRXJyb3IgPSAoZXJyOiBhbnksIGhvc3RFbGVtZW50OiBRd2lrRWxlbWVudCwgcmN0eD86IFJlbmRlckNvbnRleHQpID0+IHtcbiAgaWYgKHFEZXYpIHtcbiAgICAvLyBDbGVhbiB2ZG9tXG4gICAgaWYgKCFpc1NlcnZlcigpICYmIGlzVmlydHVhbEVsZW1lbnQoaG9zdEVsZW1lbnQpKSB7XG4gICAgICBnZXRDb250ZXh0KGhvc3RFbGVtZW50KS4kdmRvbSQgPSBudWxsO1xuICAgICAgY29uc3QgZXJyb3JEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdlcnJvcmVkLWhvc3QnKTtcbiAgICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgKGVycm9yRGl2IGFzIGFueSkucHJvcHMgPSB7IGVycm9yOiBlcnIgfTtcbiAgICAgIH1cbiAgICAgIGVycm9yRGl2LnNldEF0dHJpYnV0ZSgncTprZXknLCAnX2Vycm9yXycpO1xuICAgICAgZXJyb3JEaXYuYXBwZW5kKC4uLmhvc3RFbGVtZW50LmNoaWxkTm9kZXMpO1xuICAgICAgaG9zdEVsZW1lbnQuYXBwZW5kQ2hpbGQoZXJyb3JEaXYpO1xuICAgIH1cblxuICAgIGlmIChlcnIgJiYgZXJyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIGlmICghKCdob3N0RWxlbWVudCcgaW4gZXJyKSkge1xuICAgICAgICAoZXJyIGFzIGFueSlbJ2hvc3RFbGVtZW50J10gPSBob3N0RWxlbWVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc1JlY292ZXJhYmxlKGVycikpIHtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH1cbiAgaWYgKGlzU2VydmVyKCkpIHtcbiAgICB0aHJvdyBlcnI7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgZXJyb3JTdG9yZSA9IHJlc29sdmVDb250ZXh0KEVSUk9SX0NPTlRFWFQsIGhvc3RFbGVtZW50LCByY3R4KTtcbiAgICBpZiAoZXJyb3JTdG9yZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGVycm9yU3RvcmUuZXJyb3IgPSBlcnI7XG4gIH1cbn07XG5cbmNvbnN0IGlzUmVjb3ZlcmFibGUgPSAoZXJyOiBhbnkpID0+IHtcbiAgaWYgKGVyciAmJiBlcnIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIGlmICgncGx1Z2luJyBpbiBlcnIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuIl19","import { assertDefined } from '../assert/assert';\nimport { ELEMENT_ID, QSlot, RenderEvent } from '../util/markers';\nimport { safeCall } from '../util/promises';\nimport { newInvokeContext } from '../use/use-core';\nimport { isArray, isObject, isString } from '../util/types';\nimport { tryGetContext } from '../props/props';\nimport { fromCamelToKebabCase } from '../util/case';\nimport { qError, QError_stringifyClassOrStyle } from '../error/error';\nimport { intToStr } from '../object/store';\nimport { qSerialize, seal } from '../util/qdev';\nimport { EMPTY_ARRAY } from '../util/flyweight';\nimport { SkipRender } from './jsx/utils.public';\nimport { handleError } from './error-handling';\nexport const executeComponent = (rCtx, elCtx) => {\n    elCtx.$dirty$ = false;\n    elCtx.$mounted$ = true;\n    elCtx.$slots$ = [];\n    const hostElement = elCtx.$element$;\n    const componentQRL = elCtx.$componentQrl$;\n    const props = elCtx.$props$;\n    const newCtx = pushRenderContext(rCtx, elCtx);\n    const invocatinContext = newInvokeContext(hostElement, undefined, RenderEvent);\n    const waitOn = (invocatinContext.$waitOn$ = []);\n    assertDefined(componentQRL, `render: host element to render must has a $renderQrl$:`, elCtx);\n    assertDefined(props, `render: host element to render must has defined props`, elCtx);\n    // Set component context\n    newCtx.$cmpCtx$ = elCtx;\n    // Invoke render hook\n    invocatinContext.$subscriber$ = hostElement;\n    invocatinContext.$renderCtx$ = rCtx;\n    // Resolve render function\n    componentQRL.$setContainer$(rCtx.$static$.$containerState$.$containerEl$);\n    const componentFn = componentQRL.getFn(invocatinContext);\n    return safeCall(() => componentFn(props), (jsxNode) => {\n        if (waitOn.length > 0) {\n            return Promise.all(waitOn).then(() => {\n                if (elCtx.$dirty$) {\n                    return executeComponent(rCtx, elCtx);\n                }\n                return {\n                    node: jsxNode,\n                    rCtx: newCtx,\n                };\n            });\n        }\n        if (elCtx.$dirty$) {\n            return executeComponent(rCtx, elCtx);\n        }\n        return {\n            node: jsxNode,\n            rCtx: newCtx,\n        };\n    }, (err) => {\n        handleError(err, hostElement, rCtx);\n        return {\n            node: SkipRender,\n            rCtx: newCtx,\n        };\n    });\n};\nexport const createRenderContext = (doc, containerState) => {\n    const ctx = {\n        $static$: {\n            $doc$: doc,\n            $containerState$: containerState,\n            $hostElements$: new Set(),\n            $operations$: [],\n            $postOperations$: [],\n            $roots$: [],\n            $addSlots$: [],\n            $rmSlots$: [],\n        },\n        $cmpCtx$: undefined,\n        $localStack$: [],\n    };\n    seal(ctx);\n    seal(ctx.$static$);\n    return ctx;\n};\nexport const pushRenderContext = (ctx, elCtx) => {\n    const newCtx = {\n        $static$: ctx.$static$,\n        $cmpCtx$: ctx.$cmpCtx$,\n        $localStack$: ctx.$localStack$.concat(elCtx),\n    };\n    return newCtx;\n};\nexport const serializeClass = (obj) => {\n    if (isString(obj)) {\n        return obj;\n    }\n    else if (isObject(obj)) {\n        if (isArray(obj)) {\n            return obj.join(' ');\n        }\n        else {\n            let buffer = '';\n            let previous = false;\n            for (const key of Object.keys(obj)) {\n                const value = obj[key];\n                if (value) {\n                    if (previous) {\n                        buffer += ' ';\n                    }\n                    buffer += key;\n                    previous = true;\n                }\n            }\n            return buffer;\n        }\n    }\n    return '';\n};\nconst parseClassListRegex = /\\s/;\nexport const parseClassList = (value) => !value ? EMPTY_ARRAY : value.split(parseClassListRegex);\nexport const stringifyStyle = (obj) => {\n    if (obj == null)\n        return '';\n    if (typeof obj == 'object') {\n        if (isArray(obj)) {\n            throw qError(QError_stringifyClassOrStyle, obj, 'style');\n        }\n        else {\n            const chunks = [];\n            for (const key in obj) {\n                if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                    const value = obj[key];\n                    if (value) {\n                        chunks.push(fromCamelToKebabCase(key) + ':' + value);\n                    }\n                }\n            }\n            return chunks.join(';');\n        }\n    }\n    return String(obj);\n};\nexport const getNextIndex = (ctx) => {\n    return intToStr(ctx.$static$.$containerState$.$elementIndex$++);\n};\nexport const getQId = (el) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        return ctx.$id$;\n    }\n    return null;\n};\nexport const setQId = (rCtx, elCtx) => {\n    const id = getNextIndex(rCtx);\n    elCtx.$id$ = id;\n    if (qSerialize) {\n        elCtx.$element$.setAttribute(ELEMENT_ID, id);\n    }\n};\nexport const hasStyle = (containerState, styleId) => {\n    return containerState.$styleIds$.has(styleId);\n};\nexport const SKIPS_PROPS = [QSlot, 'children'];\n//# sourceMappingURL=data:application/json;base64,","export const hashCode = (text, hash = 0) => {\n    if (text.length === 0)\n        return hash;\n    for (let i = 0; i < text.length; i++) {\n        const chr = text.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0; // Convert to 32bit integer\n    }\n    return Number(Math.abs(hash)).toString(36);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9jb2RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3V0aWwvaGFzaF9jb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQVksRUFBRSxPQUFlLENBQUMsRUFBRSxFQUFFO0lBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDcEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsMkJBQTJCO0tBQ3ZDO0lBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaGFzaENvZGUgPSAodGV4dDogc3RyaW5nLCBoYXNoOiBudW1iZXIgPSAwKSA9PiB7XG4gIGlmICh0ZXh0Lmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNociA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoID0gKGhhc2ggPDwgNSkgLSBoYXNoICsgY2hyO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cbiAgcmV0dXJuIE51bWJlcihNYXRoLmFicyhoYXNoKSkudG9TdHJpbmcoMzYpO1xufTtcbiJdfQ==","import { ComponentStylesPrefixContent } from '../util/markers';\nimport { hashCode } from '../util/hash_code';\nimport { assertQrl } from '../import/qrl-class';\nexport const styleKey = (qStyles, index) => {\n    assertQrl(qStyles);\n    return `${hashCode(qStyles.$hash$)}-${index}`;\n};\nexport const styleHost = (styleId) => {\n    return styleId;\n};\nexport const styleContent = (styleId) => {\n    return ComponentStylesPrefixContent + styleId;\n};\nexport const serializeSStyle = (scopeIds) => {\n    const value = scopeIds.join(' ');\n    if (value.length > 0) {\n        return value;\n    }\n    return undefined;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXJsLXN0eWxlcy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9jb21wb25lbnQvcXJsLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQW9CLEVBQUUsS0FBYSxFQUFVLEVBQUU7SUFDdEUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25CLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ2hELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ25ELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBVSxFQUFFO0lBQ3RELE9BQU8sNEJBQTRCLEdBQUcsT0FBTyxDQUFDO0FBQ2hELENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtJQUNwRCxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUNELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFN0eWxlc1ByZWZpeENvbnRlbnQgfSBmcm9tICcuLi91dGlsL21hcmtlcnMnO1xuaW1wb3J0IHsgaGFzaENvZGUgfSBmcm9tICcuLi91dGlsL2hhc2hfY29kZSc7XG5pbXBvcnQgdHlwZSB7IFFSTCB9IGZyb20gJy4uL2ltcG9ydC9xcmwucHVibGljJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuXG5leHBvcnQgY29uc3Qgc3R5bGVLZXkgPSAocVN0eWxlczogUVJMPHN0cmluZz4sIGluZGV4OiBudW1iZXIpOiBzdHJpbmcgPT4ge1xuICBhc3NlcnRRcmwocVN0eWxlcyk7XG4gIHJldHVybiBgJHtoYXNoQ29kZShxU3R5bGVzLiRoYXNoJCl9LSR7aW5kZXh9YDtcbn07XG5cbmV4cG9ydCBjb25zdCBzdHlsZUhvc3QgPSAoc3R5bGVJZDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIHN0eWxlSWQ7XG59O1xuXG5leHBvcnQgY29uc3Qgc3R5bGVDb250ZW50ID0gKHN0eWxlSWQ6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBDb21wb25lbnRTdHlsZXNQcmVmaXhDb250ZW50ICsgc3R5bGVJZDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVTU3R5bGUgPSAoc2NvcGVJZHM6IHN0cmluZ1tdKSA9PiB7XG4gIGNvbnN0IHZhbHVlID0gc2NvcGVJZHMuam9pbignICcpO1xuICBpZiAodmFsdWUubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcbiJdfQ==","import { qError, QError_invalidJsxNodeType } from '../../error/error';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { EMPTY_ARRAY, EMPTY_OBJ } from '../../util/flyweight';\nimport { logWarn } from '../../util/log';\nimport { QScopedStyle } from '../../util/markers';\nimport { isNotNullable, isPromise, promiseAll, then } from '../../util/promises';\nimport { qDev, qSerialize, seal } from '../../util/qdev';\nimport { isArray, isFunction, isObject, isString } from '../../util/types';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { SkipRender, Virtual } from '../jsx/utils.public';\nimport { isJSXNode, SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { executeComponent } from '../execute-component';\nimport { serializeSStyle } from '../../component/qrl-styles';\nimport { VIRTUAL } from './virtual-element';\nimport { appendHeadStyle } from './operations';\nimport { isSignal } from '../../object/q-object';\nimport { assertTrue } from '../../assert/assert';\nexport const renderComponent = (rCtx, elCtx, flags) => {\n    const justMounted = !elCtx.$mounted$;\n    const hostElement = elCtx.$element$;\n    const containerState = rCtx.$static$.$containerState$;\n    // Component is not dirty any more\n    containerState.$hostsStaging$.delete(hostElement);\n    // Clean current subscription before render\n    containerState.$subsManager$.$clearSub$(hostElement);\n    // TODO, serialize scopeIds\n    return then(executeComponent(rCtx, elCtx), (res) => {\n        const staticCtx = rCtx.$static$;\n        const newCtx = res.rCtx;\n        const invocatinContext = newInvokeContext(hostElement);\n        staticCtx.$hostElements$.add(hostElement);\n        invocatinContext.$subscriber$ = hostElement;\n        invocatinContext.$renderCtx$ = newCtx;\n        if (justMounted) {\n            if (elCtx.$appendStyles$) {\n                for (const style of elCtx.$appendStyles$) {\n                    appendHeadStyle(staticCtx, style);\n                }\n            }\n            if (qSerialize && elCtx.$scopeIds$) {\n                const value = serializeSStyle(elCtx.$scopeIds$);\n                if (value) {\n                    hostElement.setAttribute(QScopedStyle, value);\n                }\n            }\n        }\n        const processedJSXNode = processData(res.node, invocatinContext);\n        return then(processedJSXNode, (processedJSXNode) => {\n            const newVdom = wrapJSX(hostElement, processedJSXNode);\n            const oldVdom = getVdom(elCtx);\n            return then(visitJsxNode(newCtx, oldVdom, newVdom, flags), () => {\n                elCtx.$vdom$ = newVdom;\n            });\n        });\n    });\n};\nexport const getVdom = (elCtx) => {\n    if (!elCtx.$vdom$) {\n        elCtx.$vdom$ = domToVnode(elCtx.$element$);\n    }\n    return elCtx.$vdom$;\n};\nexport class ProcessedJSXNodeImpl {\n    constructor($type$, $props$, $children$, $key$) {\n        this.$type$ = $type$;\n        this.$props$ = $props$;\n        this.$children$ = $children$;\n        this.$key$ = $key$;\n        this.$elm$ = null;\n        this.$text$ = '';\n        this.$signal$ = null;\n        seal(this);\n    }\n}\nexport const processNode = (node, invocationContext) => {\n    const key = node.key != null ? String(node.key) : null;\n    const nodeType = node.type;\n    const props = node.props;\n    const originalChildren = props.children;\n    let textType = '';\n    if (isString(nodeType)) {\n        textType = nodeType;\n    }\n    else if (nodeType === Virtual) {\n        textType = VIRTUAL;\n    }\n    else if (isFunction(nodeType)) {\n        const res = invoke(invocationContext, nodeType, props, node.key);\n        return processData(res, invocationContext);\n    }\n    else {\n        throw qError(QError_invalidJsxNodeType, nodeType);\n    }\n    let children = EMPTY_ARRAY;\n    if (originalChildren != null) {\n        return then(processData(originalChildren, invocationContext), (result) => {\n            if (result !== undefined) {\n                children = isArray(result) ? result : [result];\n            }\n            return new ProcessedJSXNodeImpl(textType, props, children, key);\n        });\n    }\n    else {\n        return new ProcessedJSXNodeImpl(textType, props, children, key);\n    }\n};\nexport const wrapJSX = (element, input) => {\n    const children = input === undefined ? EMPTY_ARRAY : isArray(input) ? input : [input];\n    const node = new ProcessedJSXNodeImpl(':virtual', {}, children, null);\n    node.$elm$ = element;\n    return node;\n};\nexport const processData = (node, invocationContext) => {\n    if (node == null || typeof node === 'boolean') {\n        return undefined;\n    }\n    if (isPrimitive(node)) {\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        newNode.$text$ = String(node);\n        return newNode;\n    }\n    else if (isJSXNode(node)) {\n        return processNode(node, invocationContext);\n    }\n    else if (isSignal(node)) {\n        const value = node.value;\n        const newNode = new ProcessedJSXNodeImpl('#text', EMPTY_OBJ, EMPTY_ARRAY, null);\n        assertTrue(isPrimitive(value), 'value must be a primitive');\n        newNode.$text$ = String(value);\n        newNode.$signal$ = node;\n        return newNode;\n    }\n    else if (isArray(node)) {\n        const output = promiseAll(node.flatMap((n) => processData(n, invocationContext)));\n        return then(output, (array) => array.flat(100).filter(isNotNullable));\n    }\n    else if (isPromise(node)) {\n        return node.then((node) => processData(node, invocationContext));\n    }\n    else if (node === SkipRender) {\n        return new ProcessedJSXNodeImpl(SKIP_RENDER_TYPE, EMPTY_OBJ, EMPTY_ARRAY, null);\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n        return undefined;\n    }\n};\nexport const isProcessedJSXNode = (n) => {\n    if (qDev) {\n        if (n instanceof ProcessedJSXNodeImpl) {\n            return true;\n        }\n        if (isObject(n) && n.constructor.name === ProcessedJSXNodeImpl.name) {\n            throw new Error(`Duplicate implementations of \"ProcessedJSXNodeImpl\" found`);\n        }\n        return false;\n    }\n    else {\n        return n instanceof ProcessedJSXNodeImpl;\n    }\n};\nexport const isPrimitive = (obj) => {\n    return isString(obj) || typeof obj === 'number';\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertTrue } from '../assert/assert';\nimport { qError, QError_invalidRefValue } from '../error/error';\nimport { logError } from '../util/log';\nimport { seal } from '../util/qdev';\nimport { isFunction, isObject } from '../util/types';\nimport { notifyChange } from './dom/notify-render';\nconst CONTAINER_STATE = Symbol('ContainerState');\nexport const getContainerState = (containerEl) => {\n    let set = containerEl[CONTAINER_STATE];\n    if (!set) {\n        containerEl[CONTAINER_STATE] = set = createContainerState(containerEl);\n    }\n    return set;\n};\nexport const createContainerState = (containerEl) => {\n    const containerState = {\n        $containerEl$: containerEl,\n        $proxyMap$: new WeakMap(),\n        $subsManager$: null,\n        $opsNext$: new Set(),\n        $watchNext$: new Set(),\n        $watchStaging$: new Set(),\n        $hostsNext$: new Set(),\n        $hostsStaging$: new Set(),\n        $renderPromise$: undefined,\n        $hostsRendering$: undefined,\n        $envData$: {},\n        $elementIndex$: 0,\n        $styleIds$: new Set(),\n    };\n    seal(containerState);\n    containerState.$subsManager$ = createSubscriptionManager(containerState);\n    return containerState;\n};\nexport const serializeSubscription = (sub, getObjId) => {\n    const type = sub[0];\n    const host = getObjId(sub[1]);\n    if (!host) {\n        return undefined;\n    }\n    let base = type + ' ' + host;\n    if (sub[0] === 0) {\n        if (sub[2]) {\n            base += ' ' + sub[2];\n        }\n    }\n    else {\n        const nodeID = typeof sub[3] === 'string' ? sub[3] : must(getObjId(sub[3]));\n        base += ` ${must(getObjId(sub[2]))} ${nodeID} ${sub[4]}`;\n        if (sub[5]) {\n            base += ` ${sub[5]}`;\n        }\n    }\n    return base;\n};\nexport const parseSubscription = (sub, getObject) => {\n    const parts = sub.split(' ');\n    const type = parseInt(parts[0], 10);\n    assertTrue(parts.length >= 2, 'At least 2 parts');\n    const subscription = [type, getObject(parts[1])];\n    if (type === 0) {\n        assertTrue(parts.length <= 3, 'Max 3 parts');\n        subscription.push(parts[2]);\n    }\n    else {\n        assertTrue(parts.length === 5 || parts.length === 6, 'Max 5 parts');\n        subscription.push(getObject(parts[2]), getObject(parts[3]), parts[4], parts[5]);\n    }\n    return subscription;\n};\nexport const createSubscriptionManager = (containerState) => {\n    const groupToManagers = new Map();\n    const manager = {\n        $createManager$: (initialMap) => {\n            return new LocalSubscriptionManager(groupToManagers, containerState, initialMap);\n        },\n        $clearSub$: (group) => {\n            const managers = groupToManagers.get(group);\n            if (managers) {\n                for (const manager of managers) {\n                    manager.$unsubGroup$(group);\n                }\n                groupToManagers.delete(group);\n                managers.length = 0;\n            }\n        },\n    };\n    seal(manager);\n    return manager;\n};\nexport class LocalSubscriptionManager {\n    constructor($groupToManagers$, $containerState$, initialMap) {\n        this.$groupToManagers$ = $groupToManagers$;\n        this.$containerState$ = $containerState$;\n        this.$subs$ = [];\n        if (initialMap) {\n            this.$addSubs$(initialMap);\n        }\n        seal(this);\n    }\n    $addSubs$(subs) {\n        this.$subs$.push(...subs);\n        for (const sub of this.$subs$) {\n            this.$addToGroup$(sub[1], this);\n        }\n    }\n    $addToGroup$(group, manager) {\n        let managers = this.$groupToManagers$.get(group);\n        if (!managers) {\n            this.$groupToManagers$.set(group, (managers = []));\n        }\n        if (!managers.includes(manager)) {\n            managers.push(manager);\n        }\n    }\n    $unsubGroup$(group) {\n        const subs = this.$subs$;\n        for (let i = 0; i < subs.length; i++) {\n            const found = subs[i][1] === group;\n            if (found) {\n                subs.splice(i, 1);\n                i--;\n            }\n        }\n    }\n    $addSub$(sub) {\n        const subs = this.$subs$;\n        const [type, group] = sub;\n        const key = sub[sub.length - 1];\n        if (type === 0) {\n            if (subs.some(([_type, _group, _key]) => _type === type && _group === group && _key === key)) {\n                return;\n            }\n        }\n        subs.push(sub);\n        this.$addToGroup$(group, this);\n    }\n    $notifySubs$(key) {\n        const subs = this.$subs$;\n        for (const sub of subs) {\n            const compare = sub[sub.length - 1];\n            if (key && compare && compare !== key) {\n                continue;\n            }\n            notifyChange(sub, this.$containerState$);\n        }\n    }\n}\nexport const setRef = (value, elm) => {\n    if (isFunction(value)) {\n        return value(elm);\n    }\n    else if (isObject(value)) {\n        if ('current' in value) {\n            return (value.current = elm);\n        }\n        else if ('value' in value) {\n            return (value.value = elm);\n        }\n    }\n    throw qError(QError_invalidRefValue, value);\n};\nconst must = (a) => {\n    if (a == null) {\n        throw logError('must be non null', a);\n    }\n    return a;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3JlbmRlci9jb250YWluZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxNQUFNLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUtoRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBbUNuRCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUVqRCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFdBQW9CLEVBQWtCLEVBQUU7SUFDeEUsSUFBSSxHQUFHLEdBQUksV0FBbUIsQ0FBQyxlQUFlLENBQW1CLENBQUM7SUFDbEUsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNQLFdBQW1CLENBQUMsZUFBZSxDQUFDLEdBQUcsR0FBRyxHQUFHLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ2pGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLFdBQW9CLEVBQUUsRUFBRTtJQUMzRCxNQUFNLGNBQWMsR0FBbUI7UUFDckMsYUFBYSxFQUFFLFdBQVc7UUFFMUIsVUFBVSxFQUFFLElBQUksT0FBTyxFQUFFO1FBQ3pCLGFBQWEsRUFBRSxJQUFXO1FBRTFCLFNBQVMsRUFBRSxJQUFJLEdBQUcsRUFBRTtRQUVwQixXQUFXLEVBQUUsSUFBSSxHQUFHLEVB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RyxDQUFDLEtBQVUsRUFBRSxHQUFZLEVBQUUsRUFBRTtJQUNqRCxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNyQixPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUNuQjtTQUFNLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzFCLElBQUksU0FBUyxJQUFJLEtBQUssRUFBRTtZQUN0QixPQUFPLENBQUUsS0FBc0IsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDaEQ7YUFBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLEVBQUU7WUFDM0IsT0FBTyxDQUFFLEtBQXlCLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1NBQ2pEO0tBQ0Y7SUFDRCxNQUFNLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUM5QyxDQUFDLENBQUM7QUFFRixNQUFNLElBQUksR0FBRyxDQUFJLENBQUksRUFBa0IsRUFBRTtJQUN2QyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7UUFDYixNQUFNLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN2QztJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0VHJ1ZSB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHsgcUVycm9yLCBRRXJyb3JfaW52YWxpZFJlZlZhbHVlIH0gZnJvbSAnLi4vZXJyb3IvZXJyb3InO1xuaW1wb3J0IHR5cGUgeyBTaWduYWwgfSBmcm9tICcuLi9vYmplY3QvcS1vYmplY3QnO1xuaW1wb3J0IHR5cGUgeyBHZXRPYmplY3QsIEdldE9iaklEIH0gZnJvbSAnLi4vb2JqZWN0L3N0b3JlJztcbmltcG9ydCB0eXBlIHsgUmVmIH0gZnJvbSAnLi4vdXNlL3VzZS1yZWYnO1xuaW1wb3J0IHR5cGUgeyBTdWJzY3JpYmVyRWZmZWN0LCBTdWJzY3JpYmVySG9zdCB9IGZyb20gJy4uL3VzZS91c2Utd2F0Y2gnO1xuaW1wb3J0IHsgbG9nRXJyb3IgfSBmcm9tICcuLi91dGlsL2xvZyc7XG5pbXBvcnQgeyBzZWFsIH0gZnJvbSAnLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzT2JqZWN0IH0gZnJvbSAnLi4vdXRpbC90eXBlcyc7XG5pbXBvcnQgeyBub3RpZnlDaGFuZ2UgfSBmcm9tICcuL2RvbS9ub3RpZnktcmVuZGVyJztcbmltcG9ydCB0eXBlIHsgUXdpa0VsZW1lbnQgfSBmcm9tICcuL2RvbS92aXJ0dWFsLWVsZW1lbnQnO1xuaW1wb3J0IHR5cGUgeyBSZW5kZXJTdGF0aWNDb250ZXh0IH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIE9ialRvUHJveHlNYXAgPSBXZWFrTWFwPGFueSwgYW55PjtcblxuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpcHRpb25NYW5hZ2VyIHtcbiAgJGNyZWF0ZU1hbmFnZXIkKG1hcD86IFN1YnNjcmlwdGlvbnNbXSk6IExvY2FsU3Vic2NyaXB0aW9uTWFuYWdlcjtcbiAgJGNsZWFyU3ViJDogKHN1YjogU3Vic2NyaWJlckVmZmVjdCB8IFN1YnNjcmliZXJIb3N0KSA9PiB2b2lkO1xufVxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb250YWluZXJTdGF0ZSB7XG4gICRjb250YWluZXJFbCQ6IEVsZW1lbnQ7XG5cbiAgJHByb3h5TWFwJDogT2JqVG9Qcm94eU1hcDtcbiAgJHN1YnNNYW5hZ2VyJDogU3Vic2NyaXB0aW9uTWFuYWdlcjtcblxuICAkd2F0Y2hOZXh0JDogU2V0PFN1YnNjcmliZXJFZmZlY3Q+O1xuICAkd2F0Y2hTdGFnaW5nJDogU2V0PFN1YnNjcmliZXJFZmZlY3Q+O1xuXG4gICRvcHNOZXh0JDogU2V0PFN1YnNjcmliZXJTaWduYWw+O1xuXG4gICRob3N0c05leHQkOiBTZXQ8UXdpa0VsZW1lbnQ+O1xuICAkaG9zdHNTdGFnaW5nJDogU2V0PFF3aWtFbGVtZW50PjtcbiAgJGhvc3RzUmVuZGVyaW5nJDogU2V0PFF3aWtFbGVtZW50PiB8IHVuZGVmaW5lZDtcbiAgJHJlbmRlclByb21pc2UkOiBQcm9taXNlPFJlbmRlclN0YXRpY0NvbnRleHQ+IHwgdW5kZWZpbmVkO1xuXG4gICRlbnZEYXRhJDogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgJGVsZW1lbnRJbmRleCQ6IG51bWJlcjtcblxuICAkc3R5bGVJZHMkOiBTZXQ8c3RyaW5nPjtcbn1cblxuY29uc3QgQ09OVEFJTkVSX1NUQVRFID0gU3ltYm9sKCdDb250YWluZXJTdGF0ZScpO1xuXG5leHBvcnQgY29uc3QgZ2V0Q29udGFpbmVyU3RhdGUgPSAoY29udGFpbmVyRWw6IEVsZW1lbnQpOiBDb250YWluZXJTdGF0ZSA9PiB7XG4gIGxldCBzZXQgPSAoY29udGFpbmVyRWwgYXMgYW55KVtDT05UQUlORVJfU1RBVEVdIGFzIENvbnRhaW5lclN0YXRlO1xuICBpZiAoIXNldCkge1xuICAgIChjb250YWluZXJFbCBhcyBhbnkpW0NPTlRBSU5FUl9TVEFURV0gPSBzZXQgPSBjcmVhdGVDb250YWluZXJTdGF0ZShjb250YWluZXJFbCk7XG4gIH1cbiAgcmV0dXJuIHNldDtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVDb250YWluZXJTdGF0ZSA9IChjb250YWluZXJFbDogRWxlbWVudCkgPT4ge1xuICBjb25zdCBjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUgPSB7XG4gICAgJGNvbnRhaW5lckVsJDogY29udGFpbmVyRWwsXG5cbiAgICAkcHJveHlNYXAkOiBuZXcgV2Vha01hcCgpLFxuICAgICRzdWJzTWFuYWdlciQ6IG51bGwgYXMgYW55LFxuXG4gICAgJG9wc05leHQkOiBuZXcgU2V0KCksXG5cbiAgICAkd2F0Y2hOZXh0JDogbmV3IFNldCgpLFxuICAgICR3YXRjaFN0YWdpbmckOiBuZXcgU2V0KCksXG5cbiAgICAkaG9zdHNOZXh0JDogbmV3IFNldCgpLFxuICAgICRob3N0c1N0YWdpbmckOiBuZXcgU2V0KCksXG4gICAgJHJlbmRlclByb21pc2UkOiB1bmRlZmluZWQsXG4gICAgJGhvc3RzUmVuZGVyaW5nJDogdW5kZWZpbmVkLFxuXG4gICAgJGVudkRhdGEkOiB7fSxcbiAgICAkZWxlbWVudEluZGV4JDogMCxcblxuICAgICRzdHlsZUlkcyQ6IG5ldyBTZXQoKSxcbiAgfTtcbiAgc2VhbChjb250YWluZXJTdGF0ZSk7XG4gIGNvbnRhaW5lclN0YXRlLiRzdWJzTWFuYWdlciQgPSBjcmVhdGVTdWJzY3JpcHRpb25NYW5hZ2VyKGNvbnRhaW5lclN0YXRlKTtcbiAgcmV0dXJuIGNvbnRhaW5lclN0YXRlO1xufTtcblxudHlwZSBBID0gW3R5cGU6IDAsIHN1YnNjcmliZXI6IFN1YnNjcmliZXJFZmZlY3QgfCBTdWJzY3JpYmVySG9zdCwga2V5OiBzdHJpbmcgfCB1bmRlZmluZWRdO1xuXG50eXBlIEIgPSBbXG4gIHR5cGU6IDEsXG4gIHN1YnNjcmliZXI6IFN1YnNjcmliZXJIb3N0LFxuICBzaWduYWw6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIGVsbTogUXdpa0VsZW1lbnQsXG4gIHByb3A6IHN0cmluZyxcbiAga2V5OiBzdHJpbmcgfCB1bmRlZmluZWRcbl07XG5cbnR5cGUgQyA9IFtcbiAgdHlwZTogMixcbiAgc3Vic2NyaWJlcjogU3Vic2NyaWJlckhvc3QsXG4gIHNpZ25hbDogUmVjb3JkPHN0cmluZywgYW55PixcbiAgZWxtOiBOb2RlLFxuICBhdHRyaWJ1dGU6IHN0cmluZyxcbiAga2V5OiBzdHJpbmcgfCB1bmRlZmluZWRcbl07XG5cbmV4cG9ydCB0eXBlIFN1YnNjcmliZXJTaWduYWwgPSBCIHwgQztcblxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9ucyA9IEEgfCBTdWJzY3JpYmVyU2lnbmFsO1xuXG5leHBvcnQgdHlwZSBHcm91cFRvTWFuYWdlcnNNYXAgPSBNYXA8U3Vic2NyaWJlckhvc3QgfCBTdWJzY3JpYmVyRWZmZWN0LCBMb2NhbFN1YnNjcmlwdGlvbk1hbmFnZXJbXT47XG5cbmV4cG9ydCBjb25zdCBzZXJpYWxpemVTdWJzY3JpcHRpb24gPSAoc3ViOiBTdWJzY3JpcHRpb25zLCBnZXRPYmpJZDogR2V0T2JqSUQpID0+IHtcbiAgY29uc3QgdHlwZSA9IHN1YlswXTtcbiAgY29uc3QgaG9zdCA9IGdldE9iaklkKHN1YlsxXSk7XG4gIGlmICghaG9zdCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgbGV0IGJhc2UgPSB0eXBlICsgJyAnICsgaG9zdDtcbiAgaWYgKHN1YlswXSA9PT0gMCkge1xuICAgIGlmIChzdWJbMl0pIHtcbiAgICAgIGJhc2UgKz0gJyAnICsgc3ViWzJdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBub2RlSUQgPSB0eXBlb2Ygc3ViWzNdID09PSAnc3RyaW5nJyA/IHN1YlszXSA6IG11c3QoZ2V0T2JqSWQoc3ViWzNdKSk7XG4gICAgYmFzZSArPSBgICR7bXVzdChnZXRPYmpJZChzdWJbMl0pKX0gJHtub2RlSUR9ICR7c3ViWzRdfWA7XG4gICAgaWYgKHN1Yls1XSkge1xuICAgICAgYmFzZSArPSBgICR7c3ViWzVdfWA7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlU3Vic2NyaXB0aW9uID0gKHN1Yjogc3RyaW5nLCBnZXRPYmplY3Q6IEdldE9iamVjdCk6IFN1YnNjcmlwdGlvbnMgPT4ge1xuICBjb25zdCBwYXJ0cyA9IHN1Yi5zcGxpdCgnICcpO1xuICBjb25zdCB0eXBlID0gcGFyc2VJbnQocGFydHNbMF0sIDEwKTtcbiAgYXNzZXJ0VHJ1ZShwYXJ0cy5sZW5ndGggPj0gMiwgJ0F0IGxlYXN0IDIgcGFydHMnKTtcbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0gW3R5cGUsIGdldE9iamVjdChwYXJ0c1sxXSldO1xuICBpZiAodHlwZSA9PT0gMCkge1xuICAgIGFzc2VydFRydWUocGFydHMubGVuZ3RoIDw9IDMsICdNYXggMyBwYXJ0cycpO1xuICAgIHN1YnNjcmlwdGlvbi5wdXNoKHBhcnRzWzJdKTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRUcnVlKHBhcnRzLmxlbmd0aCA9PT0gNSB8fCBwYXJ0cy5sZW5ndGggPT09IDYsICdNYXggNSBwYXJ0cycpO1xuICAgIHN1YnNjcmlwdGlvbi5wdXNoKGdldE9iamVjdChwYXJ0c1syXSksIGdldE9iamVjdChwYXJ0c1szXSksIHBhcnRzWzRdLCBwYXJ0c1s1XSk7XG4gIH1cbiAgcmV0dXJuIHN1YnNjcmlwdGlvbiBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgY3JlYXRlU3Vic2NyaXB0aW9uTWFuYWdlciA9IChjb250YWluZXJTdGF0ZTogQ29udGFpbmVyU3RhdGUpOiBTdWJzY3JpcHRpb25NYW5hZ2VyID0+IHtcbiAgY29uc3QgZ3JvdXBUb01hbmFnZXJzOiBHcm91cFRvTWFuYWdlcnNNYXAgPSBuZXcgTWFwKCk7XG4gIGNvbnN0IG1hbmFnZXI6IFN1YnNjcmlwdGlvbk1hbmFnZXIgPSB7XG4gICAgJGNyZWF0ZU1hbmFnZXIkOiAoaW5pdGlhbE1hcD86IFN1YnNjcmlwdGlvbnNbXSkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBMb2NhbFN1YnNjcmlwdGlvbk1hbmFnZXIoZ3JvdXBUb01hbmFnZXJzLCBjb250YWluZXJTdGF0ZSwgaW5pdGlhbE1hcCk7XG4gICAgfSxcbiAgICAkY2xlYXJTdWIkOiAoZ3JvdXA6IFN1YnNjcmliZXJIb3N0IHwgU3Vic2NyaWJlckVmZmVjdCkgPT4ge1xuICAgICAgY29uc3QgbWFuYWdlcnMgPSBncm91cFRvTWFuYWdlcnMuZ2V0KGdyb3VwKTtcbiAgICAgIGlmIChtYW5hZ2Vycykge1xuICAgICAgICBmb3IgKGNvbnN0IG1hbmFnZXIgb2YgbWFuYWdlcnMpIHtcbiAgICAgICAgICBtYW5hZ2VyLiR1bnN1Ykdyb3VwJChncm91cCk7XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXBUb01hbmFnZXJzLmRlbGV0ZShncm91cCk7XG4gICAgICAgIG1hbmFnZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbiAgc2VhbChtYW5hZ2VyKTtcbiAgcmV0dXJuIG1hbmFnZXI7XG59O1xuXG5leHBvcnQgY2xhc3MgTG9jYWxTdWJzY3JpcHRpb25NYW5hZ2VyIHtcbiAgcmVhZG9ubHkgJHN1YnMkOiBTdWJzY3JpcHRpb25zW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSAkZ3JvdXBUb01hbmFnZXJzJDogR3JvdXBUb01hbmFnZXJzTWFwLFxuICAgIHByaXZhdGUgJGNvbnRhaW5lclN0YXRlJDogQ29udGFpbmVyU3RhdGUsXG4gICAgaW5pdGlhbE1hcD86IFN1YnNjcmlwdGlvbnNbXVxuICApIHtcbiAgICB0aGlzLiRzdWJzJCA9IFtdO1xuXG4gICAgaWYgKGluaXRpYWxNYXApIHtcbiAgICAgIHRoaXMuJGFkZFN1YnMkKGluaXRpYWxNYXApO1xuICAgIH1cbiAgICBzZWFsKHRoaXMpO1xuICB9XG5cbiAgJGFkZFN1YnMkKHN1YnM6IFN1YnNjcmlwdGlvbnNbXSkge1xuICAgIHRoaXMuJHN1YnMkLnB1c2goLi4uc3Vicyk7XG4gICAgZm9yIChjb25zdCBzdWIgb2YgdGhpcy4kc3VicyQpIHtcbiAgICAgIHRoaXMuJGFkZFRvR3JvdXAkKHN1YlsxXSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgJGFkZFRvR3JvdXAkKGdyb3VwOiBTdWJzY3JpYmVySG9zdCB8IFN1YnNjcmliZXJFZmZlY3QsIG1hbmFnZXI6IExvY2FsU3Vic2NyaXB0aW9uTWFuYWdlcikge1xuICAgIGxldCBtYW5hZ2VycyA9IHRoaXMuJGdyb3VwVG9NYW5hZ2VycyQuZ2V0KGdyb3VwKTtcbiAgICBpZiAoIW1hbmFnZXJzKSB7XG4gICAgICB0aGlzLiRncm91cFRvTWFuYWdlcnMkLnNldChncm91cCwgKG1hbmFnZXJzID0gW10pKTtcbiAgICB9XG4gICAgaWYgKCFtYW5hZ2Vycy5pbmNsdWRlcyhtYW5hZ2VyKSkge1xuICAgICAgbWFuYWdlcnMucHVzaChtYW5hZ2VyKTtcbiAgICB9XG4gIH1cblxuICAkdW5zdWJHcm91cCQoZ3JvdXA6IFN1YnNjcmliZXJFZmZlY3QgfCBTdWJzY3JpYmVySG9zdCkge1xuICAgIGNvbnN0IHN1YnMgPSB0aGlzLiRzdWJzJDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1YnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGZvdW5kID0gc3Vic1tpXVsxXSA9PT0gZ3JvdXA7XG4gICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgc3Vicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAkYWRkU3ViJChzdWI6IFN1YnNjcmlwdGlvbnMpIHtcbiAgICBjb25zdCBzdWJzID0gdGhpcy4kc3VicyQ7XG5cbiAgICBjb25zdCBbdHlwZSwgZ3JvdXBdID0gc3ViO1xuICAgIGNvbnN0IGtleSA9IHN1YltzdWIubGVuZ3RoIC0gMV0gYXMgc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlID09PSAwKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHN1YnMuc29tZSgoW190eXBlLCBfZ3JvdXAsIF9rZXldKSA9PiBfdHlwZSA9PT0gdHlwZSAmJiBfZ3JvdXAgPT09IGdyb3VwICYmIF9rZXkgPT09IGtleSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHN1YnMucHVzaChzdWIpO1xuICAgIHRoaXMuJGFkZFRvR3JvdXAkKGdyb3VwLCB0aGlzKTtcbiAgfVxuXG4gICRub3RpZnlTdWJzJChrZXk/OiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzdWJzID0gdGhpcy4kc3VicyQ7XG4gICAgZm9yIChjb25zdCBzdWIgb2Ygc3Vicykge1xuICAgICAgY29uc3QgY29tcGFyZSA9IHN1YltzdWIubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoa2V5ICYmIGNvbXBhcmUgJiYgY29tcGFyZSAhPT0ga2V5KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbm90aWZ5Q2hhbmdlKHN1YiwgdGhpcy4kY29udGFpbmVyU3RhdGUkKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNldFJlZiA9ICh2YWx1ZTogYW55LCBlbG06IEVsZW1lbnQpID0+IHtcbiAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlKGVsbSk7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgaWYgKCdjdXJyZW50JyBpbiB2YWx1ZSkge1xuICAgICAgcmV0dXJuICgodmFsdWUgYXMgUmVmPEVsZW1lbnQ+KS5jdXJyZW50ID0gZWxtKTtcbiAgICB9IGVsc2UgaWYgKCd2YWx1ZScgaW4gdmFsdWUpIHtcbiAgICAgIHJldHVybiAoKHZhbHVlIGFzIFNpZ25hbDxFbGVtZW50PikudmFsdWUgPSBlbG0pO1xuICAgIH1cbiAgfVxuICB0aHJvdyBxRXJyb3IoUUVycm9yX2ludmFsaWRSZWZWYWx1ZSwgdmFsdWUpO1xufTtcblxuY29uc3QgbXVzdCA9IDxUPihhOiBUKTogTm9uTnVsbGFibGU8VD4gPT4ge1xuICBpZiAoYSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbG9nRXJyb3IoJ211c3QgYmUgbm9uIG51bGwnLCBhKTtcbiAgfVxuICByZXR1cm4gYTtcbn07XG4iXX0=","import { ComponentStylesPrefixContent, ELEMENT_ID, OnRenderProp, QSlot, QSlotRef, QSlotS, } from '../../util/markers';\nimport { cleanupContext, getContext, getPropsMutator, tryGetContext, } from '../../props/props';\nimport { addQRLListener, groupListeners, isOnProp, setEvent } from '../../props/props-on';\nimport { isPromise, promiseAll, then } from '../../util/promises';\nimport { assertDefined, assertEqual, assertTrue } from '../../assert/assert';\nimport { logWarn } from '../../util/log';\nimport { qDev, qSerialize, qTest } from '../../util/qdev';\nimport { directGetAttribute, directSetAttribute } from '../fast-calls';\nimport { SKIP_RENDER_TYPE } from '../jsx/jsx-runtime';\nimport { assertQrl, isQrl } from '../../import/qrl-class';\nimport { assertElement, assertQwikElement, isElement, isQwikElement, isText, isVirtualElement, } from '../../util/element';\nimport { getVdom, ProcessedJSXNodeImpl, renderComponent } from './render-dom';\nimport { parseClassList, pushRenderContext, serializeClass, setQId, SKIPS_PROPS, stringifyStyle, } from '../execute-component';\nimport { setRef } from '../container';\nimport { getRootNode, newVirtualElement, processVirtualNodes, queryAllVirtualByAttribute, VIRTUAL, } from './virtual-element';\nimport { appendChild, createElement, createTemplate, createTextNode, executeDOMRender, getKey, insertBefore, prepend, removeNode, setAttribute, setClasslist, setKey, setProperty, } from './operations';\nimport { serializeQRLs } from '../../import/qrl';\nimport { QOnce } from '../jsx/utils.public';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nimport { getEventName } from '../../object/store';\nimport { addSignalSub, createProxy, isSignal, QObjectFlagsSymbol, QObjectImmutable, _IMMUTABLE, } from '../../object/q-object';\nexport const SVG_NS = 'http://www.w3.org/2000/svg';\nexport const IS_SVG = 1 << 0;\nexport const IS_HEAD = 1 << 1;\nconst CHILDREN_PLACEHOLDER = [];\nexport const visitJsxNode = (ctx, oldVnode, newVnode, flags) => {\n    return smartUpdateChildren(ctx, oldVnode, newVnode, 'root', flags);\n};\nexport const smartUpdateChildren = (ctx, oldVnode, newVnode, mode, flags) => {\n    assertQwikElement(oldVnode.$elm$);\n    const ch = newVnode.$children$;\n    if (ch.length === 1 && ch[0].$type$ === SKIP_RENDER_TYPE) {\n        return;\n    }\n    const elm = oldVnode.$elm$;\n    const needsDOMRead = oldVnode.$children$ === CHILDREN_PLACEHOLDER;\n    if (needsDOMRead) {\n        const isHead = elm.nodeName === 'HEAD';\n        if (isHead) {\n            mode = 'head';\n            flags |= IS_HEAD;\n        }\n    }\n    const oldCh = getVnodeChildren(oldVnode, mode);\n    if (oldCh.length > 0 && ch.length > 0) {\n        return updateChildren(ctx, elm, oldCh, ch, flags);\n    }\n    else if (ch.length > 0) {\n        return addVnodes(ctx, elm, null, ch, 0, ch.length - 1, flags);\n    }\n    else if (oldCh.length > 0) {\n        return removeVnodes(ctx.$static$, oldCh, 0, oldCh.length - 1);\n    }\n};\nexport const getVnodeChildren = (vnode, mode) => {\n    const oldCh = vnode.$children$;\n    const elm = vnode.$elm$;\n    if (oldCh === CHILDREN_PLACEHOLDER) {\n        return (vnode.$children$ = getChildrenVnodes(elm, mode));\n    }\n    return oldCh;\n};\nexport const updateChildren = (ctx, parentElm, oldCh, newCh, flags) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let oldKeyToIdx;\n    let idxInOld;\n    let elmToMove;\n    const results = [];\n    const staticCtx = ctx.$static$;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newStartVnode)) {\n            results.push(patchVnode(ctx, oldStartVnode, newStartVnode, flags));\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (sameVnode(oldEndVnode, newEndVnode)) {\n            results.push(patchVnode(ctx, oldEndVnode, newEndVnode, flags));\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldStartVnode, newEndVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved right\n            results.push(patchVnode(ctx, oldStartVnode, newEndVnode, flags));\n            insertBefore(staticCtx, parentElm, oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (sameVnode(oldEndVnode, newStartVnode)) {\n            assertDefined(oldStartVnode.$elm$, 'oldStartVnode $elm$ must be defined');\n            assertDefined(oldEndVnode.$elm$, 'oldEndVnode $elm$ must be defined');\n            // Vnode moved left\n            results.push(patchVnode(ctx, oldEndVnode, newStartVnode, flags));\n            insertBefore(staticCtx, parentElm, oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            if (oldKeyToIdx === undefined) {\n                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n            }\n            idxInOld = oldKeyToIdx[newStartVnode.$key$];\n            if (idxInOld === undefined) {\n                // New element\n                const newElm = createElm(ctx, newStartVnode, flags);\n                results.push(then(newElm, (newElm) => {\n                    insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n                }));\n            }\n            else {\n                elmToMove = oldCh[idxInOld];\n                if (!isTagName(elmToMove, newStartVnode.$type$)) {\n                    const newElm = createElm(ctx, newStartVnode, flags);\n                    results.push(then(newElm, (newElm) => {\n                        insertBefore(staticCtx, parentElm, newElm, oldStartVnode?.$elm$);\n                    }));\n                }\n                else {\n                    results.push(patchVnode(ctx, elmToMove, newStartVnode, flags));\n                    oldCh[idxInOld] = undefined;\n                    assertDefined(elmToMove.$elm$, 'elmToMove $elm$ must be defined');\n                    insertBefore(staticCtx, parentElm, elmToMove.$elm$, oldStartVnode.$elm$);\n                }\n            }\n            newStartVnode = newCh[++newStartIdx];\n        }\n    }\n    if (newStartIdx <= newEndIdx) {\n        const before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$;\n        results.push(addVnodes(ctx, parentElm, before, newCh, newStartIdx, newEndIdx, flags));\n    }\n    let wait = promiseAll(results);\n    if (oldStartIdx <= oldEndIdx) {\n        wait = then(wait, () => {\n            removeVnodes(staticCtx, oldCh, oldStartIdx, oldEndIdx);\n        });\n    }\n    return wait;\n};\nconst getCh = (elm, filter) => {\n    const end = isVirtualElement(elm) ? elm.close : null;\n    const nodes = [];\n    let node = elm.firstChild;\n    while ((node = processVirtualNodes(node))) {\n        if (filter(node)) {\n            nodes.push(node);\n        }\n        node = node.nextSibling;\n        if (node === end) {\n            break;\n        }\n    }\n    return nodes;\n};\nexport const getChildren = (elm, mode) => {\n    // console.warn('DOM READ: getChildren()', elm);\n    switch (mode) {\n        case 'root':\n            return getCh(elm, isChildComponent);\n        case 'head':\n            return getCh(elm, isHeadChildren);\n        case 'elements':\n            return getCh(elm, isQwikElement);\n    }\n};\nexport const getChildrenVnodes = (elm, mode) => {\n    return getChildren(elm, mode).map(getVnodeFromEl);\n};\nexport const getVnodeFromEl = (el) => {\n    if (isElement(el)) {\n        return tryGetContext(el)?.$vdom$ ?? domToVnode(el);\n    }\n    return domToVnode(el);\n};\nexport const domToVnode = (node) => {\n    if (isQwikElement(node)) {\n        const props = isVirtualElement(node) ? EMPTY_OBJ : getProps(node);\n        const t = new ProcessedJSXNodeImpl(node.localName, props, CHILDREN_PLACEHOLDER, getKey(node));\n        t.$elm$ = node;\n        return t;\n    }\n    else if (isText(node)) {\n        const t = new ProcessedJSXNodeImpl(node.nodeName, {}, CHILDREN_PLACEHOLDER, null);\n        t.$text$ = node.data;\n        t.$elm$ = node;\n        return t;\n    }\n    throw new Error('invalid node');\n};\nexport const getProps = (node) => {\n    const props = {};\n    const attributes = node.attributes;\n    const len = attributes.length;\n    for (let i = 0; i < len; i++) {\n        const attr = attributes.item(i);\n        assertDefined(attr, 'attribute must be defined');\n        const name = attr.name;\n        if (!name.includes(':')) {\n            if (name === 'class') {\n                props[name] = parseDomClass(attr.value);\n            }\n            else {\n                props[name] = attr.value;\n            }\n        }\n    }\n    return props;\n};\nconst parseDomClass = (value) => {\n    return parseClassList(value)\n        .filter((c) => !c.startsWith(ComponentStylesPrefixContent))\n        .join(' ');\n};\nexport const isNode = (elm) => {\n    const type = elm.nodeType;\n    return type === 1 || type === 3 || type === 111;\n};\nconst isHeadChildren = (node) => {\n    const type = node.nodeType;\n    if (type === 1) {\n        return node.hasAttribute('q:head');\n    }\n    return type === 111;\n};\nexport const isSlotTemplate = (node) => {\n    return node.nodeName === 'Q:TEMPLATE';\n};\nconst isChildComponent = (node) => {\n    const type = node.nodeType;\n    if (type === 3 || type === 111) {\n        return true;\n    }\n    if (type !== 1) {\n        return false;\n    }\n    const nodeName = node.nodeName;\n    if (nodeName === 'Q:TEMPLATE') {\n        return false;\n    }\n    if (nodeName === 'HEAD') {\n        return node.hasAttribute('q:head');\n    }\n    return true;\n};\nexport const splitChildren = (input) => {\n    const output = {};\n    for (const item of input) {\n        const key = getSlotName(item);\n        const node = output[key] ??\n            (output[key] = new ProcessedJSXNodeImpl(VIRTUAL, {\n                [QSlotS]: '',\n            }, [], key));\n        node.$children$.push(item);\n    }\n    return output;\n};\nexport const patchVnode = (rCtx, oldVnode, newVnode, flags) => {\n    assertEqual(oldVnode.$type$, newVnode.$type$, 'old and new vnodes type must be the same');\n    const elm = oldVnode.$elm$;\n    const tag = newVnode.$type$;\n    const staticCtx = rCtx.$static$;\n    const isVirtual = tag === VIRTUAL;\n    const currentComponent = rCtx.$cmpCtx$;\n    assertDefined(elm, 'while patching element must be defined');\n    assertDefined(currentComponent, 'while patching current component must be defined');\n    newVnode.$elm$ = elm;\n    // Render text nodes\n    if (tag === '#text') {\n        const signal = newVnode.$signal$;\n        if (signal) {\n            addSignalSub(2, currentComponent.$element$, signal, elm, 'data');\n        }\n        if (oldVnode.$text$ !== newVnode.$text$) {\n            setProperty(staticCtx, elm, 'data', newVnode.$text$);\n        }\n        return;\n    }\n    assertQwikElement(elm);\n    // Track SVG state\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const props = newVnode.$props$;\n    const isComponent = isVirtual && OnRenderProp in props;\n    const elCtx = getContext(elm);\n    staticCtx.$containerState$.$containerEl$;\n    assertDefined(currentComponent, 'slots can not be rendered outside a component', elm);\n    if (!isComponent) {\n        const pendingListeners = currentComponent.li;\n        const listeners = elCtx.li;\n        listeners.length = 0;\n        newVnode.$props$ = updateProperties(staticCtx, elCtx, currentComponent.$element$, oldVnode.$props$, props, isSvg);\n        if (pendingListeners.length > 0) {\n            addQRLListener(listeners, pendingListeners);\n            pendingListeners.length = 0;\n        }\n        if (qSerialize && listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                setAttribute(staticCtx, elm, listener[0], serializeQRLs(listener[1], elCtx));\n            }\n        }\n        if (isSvg && newVnode.$type$ === 'foreignObject') {\n            flags &= ~IS_SVG;\n            isSvg = false;\n        }\n        const isSlot = isVirtual && QSlotS in props;\n        if (isSlot) {\n            assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n            currentComponent.$slots$.push(newVnode);\n            return;\n        }\n        const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n        if (setsInnerHTML) {\n            if (qDev && newVnode.$children$.length > 0) {\n                logWarn('Node can not have children when innerHTML is set');\n            }\n            return;\n        }\n        const isRenderOnce = isVirtual && QOnce in props;\n        if (isRenderOnce) {\n            return;\n        }\n        return smartUpdateChildren(rCtx, oldVnode, newVnode, 'root', flags);\n    }\n    const cmpProps = props.props;\n    let needsRender = setComponentProps(elCtx, rCtx, cmpProps);\n    // TODO: review this corner case\n    if (!needsRender && !elCtx.$componentQrl$ && !elCtx.$element$.hasAttribute(ELEMENT_ID)) {\n        setQId(rCtx, elCtx);\n        elCtx.$componentQrl$ = cmpProps[OnRenderProp];\n        assertQrl(elCtx.$componentQrl$);\n        needsRender = true;\n    }\n    // Rendering of children of component is more complicated,\n    // since the children must be projected into the rendered slots\n    // In addition, nested childen might need rerendering, if that's the case\n    // we need to render the nested component, and wait before projecting the content\n    // since otherwise we don't know where the slots\n    if (needsRender) {\n        return then(renderComponent(rCtx, elCtx, flags), () => renderContentProjection(rCtx, elCtx, newVnode, flags));\n    }\n    return renderContentProjection(rCtx, elCtx, newVnode, flags);\n};\nconst renderContentProjection = (rCtx, hostCtx, vnode, flags) => {\n    const newChildren = vnode.$children$;\n    const staticCtx = rCtx.$static$;\n    const splittedNewChidren = splitChildren(newChildren);\n    const slotRctx = pushRenderContext(rCtx, hostCtx);\n    const slotMaps = getSlotMap(hostCtx);\n    // Remove content from empty slots\n    for (const key of Object.keys(slotMaps.slots)) {\n        if (!splittedNewChidren[key]) {\n            const slotEl = slotMaps.slots[key];\n            const oldCh = getChildrenVnodes(slotEl, 'root');\n            if (oldCh.length > 0) {\n                const slotCtx = tryGetContext(slotEl);\n                if (slotCtx && slotCtx.$vdom$) {\n                    slotCtx.$vdom$.$children$ = [];\n                }\n                removeVnodes(staticCtx, oldCh, 0, oldCh.length - 1);\n            }\n        }\n    }\n    // Remove empty templates\n    for (const key of Object.keys(slotMaps.templates)) {\n        const templateEl = slotMaps.templates[key];\n        if (templateEl) {\n            if (!splittedNewChidren[key] || slotMaps.slots[key]) {\n                removeNode(staticCtx, templateEl);\n                slotMaps.templates[key] = undefined;\n            }\n        }\n    }\n    // Render into slots\n    return promiseAll(Object.keys(splittedNewChidren).map((key) => {\n        const newVdom = splittedNewChidren[key];\n        const slotElm = getSlotElement(staticCtx, slotMaps, hostCtx.$element$, key);\n        const slotCtx = getContext(slotElm);\n        const oldVdom = getVdom(slotCtx);\n        slotCtx.$vdom$ = newVdom;\n        newVdom.$elm$ = slotElm;\n        return smartUpdateChildren(slotRctx, oldVdom, newVdom, 'root', flags);\n    }));\n};\nconst addVnodes = (ctx, parentElm, before, vnodes, startIdx, endIdx, flags) => {\n    const promises = [];\n    let hasPromise = false;\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = vnodes[startIdx];\n        assertDefined(ch, 'render: node must be defined at index', startIdx, vnodes);\n        const elm = createElm(ctx, ch, flags);\n        promises.push(elm);\n        if (isPromise(elm)) {\n            hasPromise = true;\n        }\n    }\n    if (hasPromise) {\n        return Promise.all(promises).then((children) => insertChildren(ctx.$static$, parentElm, children, before));\n    }\n    else {\n        insertChildren(ctx.$static$, parentElm, promises, before);\n    }\n};\nconst insertChildren = (ctx, parentElm, children, before) => {\n    for (const child of children) {\n        insertBefore(ctx, parentElm, child, before);\n    }\n};\nconst removeVnodes = (ctx, nodes, startIdx, endIdx) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        const ch = nodes[startIdx];\n        if (ch) {\n            assertDefined(ch.$elm$, 'vnode elm must be defined');\n            removeNode(ctx, ch.$elm$);\n        }\n    }\n};\nconst getSlotElement = (ctx, slotMaps, parentEl, slotName) => {\n    const slotEl = slotMaps.slots[slotName];\n    if (slotEl) {\n        return slotEl;\n    }\n    const templateEl = slotMaps.templates[slotName];\n    if (templateEl) {\n        return templateEl;\n    }\n    const template = createTemplate(ctx.$doc$, slotName);\n    prepend(ctx, parentEl, template);\n    slotMaps.templates[slotName] = template;\n    return template;\n};\nconst getSlotName = (node) => {\n    return node.$props$[QSlot] ?? '';\n};\nconst createElm = (rCtx, vnode, flags) => {\n    const tag = vnode.$type$;\n    const doc = rCtx.$static$.$doc$;\n    const currentComponent = rCtx.$cmpCtx$;\n    if (tag === '#text') {\n        const signal = vnode.$signal$;\n        const elm = createTextNode(doc, vnode.$text$);\n        if (signal && currentComponent) {\n            addSignalSub(2, currentComponent.$element$, signal, elm, 'data');\n        }\n        return (vnode.$elm$ = elm);\n    }\n    let elm;\n    let isHead = !!(flags & IS_HEAD);\n    let isSvg = !!(flags & IS_SVG);\n    if (!isSvg && tag === 'svg') {\n        flags |= IS_SVG;\n        isSvg = true;\n    }\n    const isVirtual = tag === VIRTUAL;\n    const props = vnode.$props$;\n    const isComponent = OnRenderProp in props;\n    const staticCtx = rCtx.$static$;\n    if (isVirtual) {\n        elm = newVirtualElement(doc);\n    }\n    else if (tag === 'head') {\n        elm = doc.head;\n        flags |= IS_HEAD;\n        isHead = true;\n    }\n    else {\n        elm = createElement(doc, tag, isSvg);\n        flags &= ~IS_HEAD;\n    }\n    vnode.$elm$ = elm;\n    if (isSvg && tag === 'foreignObject') {\n        isSvg = false;\n        flags &= ~IS_SVG;\n    }\n    const elCtx = getContext(elm);\n    if (isComponent) {\n        setKey(elm, vnode.$key$);\n        assertTrue(isVirtual, 'component must be a virtual element');\n        const renderQRL = props[OnRenderProp];\n        assertQrl(renderQRL);\n        setComponentProps(elCtx, rCtx, props.props);\n        setQId(rCtx, elCtx);\n        // Run mount hook\n        elCtx.$componentQrl$ = renderQRL;\n        return then(renderComponent(rCtx, elCtx, flags), () => {\n            let children = vnode.$children$;\n            if (children.length === 0) {\n                return elm;\n            }\n            if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n                children = children[0].$children$;\n            }\n            const slotRctx = pushRenderContext(rCtx, elCtx);\n            const slotMap = getSlotMap(elCtx);\n            const elements = children.map((ch) => createElm(slotRctx, ch, flags));\n            return then(promiseAll(elements), () => {\n                for (const node of children) {\n                    assertDefined(node.$elm$, 'vnode elm must be defined');\n                    appendChild(staticCtx, getSlotElement(staticCtx, slotMap, elm, getSlotName(node)), node.$elm$);\n                }\n                return elm;\n            });\n        });\n    }\n    const isSlot = isVirtual && QSlotS in props;\n    const hasRef = !isVirtual && 'ref' in props;\n    const listeners = elCtx.li;\n    vnode.$props$ = setProperties(staticCtx, elCtx, currentComponent?.$element$, props, isSvg);\n    if (currentComponent && !isVirtual) {\n        const scopedIds = currentComponent.$scopeIds$;\n        if (scopedIds) {\n            scopedIds.forEach((styleId) => {\n                elm.classList.add(styleId);\n            });\n        }\n        if (currentComponent.$needAttachListeners$) {\n            addQRLListener(listeners, currentComponent.li);\n            currentComponent.$needAttachListeners$ = false;\n        }\n    }\n    if (isSlot) {\n        assertDefined(currentComponent, 'slot can only be used inside component');\n        assertDefined(currentComponent.$slots$, 'current component slots must be a defined array');\n        setKey(elm, vnode.$key$);\n        directSetAttribute(elm, QSlotRef, currentComponent.$id$);\n        currentComponent.$slots$.push(vnode);\n        staticCtx.$addSlots$.push([elm, currentComponent.$element$]);\n    }\n    else if (qSerialize) {\n        setKey(elm, vnode.$key$);\n    }\n    if (qSerialize) {\n        if (isHead && !isVirtual) {\n            directSetAttribute(elm, 'q:head', '');\n        }\n        if (listeners.length > 0 || hasRef) {\n            setQId(rCtx, elCtx);\n        }\n        const groups = groupListeners(listeners);\n        for (const listener of groups) {\n            setAttribute(staticCtx, elm, listener[0], serializeQRLs(listener[1], elCtx));\n        }\n    }\n    const setsInnerHTML = props[dangerouslySetInnerHTML] !== undefined;\n    if (setsInnerHTML) {\n        if (qDev && vnode.$children$.length > 0) {\n            logWarn('Node can not have children when innerHTML is set');\n        }\n        return elm;\n    }\n    let children = vnode.$children$;\n    if (children.length === 0) {\n        return elm;\n    }\n    if (children.length === 1 && children[0].$type$ === SKIP_RENDER_TYPE) {\n        children = children[0].$children$;\n    }\n    const promises = children.map((ch) => createElm(rCtx, ch, flags));\n    return then(promiseAll(promises), () => {\n        for (const node of children) {\n            assertDefined(node.$elm$, 'vnode elm must be defined');\n            appendChild(rCtx.$static$, elm, node.$elm$);\n        }\n        return elm;\n    });\n};\nconst getSlots = (elCtx) => {\n    const slots = elCtx.$slots$;\n    if (!slots) {\n        const parent = elCtx.$element$.parentElement;\n        assertDefined(parent, 'component should be already attached to the dom');\n        return (elCtx.$slots$ = readDOMSlots(elCtx));\n    }\n    return slots;\n};\nconst getSlotMap = (elCtx) => {\n    const slotsArray = getSlots(elCtx);\n    const slots = {};\n    const templates = {};\n    const t = Array.from(elCtx.$element$.childNodes).filter(isSlotTemplate);\n    // Map virtual slots\n    for (const vnode of slotsArray) {\n        assertQwikElement(vnode.$elm$);\n        slots[vnode.$key$ ?? ''] = vnode.$elm$;\n    }\n    // Map templates\n    for (const elm of t) {\n        templates[directGetAttribute(elm, QSlot) ?? ''] = elm;\n    }\n    return { slots, templates };\n};\nconst readDOMSlots = (elCtx) => {\n    const parent = elCtx.$element$.parentElement;\n    assertDefined(parent, 'component should be already attached to the dom');\n    return queryAllVirtualByAttribute(parent, QSlotRef, elCtx.$id$).map(domToVnode);\n};\nconst handleStyle = (ctx, elm, _, newValue) => {\n    setProperty(ctx, elm.style, 'cssText', stringifyStyle(newValue));\n    return true;\n};\nconst handleClass = (ctx, elm, _, newValue, oldValue) => {\n    assertTrue(oldValue == null || typeof oldValue === 'string', 'class oldValue must be either nullish or string', oldValue);\n    assertTrue(newValue == null || typeof newValue === 'string', 'class newValue must be either nullish or string', newValue);\n    const oldClasses = parseClassList(oldValue);\n    const newClasses = parseClassList(newValue);\n    setClasslist(ctx, elm, oldClasses.filter((c) => c && !newClasses.includes(c)), newClasses.filter((c) => c && !oldClasses.includes(c)));\n    return true;\n};\nconst checkBeforeAssign = (ctx, elm, prop, newValue) => {\n    if (prop in elm) {\n        if (elm[prop] !== newValue) {\n            setProperty(ctx, elm, prop, newValue);\n        }\n    }\n    return true;\n};\nconst forceAttribute = (ctx, elm, prop, newValue) => {\n    setAttribute(ctx, elm, prop.toLowerCase(), newValue);\n    return true;\n};\nconst dangerouslySetInnerHTML = 'dangerouslySetInnerHTML';\nconst setInnerHTML = (ctx, elm, _, newValue) => {\n    if (dangerouslySetInnerHTML in elm) {\n        setProperty(ctx, elm, dangerouslySetInnerHTML, newValue);\n    }\n    else if ('innerHTML' in elm) {\n        setProperty(ctx, elm, 'innerHTML', newValue);\n    }\n    return true;\n};\nconst noop = () => {\n    return true;\n};\nexport const PROP_HANDLER_MAP = {\n    style: handleStyle,\n    class: handleClass,\n    value: checkBeforeAssign,\n    checked: checkBeforeAssign,\n    href: forceAttribute,\n    list: forceAttribute,\n    form: forceAttribute,\n    tabIndex: forceAttribute,\n    download: forceAttribute,\n    [dangerouslySetInnerHTML]: setInnerHTML,\n    innerHTML: noop,\n};\nexport const updateProperties = (staticCtx, elCtx, hostElm, oldProps, newProps, isSvg) => {\n    const keys = getKeys(oldProps, newProps);\n    const values = {};\n    if (keys.length === 0) {\n        return values;\n    }\n    const immutableMeta = newProps[_IMMUTABLE] ?? EMPTY_OBJ;\n    const elm = elCtx.$element$;\n    for (let prop of keys) {\n        if (prop === 'ref') {\n            assertElement(elm);\n            setRef(newProps[prop], elm);\n            continue;\n        }\n        let newValue = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : newProps[prop];\n        if (isOnProp(prop)) {\n            setEvent(elCtx.li, prop, newValue, staticCtx.$containerState$.$containerEl$);\n            continue;\n        }\n        if (prop === 'className') {\n            prop = 'class';\n        }\n        if (isSignal(newValue)) {\n            addSignalSub(1, hostElm, newValue, elm, prop);\n            newValue = newValue.value;\n        }\n        if (prop === 'class') {\n            newProps['class'] = newValue = serializeClass(newValue);\n        }\n        const normalizedProp = isSvg ? prop : prop.toLowerCase();\n        const oldValue = oldProps[normalizedProp];\n        values[normalizedProp] = newValue;\n        if (oldValue === newValue) {\n            continue;\n        }\n        smartSetProperty(staticCtx, elm, prop, newValue, oldValue, isSvg);\n    }\n    return values;\n};\nexport const smartSetProperty = (staticCtx, elm, prop, newValue, oldValue, isSvg) => {\n    // Check if its an exception\n    const exception = PROP_HANDLER_MAP[prop];\n    if (exception) {\n        if (exception(staticCtx, elm, prop, newValue, oldValue)) {\n            return;\n        }\n    }\n    // Check if property in prototype\n    if (!isSvg && prop in elm) {\n        setProperty(staticCtx, elm, prop, newValue);\n        return;\n    }\n    // Fallback to render attribute\n    setAttribute(staticCtx, elm, prop, newValue);\n};\nconst getKeys = (oldProps, newProps) => {\n    const keys = Object.keys(newProps);\n    const normalizedKeys = keys.map((s) => s.toLowerCase());\n    const oldKeys = Object.keys(oldProps);\n    keys.push(...oldKeys.filter((p) => !normalizedKeys.includes(p)));\n    return keys.filter((c) => c !== 'children');\n};\nconst addGlobalListener = (staticCtx, elm, prop) => {\n    if (!qSerialize && prop.includes(':')) {\n        setAttribute(staticCtx, elm, prop, '');\n    }\n    if (!qTest) {\n        try {\n            if (window.qwikevents) {\n                window.qwikevents.push(getEventName(prop));\n            }\n        }\n        catch (err) {\n            logWarn(err);\n        }\n    }\n};\nexport const areExactQRLs = (oldValue, newValue) => {\n    if (!isQrl(oldValue) || !isQrl(newValue) || oldValue.$hash$ !== newValue.$hash$) {\n        return false;\n    }\n    const cA = oldValue.$captureRef$;\n    const cB = newValue.$captureRef$;\n    if (cA && cB) {\n        return sameArrays(cA, cB);\n    }\n    return false;\n};\nexport const sameArrays = (a1, a2) => {\n    const len = a1.length;\n    if (len !== a2.length) {\n        return false;\n    }\n    for (let i = 0; i < len; i++) {\n        if (a1[i] !== a2[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const setProperties = (staticCtx, elCtx, hostElm, newProps, isSvg) => {\n    const elm = elCtx.$element$;\n    const keys = Object.keys(newProps);\n    const values = {};\n    if (keys.length === 0) {\n        return values;\n    }\n    const immutableMeta = newProps[_IMMUTABLE] ?? EMPTY_OBJ;\n    for (let prop of keys) {\n        if (prop === 'children') {\n            continue;\n        }\n        if (prop === 'ref') {\n            assertElement(elm);\n            setRef(newProps[prop], elm);\n            continue;\n        }\n        let newValue = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : newProps[prop];\n        if (isOnProp(prop)) {\n            addGlobalListener(staticCtx, elm, setEvent(elCtx.li, prop, newValue, staticCtx.$containerState$.$containerEl$));\n            continue;\n        }\n        if (prop === 'className') {\n            prop = 'class';\n        }\n        if (hostElm && isSignal(newValue)) {\n            addSignalSub(1, hostElm, newValue, elm, prop);\n            newValue = newValue.value;\n        }\n        if (prop === 'class') {\n            newValue = serializeClass(newValue);\n        }\n        const normalizedProp = isSvg ? prop : prop.toLowerCase();\n        values[normalizedProp] = newValue;\n        smartSetProperty(staticCtx, elm, prop, newValue, undefined, isSvg);\n    }\n    return values;\n};\nexport const setComponentProps = (elCtx, rCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    let props = elCtx.$props$;\n    if (!props) {\n        elCtx.$props$ = props = createProxy({\n            [QObjectFlagsSymbol]: QObjectImmutable,\n        }, rCtx.$static$.$containerState$);\n    }\n    const qwikProps = getPropsMutator(props);\n    if (keys.length === 0) {\n        return false;\n    }\n    for (const key of keys) {\n        if (SKIPS_PROPS.includes(key)) {\n            continue;\n        }\n        qwikProps.set(key, expectProps[key]);\n    }\n    return elCtx.$dirty$;\n};\nexport const cleanupTree = (parent, staticCtx, subsManager, stopSlots) => {\n    if (stopSlots && parent.hasAttribute(QSlotS)) {\n        staticCtx.$rmSlots$.push(parent);\n        return;\n    }\n    cleanupElement(parent, subsManager);\n    const ch = getChildren(parent, 'elements');\n    for (const child of ch) {\n        cleanupTree(child, staticCtx, subsManager, true);\n    }\n};\nconst cleanupElement = (el, subsManager) => {\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        cleanupContext(ctx, subsManager);\n    }\n};\nexport const executeContextWithSlots = ({ $static$: ctx }) => {\n    executeDOMRender(ctx);\n};\nexport const directAppendChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.appendTo(parent);\n    }\n    else {\n        parent.appendChild(child);\n    }\n};\nexport const directRemoveChild = (parent, child) => {\n    if (isVirtualElement(child)) {\n        child.remove();\n    }\n    else {\n        parent.removeChild(child);\n    }\n};\nexport const directInsertBefore = (parent, child, ref) => {\n    if (isVirtualElement(child)) {\n        child.insertBeforeTo(parent, getRootNode(ref));\n    }\n    else {\n        parent.insertBefore(child, getRootNode(ref));\n    }\n};\nconst createKeyToOldIdx = (children, beginIdx, endIdx) => {\n    const map = {};\n    for (let i = beginIdx; i <= endIdx; ++i) {\n        const child = children[i];\n        const key = child.$key$;\n        if (key != null) {\n            map[key] = i;\n        }\n    }\n    return map;\n};\nconst sameVnode = (vnode1, vnode2) => {\n    if (vnode1.$type$ !== vnode2.$type$) {\n        return false;\n    }\n    return vnode1.$key$ === vnode2.$key$;\n};\nconst isTagName = (elm, tagName) => {\n    return elm.$type$ === tagName;\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined } from '../assert/assert';\nimport { parseQRL } from '../import/qrl';\nimport { getContext, inflateQrl, resumeIfNeeded } from '../props/props';\nimport { getWrappingContainer, getInvokeContext } from './use-core';\nimport { assertQrl } from '../import/qrl-class';\n// <docs markdown=\"../readme.md#useLexicalScope\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useLexicalScope instead)\n/**\n * Used by the Qwik Optimizer to restore the lexically scoped variables.\n *\n * This method should not be present in the application source code.\n *\n * NOTE: `useLexicalScope` method can only be used in the synchronous portion of the callback\n * (before any `await` statements.)\n *\n * @internal\n */\n// </docs>\nexport const useLexicalScope = () => {\n    const context = getInvokeContext();\n    let qrl = context.$qrl$;\n    if (!qrl) {\n        const el = context.$element$;\n        assertDefined(el, 'invoke: element must be defined inside useLexicalScope()', context);\n        const container = getWrappingContainer(el);\n        const elCtx = getContext(el);\n        assertDefined(container, `invoke: cant find parent q:container of`, el);\n        qrl = parseQRL(decodeURIComponent(String(context.$url$)), container);\n        assertQrl(qrl);\n        resumeIfNeeded(container);\n        inflateQrl(qrl, elCtx);\n    }\n    else {\n        assertQrl(qrl);\n        assertDefined(qrl.$captureRef$, 'invoke: qrl $captureRef$ must be defined inside useLexicalScope()', qrl);\n    }\n    return qrl.$captureRef$;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWxleGljYWwtc2NvcGUucHVibGljLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtbGV4aWNhbC1zY29wZS5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVoRCxpREFBaUQ7QUFDakQseUNBQXlDO0FBQ3pDLDhDQUE4QztBQUM5Qzs7Ozs7Ozs7O0dBU0c7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLEdBQTZCLEVBQUU7SUFDNUQsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUNuQyxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFDUixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxFQUFFLEVBQUUsMERBQTBELEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDdkYsTUFBTSxTQUFTLEdBQUcsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0MsTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLGFBQWEsQ0FBQyxTQUFTLEVBQUUseUNBQXlDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDckUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzFCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7S0FDeEI7U0FBTTtRQUNMLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNmLGFBQWEsQ0FDWCxHQUFHLENBQUMsWUFBWSxFQUNoQixtRUFBbUUsRUFDbkUsR0FBRyxDQUNKLENBQUM7S0FDSDtJQUNELE9BQU8sR0FBRyxDQUFDLFlBQW9CLENBQUM7QUFDbEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0RGVmaW5lZCB9IGZyb20gJy4uL2Fzc2VydC9hc3NlcnQnO1xuaW1wb3J0IHsgcGFyc2VRUkwgfSBmcm9tICcuLi9pbXBvcnQvcXJsJztcbmltcG9ydCB7IGdldENvbnRleHQsIGluZmxhdGVRcmwsIHJlc3VtZUlmTmVlZGVkIH0gZnJvbSAnLi4vcHJvcHMvcHJvcHMnO1xuaW1wb3J0IHsgZ2V0V3JhcHBpbmdDb250YWluZXIsIGdldEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcbmltcG9ydCB7IGFzc2VydFFybCB9IGZyb20gJy4uL2ltcG9ydC9xcmwtY2xhc3MnO1xuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VMZXhpY2FsU2NvcGVcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlTGV4aWNhbFNjb3BlIGluc3RlYWQpXG4vKipcbiAqIFVzZWQgYnkgdGhlIFF3aWsgT3B0aW1pemVyIHRvIHJlc3RvcmUgdGhlIGxleGljYWxseSBzY29wZWQgdmFyaWFibGVzLlxuICpcbiAqIFRoaXMgbWV0aG9kIHNob3VsZCBub3QgYmUgcHJlc2VudCBpbiB0aGUgYXBwbGljYXRpb24gc291cmNlIGNvZGUuXG4gKlxuICogTk9URTogYHVzZUxleGljYWxTY29wZWAgbWV0aG9kIGNhbiBvbmx5IGJlIHVzZWQgaW4gdGhlIHN5bmNocm9ub3VzIHBvcnRpb24gb2YgdGhlIGNhbGxiYWNrXG4gKiAoYmVmb3JlIGFueSBgYXdhaXRgIHN0YXRlbWVudHMuKVxuICpcbiAqIEBpbnRlcm5hbFxuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgdXNlTGV4aWNhbFNjb3BlID0gPFZBUlMgZXh0ZW5kcyBhbnlbXT4oKTogVkFSUyA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBnZXRJbnZva2VDb250ZXh0KCk7XG4gIGxldCBxcmwgPSBjb250ZXh0LiRxcmwkO1xuICBpZiAoIXFybCkge1xuICAgIGNvbnN0IGVsID0gY29udGV4dC4kZWxlbWVudCQ7XG4gICAgYXNzZXJ0RGVmaW5lZChlbCwgJ2ludm9rZTogZWxlbWVudCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJywgY29udGV4dCk7XG4gICAgY29uc3QgY29udGFpbmVyID0gZ2V0V3JhcHBpbmdDb250YWluZXIoZWwpO1xuICAgIGNvbnN0IGVsQ3R4ID0gZ2V0Q29udGV4dChlbCk7XG4gICAgYXNzZXJ0RGVmaW5lZChjb250YWluZXIsIGBpbnZva2U6IGNhbnQgZmluZCBwYXJlbnQgcTpjb250YWluZXIgb2ZgLCBlbCk7XG4gICAgcXJsID0gcGFyc2VRUkwoZGVjb2RlVVJJQ29tcG9uZW50KFN0cmluZyhjb250ZXh0LiR1cmwkKSksIGNvbnRhaW5lcik7XG4gICAgYXNzZXJ0UXJsKHFybCk7XG4gICAgcmVzdW1lSWZOZWVkZWQoY29udGFpbmVyKTtcbiAgICBpbmZsYXRlUXJsKHFybCwgZWxDdHgpO1xuICB9IGVsc2Uge1xuICAgIGFzc2VydFFybChxcmwpO1xuICAgIGFzc2VydERlZmluZWQoXG4gICAgICBxcmwuJGNhcHR1cmVSZWYkLFxuICAgICAgJ2ludm9rZTogcXJsICRjYXB0dXJlUmVmJCBtdXN0IGJlIGRlZmluZWQgaW5zaWRlIHVzZUxleGljYWxTY29wZSgpJyxcbiAgICAgIHFybFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHFybC4kY2FwdHVyZVJlZiQgYXMgVkFSUztcbn07XG4iXX0=","import { tryGetContext } from '../../props/props';\nimport { setProperty } from './operations';\nimport { smartSetProperty, SVG_NS } from './visitor';\nexport const executeSignalOperation = (staticCtx, operation) => {\n    const prop = operation[5] ?? 'value';\n    const value = operation[2][prop];\n    switch (operation[0]) {\n        case 1: {\n            const prop = operation[4];\n            const elm = operation[3];\n            const ctx = tryGetContext(elm);\n            const isSVG = elm.namespaceURI === SVG_NS;\n            let oldValue = undefined;\n            if (ctx && ctx.$vdom$) {\n                const normalizedProp = isSVG ? prop : prop.toLowerCase();\n                oldValue = ctx.$vdom$.$props$[normalizedProp];\n                ctx.$vdom$.$props$[normalizedProp] = value;\n            }\n            return smartSetProperty(staticCtx, elm, prop, value, oldValue, isSVG);\n        }\n        case 2:\n            return setProperty(staticCtx, operation[3], 'data', value);\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmFscy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL3NpZ25hbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVyRCxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxDQUNwQyxTQUE4QixFQUM5QixTQUEyQixFQUMzQixFQUFFO0lBQ0YsTUFBTSxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQztJQUNyQyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsUUFBUSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDcEIsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNOLE1BQU0sSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixNQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxZQUFZLEtBQUssTUFBTSxDQUFDO1lBQzFDLElBQUksUUFBUSxHQUFHLFNBQVMsQ0FBQztZQUN6QixJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUFFO2dCQUNyQixNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO2dCQUN6RCxRQUFRLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQzlDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUM1QztZQUNELE9BQU8sZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUN2RTtRQUNELEtBQUssQ0FBQztZQUNKLE9BQU8sV0FBVyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzlEO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdHJ5R2V0Q29udGV4dCB9IGZyb20gJy4uLy4uL3Byb3BzL3Byb3BzJztcbmltcG9ydCB0eXBlIHsgU3Vic2NyaWJlclNpZ25hbCB9IGZyb20gJy4uL2NvbnRhaW5lcic7XG5pbXBvcnQgdHlwZSB7IFJlbmRlclN0YXRpY0NvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBzZXRQcm9wZXJ0eSB9IGZyb20gJy4vb3BlcmF0aW9ucyc7XG5pbXBvcnQgeyBzbWFydFNldFByb3BlcnR5LCBTVkdfTlMgfSBmcm9tICcuL3Zpc2l0b3InO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZVNpZ25hbE9wZXJhdGlvbiA9IChcbiAgc3RhdGljQ3R4OiBSZW5kZXJTdGF0aWNDb250ZXh0LFxuICBvcGVyYXRpb246IFN1YnNjcmliZXJTaWduYWxcbikgPT4ge1xuICBjb25zdCBwcm9wID0gb3BlcmF0aW9uWzVdID8/ICd2YWx1ZSc7XG4gIGNvbnN0IHZhbHVlID0gb3BlcmF0aW9uWzJdW3Byb3BdO1xuICBzd2l0Y2ggKG9wZXJhdGlvblswXSkge1xuICAgIGNhc2UgMToge1xuICAgICAgY29uc3QgcHJvcCA9IG9wZXJhdGlvbls0XTtcbiAgICAgIGNvbnN0IGVsbSA9IG9wZXJhdGlvblszXTtcbiAgICAgIGNvbnN0IGN0eCA9IHRyeUdldENvbnRleHQoZWxtKTtcbiAgICAgIGNvbnN0IGlzU1ZHID0gZWxtLm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05TO1xuICAgICAgbGV0IG9sZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgaWYgKGN0eCAmJiBjdHguJHZkb20kKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRQcm9wID0gaXNTVkcgPyBwcm9wIDogcHJvcC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBvbGRWYWx1ZSA9IGN0eC4kdmRvbSQuJHByb3BzJFtub3JtYWxpemVkUHJvcF07XG4gICAgICAgIGN0eC4kdmRvbSQuJHByb3BzJFtub3JtYWxpemVkUHJvcF0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbWFydFNldFByb3BlcnR5KHN0YXRpY0N0eCwgZWxtLCBwcm9wLCB2YWx1ZSwgb2xkVmFsdWUsIGlzU1ZHKTtcbiAgICB9XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIHNldFByb3BlcnR5KHN0YXRpY0N0eCwgb3BlcmF0aW9uWzNdLCAnZGF0YScsIHZhbHVlKTtcbiAgfVxufTtcbiJdfQ==","import { assertDefined, assertTrue } from '../../assert/assert';\nimport { executeContextWithSlots, IS_HEAD, IS_SVG, SVG_NS } from './visitor';\nimport { getContext, resumeIfNeeded } from '../../props/props';\nimport { getDocument } from '../../util/dom';\nimport { logError, logWarn } from '../../util/log';\nimport { getWrappingContainer } from '../../use/use-core';\nimport { runSubscriber, WatchFlagsIsDirty, WatchFlagsIsEffect, WatchFlagsIsResource, WatchFlagsIsWatch, } from '../../use/use-watch';\nimport { then } from '../../util/promises';\nimport { useLexicalScope } from '../../use/use-lexical-scope.public';\nimport { renderComponent } from './render-dom';\nimport { getContainerState } from '../container';\nimport { createRenderContext } from '../execute-component';\nimport { getRootNode } from './virtual-element';\nimport { printRenderStats } from './operations';\nimport { executeSignalOperation } from './signals';\nimport { getPlatform, isServer } from '../../platform/platform';\nimport { qDev } from '../../util/qdev';\nimport { isQwikElement } from '../../util/element';\nexport const notifyChange = (subAction, containerState) => {\n    if (subAction[0] === 0) {\n        const host = subAction[1];\n        if (isQwikElement(host)) {\n            notifyRender(host, containerState);\n        }\n        else {\n            notifyWatch(host, containerState);\n        }\n    }\n    else {\n        notifySignalOperation(subAction, containerState);\n    }\n};\n/**\n * Mark component for rendering.\n *\n * Use `notifyRender` method to mark a component for rendering at some later point in time.\n * This method uses `getPlatform(doc).queueRender` for scheduling of the rendering. The\n * default implementation of the method is to use `requestAnimationFrame` to do actual rendering.\n *\n * The method is intended to coalesce multiple calls into `notifyRender` into a single call for\n * rendering.\n *\n * @param hostElement - Host-element of the component to re-render.\n * @returns A promise which is resolved when the component has been rendered.\n *\n */\nconst notifyRender = (hostElement, containerState) => {\n    const server = isServer();\n    if (!server) {\n        resumeIfNeeded(containerState.$containerEl$);\n    }\n    const elCtx = getContext(hostElement);\n    assertDefined(elCtx.$componentQrl$, `render: notified host element must have a defined $renderQrl$`, elCtx);\n    if (elCtx.$dirty$) {\n        return;\n    }\n    elCtx.$dirty$ = true;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$hostsStaging$.add(hostElement);\n    }\n    else {\n        if (server) {\n            logWarn('Can not rerender in server platform');\n            return undefined;\n        }\n        containerState.$hostsNext$.add(hostElement);\n        scheduleFrame(containerState);\n    }\n};\nconst notifySignalOperation = (op, containerState) => {\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$opsNext$.add(op);\n    }\n    else {\n        containerState.$opsNext$.add(op);\n        scheduleFrame(containerState);\n    }\n};\nexport const notifyWatch = (watch, containerState) => {\n    if (watch.$flags$ & WatchFlagsIsDirty) {\n        return;\n    }\n    watch.$flags$ |= WatchFlagsIsDirty;\n    const activeRendering = containerState.$hostsRendering$ !== undefined;\n    if (activeRendering) {\n        assertDefined(containerState.$renderPromise$, 'render: while rendering, $renderPromise$ must be defined', containerState);\n        containerState.$watchStaging$.add(watch);\n    }\n    else {\n        containerState.$watchNext$.add(watch);\n        scheduleFrame(containerState);\n    }\n};\nconst scheduleFrame = (containerState) => {\n    if (containerState.$renderPromise$ === undefined) {\n        containerState.$renderPromise$ = getPlatform().nextTick(() => renderMarked(containerState));\n    }\n    return containerState.$renderPromise$;\n};\n/**\n * Low-level API used by the Optimizer to process `useWatch$()` API. This method\n * is not intended to be used by developers.\n *\n * @internal\n *\n */\nexport const _hW = () => {\n    const [watch] = useLexicalScope();\n    notifyWatch(watch, getContainerState(getWrappingContainer(watch.$el$)));\n};\nconst renderMarked = async (containerState) => {\n    const doc = getDocument(containerState.$containerEl$);\n    try {\n        const ctx = createRenderContext(doc, containerState);\n        const staticCtx = ctx.$static$;\n        const hostsRendering = (containerState.$hostsRendering$ = new Set(containerState.$hostsNext$));\n        containerState.$hostsNext$.clear();\n        await executeWatchesBefore(containerState);\n        containerState.$hostsStaging$.forEach((host) => {\n            hostsRendering.add(host);\n        });\n        containerState.$hostsStaging$.clear();\n        const renderingQueue = Array.from(hostsRendering);\n        sortNodes(renderingQueue);\n        for (const el of renderingQueue) {\n            if (!staticCtx.$hostElements$.has(el)) {\n                const elCtx = getContext(el);\n                if (elCtx.$componentQrl$) {\n                    assertTrue(el.isConnected, 'element must be connected to the dom');\n                    staticCtx.$roots$.push(elCtx);\n                    try {\n                        await renderComponent(ctx, elCtx, getFlags(el.parentElement));\n                    }\n                    catch (err) {\n                        if (qDev) {\n                            throw err;\n                        }\n                    }\n                }\n            }\n        }\n        containerState.$opsNext$.forEach((op) => executeSignalOperation(staticCtx, op));\n        containerState.$opsNext$.clear();\n        // Add post operations\n        staticCtx.$operations$.push(...staticCtx.$postOperations$);\n        // Early exist, no dom operations\n        if (staticCtx.$operations$.length === 0) {\n            printRenderStats(staticCtx);\n            await postRendering(containerState, staticCtx);\n            return;\n        }\n        await getPlatform().raf(() => {\n            executeContextWithSlots(ctx);\n            printRenderStats(staticCtx);\n            return postRendering(containerState, staticCtx);\n        });\n    }\n    catch (err) {\n        logError(err);\n    }\n};\nconst getFlags = (el) => {\n    let flags = 0;\n    if (el) {\n        if (el.namespaceURI === SVG_NS) {\n            flags |= IS_SVG;\n        }\n        if (el.tagName === 'HEAD') {\n            flags |= IS_HEAD;\n        }\n    }\n    return flags;\n};\nexport const postRendering = async (containerState, ctx) => {\n    await executeWatchesAfter(containerState, (watch, stage) => {\n        if ((watch.$flags$ & WatchFlagsIsEffect) === 0) {\n            return false;\n        }\n        if (stage) {\n            return ctx.$hostElements$.has(watch.$el$);\n        }\n        return true;\n    });\n    // Clear staging\n    containerState.$hostsStaging$.forEach((el) => {\n        containerState.$hostsNext$.add(el);\n    });\n    containerState.$hostsStaging$.clear();\n    containerState.$hostsRendering$ = undefined;\n    containerState.$renderPromise$ = undefined;\n    const pending = containerState.$hostsNext$.size +\n        containerState.$watchNext$.size +\n        containerState.$opsNext$.size;\n    if (pending > 0) {\n        scheduleFrame(containerState);\n    }\n};\nconst executeWatchesBefore = async (containerState) => {\n    const containerEl = containerState.$containerEl$;\n    const resourcesPromises = [];\n    const watchPromises = [];\n    const isWatch = (watch) => (watch.$flags$ & WatchFlagsIsWatch) !== 0;\n    const isResourceWatch = (watch) => (watch.$flags$ & WatchFlagsIsResource) !== 0;\n    containerState.$watchNext$.forEach((watch) => {\n        if (isWatch(watch)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n        if (isResourceWatch(watch)) {\n            resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (isWatch(watch)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else if (isResourceWatch(watch)) {\n                resourcesPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n    if (resourcesPromises.length > 0) {\n        const resources = await Promise.all(resourcesPromises);\n        sortWatches(resources);\n        resources.forEach((watch) => runSubscriber(watch, containerState));\n    }\n};\nconst executeWatchesAfter = async (containerState, watchPred) => {\n    const watchPromises = [];\n    const containerEl = containerState.$containerEl$;\n    containerState.$watchNext$.forEach((watch) => {\n        if (watchPred(watch, false)) {\n            watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            containerState.$watchNext$.delete(watch);\n        }\n    });\n    do {\n        // Run staging effected\n        containerState.$watchStaging$.forEach((watch) => {\n            if (watchPred(watch, true)) {\n                watchPromises.push(then(watch.$qrl$.$resolveLazy$(containerEl), () => watch));\n            }\n            else {\n                containerState.$watchNext$.add(watch);\n            }\n        });\n        containerState.$watchStaging$.clear();\n        // Wait for all promises\n        if (watchPromises.length > 0) {\n            const watches = await Promise.all(watchPromises);\n            sortWatches(watches);\n            await Promise.all(watches.map((watch) => {\n                return runSubscriber(watch, containerState);\n            }));\n            watchPromises.length = 0;\n        }\n    } while (containerState.$watchStaging$.size > 0);\n};\nconst sortNodes = (elements) => {\n    elements.sort((a, b) => (a.compareDocumentPosition(getRootNode(b)) & 2 ? 1 : -1));\n};\nconst sortWatches = (watches) => {\n    watches.sort((a, b) => {\n        if (a.$el$ === b.$el$) {\n            return a.$index$ < b.$index$ ? -1 : 1;\n        }\n        return (a.$el$.compareDocumentPosition(getRootNode(b.$el$)) & 2) !== 0 ? 1 : -1;\n    });\n};\n//# sourceMappingURL=data:application/json;base64,","import { getProxyManager, isSignal, noSerialize, unwrapProxy, } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { newInvokeContext, invoke, waitAndRun } from './use-core';\nimport { logError, logErrorAndStop } from '../util/log';\nimport { delay, safeCall, then } from '../util/promises';\nimport { isFunction, isObject } from '../util/types';\nimport { isServer } from '../platform/platform';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { assertDefined, assertEqual } from '../assert/assert';\nimport { assertQrl, createQRL } from '../import/qrl-class';\nimport { codeToText, qError, QError_canNotMountUseServerMount, QError_trackUseStore, } from '../error/error';\nimport { useOn, useOnDocument } from './use-on';\nimport { intToStr, strToInt } from '../object/store';\nimport { notifyWatch, _hW } from '../render/dom/notify-render';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { handleError } from '../render/error-handling';\nexport const WatchFlagsIsEffect = 1 << 0;\nexport const WatchFlagsIsWatch = 1 << 1;\nexport const WatchFlagsIsDirty = 1 << 2;\nexport const WatchFlagsIsCleanup = 1 << 3;\nexport const WatchFlagsIsResource = 1 << 4;\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ### Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatchQrl = (qrl, opts) => {\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(qrl);\n    const el = ctx.$hostElement$;\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsWatch, i, el, qrl, undefined);\n    const elCtx = getContext(el);\n    set(true);\n    qrl.$resolveLazy$(containerState.$containerEl$);\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    waitAndRun(ctx, () => runSubscriber(watch, containerState, ctx.$renderCtx$));\n    if (isServer()) {\n        useRunWatch(watch, opts?.eagerness);\n    }\n};\n// <docs markdown=\"../readme.md#useWatch\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useWatch instead)\n/**\n * Reruns the `watchFn` when the observed inputs change.\n *\n * Use `useWatch` to observe changes on a set of inputs, and then re-execute the `watchFn` when\n * those inputs change.\n *\n * The `watchFn` only executes if the observed inputs change. To observe the inputs, use the\n * `obs` function to wrap property reads. This creates subscriptions that will trigger the\n * `watchFn` to rerun.\n *\n * @see `Tracker`\n *\n * @public\n *\n * ### Example\n *\n * The `useWatch` function is used to observe the `state.count` property. Any changes to the\n * `state.count` cause the `watchFn` to execute which in turn updates the `state.doubleCount` to\n * the double of `state.count`.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *     doubleCount: 0,\n *     debounced: 0,\n *   });\n *\n *   // Double count watch\n *   useWatch$(({ track }) => {\n *     const count = track(() => store.count);\n *     store.doubleCount = 2 * count;\n *   });\n *\n *   // Debouncer watch\n *   useWatch$(({ track }) => {\n *     const doubleCount = track(() => store.doubleCount);\n *     const timer = setTimeout(() => {\n *       store.debounced = doubleCount;\n *     }, 2000);\n *     return () => {\n *       clearTimeout(timer);\n *     };\n *   });\n *   return (\n *     <div>\n *       <div>\n *         {store.count} / {store.doubleCount}\n *       </div>\n *       <div>{store.debounced}</div>\n *     </div>\n *   );\n * });\n * ```\n *\n * @param watch - Function which should be re-executed when changes to the inputs are detected\n * @public\n */\n// </docs>\nexport const useWatch$ = /*#__PURE__*/ implicit$FirstArg(useWatchQrl);\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffectQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(qrl);\n    const el = ctx.$hostElement$;\n    const watch = new Watch(WatchFlagsIsEffect, i, el, qrl, undefined);\n    const eagerness = opts?.eagerness ?? 'visible';\n    const elCtx = getContext(el);\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    set(true);\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    useRunWatch(watch, eagerness);\n    if (!isServer()) {\n        qrl.$resolveLazy$(containerState.$containerEl$);\n        notifyWatch(watch, containerState);\n    }\n};\n// <docs markdown=\"../readme.md#useClientEffect\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useClientEffect instead)\n/**\n * ```tsx\n * const Timer = component$(() => {\n *   const store = useStore({\n *     count: 0,\n *   });\n *\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       store.count++;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *\n *   return <div>{store.count}</div>;\n * });\n * ```\n *\n * @public\n */\n// </docs>\nexport const useClientEffect$ = /*#__PURE__*/ implicit$FirstArg(useClientEffectQrl);\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <div>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </div>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    if (isServer()) {\n        waitAndRun(ctx, mountQrl);\n        set(true);\n    }\n    else {\n        throw qError(QError_canNotMountUseServerMount, ctx.$hostElement$);\n    }\n};\n// <docs markdown=\"../readme.md#useServerMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useServerMount instead)\n/**\n * Register's a server mount hook that runs only in the server when the component is first\n * mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     users: [],\n *   });\n *\n *   useServerMount$(async () => {\n *     // This code will ONLY run once in the server, when the component is mounted\n *     store.users = await db.requestUsers();\n *   });\n *\n *   return (\n *     <div>\n *       {store.users.map((user) => (\n *         <User user={user} />\n *       ))}\n *     </div>\n *   );\n * });\n *\n * interface User {\n *   name: string;\n * }\n * function User(props: { user: User }) {\n *   return <div>Name: {props.user.name}</div>;\n * }\n * ```\n *\n * @see `useMount`\n * @public\n */\n// </docs>\nexport const useServerMount$ = /*#__PURE__*/ implicit$FirstArg(useServerMountQrl);\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <div>\n *       <p>The temperature is: ${store.temp}</p>\n *     </div>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMountQrl = (mountQrl) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get) {\n        return;\n    }\n    assertQrl(mountQrl);\n    mountQrl.$resolveLazy$(ctx.$renderCtx$.$static$.$containerState$.$containerEl$);\n    waitAndRun(ctx, mountQrl);\n    set(true);\n};\n// <docs markdown=\"../readme.md#useMount\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useMount instead)\n/**\n * Register a server mount hook that runs only in the server when the component is first mounted.\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     temp: 0,\n *   });\n *\n *   useMount$(async () => {\n *     // This code will run once whenever a component is mounted in the server, or in the client\n *     const res = await fetch('weather-api.example');\n *     const json = (await res.json()) as any;\n *     store.temp = json.temp;\n *   });\n *\n *   return (\n *     <div>\n *       <p>The temperature is: ${store.temp}</p>\n *     </div>\n *   );\n * });\n * ```\n *\n * @see `useServerMount`\n * @public\n */\n// </docs>\nexport const useMount$ = /*#__PURE__*/ implicit$FirstArg(useMountQrl);\nexport const isResourceWatch = (watch) => {\n    return !!watch.$resource$;\n};\nexport const runSubscriber = async (watch, containerState, rctx) => {\n    assertEqual(!!(watch.$flags$ & WatchFlagsIsDirty), true, 'Resource is not dirty', watch);\n    if (isResourceWatch(watch)) {\n        return runResource(watch, containerState);\n    }\n    else {\n        return runWatch(watch, containerState, rctx);\n    }\n};\nexport const runResource = (watch, containerState, waitOn) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const el = watch.$el$;\n    const invokationContext = newInvokeContext(el, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    watch.$qrl$.$captureRef$;\n    const watchFn = watch.$qrl$.getFn(invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const cleanups = [];\n    const resource = watch.$resource$;\n    assertDefined(resource, 'useResource: when running a resource, \"watch.r\" must be a defined.', watch);\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = watch;\n            return invoke(ctx, obj);\n        }\n        const manager = getProxyManager(obj);\n        if (manager) {\n            manager.$addSub$([0, watch, prop]);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else if (isSignal(obj)) {\n            return obj.value;\n        }\n        else {\n            return obj;\n        }\n    };\n    const resourceTarget = unwrapProxy(resource);\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n        previous: resourceTarget.resolved,\n    };\n    let resolve;\n    let reject;\n    let done = false;\n    const setState = (resolved, value) => {\n        if (!done) {\n            done = true;\n            if (resolved) {\n                done = true;\n                resource.state = 'resolved';\n                resource.resolved = value;\n                resource.error = undefined;\n                resolve(value);\n            }\n            else {\n                done = true;\n                resource.state = 'rejected';\n                resource.resolved = undefined;\n                resource.error = value;\n                reject(value);\n            }\n            return true;\n        }\n        return false;\n    };\n    // Execute mutation inside empty invokation\n    invoke(invokationContext, () => {\n        resource.state = 'pending';\n        resource.resolved = undefined;\n        resource.promise = new Promise((r, re) => {\n            resolve = r;\n            reject = re;\n        });\n    });\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const promise = safeCall(() => then(waitOn, () => watchFn(opts)), (value) => {\n        setState(true, value);\n    }, (reason) => {\n        setState(false, reason);\n    });\n    const timeout = resourceTarget.timeout;\n    if (timeout) {\n        return Promise.race([\n            promise,\n            delay(timeout).then(() => {\n                if (setState(false, 'timeout')) {\n                    cleanupWatch(watch);\n                }\n            }),\n        ]);\n    }\n    return promise;\n};\nexport const runWatch = (watch, containerState, rctx) => {\n    watch.$flags$ &= ~WatchFlagsIsDirty;\n    cleanupWatch(watch);\n    const hostElement = watch.$el$;\n    const invokationContext = newInvokeContext(hostElement, undefined, 'WatchEvent');\n    const { $subsManager$: subsManager } = containerState;\n    const watchFn = watch.$qrl$.getFn(invokationContext, () => {\n        subsManager.$clearSub$(watch);\n    });\n    const track = (obj, prop) => {\n        if (isFunction(obj)) {\n            const ctx = newInvokeContext();\n            ctx.$subscriber$ = watch;\n            return invoke(ctx, obj);\n        }\n        const manager = getProxyManager(obj);\n        if (manager) {\n            manager.$addSub$([0, watch, prop]);\n        }\n        else {\n            logErrorAndStop(codeToText(QError_trackUseStore), obj);\n        }\n        if (prop) {\n            return obj[prop];\n        }\n        else {\n            return obj;\n        }\n    };\n    const cleanups = [];\n    watch.$destroy$ = noSerialize(() => {\n        cleanups.forEach((fn) => fn());\n    });\n    const opts = {\n        track,\n        cleanup(callback) {\n            cleanups.push(callback);\n        },\n    };\n    return safeCall(() => watchFn(opts), (returnValue) => {\n        if (isFunction(returnValue)) {\n            cleanups.push(returnValue);\n        }\n    }, (reason) => {\n        handleError(reason, hostElement, rctx);\n    });\n};\nexport const cleanupWatch = (watch) => {\n    const destroy = watch.$destroy$;\n    if (destroy) {\n        watch.$destroy$ = undefined;\n        try {\n            destroy();\n        }\n        catch (err) {\n            logError(err);\n        }\n    }\n};\nexport const destroyWatch = (watch) => {\n    if (watch.$flags$ & WatchFlagsIsCleanup) {\n        watch.$flags$ &= ~WatchFlagsIsCleanup;\n        const cleanup = watch.$qrl$;\n        cleanup();\n    }\n    else {\n        cleanupWatch(watch);\n    }\n};\nconst useRunWatch = (watch, eagerness) => {\n    if (eagerness === 'visible') {\n        useOn('qvisible', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'load') {\n        useOnDocument('qinit', getWatchHandlerQrl(watch));\n    }\n    else if (eagerness === 'idle') {\n        useOnDocument('qidle', getWatchHandlerQrl(watch));\n    }\n};\nconst getWatchHandlerQrl = (watch) => {\n    const watchQrl = watch.$qrl$;\n    const watchHandler = createQRL(watchQrl.$chunk$, '_hW', _hW, null, null, [watch], watchQrl.$symbol$);\n    return watchHandler;\n};\nexport const isWatchCleanup = (obj) => {\n    return isSubscriberDescriptor(obj) && !!(obj.$flags$ & WatchFlagsIsCleanup);\n};\nexport const isSubscriberDescriptor = (obj) => {\n    return isObject(obj) && obj instanceof Watch;\n};\nexport const serializeWatch = (watch, getObjId) => {\n    let value = `${intToStr(watch.$flags$)} ${intToStr(watch.$index$)} ${getObjId(watch.$qrl$)} ${getObjId(watch.$el$)}`;\n    if (isResourceWatch(watch)) {\n        value += ` ${getObjId(watch.$resource$)}`;\n    }\n    return value;\n};\nexport const parseWatch = (data) => {\n    const [flags, index, qrl, el, resource] = data.split(' ');\n    return new Watch(strToInt(flags), strToInt(index), el, qrl, resource);\n};\nexport class Watch {\n    constructor($flags$, $index$, $el$, $qrl$, $resource$) {\n        this.$flags$ = $flags$;\n        this.$index$ = $index$;\n        this.$el$ = $el$;\n        this.$qrl$ = $qrl$;\n        this.$resource$ = $resource$;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","export const emitEvent = (el, eventName, detail, bubbles) => {\n    if (el && typeof CustomEvent === 'function') {\n        el.dispatchEvent(new CustomEvent(eventName, {\n            detail,\n            bubbles: bubbles,\n            composed: bubbles,\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvdXRpbC9ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FDdkIsRUFBdUIsRUFDdkIsU0FBaUIsRUFDakIsTUFBVyxFQUNYLE9BQWdCLEVBQ2hCLEVBQUU7SUFDRixJQUFJLEVBQUUsSUFBSSxPQUFPLFdBQVcsS0FBSyxVQUFVLEVBQUU7UUFDM0MsRUFBRSxDQUFDLGFBQWEsQ0FDZCxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7WUFDekIsTUFBTTtZQUNOLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxPQUFPO1NBQ2xCLENBQUMsQ0FDSCxDQUFDO0tBQ0g7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgZW1pdEV2ZW50ID0gKFxuICBlbDogRWxlbWVudCB8IHVuZGVmaW5lZCxcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4gIGRldGFpbDogYW55LFxuICBidWJibGVzOiBib29sZWFuXG4pID0+IHtcbiAgaWYgKGVsICYmIHR5cGVvZiBDdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVsLmRpc3BhdGNoRXZlbnQoXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoZXZlbnROYW1lLCB7XG4gICAgICAgIGRldGFpbCxcbiAgICAgICAgYnViYmxlczogYnViYmxlcyxcbiAgICAgICAgY29tcG9zZWQ6IGJ1YmJsZXMsXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn07XG4iXX0=","import { createProxy, getProxyTarget } from '../object/q-object';\nimport { getContext } from '../props/props';\nimport { $ } from '../import/qrl.public';\nimport { assertQrl } from '../import/qrl-class';\nimport { runResource, WatchFlagsIsDirty, WatchFlagsIsResource, Watch, } from './use-watch';\nimport { Fragment, jsx } from '../render/jsx/jsx-runtime';\nimport { isServer } from '../platform/platform';\nimport { useBindInvokeContext } from './use-core';\nimport { isObject } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const useResourceQrl = (qrl, opts) => {\n    const { get, set, i, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    assertQrl(qrl);\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const resource = createResourceReturn(containerState, opts);\n    const el = ctx.$hostElement$;\n    const watch = new Watch(WatchFlagsIsDirty | WatchFlagsIsResource, i, el, qrl, resource);\n    const previousWait = Promise.all(ctx.$waitOn$.slice());\n    const elCtx = getContext(el);\n    runResource(watch, containerState, previousWait);\n    if (!elCtx.$watches$) {\n        elCtx.$watches$ = [];\n    }\n    elCtx.$watches$.push(watch);\n    set(resource);\n    return resource;\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const useResource$ = (generatorFn, opts) => {\n    return useResourceQrl($(generatorFn), opts);\n};\n// <docs markdown=\"../readme.md#useResource\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useResource instead)\n/**\n * This method works like an async memoized function that runs whenever some tracked value\n * changes and returns some data.\n *\n * `useResouce` however returns immediate a `ResourceReturn` object that contains the data and a\n * state that indicates if the data is available or not.\n *\n * The status can be one of the following:\n *\n * - 'pending' - the data is not yet available.\n * - 'resolved' - the data is available.\n * - 'rejected' - the data is not available due to an error or timeout.\n *\n * ### Example\n *\n * Example showing how `useResource` to perform a fetch to request the weather, whenever the\n * input city name changes.\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const store = useStore({\n *     city: '',\n *   });\n *\n *   const weatherResource = useResource$<any>(async ({ track, cleanup }) => {\n *     const cityName = track(() => store.city);\n *     const abortController = new AbortController();\n *     cleanup(() => abortController.abort('cleanup'));\n *     const res = await fetch(`http://weatherdata.com?city=${cityName}`, {\n *       signal: abortController.signal,\n *     });\n *     const data = res.json();\n *     return data;\n *   });\n *\n *   return (\n *     <div>\n *       <input name=\"city\" onInput$={(ev: any) => (store.city = ev.target.value)} />\n *       <Resource\n *         value={weatherResource}\n *         onResolved={(weather) => {\n *           return <div>Temperature: {weather.temp}</div>;\n *         }}\n *       />\n *     </div>\n *   );\n * });\n * ```\n *\n * @see Resource\n * @see ResourceReturn\n *\n * @public\n */\n// </docs>\nexport const Resource = (props) => {\n    const isBrowser = !isServer();\n    if (isBrowser) {\n        if (props.onRejected) {\n            props.value.promise.catch(() => { });\n            if (props.value.state === 'rejected') {\n                return props.onRejected(props.value.error);\n            }\n        }\n        if (props.onPending) {\n            const state = props.value.state;\n            if (state === 'pending') {\n                return props.onPending();\n            }\n            else if (state === 'resolved') {\n                return props.onResolved(props.value.resolved);\n            }\n            else if (state === 'rejected') {\n                throw props.value.error;\n            }\n        }\n    }\n    const promise = props.value.promise.then(useBindInvokeContext(props.onResolved), useBindInvokeContext(props.onRejected));\n    // Resource path\n    return jsx(Fragment, {\n        children: promise,\n    });\n};\nexport const _createResourceReturn = (opts) => {\n    const resource = {\n        __brand: 'resource',\n        promise: undefined,\n        resolved: undefined,\n        error: undefined,\n        state: 'pending',\n        timeout: opts?.timeout,\n    };\n    return resource;\n};\nexport const createResourceReturn = (containerState, opts, initialPromise) => {\n    const result = _createResourceReturn(opts);\n    result.promise = initialPromise;\n    const resource = createProxy(result, containerState, undefined);\n    return resource;\n};\nexport const getInternalResource = (resource) => {\n    return getProxyTarget(resource);\n};\nexport const isResourceReturn = (obj) => {\n    return isObject(obj) && obj.__brand === 'resource';\n};\nexport const serializeResource = (resource, getObjId) => {\n    const state = resource.state;\n    if (state === 'resolved') {\n        return `0 ${getObjId(resource.resolved)}`;\n    }\n    else if (state === 'pending') {\n        return `1`;\n    }\n    else {\n        return `2 ${getObjId(resource.error)}`;\n    }\n};\nexport const parseResourceReturn = (data) => {\n    const [first, id] = data.split(' ');\n    const result = _createResourceReturn(undefined);\n    result.promise = Promise.resolve();\n    if (first === '0') {\n        result.state = 'resolved';\n        result.resolved = id;\n    }\n    else if (first === '1') {\n        result.state = 'pending';\n        result.promise = new Promise(() => { });\n    }\n    else if (first === '2') {\n        result.state = 'rejected';\n        result.error = id;\n    }\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlc291cmNlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUMsT0FBTyxFQUFFLENBQUMsRUFBTyxNQUFNLHNCQUFzQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNoRCxPQUFPLEVBSUwsV0FBVyxFQUNYLGlCQUFpQixFQUNqQixvQkFBb0IsRUFFcEIsS0FBSyxHQUNOLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUVsRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3pDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBZ0I1RCw2Q0FBNkM7QUFDN0MseUNBQXlDO0FBQ3pDLDBDQUEwQztBQUMxQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FxREc7QUFDSCxVQUFVO0FBQ1YsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLENBQzVCLEdBQXVCLEVBQ3ZCLElBQXNCLEVBQ0gsRUFBRTtJQUNyQixNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLEVBQXFCLENBQUM7SUFDckUsSUFBSSxHQUFHLElBQUksSUFB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LEtBQUssR0FBRyxFQUFFO1FBQ3hCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQzFCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsRUFBUyxDQUFDO0tBQzFCO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlUHJveHksIGdldFByb3h5VGFyZ2V0IH0gZnJvbSAnLi4vb2JqZWN0L3Etb2JqZWN0JztcbmltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tICcuLi9wcm9wcy9wcm9wcyc7XG5pbXBvcnQgeyAkLCBRUkwgfSBmcm9tICcuLi9pbXBvcnQvcXJsLnB1YmxpYyc7XG5pbXBvcnQgeyBhc3NlcnRRcmwgfSBmcm9tICcuLi9pbXBvcnQvcXJsLWNsYXNzJztcbmltcG9ydCB7XG4gIFJlc291cmNlUmV0dXJuLFxuICBSZXNvdXJjZURlc2NyaXB0b3IsXG4gIFJlc291cmNlRm4sXG4gIHJ1blJlc291cmNlLFxuICBXYXRjaEZsYWdzSXNEaXJ0eSxcbiAgV2F0Y2hGbGFnc0lzUmVzb3VyY2UsXG4gIFJlc291cmNlUmV0dXJuSW50ZXJuYWwsXG4gIFdhdGNoLFxufSBmcm9tICcuL3VzZS13YXRjaCc7XG5pbXBvcnQgeyBGcmFnbWVudCwganN4IH0gZnJvbSAnLi4vcmVuZGVyL2pzeC9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEpTWE5vZGUgfSBmcm9tICcuLi9yZW5kZXIvanN4L3R5cGVzL2pzeC1ub2RlJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnLi4vcGxhdGZvcm0vcGxhdGZvcm0nO1xuaW1wb3J0IHsgdXNlQmluZEludm9rZUNvbnRleHQgfSBmcm9tICcuL3VzZS1jb3JlJztcblxuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgR2V0T2JqSUQgfSBmcm9tICcuLi9vYmplY3Qvc3RvcmUnO1xuaW1wb3J0IHR5cGUgeyBDb250YWluZXJTdGF0ZSB9IGZyb20gJy4uL3JlbmRlci9jb250YWluZXInO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKlxuICogT3B0aW9ucyB0byBwYXNzIHRvIGB1c2VSZXNvdXJjZSQoKWBcbiAqXG4gKiBAc2VlIHVzZVJlc291cmNlXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVzb3VyY2VPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzLiBJZiB0aGUgcmVzb3VyY2UgdGFrZXMgbW9yZSB0aGFuIHRoZSBzcGVjaWZpZWQgbWlsbGlzZWNvbmQsIGl0IHdpbGwgdGltZW91dC5cbiAgICogUmVzdWx0aW5nIG9uIGEgcmVqZWN0ZWQgcmVzb3VyY2UuXG4gICAqL1xuICB0aW1lb3V0PzogbnVtYmVyO1xufVxuXG4vLyA8ZG9jcyBtYXJrZG93bj1cIi4uL3JlYWRtZS5tZCN1c2VSZXNvdXJjZVwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZXNvdXJjZSBpbnN0ZWFkKVxuLyoqXG4gKiBUaGlzIG1ldGhvZCB3b3JrcyBsaWtlIGFuIGFzeW5jIG1lbW9pemVkIGZ1bmN0aW9uIHRoYXQgcnVucyB3aGVuZXZlciBzb21lIHRyYWNrZWQgdmFsdWVcbiAqIGNoYW5nZXMgYW5kIHJldHVybnMgc29tZSBkYXRhLlxuICpcbiAqIGB1c2VSZXNvdWNlYCBob3dldmVyIHJldHVybnMgaW1tZWRpYXRlIGEgYFJlc291cmNlUmV0dXJuYCBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgZGF0YSBhbmQgYVxuICogc3RhdGUgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGRhdGEgaXMgYXZhaWxhYmxlIG9yIG5vdC5cbiAqXG4gKiBUaGUgc3RhdHVzIGNhbiBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAtICdwZW5kaW5nJyAtIHRoZSBkYXRhIGlzIG5vdCB5ZXQgYXZhaWxhYmxlLlxuICogLSAncmVzb2x2ZWQnIC0gdGhlIGRhdGEgaXMgYXZhaWxhYmxlLlxuICogLSAncmVqZWN0ZWQnIC0gdGhlIGRhdGEgaXMgbm90IGF2YWlsYWJsZSBkdWUgdG8gYW4gZXJyb3Igb3IgdGltZW91dC5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIEV4YW1wbGUgc2hvd2luZyBob3cgYHVzZVJlc291cmNlYCB0byBwZXJmb3JtIGEgZmV0Y2ggdG8gcmVxdWVzdCB0aGUgd2VhdGhlciwgd2hlbmV2ZXIgdGhlXG4gKiBpbnB1dCBjaXR5IG5hbWUgY2hhbmdlcy5cbiAqXG4gKiBgYGB0c3hcbiAqIGNvbnN0IENtcCA9IGNvbXBvbmVudCQoKCkgPT4ge1xuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICBjaXR5OiAnJyxcbiAqICAgfSk7XG4gKlxuICogICBjb25zdCB3ZWF0aGVyUmVzb3VyY2UgPSB1c2VSZXNvdXJjZSQ8YW55Pihhc3luYyAoeyB0cmFjaywgY2xlYW51cCB9KSA9PiB7XG4gKiAgICAgY29uc3QgY2l0eU5hbWUgPSB0cmFjaygoKSA9PiBzdG9yZS5jaXR5KTtcbiAqICAgICBjb25zdCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gKiAgICAgY2xlYW51cCgoKSA9PiBhYm9ydENvbnRyb2xsZXIuYWJvcnQoJ2NsZWFudXAnKSk7XG4gKiAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYGh0dHA6Ly93ZWF0aGVyZGF0YS5jb20/Y2l0eT0ke2NpdHlOYW1lfWAsIHtcbiAqICAgICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyLnNpZ25hbCxcbiAqICAgICB9KTtcbiAqICAgICBjb25zdCBkYXRhID0gcmVzLmpzb24oKTtcbiAqICAgICByZXR1cm4gZGF0YTtcbiAqICAgfSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxkaXY+XG4gKiAgICAgICA8aW5wdXQgbmFtZT1cImNpdHlcIiBvbklucHV0JD17KGV2OiBhbnkpID0+IChzdG9yZS5jaXR5ID0gZXYudGFyZ2V0LnZhbHVlKX0gLz5cbiAqICAgICAgIDxSZXNvdXJjZVxuICogICAgICAgICB2YWx1ZT17d2VhdGhlclJlc291cmNlfVxuICogICAgICAgICBvblJlc29sdmVkPXsod2VhdGhlcikgPT4ge1xuICogICAgICAgICAgIHJldHVybiA8ZGl2PlRlbXBlcmF0dXJlOiB7d2VhdGhlci50ZW1wfTwvZGl2PjtcbiAqICAgICAgICAgfX1cbiAqICAgICAgIC8+XG4gKiAgICAgPC9kaXY+XG4gKiAgICk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBzZWUgUmVzb3VyY2VcbiAqIEBzZWUgUmVzb3VyY2VSZXR1cm5cbiAqXG4gKiBAcHVibGljXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VSZXNvdXJjZVFybCA9IDxUPihcbiAgcXJsOiBRUkw8UmVzb3VyY2VGbjxUPj4sXG4gIG9wdHM/OiBSZXNvdXJjZU9wdGlvbnNcbik6IFJlc291cmNlUmV0dXJuPFQ+ID0+IHtcbiAgY29uc3QgeyBnZXQsIHNldCwgaSwgY3R4IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8UmVzb3VyY2VSZXR1cm48VD4+KCk7XG4gIGlmIChnZXQgIT0gbnVsbCkge1xuICAgIHJldHVybiBnZXQ7XG4gIH1cbiAgYXNzZXJ0UXJsKHFybCk7XG5cbiAgY29uc3QgY29udGFpbmVyU3RhdGUgPSBjdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJDtcbiAgY29uc3QgcmVzb3VyY2UgPSBjcmVhdGVSZXNvdXJjZVJldHVybjxUPihjb250YWluZXJTdGF0ZSwgb3B0cyk7XG4gIGNvbnN0IGVsID0gY3R4LiRob3N0RWxlbWVudCQ7XG4gIGNvbnN0IHdhdGNoID0gbmV3IFdhdGNoKFxuICAgIFdhdGNoRmxhZ3NJc0RpcnR5IHwgV2F0Y2hGbGFnc0lzUmVzb3VyY2UsXG4gICAgaSxcbiAgICBlbCxcbiAgICBxcmwsXG4gICAgcmVzb3VyY2VcbiAgKSBhcyBSZXNvdXJjZURlc2NyaXB0b3I8YW55PjtcbiAgY29uc3QgcHJldmlvdXNXYWl0ID0gUHJvbWlzZS5hbGwoY3R4LiR3YWl0T24kLnNsaWNlKCkpO1xuICBjb25zdCBlbEN0eCA9IGdldENvbnRleHQoZWwpO1xuICBydW5SZXNvdXJjZSh3YXRjaCwgY29udGFpbmVyU3RhdGUsIHByZXZpb3VzV2FpdCk7XG4gIGlmICghZWxDdHguJHdhdGNoZXMkKSB7XG4gICAgZWxDdHguJHdhdGNoZXMkID0gW107XG4gIH1cbiAgZWxDdHguJHdhdGNoZXMkLnB1c2god2F0Y2gpO1xuICBzZXQocmVzb3VyY2UpO1xuXG4gIHJldHVybiByZXNvdXJjZTtcbn07XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlc291cmNlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVJlc291cmNlIGluc3RlYWQpXG4vKipcbiAqIFRoaXMgbWV0aG9kIHdvcmtzIGxpa2UgYW4gYXN5bmMgbWVtb2l6ZWQgZnVuY3Rpb24gdGhhdCBydW5zIHdoZW5ldmVyIHNvbWUgdHJhY2tlZCB2YWx1ZVxuICogY2hhbmdlcyBhbmQgcmV0dXJucyBzb21lIGRhdGEuXG4gKlxuICogYHVzZVJlc291Y2VgIGhvd2V2ZXIgcmV0dXJucyBpbW1lZGlhdGUgYSBgUmVzb3VyY2VSZXR1cm5gIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBkYXRhIGFuZCBhXG4gKiBzdGF0ZSB0aGF0IGluZGljYXRlcyBpZiB0aGUgZGF0YSBpcyBhdmFpbGFibGUgb3Igbm90LlxuICpcbiAqIFRoZSBzdGF0dXMgY2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOlxuICpcbiAqIC0gJ3BlbmRpbmcnIC0gdGhlIGRhdGEgaXMgbm90IHlldCBhdmFpbGFibGUuXG4gKiAtICdyZXNvbHZlZCcgLSB0aGUgZGF0YSBpcyBhdmFpbGFibGUuXG4gKiAtICdyZWplY3RlZCcgLSB0aGUgZGF0YSBpcyBub3QgYXZhaWxhYmxlIGR1ZSB0byBhbiBlcnJvciBvciB0aW1lb3V0LlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogRXhhbXBsZSBzaG93aW5nIGhvdyBgdXNlUmVzb3VyY2VgIHRvIHBlcmZvcm0gYSBmZXRjaCB0byByZXF1ZXN0IHRoZSB3ZWF0aGVyLCB3aGVuZXZlciB0aGVcbiAqIGlucHV0IGNpdHkgbmFtZSBjaGFuZ2VzLlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgQ21wID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoe1xuICogICAgIGNpdHk6ICcnLFxuICogICB9KTtcbiAqXG4gKiAgIGNvbnN0IHdlYXRoZXJSZXNvdXJjZSA9IHVzZVJlc291cmNlJDxhbnk+KGFzeW5jICh7IHRyYWNrLCBjbGVhbnVwIH0pID0+IHtcbiAqICAgICBjb25zdCBjaXR5TmFtZSA9IHRyYWNrKCgpID0+IHN0b3JlLmNpdHkpO1xuICogICAgIGNvbnN0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAqICAgICBjbGVhbnVwKCgpID0+IGFib3J0Q29udHJvbGxlci5hYm9ydCgnY2xlYW51cCcpKTtcbiAqICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cDovL3dlYXRoZXJkYXRhLmNvbT9jaXR5PSR7Y2l0eU5hbWV9YCwge1xuICogICAgICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICogICAgIH0pO1xuICogICAgIGNvbnN0IGRhdGEgPSByZXMuanNvbigpO1xuICogICAgIHJldHVybiBkYXRhO1xuICogICB9KTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPGRpdj5cbiAqICAgICAgIDxpbnB1dCBuYW1lPVwiY2l0eVwiIG9uSW5wdXQkPXsoZXY6IGFueSkgPT4gKHN0b3JlLmNpdHkgPSBldi50YXJnZXQudmFsdWUpfSAvPlxuICogICAgICAgPFJlc291cmNlXG4gKiAgICAgICAgIHZhbHVlPXt3ZWF0aGVyUmVzb3VyY2V9XG4gKiAgICAgICAgIG9uUmVzb2x2ZWQ9eyh3ZWF0aGVyKSA9PiB7XG4gKiAgICAgICAgICAgcmV0dXJuIDxkaXY+VGVtcGVyYXR1cmU6IHt3ZWF0aGVyLnRlbXB9PC9kaXY+O1xuICogICAgICAgICB9fVxuICogICAgICAgLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSBSZXNvdXJjZVxuICogQHNlZSBSZXNvdXJjZVJldHVyblxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVJlc291cmNlJCA9IDxUPihcbiAgZ2VuZXJhdG9yRm46IFJlc291cmNlRm48VD4sXG4gIG9wdHM/OiBSZXNvdXJjZU9wdGlvbnNcbik6IFJlc291cmNlUmV0dXJuPFQ+ID0+IHtcbiAgcmV0dXJuIHVzZVJlc291cmNlUXJsPFQ+KCQoZ2VuZXJhdG9yRm4pLCBvcHRzKTtcbn07XG5cbi8qKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc291cmNlUHJvcHM8VD4ge1xuICB2YWx1ZTogUmVzb3VyY2VSZXR1cm48VD47XG4gIG9uUmVzb2x2ZWQ6ICh2YWx1ZTogVCkgPT4gSlNYTm9kZTtcbiAgb25QZW5kaW5nPzogKCkgPT4gSlNYTm9kZTtcbiAgb25SZWplY3RlZD86IChyZWFzb246IGFueSkgPT4gSlNYTm9kZTtcbn1cblxuLy8gPGRvY3MgbWFya2Rvd249XCIuLi9yZWFkbWUubWQjdXNlUmVzb3VyY2VcIj5cbi8vICEhRE8gTk9UIEVESVQgVEhJUyBDT01NRU5UIERJUkVDVExZISEhXG4vLyAoZWRpdCAuLi9yZWFkbWUubWQjdXNlUmVzb3VyY2UgaW5zdGVhZClcbi8qKlxuICogVGhpcyBtZXRob2Qgd29ya3MgbGlrZSBhbiBhc3luYyBtZW1vaXplZCBmdW5jdGlvbiB0aGF0IHJ1bnMgd2hlbmV2ZXIgc29tZSB0cmFja2VkIHZhbHVlXG4gKiBjaGFuZ2VzIGFuZCByZXR1cm5zIHNvbWUgZGF0YS5cbiAqXG4gKiBgdXNlUmVzb3VjZWAgaG93ZXZlciByZXR1cm5zIGltbWVkaWF0ZSBhIGBSZXNvdXJjZVJldHVybmAgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIGRhdGEgYW5kIGFcbiAqIHN0YXRlIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBkYXRhIGlzIGF2YWlsYWJsZSBvciBub3QuXG4gKlxuICogVGhlIHN0YXR1cyBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogLSAncGVuZGluZycgLSB0aGUgZGF0YSBpcyBub3QgeWV0IGF2YWlsYWJsZS5cbiAqIC0gJ3Jlc29sdmVkJyAtIHRoZSBkYXRhIGlzIGF2YWlsYWJsZS5cbiAqIC0gJ3JlamVjdGVkJyAtIHRoZSBkYXRhIGlzIG5vdCBhdmFpbGFibGUgZHVlIHRvIGFuIGVycm9yIG9yIHRpbWVvdXQuXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBFeGFtcGxlIHNob3dpbmcgaG93IGB1c2VSZXNvdXJjZWAgdG8gcGVyZm9ybSBhIGZldGNoIHRvIHJlcXVlc3QgdGhlIHdlYXRoZXIsIHdoZW5ldmVyIHRoZVxuICogaW5wdXQgY2l0eSBuYW1lIGNoYW5nZXMuXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBDbXAgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSh7XG4gKiAgICAgY2l0eTogJycsXG4gKiAgIH0pO1xuICpcbiAqICAgY29uc3Qgd2VhdGhlclJlc291cmNlID0gdXNlUmVzb3VyY2UkPGFueT4oYXN5bmMgKHsgdHJhY2ssIGNsZWFudXAgfSkgPT4ge1xuICogICAgIGNvbnN0IGNpdHlOYW1lID0gdHJhY2soKCkgPT4gc3RvcmUuY2l0eSk7XG4gKiAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICogICAgIGNsZWFudXAoKCkgPT4gYWJvcnRDb250cm9sbGVyLmFib3J0KCdjbGVhbnVwJykpO1xuICogICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwOi8vd2VhdGhlcmRhdGEuY29tP2NpdHk9JHtjaXR5TmFtZX1gLCB7XG4gKiAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gKiAgICAgfSk7XG4gKiAgICAgY29uc3QgZGF0YSA9IHJlcy5qc29uKCk7XG4gKiAgICAgcmV0dXJuIGRhdGE7XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGlucHV0IG5hbWU9XCJjaXR5XCIgb25JbnB1dCQ9eyhldjogYW55KSA9PiAoc3RvcmUuY2l0eSA9IGV2LnRhcmdldC52YWx1ZSl9IC8+XG4gKiAgICAgICA8UmVzb3VyY2VcbiAqICAgICAgICAgdmFsdWU9e3dlYXRoZXJSZXNvdXJjZX1cbiAqICAgICAgICAgb25SZXNvbHZlZD17KHdlYXRoZXIpID0+IHtcbiAqICAgICAgICAgICByZXR1cm4gPGRpdj5UZW1wZXJhdHVyZToge3dlYXRoZXIudGVtcH08L2Rpdj47XG4gKiAgICAgICAgIH19XG4gKiAgICAgICAvPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAc2VlIFJlc291cmNlXG4gKiBAc2VlIFJlc291cmNlUmV0dXJuXG4gKlxuICogQHB1YmxpY1xuICovXG4vLyA8L2RvY3M+XG5leHBvcnQgY29uc3QgUmVzb3VyY2UgPSA8VD4ocHJvcHM6IFJlc291cmNlUHJvcHM8VD4pOiBKU1hOb2RlID0+IHtcbiAgY29uc3QgaXNCcm93c2VyID0gIWlzU2VydmVyKCk7XG4gIGlmIChpc0Jyb3dzZXIpIHtcbiAgICBpZiAocHJvcHMub25SZWplY3RlZCkge1xuICAgICAgcHJvcHMudmFsdWUucHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgICBpZiAocHJvcHMudmFsdWUuc3RhdGUgPT09ICdyZWplY3RlZCcpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLm9uUmVqZWN0ZWQocHJvcHMudmFsdWUuZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocHJvcHMub25QZW5kaW5nKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHByb3BzLnZhbHVlLnN0YXRlO1xuICAgICAgaWYgKHN0YXRlID09PSAncGVuZGluZycpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLm9uUGVuZGluZygpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ3Jlc29sdmVkJykge1xuICAgICAgICByZXR1cm4gcHJvcHMub25SZXNvbHZlZChwcm9wcy52YWx1ZS5yZXNvbHZlZCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRlID09PSAncmVqZWN0ZWQnKSB7XG4gICAgICAgIHRocm93IHByb3BzLnZhbHVlLmVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHByb21pc2U6IGFueSA9IHByb3BzLnZhbHVlLnByb21pc2UudGhlbihcbiAgICB1c2VCaW5kSW52b2tlQ29udGV4dChwcm9wcy5vblJlc29sdmVkKSxcbiAgICB1c2VCaW5kSW52b2tlQ29udGV4dChwcm9wcy5vblJlamVjdGVkKVxuICApO1xuXG4gIC8vIFJlc291cmNlIHBhdGhcbiAgcmV0dXJuIGpzeChGcmFnbWVudCwge1xuICAgIGNoaWxkcmVuOiBwcm9taXNlLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBfY3JlYXRlUmVzb3VyY2VSZXR1cm4gPSA8VD4ob3B0cz86IFJlc291cmNlT3B0aW9ucyk6IFJlc291cmNlUmV0dXJuPFQ+ID0+IHtcbiAgY29uc3QgcmVzb3VyY2U6IFJlc291cmNlUmV0dXJuPFQ+ID0ge1xuICAgIF9fYnJhbmQ6ICdyZXNvdXJjZScsXG4gICAgcHJvbWlzZTogdW5kZWZpbmVkIGFzIG5ldmVyLFxuICAgIHJlc29sdmVkOiB1bmRlZmluZWQgYXMgbmV2ZXIsXG4gICAgZXJyb3I6IHVuZGVmaW5lZCBhcyBuZXZlcixcbiAgICBzdGF0ZTogJ3BlbmRpbmcnLFxuICAgIHRpbWVvdXQ6IG9wdHM/LnRpbWVvdXQsXG4gIH07XG4gIHJldHVybiByZXNvdXJjZTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVSZXNvdXJjZVJldHVybiA9IDxUPihcbiAgY29udGFpbmVyU3RhdGU6IENvbnRhaW5lclN0YXRlLFxuICBvcHRzPzogUmVzb3VyY2VPcHRpb25zLFxuICBpbml0aWFsUHJvbWlzZT86IFByb21pc2U8VD5cbik6IFJlc291cmNlUmV0dXJuPFQ+ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0gX2NyZWF0ZVJlc291cmNlUmV0dXJuPFQ+KG9wdHMpO1xuICByZXN1bHQucHJvbWlzZSA9IGluaXRpYWxQcm9taXNlIGFzIGFueTtcbiAgY29uc3QgcmVzb3VyY2UgPSBjcmVhdGVQcm94eShyZXN1bHQsIGNvbnRhaW5lclN0YXRlLCB1bmRlZmluZWQpO1xuICByZXR1cm4gcmVzb3VyY2U7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SW50ZXJuYWxSZXNvdXJjZSA9IDxUPihyZXNvdXJjZTogUmVzb3VyY2VSZXR1cm48VD4pOiBSZXNvdXJjZVJldHVybkludGVybmFsPFQ+ID0+IHtcbiAgcmV0dXJuIGdldFByb3h5VGFyZ2V0KHJlc291cmNlKSBhcyBhbnk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNSZXNvdXJjZVJldHVybiA9IChvYmo6IGFueSk6IG9iaiBpcyBSZXNvdXJjZVJldHVybjxhbnk+ID0+IHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqLl9fYnJhbmQgPT09ICdyZXNvdXJjZSc7XG59O1xuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplUmVzb3VyY2UgPSAocmVzb3VyY2U6IFJlc291cmNlUmV0dXJuPGFueT4sIGdldE9iaklkOiBHZXRPYmpJRCkgPT4ge1xuICBjb25zdCBzdGF0ZSA9IHJlc291cmNlLnN0YXRlO1xuICBpZiAoc3RhdGUgPT09ICdyZXNvbHZlZCcpIHtcbiAgICByZXR1cm4gYDAgJHtnZXRPYmpJZChyZXNvdXJjZS5yZXNvbHZlZCl9YDtcbiAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7XG4gICAgcmV0dXJuIGAxYDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYDIgJHtnZXRPYmpJZChyZXNvdXJjZS5lcnJvcil9YDtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlUmVzb3VyY2VSZXR1cm4gPSA8VD4oZGF0YTogc3RyaW5nKTogUmVzb3VyY2VSZXR1cm48VD4gPT4ge1xuICBjb25zdCBbZmlyc3QsIGlkXSA9IGRhdGEuc3BsaXQoJyAnKTtcbiAgY29uc3QgcmVzdWx0ID0gX2NyZWF0ZVJlc291cmNlUmV0dXJuPFQ+KHVuZGVmaW5lZCk7XG4gIHJlc3VsdC5wcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCkgYXMgYW55O1xuICBpZiAoZmlyc3QgPT09ICcwJykge1xuICAgIHJlc3VsdC5zdGF0ZSA9ICdyZXNvbHZlZCc7XG4gICAgcmVzdWx0LnJlc29sdmVkID0gaWQgYXMgYW55O1xuICB9IGVsc2UgaWYgKGZpcnN0ID09PSAnMScpIHtcbiAgICByZXN1bHQuc3RhdGUgPSAncGVuZGluZyc7XG4gICAgcmVzdWx0LnByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG4gIH0gZWxzZSBpZiAoZmlyc3QgPT09ICcyJykge1xuICAgIHJlc3VsdC5zdGF0ZSA9ICdyZWplY3RlZCc7XG4gICAgcmVzdWx0LmVycm9yID0gaWQgYXMgYW55O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIl19","import { componentQrl, isQwikComponent } from '../component/component.public';\nimport { parseQRL, serializeQRL } from '../import/qrl';\nimport { isQrl } from '../import/qrl-class';\nimport { isResourceReturn, parseResourceReturn, serializeResource } from '../use/use-resource';\nimport { isSubscriberDescriptor, parseWatch, serializeWatch, } from '../use/use-watch';\nimport { isDocument } from '../util/element';\nimport { QObjectManagerSymbol, SignalImpl, SignalWrapper } from './q-object';\nimport { collectSubscriptions, collectValue } from './store';\n/**\n * 0, 8, 9, A, B, C, D\n\\0: null character (U+0000 NULL) (only if the next character is not a decimal digit; else it’s an octal escape sequence)\n\\b: backspace (U+0008 BACKSPACE)\n\\t: horizontal tab (U+0009 CHARACTER TABULATION)\n\\n: line feed (U+000A LINE FEED)\n\\v: vertical tab (U+000B LINE TABULATION)\n\\f: form feed (U+000C FORM FEED)\n\\r: carriage return (U+000D CARRIAGE RETURN)\n\\\": double quote (U+0022 QUOTATION MARK)\n\\': single quote (U+0027 APOSTROPHE)\n\\\\: backslash (U+005C REVERSE SOLIDUS)\n */\nexport const UNDEFINED_PREFIX = '\\u0001';\nconst QRLSerializer = {\n    prefix: '\\u0002',\n    test: (v) => isQrl(v),\n    collect: (v, collector, leaks) => {\n        if (v.$captureRef$) {\n            for (const item of v.$captureRef$) {\n                collectValue(item, collector, leaks);\n            }\n        }\n    },\n    serialize: (obj, getObjId) => {\n        return serializeQRL(obj, {\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        return parseQRL(data, containerState.$containerEl$);\n    },\n    fill: (qrl, getObject) => {\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst WatchSerializer = {\n    prefix: '\\u0003',\n    test: (v) => isSubscriberDescriptor(v),\n    collect: (v, collector, leaks) => {\n        collectValue(v.$qrl$, collector, leaks);\n        if (v.$resource$) {\n            collectValue(v.$resource$, collector, leaks);\n        }\n    },\n    serialize: (obj, getObjId) => serializeWatch(obj, getObjId),\n    prepare: (data) => parseWatch(data),\n    fill: (watch, getObject) => {\n        watch.$el$ = getObject(watch.$el$);\n        watch.$qrl$ = getObject(watch.$qrl$);\n        if (watch.$resource$) {\n            watch.$resource$ = getObject(watch.$resource$);\n        }\n    },\n};\nconst ResourceSerializer = {\n    prefix: '\\u0004',\n    test: (v) => isResourceReturn(v),\n    collect: (obj, collector, leaks) => {\n        collectValue(obj.promise, collector, leaks);\n        collectValue(obj.resolved, collector, leaks);\n    },\n    serialize: (obj, getObjId) => {\n        return serializeResource(obj, getObjId);\n    },\n    prepare: (data) => {\n        return parseResourceReturn(data);\n    },\n    fill: (resource, getObject) => {\n        if (resource.state === 'resolved') {\n            resource.resolved = getObject(resource.resolved);\n            resource.promise = Promise.resolve(resource.resolved);\n        }\n        else if (resource.state === 'rejected') {\n            const p = Promise.reject(resource.error);\n            p.catch(() => null);\n            resource.error = getObject(resource.error);\n            resource.promise = p;\n        }\n    },\n};\nconst URLSerializer = {\n    prefix: '\\u0005',\n    test: (v) => v instanceof URL,\n    serialize: (obj) => obj.href,\n    prepare: (data) => new URL(data),\n    fill: undefined,\n};\nconst DateSerializer = {\n    prefix: '\\u0006',\n    test: (v) => v instanceof Date,\n    serialize: (obj) => obj.toISOString(),\n    prepare: (data) => new Date(data),\n    fill: undefined,\n};\nconst RegexSerializer = {\n    prefix: '\\u0007',\n    test: (v) => v instanceof RegExp,\n    serialize: (obj) => `${obj.flags} ${obj.source}`,\n    prepare: (data) => {\n        const space = data.indexOf(' ');\n        const source = data.slice(space + 1);\n        const flags = data.slice(0, space);\n        return new RegExp(source, flags);\n    },\n    fill: undefined,\n};\nconst ErrorSerializer = {\n    prefix: '\\u000E',\n    test: (v) => v instanceof Error,\n    serialize: (obj) => {\n        return obj.message;\n    },\n    prepare: (text) => {\n        const err = new Error(text);\n        err.stack = undefined;\n        return err;\n    },\n    fill: undefined,\n};\nconst DocumentSerializer = {\n    prefix: '\\u000F',\n    test: (v) => isDocument(v),\n    serialize: undefined,\n    prepare: (_, _c, doc) => {\n        return doc;\n    },\n    fill: undefined,\n};\nexport const SERIALIZABLE_STATE = Symbol('serializable-data');\nconst ComponentSerializer = {\n    prefix: '\\u0010',\n    test: (obj) => isQwikComponent(obj),\n    serialize: (obj, getObjId) => {\n        const [qrl] = obj[SERIALIZABLE_STATE];\n        return serializeQRL(qrl, {\n            $getObjId$: getObjId,\n        });\n    },\n    prepare: (data, containerState) => {\n        const optionsIndex = data.indexOf('{');\n        const qrlString = optionsIndex == -1 ? data : data.slice(0, optionsIndex);\n        const qrl = parseQRL(qrlString, containerState.$containerEl$);\n        return componentQrl(qrl);\n    },\n    fill: (component, getObject) => {\n        const [qrl] = component[SERIALIZABLE_STATE];\n        if (qrl.$capture$ && qrl.$capture$.length > 0) {\n            qrl.$captureRef$ = qrl.$capture$.map(getObject);\n            qrl.$capture$ = null;\n        }\n    },\n};\nconst PureFunctionSerializer = {\n    prefix: '\\u0011',\n    test: (obj) => typeof obj === 'function' && obj.__qwik_serializable__ !== undefined,\n    serialize: (obj) => {\n        return obj.toString();\n    },\n    prepare: (data) => {\n        const fn = new Function('return ' + data)();\n        fn.__qwik_serializable__ = true;\n        return fn;\n    },\n    fill: undefined,\n};\nconst SignalSerializer = {\n    prefix: '\\u0012',\n    test: (v) => v instanceof SignalImpl,\n    collect: (obj, collector, leaks) => {\n        collectValue(obj.untrackedValue, collector, leaks);\n        if (leaks) {\n            collectSubscriptions(obj[QObjectManagerSymbol], collector);\n        }\n        return obj;\n    },\n    serialize: (obj, getObjId) => {\n        return getObjId(obj.untrackedValue);\n    },\n    prepare: (data, containerState) => {\n        return new SignalImpl(data, containerState.$subsManager$.$createManager$());\n    },\n    subs: (signal, subs) => {\n        signal[QObjectManagerSymbol].$addSubs$(subs);\n    },\n    fill: (signal, getObject) => {\n        signal.untrackedValue = getObject(signal.untrackedValue);\n    },\n};\nconst SignalWrapperSerializer = {\n    prefix: '\\u0013',\n    test: (v) => v instanceof SignalWrapper,\n    collect(obj, collector, leaks) {\n        collectValue(obj.ref, collector, leaks);\n        return obj;\n    },\n    serialize: (obj, getObjId) => {\n        return `${getObjId(obj.ref)} ${obj.prop}`;\n    },\n    prepare: (data) => {\n        const [id, prop] = data.split(' ');\n        return new SignalWrapper(id, prop);\n    },\n    fill: (signal, getObject) => {\n        signal.ref = getObject(signal.ref);\n    },\n};\nconst NoFiniteNumberSerializer = {\n    prefix: '\\u0014',\n    test: (v) => typeof v === 'number',\n    serialize: (v) => {\n        return String(v);\n    },\n    prepare: (data) => {\n        return Number(data);\n    },\n    fill: undefined,\n};\nconst serializers = [\n    QRLSerializer,\n    SignalSerializer,\n    SignalWrapperSerializer,\n    WatchSerializer,\n    ResourceSerializer,\n    URLSerializer,\n    DateSerializer,\n    RegexSerializer,\n    ErrorSerializer,\n    DocumentSerializer,\n    ComponentSerializer,\n    PureFunctionSerializer,\n    NoFiniteNumberSerializer,\n];\nconst collectorSerializers = /*#__PURE__*/ serializers.filter((a) => a.collect);\nexport const canSerialize = (obj) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const collectDeps = (obj, collector, leaks) => {\n    for (const s of collectorSerializers) {\n        if (s.test(obj)) {\n            s.collect(obj, collector, leaks);\n            return true;\n        }\n    }\n    return false;\n};\nexport const serializeValue = (obj, getObjID, containerState) => {\n    for (const s of serializers) {\n        if (s.test(obj)) {\n            let value = s.prefix;\n            if (s.serialize) {\n                value += s.serialize(obj, getObjID, containerState);\n            }\n            return value;\n        }\n    }\n    return undefined;\n};\nexport const createParser = (getObject, containerState, doc) => {\n    const fillMap = new Map();\n    const subsMap = new Map();\n    return {\n        prepare(data) {\n            for (const s of serializers) {\n                const prefix = s.prefix;\n                if (data.startsWith(prefix)) {\n                    const value = s.prepare(data.slice(prefix.length), containerState, doc);\n                    if (s.fill) {\n                        fillMap.set(value, s);\n                    }\n                    if (s.subs) {\n                        subsMap.set(value, s);\n                    }\n                    return value;\n                }\n            }\n            return data;\n        },\n        subs(obj, subs) {\n            const serializer = subsMap.get(obj);\n            if (serializer) {\n                serializer.subs(obj, subs, containerState);\n                return true;\n            }\n            return false;\n        },\n        fill(obj) {\n            const serializer = fillMap.get(obj);\n            if (serializer) {\n                serializer.fill(obj, getObject, containerState);\n                return true;\n            }\n            return false;\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertDefined, assertEqual, assertTrue } from '../assert/assert';\nimport { getContext, tryGetContext } from '../props/props';\nimport { getDocument } from '../util/dom';\nimport { assertElement, assertQwikElement, isComment, isDocument, isElement, isNode, isQwikElement, isText, isVirtualElement, } from '../util/element';\nimport { logDebug, logWarn } from '../util/log';\nimport { ELEMENT_ID, ELEMENT_ID_PREFIX, QContainerAttr, QScopedStyle, QStyle, } from '../util/markers';\nimport { qDev } from '../util/qdev';\nimport { createProxy, fastShouldSerialize, getOrCreateProxy, getProxyFlags, getProxyManager, getProxyTarget, isConnected, QObjectFlagsSymbol, SignalImpl, } from './q-object';\nimport { destroyWatch, WatchFlagsIsDirty } from '../use/use-watch';\nimport { emitEvent } from '../util/event';\nimport { qError, QError_containerAlreadyPaused, QError_missingObjectId, QError_verifySerializable, } from '../error/error';\nimport { isArray, isObject, isSerializableObject, isString } from '../util/types';\nimport { directGetAttribute, directSetAttribute } from '../render/fast-calls';\nimport { isNotNullable, isPromise } from '../util/promises';\nimport { collectDeps, createParser, serializeValue, UNDEFINED_PREFIX } from './serializers';\nimport { getContainerState, parseSubscription, serializeSubscription, } from '../render/container';\nimport { getQId } from '../render/execute-component';\nimport { findClose, processVirtualNodes, VirtualElementImpl, } from '../render/dom/virtual-element';\nimport { getDomListeners } from '../props/props-on';\nimport { fromKebabToCamelCase } from '../util/case';\nimport { domToVnode } from '../render/dom/visitor';\n// <docs markdown=\"../readme.md#pauseContainer\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#pauseContainer instead)\n/**\n * Serialize the current state of the application into DOM\n *\n * @alpha\n */\n// </docs>\nexport const pauseContainer = async (elmOrDoc, defaultParentJSON) => {\n    const doc = getDocument(elmOrDoc);\n    const documentElement = doc.documentElement;\n    const containerEl = isDocument(elmOrDoc) ? documentElement : elmOrDoc;\n    if (directGetAttribute(containerEl, QContainerAttr) === 'paused') {\n        throw qError(QError_containerAlreadyPaused);\n    }\n    const parentJSON = defaultParentJSON ?? (containerEl === doc.documentElement ? doc.body : containerEl);\n    const data = await pauseFromContainer(containerEl);\n    const script = doc.createElement('script');\n    directSetAttribute(script, 'type', 'qwik/json');\n    script.textContent = escapeText(JSON.stringify(data.state, undefined, qDev ? '  ' : undefined));\n    parentJSON.appendChild(script);\n    directSetAttribute(containerEl, QContainerAttr, 'paused');\n    return data;\n};\nexport const moveStyles = (containerEl, containerState) => {\n    const head = containerEl.ownerDocument.head;\n    containerEl.querySelectorAll('style[q\\\\:style]').forEach((el) => {\n        containerState.$styleIds$.add(directGetAttribute(el, QStyle));\n        head.appendChild(el);\n    });\n};\nexport const resumeContainer = (containerEl) => {\n    if (!isContainer(containerEl)) {\n        logWarn('Skipping hydration because parent element is not q:container');\n        return;\n    }\n    let maxId = 0;\n    const doc = getDocument(containerEl);\n    const isDocElement = containerEl === doc.documentElement;\n    const parentJSON = isDocElement ? doc.body : containerEl;\n    const script = getQwikJSON(parentJSON);\n    if (!script) {\n        logWarn('Skipping hydration qwik/json metadata was not found.');\n        return;\n    }\n    script.remove();\n    const containerState = getContainerState(containerEl);\n    moveStyles(containerEl, containerState);\n    const meta = JSON.parse(unescapeText(script.textContent || '{}'));\n    // Collect all elements\n    const elements = new Map();\n    const getObject = (id) => {\n        return getObjectImpl(id, elements, meta.objs, containerState);\n    };\n    const elementWalker = doc.createTreeWalker(containerEl, SHOW_COMMENT | SHOW_ELEMENT, {\n        acceptNode(node) {\n            if (isComment(node)) {\n                const data = node.data;\n                if (data.startsWith('qv ')) {\n                    const close = findClose(node);\n                    const virtual = new VirtualElementImpl(node, close);\n                    const id = directGetAttribute(virtual, ELEMENT_ID);\n                    if (id) {\n                        const elCtx = getContext(virtual);\n                        elCtx.$id$ = id;\n                        elements.set(ELEMENT_ID_PREFIX + id, virtual);\n                        maxId = Math.max(maxId, strToInt(id));\n                    }\n                }\n                else if (data.startsWith('t=')) {\n                    const id = data.slice(2);\n                    elements.set(ELEMENT_ID_PREFIX + data.slice(2), getTextNode(node));\n                    maxId = Math.max(maxId, strToInt(id));\n                }\n                return FILTER_SKIP;\n            }\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            return node.hasAttribute(ELEMENT_ID) ? FILTER_ACCEPT : FILTER_SKIP;\n        },\n    });\n    let el = null;\n    while ((el = elementWalker.nextNode())) {\n        assertElement(el);\n        const id = directGetAttribute(el, ELEMENT_ID);\n        assertDefined(id, `resume: element missed q:id`, el);\n        const elCtx = getContext(el);\n        elCtx.$id$ = id;\n        elCtx.$vdom$ = domToVnode(el);\n        elements.set(ELEMENT_ID_PREFIX + id, el);\n        maxId = Math.max(maxId, strToInt(id));\n    }\n    containerState.$elementIndex$ = ++maxId;\n    const parser = createParser(getObject, containerState, doc);\n    // Revive proxies with subscriptions into the proxymap\n    reviveValues(meta.objs, parser);\n    reviveSubscriptions(meta.objs, meta.subs, getObject, containerState, parser);\n    // Rebuild target objects\n    for (const obj of meta.objs) {\n        reviveNestedObjects(obj, getObject, parser);\n    }\n    for (const elementID of Object.keys(meta.ctx)) {\n        assertTrue(elementID.startsWith('#'), 'elementId must start with #');\n        const ctxMeta = meta.ctx[elementID];\n        const el = elements.get(elementID);\n        assertDefined(el, `resume: cant find dom node for id`, elementID);\n        assertQwikElement(el);\n        const elCtx = getContext(el);\n        const refMap = ctxMeta.r;\n        const seq = ctxMeta.s;\n        const host = ctxMeta.h;\n        const contexts = ctxMeta.c;\n        const watches = ctxMeta.w;\n        if (refMap) {\n            assertTrue(isElement(el), 'el must be an actual DOM element');\n            elCtx.$refMap$ = refMap.split(' ').map(getObject);\n            elCtx.li = getDomListeners(elCtx, containerEl);\n        }\n        if (seq) {\n            elCtx.$seq$ = seq.split(' ').map(getObject);\n        }\n        if (watches) {\n            elCtx.$watches$ = watches.split(' ').map(getObject);\n        }\n        if (contexts) {\n            elCtx.$contexts$ = new Map();\n            for (const part of contexts.split(' ')) {\n                const [key, value] = part.split('=');\n                elCtx.$contexts$.set(key, getObject(value));\n            }\n        }\n        // Restore sequence scoping\n        if (host) {\n            const [props, renderQrl] = host.split(' ');\n            const styleIds = el.getAttribute(QScopedStyle);\n            assertDefined(props, `resume: props missing in host metadata`, host);\n            assertDefined(renderQrl, `resume: renderQRL missing in host metadata`, host);\n            elCtx.$scopeIds$ = styleIds ? styleIds.split(' ') : null;\n            elCtx.$mounted$ = true;\n            elCtx.$props$ = getObject(props);\n            elCtx.$componentQrl$ = getObject(renderQrl);\n        }\n    }\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    logDebug('Container resumed');\n    emitEvent(containerEl, 'qresume', undefined, true);\n};\nexport const pauseFromContainer = async (containerEl) => {\n    const containerState = getContainerState(containerEl);\n    const contexts = getNodesInScope(containerEl, hasQId).map(tryGetContext);\n    return _pauseFromContexts(contexts, containerState);\n};\n/**\n * @internal\n */\nexport const _pauseFromContexts = async (allContexts, containerState) => {\n    const collector = createCollector(containerState);\n    const listeners = [];\n    // TODO: optimize\n    for (const ctx of allContexts) {\n        if (ctx.$watches$) {\n            for (const watch of ctx.$watches$) {\n                if (qDev) {\n                    if (watch.$flags$ & WatchFlagsIsDirty) {\n                        logWarn('Serializing dirty watch. Looks like an internal error.');\n                    }\n                    if (!isConnected(watch)) {\n                        logWarn('Serializing disconneted watch. Looks like an internal error.');\n                    }\n                }\n                destroyWatch(watch);\n            }\n        }\n    }\n    for (const ctx of allContexts) {\n        const el = ctx.$element$;\n        const ctxListeners = ctx.li;\n        for (const listener of ctxListeners) {\n            const key = listener[0];\n            const qrl = listener[1];\n            const captured = qrl.$captureRef$;\n            if (captured) {\n                for (const obj of captured) {\n                    collectValue(obj, collector, true);\n                }\n            }\n            if (isElement(el)) {\n                listeners.push({\n                    key,\n                    qrl,\n                    el,\n                    eventName: getEventName(key),\n                });\n            }\n        }\n    }\n    // No listeners implies static page\n    if (listeners.length === 0) {\n        return {\n            state: {\n                ctx: {},\n                objs: [],\n                subs: [],\n            },\n            objs: [],\n            listeners: [],\n            mode: 'static',\n        };\n    }\n    // Wait for remaining promises\n    let promises;\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.allSettled(promises);\n    }\n    // If at this point any component can render, we need to capture Context and Props\n    const canRender = collector.$elements$.length > 0;\n    if (canRender) {\n        for (const element of collector.$elements$) {\n            collectElementData(tryGetContext(element), collector);\n        }\n        for (const ctx of allContexts) {\n            if (ctx.$props$) {\n                collectProps(ctx, collector);\n            }\n            if (ctx.$contexts$) {\n                for (const item of ctx.$contexts$.values()) {\n                    collectValue(item, collector, false);\n                }\n            }\n        }\n    }\n    // Wait for remaining promises\n    while ((promises = collector.$promises$).length > 0) {\n        collector.$promises$ = [];\n        await Promise.all(promises);\n    }\n    // Convert objSet to array\n    const elementToIndex = new Map();\n    const objs = Array.from(collector.$objSet$.keys());\n    const objToId = new Map();\n    const getElementID = (el) => {\n        let id = elementToIndex.get(el);\n        if (id === undefined) {\n            id = getQId(el);\n            if (!id) {\n                console.warn('Missing ID', el);\n            }\n            else {\n                id = ELEMENT_ID_PREFIX + id;\n            }\n            elementToIndex.set(el, id);\n        }\n        return id;\n    };\n    const getObjId = (obj) => {\n        let suffix = '';\n        if (isPromise(obj)) {\n            const { value, resolved } = getPromiseValue(obj);\n            obj = value;\n            if (resolved) {\n                suffix += '~';\n            }\n            else {\n                suffix += '_';\n            }\n        }\n        if (isObject(obj)) {\n            const target = getProxyTarget(obj);\n            if (target) {\n                suffix += '!';\n                obj = target;\n            }\n            else if (isQwikElement(obj)) {\n                const elID = getElementID(obj);\n                if (elID) {\n                    return elID + suffix;\n                }\n                return null;\n            }\n        }\n        const id = objToId.get(obj);\n        if (id) {\n            return id + suffix;\n        }\n        return null;\n    };\n    const mustGetObjId = (obj) => {\n        const key = getObjId(obj);\n        if (key === null) {\n            throw qError(QError_missingObjectId, obj);\n        }\n        return key;\n    };\n    // Compute subscriptions\n    const subsMap = new Map();\n    objs.forEach((obj) => {\n        const subs = getManager(obj, containerState)?.$subs$;\n        if (!subs) {\n            return null;\n        }\n        const flags = getProxyFlags(obj) ?? 0;\n        const convered = [];\n        if (flags > 0) {\n            convered.push(flags);\n        }\n        for (const sub of subs) {\n            const host = sub[1];\n            if (sub[0] === 0 && isNode(host) && isVirtualElement(host)) {\n                if (!collector.$elements$.includes(host)) {\n                    continue;\n                }\n            }\n            convered.push(sub);\n        }\n        if (convered.length > 0) {\n            subsMap.set(obj, convered);\n        }\n    });\n    // Sort objects: the ones with subscriptions go first\n    objs.sort((a, b) => {\n        const isProxyA = subsMap.has(a) ? 0 : 1;\n        const isProxyB = subsMap.has(b) ? 0 : 1;\n        return isProxyA - isProxyB;\n    });\n    // Generate object ID by using a monotonic counter\n    let count = 0;\n    for (const obj of objs) {\n        objToId.set(obj, intToStr(count));\n        count++;\n    }\n    if (collector.$noSerialize$.length > 0) {\n        const undefinedID = objToId.get(undefined);\n        assertDefined(undefinedID, 'undefined ID must be defined');\n        for (const obj of collector.$noSerialize$) {\n            objToId.set(obj, undefinedID);\n        }\n    }\n    // Serialize object subscriptions\n    const subs = [];\n    for (const obj of objs) {\n        const value = subsMap.get(obj);\n        if (value == null) {\n            break;\n        }\n        subs.push(value\n            .map((s) => {\n            if (typeof s === 'number') {\n                return `_${s}`;\n            }\n            return serializeSubscription(s, getObjId);\n        })\n            .filter(isNotNullable));\n    }\n    assertEqual(subs.length, subsMap.size, 'missing subscriptions to serialize', subs, subsMap);\n    // Serialize objects\n    const convertedObjs = objs.map((obj) => {\n        if (obj === null) {\n            return null;\n        }\n        const typeObj = typeof obj;\n        switch (typeObj) {\n            case 'undefined':\n                return UNDEFINED_PREFIX;\n            case 'number':\n                if (!Number.isFinite(obj)) {\n                    break;\n                }\n                return obj;\n            case 'string':\n            case 'boolean':\n                return obj;\n        }\n        const value = serializeValue(obj, mustGetObjId, containerState);\n        if (value !== undefined) {\n            return value;\n        }\n        if (typeObj === 'object') {\n            if (isArray(obj)) {\n                return obj.map(mustGetObjId);\n            }\n            if (isSerializableObject(obj)) {\n                const output = {};\n                for (const key of Object.keys(obj)) {\n                    output[key] = mustGetObjId(obj[key]);\n                }\n                return output;\n            }\n        }\n        throw qError(QError_verifySerializable, obj);\n    });\n    const meta = {};\n    // Write back to the dom\n    allContexts.forEach((ctx) => {\n        assertDefined(ctx, `pause: missing context for dom node`);\n        const node = ctx.$element$;\n        const ref = ctx.$refMap$;\n        const props = ctx.$props$;\n        const contexts = ctx.$contexts$;\n        const watches = ctx.$watches$;\n        const renderQrl = ctx.$componentQrl$;\n        const seq = ctx.$seq$;\n        const metaValue = {};\n        const elementCaptured = isVirtualElement(node) && collector.$elements$.includes(node);\n        let add = false;\n        if (ref.length > 0) {\n            const value = ref.map(mustGetObjId).join(' ');\n            if (value) {\n                metaValue.r = value;\n                add = true;\n            }\n        }\n        if (canRender) {\n            if (elementCaptured && props) {\n                metaValue.h = mustGetObjId(props) + ' ' + mustGetObjId(renderQrl);\n                add = true;\n            }\n            if (watches && watches.length > 0) {\n                const value = watches.map(getObjId).filter(isNotNullable).join(' ');\n                if (value) {\n                    metaValue.w = value;\n                    add = true;\n                }\n            }\n            if (elementCaptured && seq && seq.length > 0) {\n                const value = seq.map(mustGetObjId).join(' ');\n                metaValue.s = value;\n                add = true;\n            }\n            if (contexts) {\n                const serializedContexts = [];\n                contexts.forEach((value, key) => {\n                    serializedContexts.push(`${key}=${mustGetObjId(value)}`);\n                });\n                const value = serializedContexts.join(' ');\n                if (value) {\n                    metaValue.c = value;\n                    add = true;\n                }\n            }\n        }\n        if (add) {\n            const elementID = getElementID(node);\n            assertDefined(elementID, `pause: can not generate ID for dom node`, node);\n            meta[elementID] = metaValue;\n        }\n    });\n    // Sanity check of serialized element\n    if (qDev) {\n        elementToIndex.forEach((value, el) => {\n            if (!value) {\n                logWarn('unconnected element', el.nodeName, '\\n');\n            }\n        });\n    }\n    return {\n        state: {\n            ctx: meta,\n            objs: convertedObjs,\n            subs,\n        },\n        objs,\n        listeners,\n        mode: canRender ? 'render' : 'listeners',\n    };\n};\nexport const getManager = (obj, containerState) => {\n    if (!isObject(obj)) {\n        return undefined;\n    }\n    if (obj instanceof SignalImpl) {\n        return getProxyManager(obj);\n    }\n    const proxy = containerState.$proxyMap$.get(obj);\n    if (proxy) {\n        return getProxyManager(proxy);\n    }\n    return undefined;\n};\nexport const getQwikJSON = (parentElm) => {\n    let child = parentElm.lastElementChild;\n    while (child) {\n        if (child.tagName === 'SCRIPT' && directGetAttribute(child, 'type') === 'qwik/json') {\n            return child;\n        }\n        child = child.previousElementSibling;\n    }\n    return undefined;\n};\nconst SHOW_ELEMENT = 1;\nconst SHOW_COMMENT = 128;\nconst FILTER_ACCEPT = 1;\nconst FILTER_REJECT = 2;\nconst FILTER_SKIP = 3;\nexport const getNodesInScope = (parent, predicate) => {\n    const nodes = [];\n    if (predicate(parent)) {\n        nodes.push(parent);\n    }\n    const walker = parent.ownerDocument.createTreeWalker(parent, SHOW_ELEMENT | SHOW_COMMENT, {\n        acceptNode(node) {\n            if (isContainer(node)) {\n                return FILTER_REJECT;\n            }\n            return predicate(node) ? FILTER_ACCEPT : FILTER_SKIP;\n        },\n    });\n    const pars = [];\n    let currentNode = null;\n    while ((currentNode = walker.nextNode())) {\n        pars.push(processVirtualNodes(currentNode));\n    }\n    return pars;\n};\nconst reviveValues = (objs, parser) => {\n    for (let i = 0; i < objs.length; i++) {\n        const value = objs[i];\n        if (isString(value)) {\n            objs[i] = value === UNDEFINED_PREFIX ? undefined : parser.prepare(value);\n        }\n    }\n};\nconst reviveSubscriptions = (objs, objsSubs, getObject, containerState, parser) => {\n    for (let i = 0; i < objsSubs.length; i++) {\n        const value = objs[i];\n        const subs = objsSubs[i];\n        if (subs) {\n            const converted = [];\n            let flag = 0;\n            for (const sub of subs) {\n                if (sub.startsWith('_')) {\n                    flag = parseInt(sub.slice(1), 10);\n                }\n                else {\n                    converted.push(parseSubscription(sub, getObject));\n                }\n            }\n            if (flag > 0) {\n                value[QObjectFlagsSymbol] = flag;\n            }\n            if (!parser.subs(value, converted)) {\n                createProxy(value, containerState, converted);\n            }\n        }\n    }\n};\nconst reviveNestedObjects = (obj, getObject, parser) => {\n    if (parser.fill(obj)) {\n        return;\n    }\n    if (obj && typeof obj == 'object') {\n        if (isArray(obj)) {\n            for (let i = 0; i < obj.length; i++) {\n                obj[i] = getObject(obj[i]);\n            }\n        }\n        else if (isSerializableObject(obj)) {\n            for (const key of Object.keys(obj)) {\n                obj[key] = getObject(obj[key]);\n            }\n        }\n    }\n};\nconst OBJECT_TRANSFORMS = {\n    '!': (obj, containerState) => {\n        return containerState.$proxyMap$.get(obj) ?? getOrCreateProxy(obj, containerState);\n    },\n    '~': (obj) => {\n        return Promise.resolve(obj);\n    },\n    _: (obj) => {\n        return Promise.reject(obj);\n    },\n};\nconst getObjectImpl = (id, elements, objs, containerState) => {\n    assertTrue(typeof id === 'string' && id.length > 0, 'resume: id must be an non-empty string, got:', id);\n    if (id.startsWith(ELEMENT_ID_PREFIX)) {\n        assertTrue(elements.has(id), `missing element for id:`, id);\n        return elements.get(id);\n    }\n    const index = strToInt(id);\n    assertTrue(objs.length > index, 'resume: index is out of bounds', id);\n    let obj = objs[index];\n    for (let i = id.length - 1; i >= 0; i--) {\n        const code = id[i];\n        const transform = OBJECT_TRANSFORMS[code];\n        if (!transform) {\n            break;\n        }\n        obj = transform(obj, containerState);\n    }\n    return obj;\n};\nconst collectProps = (elCtx, collector) => {\n    const parentCtx = elCtx.$parent$;\n    if (parentCtx && elCtx.$props$ && collector.$elements$.includes(parentCtx.$element$)) {\n        const subs = getProxyManager(elCtx.$props$)?.$subs$;\n        const el = elCtx.$element$;\n        if (subs && subs.some((e) => e[0] === 0 && e[1] === el)) {\n            collectElement(el, collector);\n        }\n    }\n};\nconst createCollector = (containerState) => {\n    return {\n        $containerState$: containerState,\n        $seen$: new Set(),\n        $objSet$: new Set(),\n        $noSerialize$: [],\n        $elements$: [],\n        $promises$: [],\n    };\n};\nconst collectDeferElement = (el, collector) => {\n    if (collector.$elements$.includes(el)) {\n        return;\n    }\n    collector.$elements$.push(el);\n};\nconst collectElement = (el, collector) => {\n    if (collector.$elements$.includes(el)) {\n        return;\n    }\n    const ctx = tryGetContext(el);\n    if (ctx) {\n        collector.$elements$.push(el);\n        collectElementData(ctx, collector);\n    }\n};\nexport const collectElementData = (elCtx, collector) => {\n    if (elCtx.$props$) {\n        collectValue(elCtx.$props$, collector, false);\n    }\n    if (elCtx.$componentQrl$) {\n        collectValue(elCtx.$componentQrl$, collector, false);\n    }\n    if (elCtx.$seq$) {\n        for (const obj of elCtx.$seq$) {\n            collectValue(obj, collector, false);\n        }\n    }\n    if (elCtx.$watches$) {\n        for (const obj of elCtx.$watches$) {\n            collectValue(obj, collector, false);\n        }\n    }\n    if (elCtx.$contexts$) {\n        for (const obj of elCtx.$contexts$.values()) {\n            collectValue(obj, collector, false);\n        }\n    }\n};\nexport const escapeText = (str) => {\n    return str.replace(/<(\\/?script)/g, '\\\\x3C$1');\n};\nexport const unescapeText = (str) => {\n    return str.replace(/\\\\x3C(\\/?script)/g, '<$1');\n};\nexport const collectSubscriptions = (manager, collector) => {\n    if (collector.$seen$.has(manager)) {\n        return;\n    }\n    collector.$seen$.add(manager);\n    const subs = manager.$subs$;\n    assertDefined(subs, 'subs must be defined');\n    for (const key of subs) {\n        const host = key[1];\n        if (isNode(host) && isVirtualElement(host)) {\n            if (key[0] === 0) {\n                collectDeferElement(host, collector);\n            }\n        }\n        else {\n            collectValue(host, collector, true);\n        }\n    }\n};\nconst PROMISE_VALUE = Symbol();\nconst resolvePromise = (promise) => {\n    return promise.then((value) => {\n        const v = {\n            resolved: true,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    }, (value) => {\n        const v = {\n            resolved: false,\n            value,\n        };\n        promise[PROMISE_VALUE] = v;\n        return value;\n    });\n};\nconst getPromiseValue = (promise) => {\n    assertTrue(PROMISE_VALUE in promise, 'pause: promise was not resolved previously', promise);\n    return promise[PROMISE_VALUE];\n};\nexport const collectValue = (obj, collector, leaks) => {\n    if (obj !== null) {\n        const objType = typeof obj;\n        switch (objType) {\n            case 'function':\n            case 'object': {\n                const seen = collector.$seen$;\n                if (seen.has(obj)) {\n                    return;\n                }\n                seen.add(obj);\n                if (!fastShouldSerialize(obj)) {\n                    collector.$objSet$.add(undefined);\n                    collector.$noSerialize$.push(obj);\n                    return;\n                }\n                const input = obj;\n                const target = getProxyTarget(obj);\n                if (target) {\n                    obj = target;\n                    if (seen.has(obj)) {\n                        return;\n                    }\n                    seen.add(obj);\n                    if (leaks) {\n                        collectSubscriptions(getProxyManager(input), collector);\n                    }\n                }\n                const collected = collectDeps(obj, collector, leaks);\n                if (collected) {\n                    collector.$objSet$.add(obj);\n                    return;\n                }\n                if (isPromise(obj)) {\n                    collector.$promises$.push(resolvePromise(obj).then((value) => {\n                        collectValue(value, collector, leaks);\n                    }));\n                    return;\n                }\n                if (objType === 'object') {\n                    if (isNode(obj)) {\n                        return;\n                    }\n                    if (isArray(obj)) {\n                        for (let i = 0; i < obj.length; i++) {\n                            collectValue(obj[i], collector, leaks);\n                        }\n                    }\n                    else if (isSerializableObject(obj)) {\n                        for (const key of Object.keys(obj)) {\n                            collectValue(obj[key], collector, leaks);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    collector.$objSet$.add(obj);\n};\nexport const isContainer = (el) => {\n    return isElement(el) && el.hasAttribute(QContainerAttr);\n};\nconst hasQId = (el) => {\n    const node = processVirtualNodes(el);\n    if (isQwikElement(node)) {\n        return node.hasAttribute(ELEMENT_ID);\n    }\n    return false;\n};\nexport const intToStr = (nu) => {\n    return nu.toString(36);\n};\nexport const strToInt = (nu) => {\n    return parseInt(nu, 36);\n};\nexport const getEventName = (attribute) => {\n    const colonPos = attribute.indexOf(':');\n    assertTrue(colonPos >= 0, 'colon not found in attribute');\n    return fromKebabToCamelCase(attribute.slice(colonPos + 1));\n};\nconst getTextNode = (mark) => {\n    const nextNode = mark.nextSibling;\n    if (isText(nextNode)) {\n        return nextNode;\n    }\n    else {\n        const textNode = mark.ownerDocument.createTextNode('');\n        mark.parentElement.insertBefore(textNode, mark);\n        return textNode;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import { getProxyManager, getProxyTarget, } from '../object/q-object';\nimport { resumeContainer } from '../object/store';\nimport { QContainerAttr } from '../util/markers';\nimport { destroyWatch } from '../use/use-watch';\nimport { pauseContainer } from '../object/store';\nimport { qSerialize } from '../util/qdev';\nimport { directGetAttribute } from '../render/fast-calls';\nimport { assertDefined, assertTrue } from '../assert/assert';\nimport { getContainerState } from '../render/container';\nimport { fromCamelToKebabCase } from '../util/case';\nexport const Q_CTX = '_qc_';\nexport const resumeIfNeeded = (containerEl) => {\n    const isResumed = directGetAttribute(containerEl, QContainerAttr);\n    if (isResumed === 'paused') {\n        resumeContainer(containerEl);\n        if (qSerialize) {\n            appendQwikDevTools(containerEl);\n        }\n    }\n};\nexport const appendQwikDevTools = (containerEl) => {\n    containerEl['qwik'] = {\n        pause: () => pauseContainer(containerEl),\n        state: getContainerState(containerEl),\n    };\n};\nexport const tryGetContext = (element) => {\n    return element[Q_CTX];\n};\nexport const getContext = (element) => {\n    let ctx = tryGetContext(element);\n    if (!ctx) {\n        element[Q_CTX] = ctx = {\n            $dirty$: false,\n            $mounted$: false,\n            $needAttachListeners$: false,\n            $id$: '',\n            $element$: element,\n            $refMap$: [],\n            li: [],\n            $watches$: null,\n            $seq$: null,\n            $slots$: null,\n            $scopeIds$: null,\n            $appendStyles$: null,\n            $props$: null,\n            $vdom$: null,\n            $componentQrl$: null,\n            $contexts$: null,\n            $parent$: null,\n        };\n    }\n    return ctx;\n};\nexport const cleanupContext = (elCtx, subsManager) => {\n    const el = elCtx.$element$;\n    elCtx.$watches$?.forEach((watch) => {\n        subsManager.$clearSub$(watch);\n        destroyWatch(watch);\n    });\n    if (elCtx.$componentQrl$) {\n        subsManager.$clearSub$(el);\n    }\n    elCtx.$componentQrl$ = null;\n    elCtx.$seq$ = null;\n    elCtx.$watches$ = null;\n    elCtx.$dirty$ = false;\n    el[Q_CTX] = undefined;\n};\nconst PREFIXES = ['on', 'window:on', 'document:on'];\nconst SCOPED = ['on', 'on-window', 'on-document'];\nexport const normalizeOnProp = (prop) => {\n    let scope = 'on';\n    for (let i = 0; i < PREFIXES.length; i++) {\n        const prefix = PREFIXES[i];\n        if (prop.startsWith(prefix)) {\n            scope = SCOPED[i];\n            prop = prop.slice(prefix.length);\n            break;\n        }\n    }\n    if (prop.startsWith('-')) {\n        prop = fromCamelToKebabCase(prop.slice(1));\n    }\n    else {\n        prop = prop.toLowerCase();\n    }\n    return scope + ':' + prop;\n};\nexport const getPropsMutator = (props) => {\n    const manager = getProxyManager(props);\n    assertDefined(manager, `props have to be a proxy, but it is not`, props);\n    const target = getProxyTarget(props);\n    assertDefined(target, `props have to be a proxy, but it is not`, props);\n    return {\n        set(prop, value) {\n            const oldValue = target[prop];\n            target[prop] = value;\n            if (oldValue !== value) {\n                manager.$notifySubs$(prop);\n            }\n        },\n    };\n};\nexport const inflateQrl = (qrl, elCtx) => {\n    assertDefined(qrl.$capture$, 'invoke: qrl capture must be defined inside useLexicalScope()', qrl);\n    return (qrl.$captureRef$ = qrl.$capture$.map((idx) => {\n        const int = parseInt(idx, 10);\n        const obj = elCtx.$refMap$[int];\n        assertTrue(elCtx.$refMap$.length > int, 'out of bounds inflate access', idx);\n        return obj;\n    }));\n};\n//# sourceMappingURL=data:application/json;base64,","import { assertEqual, assertNumber, assertTrue } from '../assert/assert';\nimport { qError, QError_immutableProps, QError_verifySerializable } from '../error/error';\nimport { isQrl } from '../import/qrl-class';\nimport { tryGetInvokeContext } from '../use/use-core';\nimport { isDocument, isNode, isQwikElement } from '../util/element';\nimport { logWarn } from '../util/log';\nimport { qDev } from '../util/qdev';\nimport { tryGetContext } from '../props/props';\nimport { RenderEvent } from '../util/markers';\nimport { isArray, isFunction, isObject, isSerializableObject } from '../util/types';\nimport { isPromise } from '../util/promises';\nimport { canSerialize } from './serializers';\nexport const QObjectRecursive = 1 << 0;\nexport const QObjectImmutable = 1 << 1;\nconst QOjectTargetSymbol = Symbol('proxy target');\nexport const QObjectFlagsSymbol = Symbol('proxy flags');\nexport const QObjectManagerSymbol = Symbol('proxy manager');\n/**\n * @internal\n */\nexport const _IMMUTABLE = Symbol('IMMUTABLE');\nexport const _IMMUTABLE_PREFIX = '$$';\n/**\n * Creates a proxy that notifies of any writes.\n */\nexport const getOrCreateProxy = (target, containerState, flags = 0) => {\n    const proxy = containerState.$proxyMap$.get(target);\n    if (proxy) {\n        return proxy;\n    }\n    if (flags !== 0) {\n        target[QObjectFlagsSymbol] = flags;\n    }\n    return createProxy(target, containerState, undefined);\n};\nexport const createSignal = (value, containerState, subcriptions) => {\n    const manager = containerState.$subsManager$.$createManager$(subcriptions);\n    const signal = new SignalImpl(value, manager);\n    return signal;\n};\nexport class SignalImpl {\n    constructor(v, manager) {\n        this.untrackedValue = v;\n        this[QObjectManagerSymbol] = manager;\n    }\n    get value() {\n        const sub = tryGetInvokeContext()?.$subscriber$;\n        if (sub) {\n            this[QObjectManagerSymbol].$addSub$([0, sub, undefined]);\n        }\n        return this.untrackedValue;\n    }\n    set value(v) {\n        if (qDev) {\n            verifySerializable(v);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$);\n            }\n        }\n        const manager = this[QObjectManagerSymbol];\n        const oldValue = this.untrackedValue;\n        if (manager && oldValue !== v) {\n            this.untrackedValue = v;\n            manager.$notifySubs$();\n        }\n    }\n}\nexport const isSignal = (obj) => {\n    return obj instanceof SignalImpl || obj instanceof SignalWrapper;\n};\nexport const addSignalSub = (type, hostEl, signal, elm, property) => {\n    const subscription = signal instanceof SignalWrapper\n        ? [\n            type,\n            hostEl,\n            getProxyTarget(signal.ref),\n            elm,\n            property,\n            signal.prop === 'value' ? undefined : signal.prop,\n        ]\n        : [type, hostEl, signal, elm, property, undefined];\n    getProxyManager(signal).$addSub$(subscription);\n};\nexport const createProxy = (target, containerState, subs) => {\n    assertEqual(unwrapProxy(target), target, 'Unexpected proxy at this location', target);\n    assertTrue(!containerState.$proxyMap$.has(target), 'Proxy was already created', target);\n    assertTrue(isObject(target), 'Target must be an object');\n    assertTrue(isSerializableObject(target) || isArray(target), 'Target must be a serializable object');\n    const manager = containerState.$subsManager$.$createManager$(subs);\n    const proxy = new Proxy(target, new ReadWriteProxyHandler(containerState, manager));\n    containerState.$proxyMap$.set(target, proxy);\n    return proxy;\n};\nclass ReadWriteProxyHandler {\n    constructor($containerState$, $manager$) {\n        this.$containerState$ = $containerState$;\n        this.$manager$ = $manager$;\n    }\n    get(target, prop) {\n        if (typeof prop === 'symbol') {\n            if (prop === QOjectTargetSymbol)\n                return target;\n            if (prop === QObjectManagerSymbol)\n                return this.$manager$;\n            return target[prop];\n        }\n        let subscriber;\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const invokeCtx = tryGetInvokeContext();\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const immutable = (flags & QObjectImmutable) !== 0;\n        let value = target[prop];\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (immutable) {\n            const hiddenSignal = target[_IMMUTABLE_PREFIX + prop];\n            if (!(prop in target) || !!hiddenSignal || !!target[_IMMUTABLE]?.[prop]) {\n                subscriber = null;\n            }\n            if (hiddenSignal) {\n                assertTrue(isSignal(hiddenSignal), '$$ prop must be a signal');\n                value = hiddenSignal.value;\n            }\n        }\n        if (subscriber) {\n            const isA = isArray(target);\n            this.$manager$.$addSub$([0, subscriber, isA ? undefined : prop]);\n        }\n        return recursive ? wrap(value, this.$containerState$) : value;\n    }\n    set(target, prop, newValue) {\n        if (typeof prop === 'symbol') {\n            target[prop] = newValue;\n            return true;\n        }\n        const flags = target[QObjectFlagsSymbol] ?? 0;\n        assertNumber(flags, 'flags must be an number');\n        const immutable = (flags & QObjectImmutable) !== 0;\n        if (immutable) {\n            throw qError(QError_immutableProps);\n        }\n        const recursive = (flags & QObjectRecursive) !== 0;\n        const unwrappedNewValue = recursive ? unwrapProxy(newValue) : newValue;\n        if (qDev) {\n            verifySerializable(unwrappedNewValue);\n            const invokeCtx = tryGetInvokeContext();\n            if (invokeCtx && invokeCtx.$event$ === RenderEvent) {\n                logWarn('State mutation inside render function. Move mutation to useWatch(), useClientEffect() or useServerMount()', invokeCtx.$hostElement$, prop);\n            }\n        }\n        const isA = isArray(target);\n        if (isA) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$();\n            return true;\n        }\n        const oldValue = target[prop];\n        if (oldValue !== unwrappedNewValue) {\n            target[prop] = unwrappedNewValue;\n            this.$manager$.$notifySubs$(prop);\n        }\n        return true;\n    }\n    has(target, property) {\n        if (property === QOjectTargetSymbol)\n            return true;\n        const hasOwnProperty = Object.prototype.hasOwnProperty;\n        if (hasOwnProperty.call(target, property)) {\n            return true;\n        }\n        if (typeof property === 'string' && hasOwnProperty.call(target, _IMMUTABLE_PREFIX + property)) {\n            return true;\n        }\n        return false;\n    }\n    ownKeys(target) {\n        let subscriber = null;\n        const invokeCtx = tryGetInvokeContext();\n        if (invokeCtx) {\n            subscriber = invokeCtx.$subscriber$;\n        }\n        if (subscriber) {\n            this.$manager$.$addSub$([0, subscriber, undefined]);\n        }\n        return Reflect.ownKeys(target).map((a) => {\n            return typeof a === 'string' && a.startsWith(_IMMUTABLE_PREFIX)\n                ? a.slice(_IMMUTABLE_PREFIX.length)\n                : a;\n        });\n    }\n}\nconst wrap = (value, containerState) => {\n    if (isQrl(value)) {\n        return value;\n    }\n    if (isObject(value)) {\n        if (Object.isFrozen(value)) {\n            return value;\n        }\n        const nakedValue = unwrapProxy(value);\n        if (nakedValue !== value) {\n            // already a proxy return;\n            return value;\n        }\n        if (isNode(nakedValue)) {\n            return value;\n        }\n        if (!shouldSerialize(nakedValue)) {\n            return value;\n        }\n        if (qDev) {\n            verifySerializable(value);\n        }\n        const proxy = containerState.$proxyMap$.get(value);\n        return proxy ? proxy : getOrCreateProxy(value, containerState, QObjectRecursive);\n    }\n    else {\n        return value;\n    }\n};\nexport const verifySerializable = (value) => {\n    const seen = new Set();\n    return _verifySerializable(value, seen);\n};\nconst _verifySerializable = (value, seen) => {\n    const unwrapped = unwrapProxy(value);\n    if (unwrapped == null) {\n        return value;\n    }\n    if (shouldSerialize(unwrapped)) {\n        if (seen.has(unwrapped)) {\n            return value;\n        }\n        seen.add(unwrapped);\n        if (canSerialize(unwrapped)) {\n            return value;\n        }\n        switch (typeof unwrapped) {\n            case 'object':\n                if (isPromise(unwrapped))\n                    return value;\n                if (isQwikElement(unwrapped))\n                    return value;\n                if (isDocument(unwrapped))\n                    return value;\n                if (isArray(unwrapped)) {\n                    for (const item of unwrapped) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                if (isSerializableObject(unwrapped)) {\n                    for (const item of Object.values(unwrapped)) {\n                        _verifySerializable(item, seen);\n                    }\n                    return value;\n                }\n                break;\n            case 'boolean':\n            case 'string':\n            case 'number':\n                return value;\n        }\n        throw qError(QError_verifySerializable, unwrapped);\n    }\n    return value;\n};\nconst noSerializeSet = /*#__PURE__*/ new WeakSet();\nexport const shouldSerialize = (obj) => {\n    if (isObject(obj) || isFunction(obj)) {\n        return !noSerializeSet.has(obj);\n    }\n    return true;\n};\nexport const fastShouldSerialize = (obj) => {\n    return !noSerializeSet.has(obj);\n};\n// <docs markdown=\"../readme.md#noSerialize\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#noSerialize instead)\n/**\n * Marks a property on a store as non-serializable.\n *\n * At times it is necessary to store values on a store that are non-serializable. Normally this\n * is a runtime error as Store wants to eagerly report when a non-serializable property is\n * assigned to it.\n *\n * You can use `noSerialize()` to mark a value as non-serializable. The value is persisted in the\n * Store but does not survive serialization. The implication is that when your application is\n * resumed, the value of this object will be `undefined`. You will be responsible for recovering\n * from this.\n *\n * See: [noSerialize Tutorial](http://qwik.builder.io/tutorial/store/no-serialize)\n *\n * @public\n */\n// </docs>\nexport const noSerialize = (input) => {\n    if (input != null) {\n        noSerializeSet.add(input);\n    }\n    return input;\n};\n/**\n * @alpha\n * @deprecated Remove it, not needed anymore\n */\nexport const mutable = (v) => {\n    console.warn('mutable() is deprecated, you can safely remove all usages of mutable() in your code');\n    return v;\n};\n/**\n * @internal\n * @deprecated Remove it, not needed anymore\n */\nexport const _useMutableProps = () => { };\nexport const isConnected = (sub) => {\n    if (isQwikElement(sub)) {\n        return !!tryGetContext(sub) || sub.isConnected;\n    }\n    else {\n        return isConnected(sub.$el$);\n    }\n};\n/**\n * @alpha\n */\nexport const unwrapProxy = (proxy) => {\n    return isObject(proxy) ? getProxyTarget(proxy) ?? proxy : proxy;\n};\nexport const getProxyTarget = (obj) => {\n    return obj[QOjectTargetSymbol];\n};\nexport const getProxyManager = (obj) => {\n    return obj[QObjectManagerSymbol];\n};\nexport const getProxyFlags = (obj) => {\n    return obj[QObjectFlagsSymbol];\n};\nexport class SignalWrapper {\n    constructor(ref, prop) {\n        this.ref = ref;\n        this.prop = prop;\n    }\n    get [QObjectManagerSymbol]() {\n        return getProxyManager(this.ref);\n    }\n    get value() {\n        return this.ref[this.prop];\n    }\n    set value(value) {\n        this.ref[this.prop] = value;\n    }\n}\n/**\n * @internal\n */\nexport const _wrapSignal = (obj, prop) => {\n    if (obj instanceof SignalImpl) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return obj;\n    }\n    if (obj instanceof SignalWrapper) {\n        assertEqual(prop, 'value', 'Left side is a signal, prop must be value');\n        return obj;\n    }\n    const target = getProxyTarget(obj);\n    if (target) {\n        const signal = target[_IMMUTABLE_PREFIX + prop];\n        if (signal) {\n            assertTrue(isSignal(signal), `${_IMMUTABLE_PREFIX} has to be a signal kind`);\n            return signal;\n        }\n        return new SignalWrapper(obj, prop);\n    }\n    return obj[prop];\n};\n//# sourceMappingURL=data:application/json;base64,","import { qError, QError_qrlIsNotFunction, QError_qrlMissingChunk, QError_qrlMissingContainer, } from '../error/error';\nimport { verifySerializable } from '../object/q-object';\nimport { getPlatform, isServer } from '../platform/platform';\nimport { newInvokeContext, invoke, newInvokeContextFromTuple, } from '../use/use-core';\nimport { then } from '../util/promises';\nimport { qDev, qTest, seal } from '../util/qdev';\nimport { isArray, isFunction } from '../util/types';\nexport const isQrl = (value) => {\n    return typeof value === 'function' && typeof value.getSymbol === 'function';\n};\nexport const createQRL = (chunk, symbol, symbolRef, symbolFn, capture, captureRef, refSymbol) => {\n    if (qDev) {\n        verifySerializable(captureRef);\n    }\n    let _containerEl;\n    const setContainer = (el) => {\n        if (!_containerEl) {\n            _containerEl = el;\n        }\n    };\n    const resolve = async (containerEl) => {\n        if (containerEl) {\n            setContainer(containerEl);\n        }\n        if (symbolRef !== null) {\n            return symbolRef;\n        }\n        if (symbolFn !== null) {\n            return (symbolRef = symbolFn().then((module) => (symbolRef = module[symbol])));\n        }\n        else {\n            if (!chunk) {\n                throw qError(QError_qrlMissingChunk, symbol);\n            }\n            if (!_containerEl) {\n                throw qError(QError_qrlMissingContainer, chunk, symbol);\n            }\n            const symbol2 = getPlatform().importSymbol(_containerEl, chunk, symbol);\n            return (symbolRef = then(symbol2, (ref) => {\n                return (symbolRef = ref);\n            }));\n        }\n    };\n    const resolveLazy = (containerEl) => {\n        return symbolRef !== null ? symbolRef : resolve(containerEl);\n    };\n    const invokeFn = (currentCtx, beforeFn) => {\n        return ((...args) => {\n            const start = now();\n            const fn = resolveLazy();\n            return then(fn, (fn) => {\n                if (isFunction(fn)) {\n                    if (beforeFn && beforeFn() === false) {\n                        return;\n                    }\n                    const baseContext = createInvokationContext(currentCtx);\n                    const context = {\n                        ...baseContext,\n                        $qrl$: QRL,\n                    };\n                    emitUsedSymbol(symbol, context.$element$, start);\n                    return invoke(context, fn, ...args);\n                }\n                throw qError(QError_qrlIsNotFunction);\n            });\n        });\n    };\n    const createInvokationContext = (invoke) => {\n        if (invoke == null) {\n            return newInvokeContext();\n        }\n        else if (isArray(invoke)) {\n            return newInvokeContextFromTuple(invoke);\n        }\n        else {\n            return invoke;\n        }\n    };\n    const invokeQRL = async function (...args) {\n        const fn = invokeFn();\n        const result = await fn(...args);\n        return result;\n    };\n    const resolvedSymbol = refSymbol ?? symbol;\n    const hash = getSymbolHash(resolvedSymbol);\n    const QRL = invokeQRL;\n    const methods = {\n        getSymbol: () => resolvedSymbol,\n        getHash: () => hash,\n        resolve,\n        $resolveLazy$: resolveLazy,\n        $setContainer$: setContainer,\n        $chunk$: chunk,\n        $symbol$: symbol,\n        $refSymbol$: refSymbol,\n        $hash$: hash,\n        getFn: invokeFn,\n        $capture$: capture,\n        $captureRef$: captureRef,\n        $dev$: null,\n    };\n    const qrl = Object.assign(invokeQRL, methods);\n    seal(qrl);\n    return qrl;\n};\nexport const getSymbolHash = (symbolName) => {\n    const index = symbolName.lastIndexOf('_');\n    if (index > -1) {\n        return symbolName.slice(index + 1);\n    }\n    return symbolName;\n};\nexport function assertQrl(qrl) {\n    if (qDev) {\n        if (!isQrl(qrl)) {\n            throw new Error('Not a QRL');\n        }\n    }\n}\nexport const emitUsedSymbol = (symbol, element, reqTime) => {\n    emitEvent('qsymbol', {\n        symbol,\n        element,\n        reqTime,\n    });\n};\nexport const emitEvent = (eventName, detail) => {\n    if (!qTest && !isServer() && typeof document === 'object') {\n        document.dispatchEvent(new CustomEvent(eventName, {\n            bubbles: false,\n            detail,\n        }));\n    }\n};\nconst now = () => {\n    if (qTest || isServer()) {\n        return 0;\n    }\n    if (typeof performance === 'object') {\n        return performance.now();\n    }\n    return 0;\n};\n//# sourceMappingURL=data:application/json;base64,","import { qRuntimeQrl, qSerialize } from '../util/qdev';\nimport { createQRL } from './qrl-class';\nlet runtimeSymbolId = 0;\n// <docs markdown=\"../readme.md#$\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#$ instead)\n/**\n * Qwik Optimizer marker function.\n *\n * Use `$(...)` to tell Qwik Optimizer to extract the expression in `$(...)` into a lazy-loadable\n * resource referenced by `QRL`.\n *\n * @see `implicit$FirstArg` for additional `____$(...)` rules.\n *\n * In this example, `$(...)` is used to capture the callback function of `onmousemove` into a\n * lazy-loadable reference. This allows the code to refer to the function without actually\n * loading the function. In this example, the callback function does not get loaded until\n * `mousemove` event fires.\n *\n * ```tsx\n * useOnDocument(\n *   'mousemove',\n *   $((event) => console.log('mousemove', event))\n * );\n * ```\n *\n * In this code, the Qwik Optimizer detects `$(...)` and transforms the code into:\n *\n * ```tsx\n * // FILE: <current file>\n * useOnDocument('mousemove', qrl('./chunk-abc.js', 'onMousemove'));\n *\n * // FILE: chunk-abc.js\n * export const onMousemove = () => console.log('mousemove');\n * ```\n *\n * ## Special Rules\n *\n * The Qwik Optimizer places special rules on functions that can be lazy-loaded.\n *\n * 1. The expression of the `$(expression)` function must be importable by the system.\n * (expression shows up in `import` or has `export`)\n * 2. If inlined function, then all lexically captured values must be:\n *    - importable (vars show up in `import`s or `export`s)\n *    - const (The capturing process differs from JS capturing in that writing to captured\n * variables does not update them, and therefore writes are forbidden. The best practice is that\n * all captured variables are constants.)\n *    - Must be runtime serializable.\n *\n * ```tsx\n * import { importedFn } from './import/example';\n * import { createContext, useContext, useContextProvider } from './use/use-context';\n * import { useRef } from './use/use-ref';\n * import { Resource, useResource$ } from './use/use-resource';\n *\n * export const greet = () => console.log('greet');\n * function topLevelFn() {}\n *\n * function myCode() {\n *   const store = useStore({});\n *   function localFn() {}\n *   // Valid Examples\n *   $(greet); // greet is importable\n *   $(importedFn); // importedFn is importable\n *   $(() => greet()); // greet is importable;\n *   $(() => importedFn()); // importedFn is importable\n *   $(() => console.log(store)); // store is serializable.\n *\n *   // Compile time errors\n *   $(topLevelFn); // ERROR: `topLevelFn` not importable\n *   $(() => topLevelFn()); // ERROR: `topLevelFn` not importable\n *\n *   // Runtime errors\n *   $(localFn); // ERROR: `localFn` fails serialization\n *   $(() => localFn()); // ERROR: `localFn` fails serialization\n * }\n *\n * ```\n *\n * @param expression - Expression which should be lazy loaded\n * @public\n */\n// </docs>\nexport const $ = (expression) => {\n    if (qSerialize && !qRuntimeQrl) {\n        throw new Error('Optimizer should replace all usages of $() with some special syntax. If you need to create a QRL manually, use inlinedQrl() instead.');\n    }\n    return createQRL(null, 's' + runtimeSymbolId++, expression, null, null, null, null);\n};\n//# sourceMappingURL=data:application/json;base64,","import { $ } from '../import/qrl.public';\nimport { OnRenderProp, QSlot } from '../util/markers';\nimport { jsx } from '../render/jsx/jsx-runtime';\nimport { SERIALIZABLE_STATE } from '../object/serializers';\nimport { qDev, qTest } from '../util/qdev';\nimport { Virtual } from '../render/jsx/utils.public';\nimport { assertQrl } from '../import/qrl-class';\nimport { invoke, newInvokeContext } from '../use/use-core';\nimport { verifySerializable } from '../object/q-object';\n// const ELEMENTS_SKIP_KEY: JSXTagName[] = ['html', 'body', 'head'];\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const componentQrl = (componentQrl) => {\n    // Return a QComponent Factory function.\n    function QwikComponent(props, key) {\n        assertQrl(componentQrl);\n        if (qDev) {\n            invoke(newInvokeContext(), () => {\n                for (const key of Object.keys(props)) {\n                    if (key !== 'children') {\n                        verifySerializable(props[key]);\n                    }\n                }\n            });\n        }\n        const hash = qTest ? 'sX' : componentQrl.$hash$;\n        const finalKey = hash + ':' + (key ? key : '');\n        return jsx(Virtual, {\n            [OnRenderProp]: componentQrl,\n            [QSlot]: props[QSlot],\n            children: props.children,\n            props,\n        }, finalKey);\n    }\n    QwikComponent[SERIALIZABLE_STATE] = [componentQrl];\n    return QwikComponent;\n};\nexport const isQwikComponent = (component) => {\n    return typeof component == 'function' && component[SERIALIZABLE_STATE] !== undefined;\n};\n// <docs markdown=\"../readme.md#component\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#component instead)\n/**\n * Declare a Qwik component that can be used to create UI.\n *\n * Use `component$` to declare a Qwik component. A Qwik component is a special kind of component\n * that allows the Qwik framework to lazy load and execute the component independently of other\n * Qwik components as well as lazy load the component's life-cycle hooks and event handlers.\n *\n * Side note: You can also declare regular (standard JSX) components that will have standard\n * synchronous behavior.\n *\n * Qwik component is a facade that describes how the component should be used without forcing the\n * implementation of the component to be eagerly loaded. A minimum Qwik definition consists of:\n *\n * ### Example\n *\n * An example showing how to create a counter component:\n *\n * ```tsx\n * export interface CounterProps {\n *   initialValue?: number;\n *   step?: number;\n * }\n * export const Counter = component$((props: CounterProps) => {\n *   const state = useStore({ count: props.initialValue || 0 });\n *   return (\n *     <div>\n *       <span>{state.count}</span>\n *       <button onClick$={() => (state.count += props.step || 1)}>+</button>\n *     </div>\n *   );\n * });\n * ```\n *\n * - `component$` is how a component gets declared.\n * - `{ value?: number; step?: number }` declares the public (props) interface of the component.\n * - `{ count: number }` declares the private (state) interface of the component.\n *\n * The above can then be used like so:\n *\n * ```tsx\n * export const OtherComponent = component$(() => {\n *   return <Counter initialValue={100} />;\n * });\n * ```\n *\n * See also: `component`, `useCleanup`, `onResume`, `onPause`, `useOn`, `useOnDocument`,\n * `useOnWindow`, `useStyles`\n *\n * @public\n */\n// </docs>\nexport const component$ = (onMount) => {\n    return componentQrl($(onMount));\n};\n//# sourceMappingURL=data:application/json;base64,","/* eslint-disable */\nimport { EMPTY_ARRAY } from '../../util/flyweight';\nimport { JSXNodeImpl } from './jsx-runtime';\nimport { isArray } from '../../util/types';\nexport const flattenArray = (array, dst) => {\n    // Yes this function is just Array.flat, but we need to run on old versions of Node.\n    if (!dst)\n        dst = [];\n    for (const item of array) {\n        if (isArray(item)) {\n            flattenArray(item, dst);\n        }\n        else {\n            dst.push(item);\n        }\n    }\n    return dst;\n};\n/**\n * @public\n */\nexport function h(type, props, ...children) {\n    // Using legacy h() jsx transform and morphing it\n    // so it can use the modern vdom structure\n    // https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html\n    // https://www.typescriptlang.org/tsconfig#jsxImportSource\n    const normalizedProps = {\n        children: arguments.length > 2 ? flattenArray(children) : EMPTY_ARRAY,\n    };\n    let key;\n    let i;\n    for (i in props) {\n        if (i == 'key')\n            key = props[i];\n        else\n            normalizedProps[i] = props[i];\n    }\n    return new JSXNodeImpl(type, normalizedProps, key);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvanN4L2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQUcsQ0FBSSxLQUFrQixFQUFFLEdBQVMsRUFBTyxFQUFFO0lBQ3BFLG9GQUFvRjtJQUNwRixJQUFJLENBQUMsR0FBRztRQUFFLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDbkIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7UUFDeEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakIsWUFBWSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sVUFBVSxDQUFDLENBQ2YsSUFBVSxFQUNWLEtBQW1CLEVBQ25CLEdBQUcsUUFBZTtJQUVsQixpREFBaUQ7SUFDakQsMENBQTBDO0lBQzFDLDZFQUE2RTtJQUM3RSwwREFBMEQ7SUFFMUQsTUFBTSxlQUFlLEdBQVE7UUFDM0IsUUFBUSxFQUFFLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVc7S0FDdEUsQ0FBQztJQUVGLElBQUksR0FBUSxDQUFDO0lBQ2IsSUFBSSxDQUFNLENBQUM7SUFFWCxLQUFLLENBQUMsSUFBSSxLQUFLLEVBQUU7UUFDZixJQUFJLENBQUMsSUFBSSxLQUFLO1lBQUUsR0FBRyxHQUFJLEtBQTZCLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQ25ELGVBQWUsQ0FBQyxDQUFDLENBQUMsR0FBSSxLQUE2QixDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgRU1QVFlfQVJSQVkgfSBmcm9tICcuLi8uLi91dGlsL2ZseXdlaWdodCc7XG5pbXBvcnQgeyBKU1hOb2RlSW1wbCB9IGZyb20gJy4vanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBRd2lrSlNYIH0gZnJvbSAnLi90eXBlcy9qc3gtcXdpayc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50LCBKU1hOb2RlIH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBmbGF0dGVuQXJyYXkgPSA8VD4oYXJyYXk6IChUIHwgVFtdKVtdLCBkc3Q/OiBUW10pOiBUW10gPT4ge1xuICAvLyBZZXMgdGhpcyBmdW5jdGlvbiBpcyBqdXN0IEFycmF5LmZsYXQsIGJ1dCB3ZSBuZWVkIHRvIHJ1biBvbiBvbGQgdmVyc2lvbnMgb2YgTm9kZS5cbiAgaWYgKCFkc3QpIGRzdCA9IFtdO1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyYXkpIHtcbiAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgZmxhdHRlbkFycmF5KGl0ZW0sIGRzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZHN0O1xufTtcblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoPFRZUEUgZXh0ZW5kcyBzdHJpbmcgfCBGdW5jdGlvbkNvbXBvbmVudDxQUk9QUz4sIFBST1BTIGV4dGVuZHMge30gPSB7fT4oXG4gIHR5cGU6IFRZUEUsXG4gIHByb3BzOiBQUk9QUyB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiBhbnlbXVxuKTogSlNYTm9kZTxUWVBFPiB7XG4gIC8vIFVzaW5nIGxlZ2FjeSBoKCkganN4IHRyYW5zZm9ybSBhbmQgbW9ycGhpbmcgaXRcbiAgLy8gc28gaXQgY2FuIHVzZSB0aGUgbW9kZXJuIHZkb20gc3RydWN0dXJlXG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvYmxvZy8yMDIwLzA5LzIyL2ludHJvZHVjaW5nLXRoZS1uZXctanN4LXRyYW5zZm9ybS5odG1sXG4gIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy90c2NvbmZpZyNqc3hJbXBvcnRTb3VyY2VcblxuICBjb25zdCBub3JtYWxpemVkUHJvcHM6IGFueSA9IHtcbiAgICBjaGlsZHJlbjogYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBmbGF0dGVuQXJyYXkoY2hpbGRyZW4pIDogRU1QVFlfQVJSQVksXG4gIH07XG5cbiAgbGV0IGtleTogYW55O1xuICBsZXQgaTogYW55O1xuXG4gIGZvciAoaSBpbiBwcm9wcykge1xuICAgIGlmIChpID09ICdrZXknKSBrZXkgPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gICAgZWxzZSBub3JtYWxpemVkUHJvcHNbaV0gPSAocHJvcHMgYXMgUmVjb3JkPHN0cmluZywgYW55PilbaV07XG4gIH1cblxuICByZXR1cm4gbmV3IEpTWE5vZGVJbXBsKHR5cGUsIG5vcm1hbGl6ZWRQcm9wcywga2V5KTtcbn1cblxuLyoqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBoIHtcbiAgZXhwb3J0IGZ1bmN0aW9uIGgodHlwZTogYW55KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBOb2RlLCBkYXRhOiBhbnkpOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHR5cGU6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGNoaWxkcmVuOiBBcnJheTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaCh0eXBlOiBhbnksIGRhdGE6IGFueSwgdGV4dDogc3RyaW5nKTogSlNYTm9kZTxhbnk+O1xuICBleHBvcnQgZnVuY3Rpb24gaChcbiAgICB0eXBlOiBhbnksXG4gICAgZGF0YTogYW55LFxuICAgIGNoaWxkcmVuOiBBcnJheTxKU1hOb2RlPGFueT4gfCB1bmRlZmluZWQgfCBudWxsPlxuICApOiBKU1hOb2RlPGFueT47XG4gIGV4cG9ydCBmdW5jdGlvbiBoKHNlbDogYW55LCBkYXRhOiBhbnkgfCBudWxsLCBjaGlsZHJlbjogSlNYTm9kZTxhbnk+KTogSlNYTm9kZTxhbnk+O1xuXG4gIGV4cG9ydCBuYW1lc3BhY2UgSlNYIHtcbiAgICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQgZXh0ZW5kcyBRd2lrSlNYLkVsZW1lbnQge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0F0dHJpYnV0ZXMgZXh0ZW5kcyBRd2lrSlNYLkludHJpbnNpY0F0dHJpYnV0ZXMge31cbiAgICBleHBvcnQgaW50ZXJmYWNlIEludHJpbnNpY0VsZW1lbnRzIGV4dGVuZHMgUXdpa0pTWC5JbnRyaW5zaWNFbGVtZW50cyB7fVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudENoaWxkcmVuQXR0cmlidXRlIHtcbiAgICAgIGNoaWxkcmVuPzogYW55O1xuICAgIH1cbiAgfVxufVxuIl19","import { QSlotS } from '../../util/markers';\nimport { Virtual } from './utils.public';\nimport { jsx } from './jsx-runtime';\n/**\n * Allows to project the children of the current component. <Slot/> can only be used within the context of a component defined with `component$`.\n *\n * @public\n */\nexport const Slot = (props) => {\n    const name = props.name ?? '';\n    return jsx(Virtual, {\n        [QSlotS]: '',\n    }, name);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xvdC5wdWJsaWMuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL3F3aWsvc3JjL2NvcmUvcmVuZGVyL2pzeC9zbG90LnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHcEM7Ozs7R0FJRztBQUNILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FFWixDQUFDLEtBQUssRUFBRSxFQUFFO0lBQ2IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7SUFDOUIsT0FBTyxHQUFHLENBQ1IsT0FBTyxFQUNQO1FBQ0UsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFO0tBQ2IsRUFDRCxJQUFJLENBQ0wsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFFTbG90UyB9IGZyb20gJy4uLy4uL3V0aWwvbWFya2Vycyc7XG5pbXBvcnQgeyBWaXJ0dWFsIH0gZnJvbSAnLi91dGlscy5wdWJsaWMnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnLi9qc3gtcnVudGltZSc7XG5pbXBvcnQgdHlwZSB7IEZ1bmN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi90eXBlcy9qc3gtbm9kZSc7XG5cbi8qKlxuICogQWxsb3dzIHRvIHByb2plY3QgdGhlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50IGNvbXBvbmVudC4gPFNsb3QvPiBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiB0aGUgY29udGV4dCBvZiBhIGNvbXBvbmVudCBkZWZpbmVkIHdpdGggYGNvbXBvbmVudCRgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IFNsb3Q6IEZ1bmN0aW9uQ29tcG9uZW50PHtcbiAgbmFtZT86IHN0cmluZztcbn0+ID0gKHByb3BzKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBwcm9wcy5uYW1lID8/ICcnO1xuICByZXR1cm4ganN4KFxuICAgIFZpcnR1YWwsXG4gICAge1xuICAgICAgW1FTbG90U106ICcnLFxuICAgIH0sXG4gICAgbmFtZVxuICApO1xufTtcbiJdfQ==","/**\n * QWIK_VERSION\n * @public\n */\nexport const version = globalThis.QWIK_VERSION;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS92ZXJzaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBSSxVQUFrQixDQUFDLFlBQXNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFFXSUtfVkVSU0lPTlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9IChnbG9iYWxUaGlzIGFzIGFueSkuUVdJS19WRVJTSU9OIGFzIHN0cmluZztcbiJdfQ==","import { isDocument } from '../../util/element';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { domToVnode, visitJsxNode } from './visitor';\nimport { getDocument } from '../../util/dom';\nimport { qDev } from '../../util/qdev';\nimport { version } from '../../version';\nimport { QContainerAttr } from '../../util/markers';\nimport { appendQwikDevTools } from '../../props/props';\nimport { qError, QError_cannotRenderOverExistingContainer } from '../../error/error';\nimport { directSetAttribute } from '../fast-calls';\nimport { processData, wrapJSX } from './render-dom';\nimport { getContainerState } from '../container';\nimport { postRendering } from './notify-render';\nimport { createRenderContext } from '../execute-component';\nimport { executeDOMRender, printRenderStats } from './operations';\nimport { logError } from '../../util/log';\n/**\n * Render JSX.\n *\n * Use this method to render JSX. This function does reconciling which means\n * it always tries to reuse what is already in the DOM (rather then destroy and\n * recreate content.)\n *\n * @param parent - Element which will act as a parent to `jsxNode`. When\n *     possible the rendering will try to reuse existing nodes.\n * @param jsxNode - JSX to render\n * @alpha\n */\nexport const render = async (parent, jsxNode, opts) => {\n    // If input is not JSX, convert it\n    if (!isJSXNode(jsxNode)) {\n        jsxNode = jsx(jsxNode, null);\n    }\n    const doc = getDocument(parent);\n    const containerEl = getElement(parent);\n    if (qDev && containerEl.hasAttribute(QContainerAttr)) {\n        throw qError(QError_cannotRenderOverExistingContainer, containerEl);\n    }\n    // if (qDev) {\n    //   if (parent.childNodes.length > 0) {\n    //     throw new Error('Container must be empty before mounting anything inside');\n    //   }\n    // }\n    injectQContainer(containerEl);\n    const containerState = getContainerState(containerEl);\n    const envData = opts?.envData;\n    if (envData) {\n        Object.assign(containerState.$envData$, envData);\n    }\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = renderRoot(containerEl, jsxNode, doc, containerState, containerEl);\n    const renderCtx = await containerState.$renderPromise$;\n    await postRendering(containerState, renderCtx);\n};\nconst renderRoot = async (parent, jsxNode, doc, containerState, containerEl) => {\n    const ctx = createRenderContext(doc, containerState);\n    const staticCtx = ctx.$static$;\n    // staticCtx.$roots$.push(parent as Element);\n    try {\n        const processedNodes = await processData(jsxNode);\n        const rootJsx = domToVnode(parent);\n        await visitJsxNode(ctx, rootJsx, wrapJSX(parent, processedNodes), 0);\n    }\n    catch (err) {\n        logError(err);\n    }\n    staticCtx.$operations$.push(...staticCtx.$postOperations$);\n    executeDOMRender(staticCtx);\n    if (qDev) {\n        appendQwikDevTools(containerEl);\n        printRenderStats(staticCtx);\n    }\n    return staticCtx;\n};\nexport const getElement = (docOrElm) => {\n    return isDocument(docOrElm) ? docOrElm.documentElement : docOrElm;\n};\nexport const injectQContainer = (containerEl) => {\n    directSetAttribute(containerEl, 'q:version', version ?? 'dev');\n    directSetAttribute(containerEl, QContainerAttr, 'resumed');\n    directSetAttribute(containerEl, 'q:render', qDev ? 'dom-dev' : 'dom');\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS9yZW5kZXIvZG9tL3JlbmRlci5wdWJsaWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsTUFBTSxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3BELE9BQU8sRUFBa0IsaUJBQWlCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDakUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzNELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFTMUM7Ozs7Ozs7Ozs7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RUFBRTtJQUN2RCxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQztJQUMvRCxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsY0FBYyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNELGtCQUFrQixDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hFLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzRG9jdW1lbnQgfSBmcm9tICcuLi8uLi91dGlsL2VsZW1lbnQnO1xuaW1wb3J0IHsgaXNKU1hOb2RlLCBqc3ggfSBmcm9tICcuLi9qc3gvanN4LXJ1bnRpbWUnO1xuaW1wb3J0IHR5cGUgeyBKU1hOb2RlLCBGdW5jdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL2pzeC90eXBlcy9qc3gtbm9kZSc7XG5pbXBvcnQgeyBkb21Ub1Zub2RlLCB2aXNpdEpzeE5vZGUgfSBmcm9tICcuL3Zpc2l0b3InO1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5pbXBvcnQgeyBxRGV2IH0gZnJvbSAnLi4vLi4vdXRpbC9xZGV2JztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi8uLi92ZXJzaW9uJztcbmltcG9ydCB7IFFDb250YWluZXJBdHRyIH0gZnJvbSAnLi4vLi4vdXRpbC9tYXJrZXJzJztcbmltcG9ydCB7IGFwcGVuZFF3aWtEZXZUb29scyB9IGZyb20gJy4uLy4uL3Byb3BzL3Byb3BzJztcbmltcG9ydCB7IHFFcnJvciwgUUVycm9yX2Nhbm5vdFJlbmRlck92ZXJFeGlzdGluZ0NvbnRhaW5lciB9IGZyb20gJy4uLy4uL2Vycm9yL2Vycm9yJztcbmltcG9ydCB7IGRpcmVjdFNldEF0dHJpYnV0ZSB9IGZyb20gJy4uL2Zhc3QtY2FsbHMnO1xuaW1wb3J0IHsgcHJvY2Vzc0RhdGEsIHdyYXBKU1ggfSBmcm9tICcuL3JlbmRlci1kb20nO1xuaW1wb3J0IHsgQ29udGFpbmVyU3RhdGUsIGdldENvbnRhaW5lclN0YXRlIH0gZnJvbSAnLi4vY29udGFpbmVyJztcbmltcG9ydCB7IHBvc3RSZW5kZXJpbmcgfSBmcm9tICcuL25vdGlmeS1yZW5kZXInO1xuaW1wb3J0IHsgY3JlYXRlUmVuZGVyQ29udGV4dCB9IGZyb20gJy4uL2V4ZWN1dGUtY29tcG9uZW50JztcbmltcG9ydCB7IGV4ZWN1dGVET01SZW5kZXIsIHByaW50UmVuZGVyU3RhdHMgfSBmcm9tICcuL29wZXJhdGlvbnMnO1xuaW1wb3J0IHsgbG9nRXJyb3IgfSBmcm9tICcuLi8uLi91dGlsL2xvZyc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyT3B0aW9ucyB7XG4gIGVudkRhdGE/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xufVxuXG4vKipcbiAqIFJlbmRlciBKU1guXG4gKlxuICogVXNlIHRoaXMgbWV0aG9kIHRvIHJlbmRlciBKU1guIFRoaXMgZnVuY3Rpb24gZG9lcyByZWNvbmNpbGluZyB3aGljaCBtZWFuc1xuICogaXQgYWx3YXlzIHRyaWVzIHRvIHJldXNlIHdoYXQgaXMgYWxyZWFkeSBpbiB0aGUgRE9NIChyYXRoZXIgdGhlbiBkZXN0cm95IGFuZFxuICogcmVjcmVhdGUgY29udGVudC4pXG4gKlxuICogQHBhcmFtIHBhcmVudCAtIEVsZW1lbnQgd2hpY2ggd2lsbCBhY3QgYXMgYSBwYXJlbnQgdG8gYGpzeE5vZGVgLiBXaGVuXG4gKiAgICAgcG9zc2libGUgdGhlIHJlbmRlcmluZyB3aWxsIHRyeSB0byByZXVzZSBleGlzdGluZyBub2Rlcy5cbiAqIEBwYXJhbSBqc3hOb2RlIC0gSlNYIHRvIHJlbmRlclxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSBhc3luYyAoXG4gIHBhcmVudDogRWxlbWVudCB8IERvY3VtZW50LFxuICBqc3hOb2RlOiBKU1hOb2RlIHwgRnVuY3Rpb25Db21wb25lbnQ8YW55PixcbiAgb3B0cz86IFJlbmRlck9wdGlvbnNcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICAvLyBJZiBpbnB1dCBpcyBub3QgSlNYLCBjb252ZXJ0IGl0XG4gIGlmICghaXNKU1hOb2RlKGpzeE5vZGUpKSB7XG4gICAganN4Tm9kZSA9IGpzeChqc3hOb2RlLCBudWxsKTtcbiAgfVxuICBjb25zdCBkb2MgPSBnZXREb2N1bWVudChwYXJlbnQpO1xuICBjb25zdCBjb250YWluZXJFbCA9IGdldEVsZW1lbnQocGFyZW50KTtcbiAgaWYgKHFEZXYgJiYgY29udGFpbmVyRWwuaGFzQXR0cmlidXRlKFFDb250YWluZXJBdHRyKSkge1xuICAgIHRocm93IHFFcnJvcihRRXJyb3JfY2Fubm90UmVuZGVyT3ZlckV4aXN0aW5nQ29udGFpbmVyLCBjb250YWluZXJFbCk7XG4gIH1cbiAgLy8gaWYgKHFEZXYpIHtcbiAgLy8gICBpZiAocGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKCdDb250YWluZXIgbXVzdCBiZSBlbXB0eSBiZWZvcmUgbW91bnRpbmcgYW55dGhpbmcgaW5zaWRlJyk7XG4gIC8vICAgfVxuICAvLyB9XG4gIGluamVjdFFDb250YWluZXIoY29udGFpbmVyRWwpO1xuXG4gIGNvbnN0IGNvbnRhaW5lclN0YXRlID0gZ2V0Q29udGFpbmVyU3RhdGUoY29udGFpbmVyRWwpO1xuICBjb25zdCBlbnZEYXRhID0gb3B0cz8uZW52RGF0YTtcbiAgaWYgKGVudkRhdGEpIHtcbiAgICBPYmplY3QuYXNzaWduKGNvbnRhaW5lclN0YXRlLiRlbnZEYXRhJCwgZW52RGF0YSk7XG4gIH1cbiAgY29udGFpbmVyU3RhdGUuJGhvc3RzUmVuZGVyaW5nJCA9IG5ldyBTZXQoKTtcbiAgY29udGFpbmVyU3RhdGUuJHJlbmRlclByb21pc2UkID0gcmVuZGVyUm9vdChcbiAgICBjb250YWluZXJFbCxcbiAgICBqc3hOb2RlLFxuICAgIGRvYyxcbiAgICBjb250YWluZXJTdGF0ZSxcbiAgICBjb250YWluZXJFbFxuICApO1xuXG4gIGNvbnN0IHJlbmRlckN0eCA9IGF3YWl0IGNvbnRhaW5lclN0YXRlLiRyZW5kZXJQcm9taXNlJDtcbiAgYXdhaXQgcG9zdFJlbmRlcmluZyhjb250YWluZXJTdGF0ZSwgcmVuZGVyQ3R4KTtcbn07XG5cbmNvbnN0IHJlbmRlclJvb3QgPSBhc3luYyAoXG4gIHBhcmVudDogRWxlbWVudCxcbiAganN4Tm9kZTogSlNYTm9kZTx1bmtub3duPiB8IEZ1bmN0aW9uQ29tcG9uZW50PGFueT4sXG4gIGRvYzogRG9jdW1lbnQsXG4gIGNvbnRhaW5lclN0YXRlOiBDb250YWluZXJTdGF0ZSxcbiAgY29udGFpbmVyRWw6IEVsZW1lbnRcbikgPT4ge1xuICBjb25zdCBjdHggPSBjcmVhdGVSZW5kZXJDb250ZXh0KGRvYywgY29udGFpbmVyU3RhdGUpO1xuICBjb25zdCBzdGF0aWNDdHggPSBjdHguJHN0YXRpYyQ7XG4gIC8vIHN0YXRpY0N0eC4kcm9vdHMkLnB1c2gocGFyZW50IGFzIEVsZW1lbnQpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcHJvY2Vzc2VkTm9kZXMgPSBhd2FpdCBwcm9jZXNzRGF0YShqc3hOb2RlKTtcbiAgICBjb25zdCByb290SnN4ID0gZG9tVG9Wbm9kZShwYXJlbnQpO1xuICAgIGF3YWl0IHZpc2l0SnN4Tm9kZShjdHgsIHJvb3RKc3gsIHdyYXBKU1gocGFyZW50LCBwcm9jZXNzZWROb2RlcyksIDApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2dFcnJvcihlcnIpO1xuICB9XG5cbiAgc3RhdGljQ3R4LiRvcGVyYXRpb25zJC5wdXNoKC4uLnN0YXRpY0N0eC4kcG9zdE9wZXJhdGlvbnMkKTtcbiAgZXhlY3V0ZURPTVJlbmRlcihzdGF0aWNDdHgpO1xuXG4gIGlmIChxRGV2KSB7XG4gICAgYXBwZW5kUXdpa0RldlRvb2xzKGNvbnRhaW5lckVsKTtcbiAgICBwcmludFJlbmRlclN0YXRzKHN0YXRpY0N0eCk7XG4gIH1cbiAgcmV0dXJuIHN0YXRpY0N0eDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRFbGVtZW50ID0gKGRvY09yRWxtOiBEb2N1bWVudCB8IEVsZW1lbnQpOiBFbGVtZW50ID0+IHtcbiAgcmV0dXJuIGlzRG9jdW1lbnQoZG9jT3JFbG0pID8gZG9jT3JFbG0uZG9jdW1lbnRFbGVtZW50IDogZG9jT3JFbG07XG59O1xuXG5leHBvcnQgY29uc3QgaW5qZWN0UUNvbnRhaW5lciA9IChjb250YWluZXJFbDogRWxlbWVudCkgPT4ge1xuICBkaXJlY3RTZXRBdHRyaWJ1dGUoY29udGFpbmVyRWwsICdxOnZlcnNpb24nLCB2ZXJzaW9uID8/ICdkZXYnKTtcbiAgZGlyZWN0U2V0QXR0cmlidXRlKGNvbnRhaW5lckVsLCBRQ29udGFpbmVyQXR0ciwgJ3Jlc3VtZWQnKTtcbiAgZGlyZWN0U2V0QXR0cmlidXRlKGNvbnRhaW5lckVsLCAncTpyZW5kZXInLCBxRGV2ID8gJ2RvbS1kZXYnIDogJ2RvbScpO1xufTtcbiJdfQ==","import { isPromise, then } from '../../util/promises';\nimport { newInvokeContext, invoke } from '../../use/use-core';\nimport { isJSXNode, jsx } from '../jsx/jsx-runtime';\nimport { isArray, isFunction, isString } from '../../util/types';\nimport { getContext, Q_CTX } from '../../props/props';\nimport { createRenderContext, executeComponent, getNextIndex, stringifyStyle, } from '../execute-component';\nimport { ELEMENT_ID, OnRenderProp, QScopedStyle, QSlot, QSlotS, QStyle } from '../../util/markers';\nimport { SSRComment, InternalSSRStream, Virtual } from '../jsx/utils.public';\nimport { logError, logWarn } from '../../util/log';\nimport { addQRLListener, groupListeners, isOnProp, setEvent } from '../../props/props-on';\nimport { version } from '../../version';\nimport { createContainerState, setRef } from '../container';\nimport { assertDefined } from '../../assert/assert';\nimport { serializeSStyle } from '../../component/qrl-styles';\nimport { qDev, seal } from '../../util/qdev';\nimport { qError, QError_canNotRenderHTML } from '../../error/error';\nimport { addSignalSub, createProxy, isSignal, QObjectFlagsSymbol, QObjectImmutable, _IMMUTABLE, _IMMUTABLE_PREFIX, } from '../../object/q-object';\nimport { serializeQRLs } from '../../import/qrl';\nimport { assertElement } from '../../util/element';\nimport { EMPTY_OBJ } from '../../util/flyweight';\nconst FLUSH_COMMENT = '<!--qkssr-f-->';\nconst IS_HEAD = 1 << 0;\nconst IS_HTML = 1 << 2;\nconst IS_TEXT = 1 << 3;\nexport const createDocument = () => {\n    const doc = { nodeType: 9 };\n    seal(doc);\n    return doc;\n};\n/**\n * @alpha\n */\nexport const renderSSR = async (node, opts) => {\n    const root = opts.containerTagName;\n    const containerEl = createContext(1).$element$;\n    const containerState = createContainerState(containerEl);\n    const doc = createDocument();\n    const rCtx = createRenderContext(doc, containerState);\n    const headNodes = opts.beforeContent ?? [];\n    const ssrCtx = {\n        rCtx,\n        $contexts$: [],\n        projectedChildren: undefined,\n        projectedContext: undefined,\n        hostCtx: null,\n        invocationContext: undefined,\n        headNodes: root === 'html' ? headNodes : [],\n        $pendingListeners$: [],\n    };\n    const containerAttributes = {\n        ...opts.containerAttributes,\n        'q:container': 'paused',\n        'q:version': version ?? 'dev',\n        'q:render': qDev ? 'ssr-dev' : 'ssr',\n        'q:base': opts.base,\n        children: root === 'html' ? [node] : [headNodes, node],\n    };\n    containerState.$envData$ = {\n        url: opts.url,\n        ...opts.envData,\n    };\n    node = jsx(root, containerAttributes);\n    containerState.$hostsRendering$ = new Set();\n    containerState.$renderPromise$ = Promise.resolve().then(() => renderRoot(node, ssrCtx, opts.stream, containerState, opts));\n    await containerState.$renderPromise$;\n};\nexport const renderRoot = async (node, ssrCtx, stream, containerState, opts) => {\n    const beforeClose = opts.beforeClose;\n    await renderNode(node, ssrCtx, stream, 0, beforeClose\n        ? (stream) => {\n            const result = beforeClose(ssrCtx.$contexts$, containerState);\n            return processData(result, ssrCtx, stream, 0, undefined);\n        }\n        : undefined);\n    if (qDev) {\n        if (ssrCtx.headNodes.length > 0) {\n            logError('Missing <head>. Global styles could not be rendered. Please render a <head> element at the root of the app');\n        }\n    }\n    return ssrCtx.rCtx.$static$;\n};\nexport const renderGenerator = async (node, ssrCtx, stream, flags) => {\n    stream.write(FLUSH_COMMENT);\n    const generator = node.props.children;\n    let value;\n    if (isFunction(generator)) {\n        const v = generator({\n            write(chunk) {\n                stream.write(chunk);\n                stream.write(FLUSH_COMMENT);\n            },\n        });\n        if (isPromise(v)) {\n            return v;\n        }\n        value = v;\n    }\n    else {\n        value = generator;\n    }\n    for await (const chunk of value) {\n        await processData(chunk, ssrCtx, stream, flags, undefined);\n        stream.write(FLUSH_COMMENT);\n    }\n};\nexport const renderNodeVirtual = (node, elCtx, extraNodes, ssrCtx, stream, flags, beforeClose) => {\n    const props = node.props;\n    const renderQrl = props[OnRenderProp];\n    if (renderQrl) {\n        elCtx.$componentQrl$ = renderQrl;\n        return renderSSRComponent(ssrCtx, stream, elCtx, node, flags, beforeClose);\n    }\n    let virtualComment = '<!--qv' + renderVirtualAttributes(props);\n    const isSlot = QSlotS in props;\n    const key = node.key != null ? String(node.key) : null;\n    if (isSlot) {\n        assertDefined(ssrCtx.hostCtx?.$id$, 'hostId must be defined for a slot');\n        virtualComment += ' q:sref=' + ssrCtx.hostCtx.$id$;\n    }\n    if (key != null) {\n        virtualComment += ' q:key=' + key;\n    }\n    virtualComment += '-->';\n    stream.write(virtualComment);\n    if (extraNodes) {\n        for (const node of extraNodes) {\n            renderNodeElementSync(node.type, node.props, stream);\n        }\n    }\n    const promise = walkChildren(props.children, ssrCtx, stream, flags);\n    return then(promise, () => {\n        // Fast path\n        if (!isSlot && !beforeClose) {\n            stream.write(CLOSE_VIRTUAL);\n            return;\n        }\n        let promise;\n        if (isSlot) {\n            assertDefined(key, 'key must be defined for a slot');\n            const content = ssrCtx.projectedChildren?.[key];\n            if (content) {\n                ssrCtx.projectedChildren[key] = undefined;\n                promise = processData(content, ssrCtx.projectedContext, stream, flags);\n            }\n        }\n        // Inject before close\n        if (beforeClose) {\n            promise = then(promise, () => beforeClose(stream));\n        }\n        return then(promise, () => {\n            stream.write(CLOSE_VIRTUAL);\n        });\n    });\n};\nconst CLOSE_VIRTUAL = `<!--/qv-->`;\nexport const renderAttributes = (attributes) => {\n    let text = '';\n    for (const prop of Object.keys(attributes)) {\n        if (prop === 'dangerouslySetInnerHTML') {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=\"' + value + '\"');\n        }\n    }\n    return text;\n};\nexport const renderVirtualAttributes = (attributes) => {\n    let text = '';\n    for (const prop of Object.keys(attributes)) {\n        if (prop === 'children') {\n            continue;\n        }\n        const value = attributes[prop];\n        if (value != null) {\n            text += ' ' + (value === '' ? prop : prop + '=' + value + '');\n        }\n    }\n    return text;\n};\nexport const renderNodeElementSync = (tagName, attributes, stream) => {\n    stream.write('<' + tagName + renderAttributes(attributes) + '>');\n    const empty = !!emptyElements[tagName];\n    if (empty) {\n        return;\n    }\n    // Render innerHTML\n    const innerHTML = attributes.dangerouslySetInnerHTML;\n    if (innerHTML != null) {\n        stream.write(innerHTML);\n    }\n    stream.write(`</${tagName}>`);\n};\nexport const renderSSRComponent = (ssrCtx, stream, elCtx, node, flags, beforeClose) => {\n    const props = node.props;\n    setComponentProps(ssrCtx.rCtx, elCtx, props.props);\n    return then(executeComponent(ssrCtx.rCtx, elCtx), (res) => {\n        const hostElement = elCtx.$element$;\n        const newCtx = res.rCtx;\n        const invocationContext = newInvokeContext(hostElement, undefined);\n        invocationContext.$subscriber$ = hostElement;\n        invocationContext.$renderCtx$ = newCtx;\n        const projectedContext = {\n            ...ssrCtx,\n            rCtx: newCtx,\n        };\n        const newSSrContext = {\n            ...ssrCtx,\n            projectedChildren: splitProjectedChildren(props.children, ssrCtx),\n            projectedContext,\n            rCtx: newCtx,\n            invocationContext,\n        };\n        const extraNodes = [];\n        if (elCtx.$appendStyles$) {\n            const isHTML = !!(flags & IS_HTML);\n            const array = isHTML ? ssrCtx.headNodes : extraNodes;\n            for (const style of elCtx.$appendStyles$) {\n                array.push(jsx('style', {\n                    [QStyle]: style.styleId,\n                    dangerouslySetInnerHTML: style.content,\n                }));\n            }\n        }\n        const newID = getNextIndex(ssrCtx.rCtx);\n        const scopeId = elCtx.$scopeIds$ ? serializeSStyle(elCtx.$scopeIds$) : undefined;\n        const processedNode = jsx(node.type, {\n            [QScopedStyle]: scopeId,\n            [ELEMENT_ID]: newID,\n            children: res.node,\n        }, node.key);\n        elCtx.$id$ = newID;\n        ssrCtx.$contexts$.push(elCtx);\n        newSSrContext.hostCtx = elCtx;\n        return renderNodeVirtual(processedNode, elCtx, extraNodes, newSSrContext, stream, flags, (stream) => {\n            if (elCtx.$needAttachListeners$) {\n                logWarn('Component registered some events, some component use useStyleStyle$()');\n            }\n            if (beforeClose) {\n                return then(renderQTemplates(newSSrContext, stream), () => beforeClose(stream));\n            }\n            else {\n                return renderQTemplates(newSSrContext, stream);\n            }\n        });\n    });\n};\nconst renderQTemplates = (ssrContext, stream) => {\n    const projectedChildren = ssrContext.projectedChildren;\n    if (projectedChildren) {\n        const nodes = Object.keys(projectedChildren).map((slotName) => {\n            const value = projectedChildren[slotName];\n            if (value) {\n                return jsx('q:template', {\n                    [QSlot]: slotName,\n                    hidden: '',\n                    'aria-hidden': 'true',\n                    children: value,\n                });\n            }\n        });\n        return processData(nodes, ssrContext, stream, 0, undefined);\n    }\n};\nconst splitProjectedChildren = (children, ssrCtx) => {\n    const flatChildren = flatVirtualChildren(children, ssrCtx);\n    if (flatChildren === null) {\n        return undefined;\n    }\n    const slotMap = {};\n    for (const child of flatChildren) {\n        let slotName = '';\n        if (isJSXNode(child)) {\n            slotName = child.props[QSlot] ?? '';\n        }\n        let array = slotMap[slotName];\n        if (!array) {\n            slotMap[slotName] = array = [];\n        }\n        array.push(child);\n    }\n    return slotMap;\n};\nexport const createContext = (nodeType) => {\n    const elm = {\n        nodeType,\n        [Q_CTX]: null,\n    };\n    seal(elm);\n    return getContext(elm);\n};\nexport const renderNode = (node, ssrCtx, stream, flags, beforeClose) => {\n    const tagName = node.type;\n    if (typeof tagName === 'string') {\n        const key = node.key;\n        const props = node.props;\n        const immutableMeta = props[_IMMUTABLE] ?? EMPTY_OBJ;\n        const elCtx = createContext(1);\n        const elm = elCtx.$element$;\n        const isHead = tagName === 'head';\n        const hostCtx = ssrCtx.hostCtx;\n        let openingElement = '<' + tagName;\n        let useSignal = false;\n        assertElement(elm);\n        for (const prop of Object.keys(props)) {\n            if (prop === 'children' ||\n                prop === 'key' ||\n                prop === 'class' ||\n                prop === 'className' ||\n                prop === 'dangerouslySetInnerHTML') {\n                continue;\n            }\n            if (prop === 'ref') {\n                setRef(props[prop], elm);\n                continue;\n            }\n            let value = isSignal(immutableMeta[prop]) ? immutableMeta[prop] : props[prop];\n            if (isOnProp(prop)) {\n                setEvent(elCtx.li, prop, value, undefined);\n                continue;\n            }\n            const attrName = processPropKey(prop);\n            if (isSignal(value)) {\n                if (hostCtx) {\n                    const hostEl = hostCtx.$element$;\n                    addSignalSub(1, hostEl, value, elm, attrName);\n                    useSignal = true;\n                }\n                value = value.value;\n            }\n            const attrValue = processPropValue(attrName, value);\n            if (attrValue != null) {\n                openingElement +=\n                    ' ' + (value === '' ? attrName : attrName + '=\"' + escapeAttr(attrValue) + '\"');\n            }\n        }\n        const listeners = elCtx.li;\n        const classValue = props.class ?? props.className;\n        let classStr = stringifyClass(classValue);\n        if (hostCtx) {\n            if (qDev) {\n                if (tagName === 'html') {\n                    throw qError(QError_canNotRenderHTML);\n                }\n            }\n            if (hostCtx.$scopeIds$) {\n                classStr = hostCtx.$scopeIds$.join(' ') + ' ' + classStr;\n            }\n            if (hostCtx.$needAttachListeners$) {\n                addQRLListener(listeners, hostCtx.li);\n                hostCtx.$needAttachListeners$ = false;\n            }\n        }\n        // Reset HOST flags\n        if (isHead) {\n            flags |= IS_HEAD;\n        }\n        if (textOnlyElements[tagName]) {\n            flags |= IS_TEXT;\n        }\n        classStr = classStr.trim();\n        if (classStr) {\n            openingElement += ' class=\"' + classStr + '\"';\n        }\n        if (listeners.length > 0) {\n            const groups = groupListeners(listeners);\n            for (const listener of groups) {\n                openingElement += ' ' + listener[0] + '=\"' + serializeQRLs(listener[1], elCtx) + '\"';\n            }\n        }\n        if (key != null) {\n            openingElement += ' q:key=\"' + key + '\"';\n        }\n        if ('ref' in props || listeners.length > 0 || useSignal) {\n            const newID = getNextIndex(ssrCtx.rCtx);\n            openingElement += ' q:id=\"' + newID + '\"';\n            elCtx.$id$ = newID;\n            ssrCtx.$contexts$.push(elCtx);\n        }\n        if (flags & IS_HEAD) {\n            openingElement += ' q:head';\n        }\n        openingElement += '>';\n        stream.write(openingElement);\n        if (emptyElements[tagName]) {\n            return;\n        }\n        const innerHTML = props.dangerouslySetInnerHTML;\n        if (innerHTML != null) {\n            stream.write(String(innerHTML));\n            stream.write(`</${tagName}>`);\n            return;\n        }\n        if (!isHead) {\n            flags &= ~IS_HEAD;\n        }\n        if (tagName === 'html') {\n            flags |= IS_HTML;\n        }\n        else {\n            flags &= ~IS_HTML;\n        }\n        const promise = processData(props.children, ssrCtx, stream, flags);\n        return then(promise, () => {\n            // If head inject base styles\n            if (isHead) {\n                for (const node of ssrCtx.headNodes) {\n                    renderNodeElementSync(node.type, node.props, stream);\n                }\n                ssrCtx.headNodes.length = 0;\n            }\n            // Fast path\n            if (!beforeClose) {\n                stream.write(`</${tagName}>`);\n                return;\n            }\n            // Inject before close\n            return then(beforeClose(stream), () => {\n                stream.write(`</${tagName}>`);\n            });\n        });\n    }\n    if (tagName === Virtual) {\n        const elCtx = createContext(111);\n        elCtx.$parent$ = ssrCtx.hostCtx;\n        return renderNodeVirtual(node, elCtx, undefined, ssrCtx, stream, flags, beforeClose);\n    }\n    if (tagName === SSRComment) {\n        stream.write('<!--' + node.props.data + '-->');\n        return;\n    }\n    if (tagName === InternalSSRStream) {\n        return renderGenerator(node, ssrCtx, stream, flags);\n    }\n    const res = invoke(ssrCtx.invocationContext, tagName, node.props, node.key);\n    return processData(res, ssrCtx, stream, flags, beforeClose);\n};\nexport const processData = (node, ssrCtx, stream, flags, beforeClose) => {\n    if (node == null || typeof node === 'boolean') {\n        return;\n    }\n    if (isString(node) || typeof node === 'number') {\n        stream.write(escapeHtml(String(node)));\n    }\n    else if (isJSXNode(node)) {\n        return renderNode(node, ssrCtx, stream, flags, beforeClose);\n    }\n    else if (isArray(node)) {\n        return walkChildren(node, ssrCtx, stream, flags);\n    }\n    else if (isSignal(node)) {\n        const insideText = flags & IS_TEXT;\n        const hostEl = ssrCtx.hostCtx?.$element$;\n        let value;\n        if (hostEl) {\n            if (!insideText) {\n                value = node.value;\n                const id = getNextIndex(ssrCtx.rCtx);\n                addSignalSub(2, hostEl, node, '#' + id, 'data');\n                stream.write(`<!--t=${id}-->${escapeHtml(String(value))}<!---->`);\n                return;\n            }\n            else {\n                value = invoke(ssrCtx.invocationContext, () => node.value);\n            }\n        }\n        stream.write(escapeHtml(String(value)));\n        return;\n    }\n    else if (isPromise(node)) {\n        stream.write(FLUSH_COMMENT);\n        return node.then((node) => processData(node, ssrCtx, stream, flags, beforeClose));\n    }\n    else {\n        logWarn('A unsupported value was passed to the JSX, skipping render. Value:', node);\n    }\n};\nfunction walkChildren(children, ssrContext, stream, flags) {\n    if (children == null) {\n        return;\n    }\n    if (!isArray(children)) {\n        return processData(children, ssrContext, stream, flags);\n    }\n    if (children.length === 1) {\n        return processData(children[0], ssrContext, stream, flags);\n    }\n    if (children.length === 0) {\n        return;\n    }\n    let currentIndex = 0;\n    const buffers = [];\n    return children.reduce((prevPromise, child, index) => {\n        const buffer = [];\n        buffers.push(buffer);\n        const localStream = prevPromise\n            ? {\n                write(chunk) {\n                    if (currentIndex === index) {\n                        stream.write(chunk);\n                    }\n                    else {\n                        buffer.push(chunk);\n                    }\n                },\n            }\n            : stream;\n        const rendered = processData(child, ssrContext, localStream, flags);\n        const next = () => {\n            currentIndex++;\n            if (buffers.length > currentIndex) {\n                buffers[currentIndex].forEach((chunk) => stream.write(chunk));\n            }\n        };\n        if (isPromise(rendered) && prevPromise) {\n            return Promise.all([rendered, prevPromise]).then(next);\n        }\n        else if (isPromise(rendered)) {\n            return rendered.then(next);\n        }\n        else if (prevPromise) {\n            return prevPromise.then(next);\n        }\n        else {\n            currentIndex++;\n            return undefined;\n        }\n    }, undefined);\n}\nexport const flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    const result = _flatVirtualChildren(children, ssrCtx);\n    const nodes = isArray(result) ? result : [result];\n    if (nodes.length === 0) {\n        return null;\n    }\n    return nodes;\n};\nexport const stringifyClass = (str) => {\n    if (!str) {\n        return '';\n    }\n    if (typeof str === 'string') {\n        return str;\n    }\n    if (Array.isArray(str)) {\n        return str.join(' ');\n    }\n    const output = [];\n    for (const key in str) {\n        if (Object.prototype.hasOwnProperty.call(str, key)) {\n            const value = str[key];\n            if (value) {\n                output.push(key);\n            }\n        }\n    }\n    return output.join(' ');\n};\nexport const _flatVirtualChildren = (children, ssrCtx) => {\n    if (children == null) {\n        return null;\n    }\n    if (isArray(children)) {\n        return children.flatMap((c) => _flatVirtualChildren(c, ssrCtx));\n    }\n    else if (isJSXNode(children) &&\n        isFunction(children.type) &&\n        children.type !== SSRComment &&\n        children.type !== InternalSSRStream &&\n        children.type !== Virtual) {\n        const res = invoke(ssrCtx.invocationContext, children.type, children.props, children.key);\n        return flatVirtualChildren(res, ssrCtx);\n    }\n    return children;\n};\nconst setComponentProps = (rCtx, elCtx, expectProps) => {\n    const keys = Object.keys(expectProps);\n    const target = {\n        [QObjectFlagsSymbol]: QObjectImmutable,\n    };\n    elCtx.$props$ = createProxy(target, rCtx.$static$.$containerState$);\n    if (keys.length === 0) {\n        return;\n    }\n    const immutableMeta = (target[_IMMUTABLE] =\n        expectProps[_IMMUTABLE] ?? EMPTY_OBJ);\n    for (const key of keys) {\n        if (key === 'children') {\n            continue;\n        }\n        if (isSignal(immutableMeta[key])) {\n            target[_IMMUTABLE_PREFIX + key] = immutableMeta[key];\n        }\n        else {\n            target[key] = expectProps[key];\n        }\n    }\n};\nfunction processPropKey(prop) {\n    if (prop === 'htmlFor') {\n        return 'for';\n    }\n    return prop;\n}\nfunction processPropValue(prop, value) {\n    if (prop === 'style') {\n        return stringifyStyle(value);\n    }\n    if (value === false || value == null) {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    return String(value);\n}\nconst textOnlyElements = {\n    title: true,\n    style: true,\n    script: true,\n    noframes: true,\n    noscript: true,\n};\nconst emptyElements = {\n    area: true,\n    base: true,\n    basefont: true,\n    bgsound: true,\n    br: true,\n    col: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true,\n};\nconst ESCAPE_HTML = /[&<>]/g;\nconst ESCAPE_ATTRIBUTES = /[&\"]/g;\nexport const escapeHtml = (s) => {\n    return s.replace(ESCAPE_HTML, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '<':\n                return '&lt;';\n            case '>':\n                return '&gt;';\n            default:\n                return '';\n        }\n    });\n};\nexport const escapeAttr = (s) => {\n    return s.replace(ESCAPE_ATTRIBUTES, (c) => {\n        switch (c) {\n            case '&':\n                return '&amp;';\n            case '\"':\n                return '&quot;';\n            default:\n                return '';\n        }\n    });\n};\nexport const joinClasses = (styles, existing) => {\n    return styles.join(' ') + existing;\n};\nexport const isPrimitive = (obj) => {\n    return isString(obj) || typeof obj === 'number';\n};\n//# sourceMappingURL=data:application/json;base64,","import { getOrCreateProxy, QObjectRecursive } from '../object/q-object';\nimport { isFunction } from '../util/types';\nimport { useSequentialScope } from './use-sequential-scope';\n// <docs markdown=\"../readme.md#useStore\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStore instead)\n/**\n * Creates an object that Qwik can track across serializations.\n *\n * Use `useStore` to create a state for your application. The returned object is a proxy that has\n * a unique ID. The ID of the object is used in the `QRL`s to refer to the store.\n *\n * ### Example\n *\n * Example showing how `useStore` is used in Counter example to keep track of the count.\n *\n * ```tsx\n * const Stores = component$(() => {\n *   const counter = useCounter(1);\n *\n *   // Reactivity happens even for nested objects and arrays\n *   const userData = useStore({\n *     name: 'Manu',\n *     address: {\n *       address: '',\n *       city: '',\n *     },\n *     orgs: [],\n *   });\n *\n *   // useStore() can also accept a function to calculate the initial value\n *   const state = useStore(() => {\n *     return {\n *       value: expensiveInitialValue(),\n *     };\n *   });\n *\n *   return (\n *     <div>\n *       <div>Counter: {counter.value}</div>\n *       <Child userData={userData} state={state} />\n *     </div>\n *   );\n * });\n *\n * function useCounter(step: number) {\n *   // Multiple stores can be created in custom hooks for convenience and composability\n *   const counterStore = useStore({\n *     value: 0,\n *   });\n *   useClientEffect$(() => {\n *     // Only runs in the client\n *     const timer = setInterval(() => {\n *       counterStore.value += step;\n *     }, 500);\n *     return () => {\n *       clearInterval(timer);\n *     };\n *   });\n *   return counterStore;\n * }\n * ```\n *\n * @public\n */\n// </docs>\nexport const useStore = (initialState, opts) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const value = isFunction(initialState) ? initialState() : initialState;\n    if (opts?.reactive === false) {\n        set(value);\n        return value;\n    }\n    else {\n        const containerState = ctx.$renderCtx$.$static$.$containerState$;\n        const recursive = opts?.recursive ?? false;\n        const flags = recursive ? QObjectRecursive : 0;\n        const newStore = getOrCreateProxy(value, containerState, flags);\n        set(newStore);\n        return newStore;\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXN0b3JlLnB1YmxpYy5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXN0b3JlLnB1YmxpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBVTVELDBDQUEwQztBQUMxQyx5Q0FBeUM7QUFDekMsdUNBQXVDO0FBQ3ZDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMERHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUN0QixZQUFtQyxFQUNuQyxJQUFzQixFQUNmLEVBQUU7SUFDVCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxrQkFBa0IsRUFBUyxDQUFDO0lBQ3RELElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtRQUNmLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFDRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFFLFlBQXlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO0lBQ3JGLElBQUksSUFBSSxFQUFFLFFBQVEsS0FBSyxLQUFLLEVBQUU7UUFDNUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ1gsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNO1FBQ0wsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7UUFDakUsTUFBTSxTQUFTLEdBQUcsSUFBSSxFQUFFLFNBQVMsSUFBSSxLQUFLLENBQUM7UUFDM0MsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sUUFBUSxHQUFHLGdCQUFnQixDQUFDLEtBQUssRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDaEUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2QsT0FBTyxRQUFRLENBQUM7S0FDakI7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRPckNyZWF0ZVByb3h5LCBRT2JqZWN0UmVjdXJzaXZlIH0gZnJvbSAnLi4vb2JqZWN0L3Etb2JqZWN0JztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL3R5cGVzJztcbmltcG9ydCB7IHVzZVNlcXVlbnRpYWxTY29wZSB9IGZyb20gJy4vdXNlLXNlcXVlbnRpYWwtc2NvcGUnO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVc2VTdG9yZU9wdGlvbnMge1xuICByZWN1cnNpdmU/OiBib29sZWFuO1xuICByZWFjdGl2ZT86IGJvb2xlYW47XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVN0b3JlXCI+XG4vLyAhIURPIE5PVCBFRElUIFRISVMgQ09NTUVOVCBESVJFQ1RMWSEhIVxuLy8gKGVkaXQgLi4vcmVhZG1lLm1kI3VzZVN0b3JlIGluc3RlYWQpXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgUXdpayBjYW4gdHJhY2sgYWNyb3NzIHNlcmlhbGl6YXRpb25zLlxuICpcbiAqIFVzZSBgdXNlU3RvcmVgIHRvIGNyZWF0ZSBhIHN0YXRlIGZvciB5b3VyIGFwcGxpY2F0aW9uLiBUaGUgcmV0dXJuZWQgb2JqZWN0IGlzIGEgcHJveHkgdGhhdCBoYXNcbiAqIGEgdW5pcXVlIElELiBUaGUgSUQgb2YgdGhlIG9iamVjdCBpcyB1c2VkIGluIHRoZSBgUVJMYHMgdG8gcmVmZXIgdG8gdGhlIHN0b3JlLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogRXhhbXBsZSBzaG93aW5nIGhvdyBgdXNlU3RvcmVgIGlzIHVzZWQgaW4gQ291bnRlciBleGFtcGxlIHRvIGtlZXAgdHJhY2sgb2YgdGhlIGNvdW50LlxuICpcbiAqIGBgYHRzeFxuICogY29uc3QgU3RvcmVzID0gY29tcG9uZW50JCgoKSA9PiB7XG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VDb3VudGVyKDEpO1xuICpcbiAqICAgLy8gUmVhY3Rpdml0eSBoYXBwZW5zIGV2ZW4gZm9yIG5lc3RlZCBvYmplY3RzIGFuZCBhcnJheXNcbiAqICAgY29uc3QgdXNlckRhdGEgPSB1c2VTdG9yZSh7XG4gKiAgICAgbmFtZTogJ01hbnUnLFxuICogICAgIGFkZHJlc3M6IHtcbiAqICAgICAgIGFkZHJlc3M6ICcnLFxuICogICAgICAgY2l0eTogJycsXG4gKiAgICAgfSxcbiAqICAgICBvcmdzOiBbXSxcbiAqICAgfSk7XG4gKlxuICogICAvLyB1c2VTdG9yZSgpIGNhbiBhbHNvIGFjY2VwdCBhIGZ1bmN0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgaW5pdGlhbCB2YWx1ZVxuICogICBjb25zdCBzdGF0ZSA9IHVzZVN0b3JlKCgpID0+IHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgdmFsdWU6IGV4cGVuc2l2ZUluaXRpYWxWYWx1ZSgpLFxuICogICAgIH07XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGRpdj5Db3VudGVyOiB7Y291bnRlci52YWx1ZX08L2Rpdj5cbiAqICAgICAgIDxDaGlsZCB1c2VyRGF0YT17dXNlckRhdGF9IHN0YXRlPXtzdGF0ZX0gLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGZ1bmN0aW9uIHVzZUNvdW50ZXIoc3RlcDogbnVtYmVyKSB7XG4gKiAgIC8vIE11bHRpcGxlIHN0b3JlcyBjYW4gYmUgY3JlYXRlZCBpbiBjdXN0b20gaG9va3MgZm9yIGNvbnZlbmllbmNlIGFuZCBjb21wb3NhYmlsaXR5XG4gKiAgIGNvbnN0IGNvdW50ZXJTdG9yZSA9IHVzZVN0b3JlKHtcbiAqICAgICB2YWx1ZTogMCxcbiAqICAgfSk7XG4gKiAgIHVzZUNsaWVudEVmZmVjdCQoKCkgPT4ge1xuICogICAgIC8vIE9ubHkgcnVucyBpbiB0aGUgY2xpZW50XG4gKiAgICAgY29uc3QgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gKiAgICAgICBjb3VudGVyU3RvcmUudmFsdWUgKz0gc3RlcDtcbiAqICAgICB9LCA1MDApO1xuICogICAgIHJldHVybiAoKSA9PiB7XG4gKiAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAqICAgICB9O1xuICogICB9KTtcbiAqICAgcmV0dXJuIGNvdW50ZXJTdG9yZTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNcbiAqL1xuLy8gPC9kb2NzPlxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gPFNUQVRFIGV4dGVuZHMgb2JqZWN0PihcbiAgaW5pdGlhbFN0YXRlOiBTVEFURSB8ICgoKSA9PiBTVEFURSksXG4gIG9wdHM/OiBVc2VTdG9yZU9wdGlvbnNcbik6IFNUQVRFID0+IHtcbiAgY29uc3QgeyBnZXQsIHNldCwgY3R4IH0gPSB1c2VTZXF1ZW50aWFsU2NvcGU8U1RBVEU+KCk7XG4gIGlmIChnZXQgIT0gbnVsbCkge1xuICAgIHJldHVybiBnZXQ7XG4gIH1cbiAgY29uc3QgdmFsdWUgPSBpc0Z1bmN0aW9uKGluaXRpYWxTdGF0ZSkgPyAoaW5pdGlhbFN0YXRlIGFzIEZ1bmN0aW9uKSgpIDogaW5pdGlhbFN0YXRlO1xuICBpZiAob3B0cz8ucmVhY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29udGFpbmVyU3RhdGUgPSBjdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJDtcbiAgICBjb25zdCByZWN1cnNpdmUgPSBvcHRzPy5yZWN1cnNpdmUgPz8gZmFsc2U7XG4gICAgY29uc3QgZmxhZ3MgPSByZWN1cnNpdmUgPyBRT2JqZWN0UmVjdXJzaXZlIDogMDtcbiAgICBjb25zdCBuZXdTdG9yZSA9IGdldE9yQ3JlYXRlUHJveHkodmFsdWUsIGNvbnRhaW5lclN0YXRlLCBmbGFncyk7XG4gICAgc2V0KG5ld1N0b3JlKTtcbiAgICByZXR1cm4gbmV3U3RvcmU7XG4gIH1cbn07XG4iXX0=","import { useStore } from './use-store.public';\n// <docs markdown=\"../readme.md#useRef\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useRef instead)\n/**\n * It's a very thin wrapper around `useStore()`, including the proper type signature to be passed\n * to the `ref` property in JSX.\n *\n * ```tsx\n * export function useRef<T = Element>(current?: T): Ref<T> {\n *   return useStore({ current });\n * }\n * ```\n *\n * ### Example\n *\n * ```tsx\n * const Cmp = component$(() => {\n *   const input = useRef<HTMLInputElement>();\n *\n *   useClientEffect$(({ track }) => {\n *     const el = track(() => input.current)!;\n *     el.focus();\n *   });\n *\n *   return (\n *     <div>\n *       <input type=\"text\" ref={input} />\n *     </div>\n *   );\n * });\n *\n * ```\n *\n * @deprecated Use `useSignal` instead.\n * @alpha\n */\n// </docs>\nexport const useRef = (current) => {\n    return useStore({ current });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXJlZi5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXJlZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFXOUMsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUN6QyxxQ0FBcUM7QUFDckM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0NHO0FBQ0gsVUFBVTtBQUNWLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxDQUE4QixPQUFXLEVBQVUsRUFBRTtJQUN6RSxPQUFPLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICcuL3VzZS1zdG9yZS5wdWJsaWMnO1xuXG4vKipcbiAqIFR5cGUgb2YgdGhlIHZhbHVlIHJldHVybmVkIGJ5IGB1c2VSZWYoKWAuXG4gKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVmPFQgPSBFbGVtZW50PiB7XG4gIGN1cnJlbnQ6IFQgfCB1bmRlZmluZWQ7XG59XG5cbi8vIDxkb2NzIG1hcmtkb3duPVwiLi4vcmVhZG1lLm1kI3VzZVJlZlwiPlxuLy8gISFETyBOT1QgRURJVCBUSElTIENPTU1FTlQgRElSRUNUTFkhISFcbi8vIChlZGl0IC4uL3JlYWRtZS5tZCN1c2VSZWYgaW5zdGVhZClcbi8qKlxuICogSXQncyBhIHZlcnkgdGhpbiB3cmFwcGVyIGFyb3VuZCBgdXNlU3RvcmUoKWAsIGluY2x1ZGluZyB0aGUgcHJvcGVyIHR5cGUgc2lnbmF0dXJlIHRvIGJlIHBhc3NlZFxuICogdG8gdGhlIGByZWZgIHByb3BlcnR5IGluIEpTWC5cbiAqXG4gKiBgYGB0c3hcbiAqIGV4cG9ydCBmdW5jdGlvbiB1c2VSZWY8VCA9IEVsZW1lbnQ+KGN1cnJlbnQ/OiBUKTogUmVmPFQ+IHtcbiAqICAgcmV0dXJuIHVzZVN0b3JlKHsgY3VycmVudCB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHN4XG4gKiBjb25zdCBDbXAgPSBjb21wb25lbnQkKCgpID0+IHtcbiAqICAgY29uc3QgaW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4oKTtcbiAqXG4gKiAgIHVzZUNsaWVudEVmZmVjdCQoKHsgdHJhY2sgfSkgPT4ge1xuICogICAgIGNvbnN0IGVsID0gdHJhY2soKCkgPT4gaW5wdXQuY3VycmVudCkhO1xuICogICAgIGVsLmZvY3VzKCk7XG4gKiAgIH0pO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPXtpbnB1dH0gLz5cbiAqICAgICA8L2Rpdj5cbiAqICAgKTtcbiAqIH0pO1xuICpcbiAqIGBgYFxuICpcbiAqIEBkZXByZWNhdGVkIFVzZSBgdXNlU2lnbmFsYCBpbnN0ZWFkLlxuICogQGFscGhhXG4gKi9cbi8vIDwvZG9jcz5cbmV4cG9ydCBjb25zdCB1c2VSZWYgPSA8VCBleHRlbmRzIEVsZW1lbnQgPSBFbGVtZW50PihjdXJyZW50PzogVCk6IFJlZjxUPiA9PiB7XG4gIHJldHVybiB1c2VTdG9yZSh7IGN1cnJlbnQgfSk7XG59O1xuIl19","import { useInvokeContext } from './use-core';\n/**\n * @alpha\n */\nexport function useEnvData(key, defaultValue) {\n    const ctx = useInvokeContext();\n    return ctx.$renderCtx$.$static$.$containerState$.$envData$[key] ?? defaultValue;\n}\n/**\n * @alpha\n * @deprecated Please use `useEnvData` instead.\n */\nexport const useUserContext = useEnvData;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVudi1kYXRhLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZW52LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBWTlDOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxHQUFXLEVBQUUsWUFBa0I7SUFDeEQsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQztJQUMvQixPQUFPLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFZLENBQUM7QUFDbEYsQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VJbnZva2VDb250ZXh0IH0gZnJvbSAnLi91c2UtY29yZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VFbnZEYXRhPFQ+KGtleTogc3RyaW5nKTogVCB8IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVudkRhdGE8VCwgQiA9IFQ+KGtleTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IEIpOiBUIHwgQjtcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUVudkRhdGEoa2V5OiBzdHJpbmcsIGRlZmF1bHRWYWx1ZT86IGFueSkge1xuICBjb25zdCBjdHggPSB1c2VJbnZva2VDb250ZXh0KCk7XG4gIHJldHVybiBjdHguJHJlbmRlckN0eCQuJHN0YXRpYyQuJGNvbnRhaW5lclN0YXRlJC4kZW52RGF0YSRba2V5XSA/PyBkZWZhdWx0VmFsdWU7XG59XG5cbi8qKlxuICogQGFscGhhXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGB1c2VFbnZEYXRhYCBpbnN0ZWFkLlxuICovXG5leHBvcnQgY29uc3QgdXNlVXNlckNvbnRleHQgPSB1c2VFbnZEYXRhO1xuIl19","/* eslint-disable no-console */\nimport { ComponentStylesPrefixContent } from '../util/markers';\nimport { qDev } from '../util/qdev';\n// Make sure this is always set to `false` in production, but it is useful to set for `true` in development for debugging.\nconst DEBUG = false;\nexport const STYLE_CACHE = new Map();\nexport const getScopedStyles = (css, scopeId) => {\n    if (qDev) {\n        return scopeStylesheet(css, scopeId);\n    }\n    let styleCss = STYLE_CACHE.get(scopeId);\n    if (!styleCss) {\n        STYLE_CACHE.set(scopeId, (styleCss = scopeStylesheet(css, scopeId)));\n    }\n    return styleCss;\n};\nexport const scopeStylesheet = (css, scopeId) => {\n    const end = css.length;\n    const out = [];\n    const stack = [];\n    let idx = 0;\n    let lastIdx = idx;\n    let mode = rule;\n    let lastCh = 0;\n    DEBUG && console.log('--------------------------');\n    while (idx < end) {\n        DEBUG && console.log(css);\n        DEBUG && console.log(new Array(idx).fill(' ').join('') + '^');\n        DEBUG && console.log('MODE', ...stack.map(modeToString), modeToString(mode));\n        let ch = css.charCodeAt(idx++);\n        if (ch === BACKSLASH) {\n            idx++;\n            ch = A; // Pretend it's a letter\n        }\n        const arcs = STATE_MACHINE[mode];\n        for (let i = 0; i < arcs.length; i++) {\n            const arc = arcs[i];\n            const [expectLastCh, expectCh, newMode] = arc;\n            if (expectLastCh === lastCh ||\n                expectLastCh === ANY ||\n                (expectLastCh === IDENT && isIdent(lastCh)) ||\n                (expectLastCh === WHITESPACE && isWhiteSpace(lastCh))) {\n                if (expectCh === ch ||\n                    expectCh === ANY ||\n                    (expectCh === IDENT && isIdent(ch)) ||\n                    (expectCh === NOT_IDENT && !isIdent(ch) && ch !== DOT) ||\n                    (expectCh === WHITESPACE && isWhiteSpace(ch))) {\n                    if (arc.length == 3 || lookAhead(arc)) {\n                        if (arc.length > 3) {\n                            // If matched on lookAhead than we we have to update current `ch`\n                            ch = css.charCodeAt(idx - 1);\n                        }\n                        DEBUG &&\n                            console.log('MATCH', charToString(expectLastCh), charToString(expectCh), modeToString(newMode));\n                        // We found a match!\n                        if (newMode === EXIT || newMode == EXIT_INSERT_SCOPE) {\n                            if (newMode === EXIT_INSERT_SCOPE) {\n                                if (mode === starSelector && !shouldNotInsertScoping()) {\n                                    // Replace `*` with the scoping elementClassIdSelector.\n                                    if (isChainedSelector(ch)) {\n                                        // *foo\n                                        flush(idx - 2);\n                                    }\n                                    else {\n                                        // * (by itself)\n                                        insertScopingSelector(idx - 2);\n                                    }\n                                    lastIdx++;\n                                }\n                                else {\n                                    if (!isChainedSelector(ch)) {\n                                        // We are exiting one of the Selector so we may need to\n                                        const offset = expectCh == NOT_IDENT ? 1 : expectCh == CLOSE_PARENTHESIS ? 2 : 0;\n                                        insertScopingSelector(idx - offset);\n                                    }\n                                }\n                            }\n                            if (expectCh === NOT_IDENT) {\n                                // NOT_IDENT is not a real character more like lack of what we expected.\n                                // if pseudoGlobal we need to give it a chance to exit as well.\n                                // For this reason we need to reparse the last character again.\n                                idx--;\n                                ch = lastCh;\n                            }\n                            do {\n                                mode = stack.pop() || rule;\n                                if (mode === pseudoGlobal) {\n                                    // Skip over the `)` in `:global(...)`.\n                                    flush(idx - 1);\n                                    lastIdx++;\n                                }\n                            } while (isSelfClosingRule(mode));\n                        }\n                        else {\n                            stack.push(mode);\n                            if (mode === pseudoGlobal && newMode === rule) {\n                                flush(idx - 8); // `:global(`.length\n                                lastIdx = idx; // skip over \":global(\"\n                            }\n                            else if (newMode === pseudoElement) {\n                                // We are entering pseudoElement `::foo`; insert scoping in front of it.\n                                insertScopingSelector(idx - 2);\n                            }\n                            mode = newMode;\n                            ch == SPACE; // Pretend not an identifier so that we don't flush again on elementClassIdSelector\n                        }\n                        break; // get out of the for loop as we found a match\n                    }\n                }\n            }\n        }\n        lastCh = ch;\n    }\n    flush(idx);\n    return out.join('');\n    function flush(idx) {\n        out.push(css.substring(lastIdx, idx));\n        DEBUG && console.log('FLUSH', out.join(''));\n        lastIdx = idx;\n    }\n    function insertScopingSelector(idx) {\n        if (mode === pseudoGlobal || shouldNotInsertScoping())\n            return;\n        flush(idx);\n        out.push('.', ComponentStylesPrefixContent, scopeId);\n        DEBUG && console.log('INSERT', out.join(''));\n    }\n    function lookAhead(arc) {\n        let prefix = 0; // Ignore vendor prefixes such as `-webkit-`.\n        if (css.charCodeAt(idx) === DASH) {\n            for (let i = 1; i < 10; i++) {\n                // give up after 10 characters\n                if (css.charCodeAt(idx + i) === DASH) {\n                    prefix = i + 1;\n                    break;\n                }\n            }\n        }\n        words: for (let arcIndx = 3; arcIndx < arc.length; arcIndx++) {\n            const txt = arc[arcIndx];\n            for (let i = 0; i < txt.length; i++) {\n                if ((css.charCodeAt(idx + i + prefix) | LOWERCASE) !== txt.charCodeAt(i)) {\n                    continue words;\n                }\n            }\n            // we found a match;\n            idx += txt.length + prefix;\n            return true;\n        }\n        return false;\n    }\n    function shouldNotInsertScoping() {\n        return stack.indexOf(pseudoGlobal) !== -1 || stack.indexOf(atRuleSelector) !== -1;\n    }\n};\nconst isIdent = (ch) => {\n    return ((ch >= _0 && ch <= _9) ||\n        (ch >= A && ch <= Z) ||\n        (ch >= a && ch <= z) ||\n        ch >= 0x80 ||\n        ch === UNDERSCORE ||\n        ch === DASH);\n};\nconst isChainedSelector = (ch) => {\n    return ch === COLON || ch === DOT || ch === OPEN_BRACKET || ch === HASH || isIdent(ch);\n};\nconst isSelfClosingRule = (mode) => {\n    return (mode === atRuleBlock || mode === atRuleSelector || mode === atRuleInert || mode === pseudoGlobal);\n};\nconst isWhiteSpace = (ch) => {\n    return ch === SPACE || ch === TAB || ch === NEWLINE || ch === CARRIAGE_RETURN;\n};\nconst modeToString = (mode) => {\n    return [\n        'rule',\n        'elementClassIdSelector',\n        'starSelector',\n        'pseudoClassWithSelector',\n        'pseudoClass',\n        'pseudoGlobal',\n        'pseudoElement',\n        'attrSelector',\n        'inertParenthesis',\n        'inertBlock',\n        'atRuleSelector',\n        'atRuleBlock',\n        'atInert',\n        'body',\n        'stringSingle',\n        'stringDouble',\n        'commentMultiline',\n        'EXIT',\n        'EXIT_INSERT_SCOPE',\n    ][mode];\n};\nconst charToString = (ch) => {\n    return ['ANY', 'IDENT', 'NOT_IDENT', 'WHITESPACE'][ch] || String.fromCharCode(ch);\n};\nconst rule = 0; // top level initial space.\nconst elementClassIdSelector = 1; // .elementClassIdSelector {}\nconst starSelector = 2; // * {}\nconst pseudoClassWithSelector = 3; // :pseudoClass(elementClassIdSelector) {}\nconst pseudoClass = 4; // :pseudoClass {}\nconst pseudoGlobal = 5; // :global(elementClassIdSelector)\nconst pseudoElement = 6; // ::pseudoElement {}\nconst attrSelector = 7; // [attr] {}\nconst inertParenthesis = 8; // (ignored)\nconst inertBlock = 9; // {ignored}\nconst atRuleSelector = 10; // @keyframe elementClassIdSelector {}\nconst atRuleBlock = 11; // @media {elementClassIdSelector {}}\nconst atRuleInert = 12; // @atRule something;\nconst body = 13; // .elementClassIdSelector {body}\nconst stringSingle = 14; // 'text'\nconst stringDouble = 15; // 'text'\nconst commentMultiline = 16; // /* ... */\n// NOT REAL MODES\nconst EXIT = 17; // Exit the mode\nconst EXIT_INSERT_SCOPE = 18; // Exit the mode INSERT SCOPE\nconst ANY = 0;\nconst IDENT = 1;\nconst NOT_IDENT = 2;\nconst WHITESPACE = 3;\nconst TAB = 9; // `\\t`.charCodeAt(0);\nconst NEWLINE = 10; // `\\n`.charCodeAt(0);\nconst CARRIAGE_RETURN = 13; // `\\r`.charCodeAt(0);\nconst SPACE = 32; // ` `.charCodeAt(0);\nconst DOUBLE_QUOTE = 34; // `\"`.charCodeAt(0);\nconst HASH = 35; // `#`.charCodeAt(0);\nconst SINGLE_QUOTE = 39; // `'`.charCodeAt(0);\nconst OPEN_PARENTHESIS = 40; // `(`.charCodeAt(0);\nconst CLOSE_PARENTHESIS = 41; // `)`.charCodeAt(0);\nconst STAR = 42; // `*`.charCodeAt(0);\n// const COMMA = 44; // `,`.charCodeAt(0);\nconst DASH = 45; // `-`.charCodeAt(0);\nconst DOT = 46; // `.`.charCodeAt(0);\nconst FORWARD_SLASH = 47; // `/`.charCodeAt(0);\nconst _0 = 48; // `0`.charCodeAt(0);\nconst _9 = 57; // `9`.charCodeAt(0);\nconst COLON = 58; // `:`.charCodeAt(0);\nconst SEMICOLON = 59; // `;`.charCodeAt(0);\n// const LESS_THAN = 60; // `<`.charCodeAt(0);\nconst AT = 64; // `@`.charCodeAt(0);\nconst A = 65; // `A`.charCodeAt(0);\nconst Z = 90; // `Z`.charCodeAt(0);\nconst OPEN_BRACKET = 91; // `[`.charCodeAt(0);\nconst CLOSE_BRACKET = 93; // `]`.charCodeAt(0);\nconst BACKSLASH = 92; // `\\\\`.charCodeAt(0);\nconst UNDERSCORE = 95; // `_`.charCodeAt(0);\nconst LOWERCASE = 0x20; // `a`.charCodeAt(0);\nconst a = 97; // `a`.charCodeAt(0);\n// const d = 100; // `d`.charCodeAt(0);\n// const g = 103; // 'g'.charCodeAt(0);\n// const h = 104; // `h`.charCodeAt(0);\n// const i = 105; // `i`.charCodeAt(0);\n// const l = 108; // `l`.charCodeAt(0);\n// const t = 116; // `t`.charCodeAt(0);\nconst z = 122; // `z`.charCodeAt(0);\nconst OPEN_BRACE = 123; // `{`.charCodeAt(0);\nconst CLOSE_BRACE = 125; // `}`.charCodeAt(0);\nconst STRINGS_COMMENTS = /*__PURE__*/ (() => [\n    [ANY, SINGLE_QUOTE, stringSingle],\n    [ANY, DOUBLE_QUOTE, stringDouble],\n    [ANY, FORWARD_SLASH, commentMultiline, '*'],\n])();\nconst STATE_MACHINE = /*__PURE__*/ (() => [\n    [\n        /// rule\n        [ANY, STAR, starSelector],\n        [ANY, OPEN_BRACKET, attrSelector],\n        [ANY, COLON, pseudoElement, ':'],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [\n            ANY,\n            COLON,\n            pseudoClassWithSelector,\n            'has',\n            'host-context',\n            'not',\n            'where',\n            'is',\n            'matches',\n            'any',\n        ],\n        [ANY, COLON, pseudoClass],\n        [ANY, IDENT, elementClassIdSelector],\n        [ANY, DOT, elementClassIdSelector],\n        [ANY, HASH, elementClassIdSelector],\n        [ANY, AT, atRuleSelector, 'keyframe'],\n        [ANY, AT, atRuleBlock, 'media', 'supports'],\n        [ANY, AT, atRuleInert],\n        [ANY, OPEN_BRACE, body],\n        [FORWARD_SLASH, STAR, commentMultiline],\n        [ANY, SEMICOLON, EXIT],\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// elementClassIdSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// starSelector\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClassWithSelector\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoClass\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        [ANY, NOT_IDENT, EXIT_INSERT_SCOPE],\n    ],\n    [\n        /// pseudoGlobal\n        [ANY, OPEN_PARENTHESIS, rule],\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// pseudoElement\n        [ANY, NOT_IDENT, EXIT],\n    ],\n    [\n        /// attrSelector\n        [ANY, CLOSE_BRACKET, EXIT_INSERT_SCOPE],\n        [ANY, SINGLE_QUOTE, stringSingle],\n        [ANY, DOUBLE_QUOTE, stringDouble],\n    ],\n    [\n        /// inertParenthesis\n        [ANY, CLOSE_PARENTHESIS, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// inertBlock\n        [ANY, CLOSE_BRACE, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleSelector\n        [ANY, CLOSE_BRACE, EXIT],\n        [WHITESPACE, IDENT, elementClassIdSelector],\n        [ANY, COLON, pseudoGlobal, 'global'],\n        [ANY, OPEN_BRACE, body],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleBlock\n        [ANY, OPEN_BRACE, rule],\n        [ANY, SEMICOLON, EXIT],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// atRuleInert\n        [ANY, SEMICOLON, EXIT],\n        [ANY, OPEN_BRACE, inertBlock],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// body\n        [ANY, CLOSE_BRACE, EXIT],\n        [ANY, OPEN_BRACE, body],\n        [ANY, OPEN_PARENTHESIS, inertParenthesis],\n        ...STRINGS_COMMENTS,\n    ],\n    [\n        /// stringSingle\n        [ANY, SINGLE_QUOTE, EXIT],\n    ],\n    [\n        /// stringDouble\n        [ANY, DOUBLE_QUOTE, EXIT],\n    ],\n    [\n        /// commentMultiline\n        [STAR, FORWARD_SLASH, EXIT],\n    ],\n])();\n//# sourceMappingURL=data:application/json;base64,","import { styleContent, styleKey } from '../component/qrl-styles';\nimport { implicit$FirstArg } from '../util/implicit_dollar';\nimport { getScopedStyles } from '../style/scoped-stylesheet';\nimport { getContext } from '../props/props';\nimport { hasStyle } from '../render/execute-component';\nimport { useSequentialScope } from './use-sequential-scope';\nimport { assertQrl } from '../import/qrl-class';\nimport { isPromise } from '../util/promises';\nimport { assertDefined } from '../assert/assert';\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStylesQrl = (styles) => {\n    _useStyles(styles, (str) => str, false);\n};\n// <docs markdown=\"../readme.md#useStyles\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStyles instead)\n/**\n * A lazy-loadable reference to a component's styles.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import styles from './code-block.css?inline';\n *\n * export const CmpStyles = component$(() => {\n *   useStyles$(styles);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStylesScoped`\n *\n * @public\n */\n// </docs>\nexport const useStyles$ = /*#__PURE__*/ implicit$FirstArg(useStylesQrl);\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScopedQrl = (styles) => {\n    _useStyles(styles, getScopedStyles, true);\n};\n// <docs markdown=\"../readme.md#useStylesScoped\">\n// !!DO NOT EDIT THIS COMMENT DIRECTLY!!!\n// (edit ../readme.md#useStylesScoped instead)\n/**\n * A lazy-loadable reference to a component's styles, that is scoped to the component.\n *\n * Component styles allow Qwik to lazy load the style information for the component only when\n * needed. (And avoid double loading it in case of SSR hydration.)\n *\n * ```tsx\n * import scoped from './code-block.css?inline';\n *\n * export const CmpScopedStyles = component$(() => {\n *   useStylesScoped$(scoped);\n *\n *   return <div>Some text</div>;\n * });\n * ```\n *\n * @see `useStyles`\n *\n * @alpha\n */\n// </docs>\nexport const useStylesScoped$ = /*#__PURE__*/ implicit$FirstArg(useStylesScopedQrl);\nconst _useStyles = (styleQrl, transform, scoped) => {\n    assertQrl(styleQrl);\n    const { get, set, ctx, i } = useSequentialScope();\n    if (get) {\n        return get;\n    }\n    const renderCtx = ctx.$renderCtx$;\n    const styleId = styleKey(styleQrl, i);\n    const containerState = renderCtx.$static$.$containerState$;\n    const elCtx = getContext(ctx.$hostElement$);\n    set(styleId);\n    if (!elCtx.$appendStyles$) {\n        elCtx.$appendStyles$ = [];\n    }\n    if (!elCtx.$scopeIds$) {\n        elCtx.$scopeIds$ = [];\n    }\n    if (scoped) {\n        elCtx.$scopeIds$.push(styleContent(styleId));\n    }\n    if (hasStyle(containerState, styleId)) {\n        return styleId;\n    }\n    containerState.$styleIds$.add(styleId);\n    const value = styleQrl.$resolveLazy$(containerState.$containerEl$);\n    const appendStyle = (styleText) => {\n        assertDefined(elCtx.$appendStyles$, 'appendStyles must be defined');\n        elCtx.$appendStyles$.push({\n            styleId,\n            content: transform(styleText, styleId),\n        });\n    };\n    if (isPromise(value)) {\n        ctx.$waitOn$.push(value.then(appendStyle));\n    }\n    else {\n        appendStyle(value);\n    }\n    return styleId;\n};\n//# sourceMappingURL=data:application/json;base64,","import { createSignal } from '../object/q-object';\nimport { useSequentialScope } from './use-sequential-scope';\n/**\n * @alpha\n */\nexport const useSignal = (initialState) => {\n    const { get, set, ctx } = useSequentialScope();\n    if (get != null) {\n        return get;\n    }\n    const containerState = ctx.$renderCtx$.$static$.$containerState$;\n    const signal = createSignal(initialState, containerState, undefined);\n    set(signal);\n    return signal;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLXNpZ25hbC5qcyIsInNvdXJjZVJvb3QiOiIuLyIsInNvdXJjZXMiOlsicGFja2FnZXMvcXdpay9zcmMvY29yZS91c2UvdXNlLXNpZ25hbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFVLE1BQU0sb0JBQW9CLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFVNUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQWMsQ0FBUSxZQUFvQixFQUFpQixFQUFFO0lBQ2pGLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLGtCQUFrQixFQUFpQixDQUFDO0lBQzlELElBQUksR0FBRyxJQUFJLElBQUksRUFBRTtRQUNmLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxNQUFNLGNBQWMsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqRSxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRSxTQUFTLENBQWtCLENBQUM7SUFDdEYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ1osT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2lnbmFsLCBTaWduYWwgfSBmcm9tICcuLi9vYmplY3QvcS1vYmplY3QnO1xuaW1wb3J0IHsgdXNlU2VxdWVudGlhbFNjb3BlIH0gZnJvbSAnLi91c2Utc2VxdWVudGlhbC1zY29wZSc7XG5cbi8qKlxuICogQGFscGhhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVXNlU2lnbmFsIHtcbiAgPFQ+KCk6IFNpZ25hbDxUIHwgdW5kZWZpbmVkPjtcbiAgPFQ+KHZhbHVlOiBUKTogU2lnbmFsPFQ+O1xufVxuXG4vKipcbiAqIEBhbHBoYVxuICovXG5leHBvcnQgY29uc3QgdXNlU2lnbmFsOiBVc2VTaWduYWwgPSA8U1RBVEU+KGluaXRpYWxTdGF0ZT86IFNUQVRFKTogU2lnbmFsPFNUQVRFPiA9PiB7XG4gIGNvbnN0IHsgZ2V0LCBzZXQsIGN0eCB9ID0gdXNlU2VxdWVudGlhbFNjb3BlPFNpZ25hbDxTVEFURT4+KCk7XG4gIGlmIChnZXQgIT0gbnVsbCkge1xuICAgIHJldHVybiBnZXQ7XG4gIH1cblxuICBjb25zdCBjb250YWluZXJTdGF0ZSA9IGN0eC4kcmVuZGVyQ3R4JC4kc3RhdGljJC4kY29udGFpbmVyU3RhdGUkO1xuICBjb25zdCBzaWduYWwgPSBjcmVhdGVTaWduYWwoaW5pdGlhbFN0YXRlLCBjb250YWluZXJTdGF0ZSwgdW5kZWZpbmVkKSBhcyBTaWduYWw8U1RBVEU+O1xuICBzZXQoc2lnbmFsKTtcbiAgcmV0dXJuIHNpZ25hbDtcbn07XG4iXX0=","import { qrl } from '../import/qrl';\nimport { ERROR_CONTEXT } from '../render/error-handling';\nimport { useContextProvider } from './use-context';\nimport { useOn } from './use-on';\nimport { useStore } from './use-store.public';\n/**\n * @alpha\n */\nexport const useErrorBoundary = () => {\n    const store = useStore({\n        error: undefined,\n    });\n    useOn('error-boundary', qrl('/runtime', 'error', [store]));\n    useContextProvider(ERROR_CONTEXT, store);\n    return store;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlLWVycm9yLWJvdW5kYXJ5LmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9xd2lrL3NyYy9jb3JlL3VzZS91c2UtZXJyb3ItYm91bmRhcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwQyxPQUFPLEVBQXNCLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUU5Qzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLEdBQWlDLEVBQUU7SUFDakUsTUFBTSxLQUFLLEdBQXVCLFFBQVEsQ0FBQztRQUN6QyxLQUFLLEVBQUUsU0FBUztLQUNqQixDQUFDLENBQUM7SUFDSCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0Qsa0JBQWtCLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpDLE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcXJsIH0gZnJvbSAnLi4vaW1wb3J0L3FybCc7XG5pbXBvcnQgeyBFcnJvckJvdW5kYXJ5U3RvcmUsIEVSUk9SX0NPTlRFWFQgfSBmcm9tICcuLi9yZW5kZXIvZXJyb3ItaGFuZGxpbmcnO1xuaW1wb3J0IHsgdXNlQ29udGV4dFByb3ZpZGVyIH0gZnJvbSAnLi91c2UtY29udGV4dCc7XG5pbXBvcnQgeyB1c2VPbiB9IGZyb20gJy4vdXNlLW9uJztcbmltcG9ydCB7IHVzZVN0b3JlIH0gZnJvbSAnLi91c2Utc3RvcmUucHVibGljJztcblxuLyoqXG4gKiBAYWxwaGFcbiAqL1xuZXhwb3J0IGNvbnN0IHVzZUVycm9yQm91bmRhcnkgPSAoKTogUmVhZG9ubHk8RXJyb3JCb3VuZGFyeVN0b3JlPiA9PiB7XG4gIGNvbnN0IHN0b3JlOiBFcnJvckJvdW5kYXJ5U3RvcmUgPSB1c2VTdG9yZSh7XG4gICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgfSk7XG4gIHVzZU9uKCdlcnJvci1ib3VuZGFyeScsIHFybCgnL3J1bnRpbWUnLCAnZXJyb3InLCBbc3RvcmVdKSk7XG4gIHVzZUNvbnRleHRQcm92aWRlcihFUlJPUl9DT05URVhULCBzdG9yZSk7XG5cbiAgcmV0dXJuIHN0b3JlO1xufTtcbiJdfQ=="],"names":["tryGetContext","SHOW_COMMENT","FILTER_ACCEPT","FILTER_REJECT","createContext","processData","IS_HEAD","setComponentProps","emitEvent","renderRoot"],"mappings":"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SAAS;IACT,QAAQ,MAAM,MAAM,CAAC,gCAAgC,EAAE,GAAG,CAAC,aAAa,CAAC,CAAC;IAC1E,KAAK;IACL,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,eAAe,iBAAiB,iBAAiB,CAAC,iBAAiB,EAAE;IAClF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,WAAW,GAAG,CAAC,QAAQ,KAAK;IACzC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;IACnD,IAAI,IAAI,GAAG,EAAE;IACb,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC;IACxB,IAAI,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IACpF,IAAI,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC9B,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC;IACd,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,SAAS,iBAAiB,iBAAiB,CAAC,WAAW,EAAE;IAC/D,MAAM,eAAe,GAAG,CAAC,KAAK,KAAK;IAC1C,IAAI,OAAO,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC;IAC9B,CAAC,CAAC;IACK,MAAM,aAAa,GAAG,OAAO,KAAK,EAAE,cAAc,EAAE,IAAI,KAAK;IACpE,IAAI,WAAW,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,GAAG,iBAAiB,CAAC,EAAE,IAAI,EAAE,uBAAuB,EAAE,KAAK,CAAC,CAAC;IAC7F,IAAI,IAAI,eAAe,CAAC,KAAK,CAAC,EAAE;IAChC,QAAQ,OAAO,WAAW,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAClD,KAAK;IACL,SAAS;IACT,QAAQ,OAAO,QAAQ,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;IACrD,KAAK;IACL,CAAC,CAAC;IACK,MAAM,WAAW,GAAG,CAAC,KAAK,EAAE,cAAc,EAAE,MAAM,KAAK;IAC9D,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,iBAAiB,CAAC;IACxC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;IACxB,IAAI,MAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC;IAC1B,IAAI,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,EAAE,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;IAC5E,IAAI,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,cAAc,CAAC;IAC1D,IAAI,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC;IAC7B,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,EAAE,MAAM;IAC/D,QAAQ,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACtC,KAAK,CAAC,CAAC;IACP,IAAI,MAAM,QAAQ,GAAG,EAAE,CAAC;IACxB,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC;IACtC,IAAI,aAAa,CAAC,QAAQ,EAAE,oEAAoE,EAAE,KAAK,CAAC,CAAC;IACzG,IAAI,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,KAAK;IACjC,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;IAC7B,YAAY,MAAM,GAAG,GAAG,gBAAgB,EAAE,CAAC;IAC3C,YAAY,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;IACrC,YAAY,OAAO,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACpC,SAAS;IACT,QAAQ,MAAM,OAAO,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;IAC7C,QAAQ,IAAI,OAAO,EAAE;IACrB,YAAY,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/C,SAAS;IACT,aAAa;IACb,YAAY,eAAe,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE,GAAG,CAAC,CAAC;IACnE,SAAS;IACT,QAAQ,IAAI,IAAI,EAAE;IAClB,YAAY,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7B,SAAS;IACT,aAAa,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;IAChC,YAAY,OAAO,GAAG,CAAC,KAAK,CAAC;IAC7B,SAAS;IACT,aAAa;IACb,YAAY,OAAO,GAAG,CAAC;IACvB,SAAS;IACT,KAAK,CAAC;IACN,IAAI,MAAM,cAAc,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IACjD,IAAI,MAAM,IAAI,GAAG;IACjB,QAAQ,KAAK;IACb,QAAQ,OAAO,CAAC,QAAQ,EAAE;IAC1B,YAAY,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,SAAS;IACT,QAAQ,QAAQ,EAAE,cAAc,CAAC,QAAQ;IACzC,KAAK,CAAC;IACN,IAAI,IAAI,OAAO,CAAC;IAChB,IAAI,IAAI,MAAM,CAAC;IACf,IAAI,IAAI,IAAI,GAAG,KAAK,CAAC;IACrB,IAAI,MAAM,QAAQ,GAAG,CAAC,QAAQ,EAAE,KAAK,KAAK;IAC1C,QAAQ,IAAI,CAAC,IAAI,EAAE;IACnB,YAAY,IAAI,GAAG,IAAI,CAAC;IACxB,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,IAAI,GAAG,IAAI,CAAC;IAC5B,gBAAgB,QAAQ,CAAC,KAAK,GAAG,UAAU,CAAC;IAC5C,gBAAgB,QAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1C,gBAAgB,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;IAC3C,gBAAgB,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/B,aAAa;IACb,iBAAiB;IACjB,gBAAgB,IAAI,GAAG,IAAI,CAAC;IAC5B,gBAAgB,QAAQ,CAAC,KAAK,GAAG,UAAU,CAAC;IAC5C,gBAAgB,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC9C,gBAAgB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;IACvC,gBAAgB,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,aAAa;IACb,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC;IACN;IACA,IAAI,MAAM,CAAC,iBAAiB,EAAE,MAAM;IACpC,QAAQ,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC;IACnC,QAAQ,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC;IACtC,QAAQ,QAAQ,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK;IAClD,YAAY,OAAO,GAAG,CAAC,CAAC;IACxB,YAAY,MAAM,GAAG,EAAE,CAAC;IACxB,SAAS,CAAC,CAAC;IACX,KAAK,CAAC,CAAC;IACP,IAAI,KAAK,CAAC,SAAS,GAAG,WAAW,CAAC,MAAM;IACxC,QAAQ,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;IACvC,KAAK,CAAC,CAAC;IACP,IAAI,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK;IACjF,QAAQ,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9B,KAAK,EAAE,CAAC,MAAM,KAAK;IACnB,QAAQ,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAChC,KAAK,CAAC,CAAC;IACP,IAAI,MAAM,OAAO,GAAG,cAAc,CAAC,OAAO,CAAC;IAC3C,IAAI,IAAI,OAAO,EAAE;IACjB,QAAQ,OAAO,OAAO,CAAC,IAAI,CAAC;IAC5B,YAAY,OAAO;IACnB,YAAY,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM;IACtC,gBAAgB,IAAI,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;IAChD,oBAAoB,YAAY,CAAC,KAAK,CAAC,CAAC;IACxC,iBAAiB;IACjB,aAAa,CAAC;IACd,SAAS,CAAC,CAAC;IACX,KAAK;IACL,IAAI,OAAO,OAAO,CAAC;IACnB,CAAC,CAAC;IACK,MAAM,QAAQ,GAAG,CAAC,KAAK,EAAE,cAAc,EAAE,IAAI,KAAK;IACzD,IAAI,KAAK,CAAC,OAAO,IAAI,CAAC,iBAAiB,CAAC;IACxC,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC;IACxB,IAAI,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC;IACnC,IAAI,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,WAAW,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;IACrF,IAAI,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,cAAc,CAAC;IAC1D,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,iBAAiB,EAAE,MAAM;IAC/D,QAAQ,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACtC,KAAK,CAAC,CAAC;IACP,IAAI,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,KAAK;IACjC,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;IAC7B,YAAY,MAAM,GAAG,GAAG,gBAAgB,EAAE,CAAC;IAC3C,YAAY,GAAG,CAAC,YAAY,GAAG,KAAK,CAAC;IACrC,YAAY,OAAO,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACpC,SAAS;IACT,QAAQ,MAAM,OAAO,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;IAC7C,QAAQ,IAAI,OAAO,EAAE;IACrB,YAAY,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;IAC/C,SAAS;IACT,aAAa;IACb,YAAY,eAAe,CAAC,UAAU,CAAC,oBAAoB,CAAC,EAAE,GAAG,CAAC,CAAC;IACnE,SAAS;IACT,QAAQ,IAAI,IAAI,EAAE;IAClB,YAAY,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7B,SAAS;IACT,aAAa;IACb,YAAY,OAAO,GAAG,CAAC;IACvB,SAAS;IACT,KAAK,CAAC;IACN,IAAI,MAAM,QAAQ,GAAG,EAAE,CAAC;IACxB,IAAI,KAAK,CAAC,SAAS,GAAG,WAAW,CAAC,MAAM;IACxC,QAAQ,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;IACvC,KAAK,CAAC,CAAC;IACP,IAAI,MAAM,IAAI,GAAG;IACjB,QAAQ,KAAK;IACb,QAAQ,OAAO,CAAC,QAAQ,EAAE;IAC1B,YAAY,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,SAAS;IACT,KAAK,CAAC;IACN,IAAI,OAAO,QAAQ,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,KAAK;IAC1D,QAAQ,IAAI,UAAU,CAAC,WAAW,CAAC,EAAE;IACrC,YAAY,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACvC,SAAS;IACT,KAAK,EAAE,CAAC,MAAM,KAAK;IACnB,QAAQ,WAAW,CAAC,MAAM,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;IAC/C,KAAK,CAAC,CAAC;IACP,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,KAAK,KAAK;IACvC,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC;IACpC,IAAI,IAAI,OAAO,EAAE;IACjB,QAAQ,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;IACpC,QAAQ,IAAI;IACZ,YAAY,OAAO,EAAE,CAAC;IACtB,SAAS;IACT,QAAQ,OAAO,GAAG,EAAE;IACpB,YAAY,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC1B,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,KAAK,KAAK;IACvC,IAAI,IAAI,KAAK,CAAC,OAAO,GAAG,mBAAmB,EAAE;IAC7C,QAAQ,KAAK,CAAC,OAAO,IAAI,CAAC,mBAAmB,CAAC;IAC9C,QAAQ,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC;IACpC,QAAQ,OAAO,EAAE,CAAC;IAClB,KAAK;IACL,SAAS;IACT,QAAQ,YAAY,CAAC,KAAK,CAAC,CAAC;IAC5B,KAAK;IACL,CAAC,CAAC;IACF,MAAM,WAAW,GAAG,CAAC,KAAK,EAAE,SAAS,KAAK;IAC1C,IAAI,IAAI,SAAS,KAAK,SAAS,EAAE;IACjC,QAAQ,KAAK,CAAC,UAAU,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IACrD,KAAK;IACL,SAAS,IAAI,SAAS,KAAK,MAAM,EAAE;IACnC,QAAQ,aAAa,CAAC,OAAO,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,KAAK;IACL,SAAS,IAAI,SAAS,KAAK,MAAM,EAAE;IACnC,QAAQ,aAAa,CAAC,OAAO,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1D,KAAK;IACL,CAAC,CAAC;IACF,MAAM,kBAAkB,GAAG,CAAC,KAAK,KAAK;IACtC,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC;IACjC,IAAI,MAAM,YAAY,GAAG,SAAS,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACzG,IAAI,OAAO,YAAY,CAAC;IACxB,CAAC,CAAC;IAIK,MAAM,sBAAsB,GAAG,CAAC,GAAG,KAAK;IAC/C,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,YAAY,KAAK,CAAC;IACjD,CAAC,CAAC;IACK,MAAM,cAAc,GAAG,CAAC,KAAK,EAAE,QAAQ,KAAK;IACnD,IAAI,IAAI,KAAK,GAAG,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzH,IAAI,IAAI,eAAe,CAAC,KAAK,CAAC,EAAE;IAChC,QAAQ,KAAK,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAClD,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IACK,MAAM,UAAU,GAAG,CAAC,IAAI,KAAK;IACpC,IAAI,MAAM,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC9D,IAAI,OAAO,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC1E,CAAC,CAAC;IACK,MAAM,KAAK,CAAC;IACnB,IAAI,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE;IAC3D,QAAQ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,QAAQ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,KAAK;IACL;;IC7nBO,MAAME,WAAS,GAAG,CAAC,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,KAAK;IAC7D,IAAI,IAAI,EAAE,IAAI,OAAO,WAAW,KAAK,UAAU,EAAE;IACjD,QAAQ,EAAE,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE;IACpD,YAAY,MAAM;IAClB,YAAY,OAAO,EAAE,OAAO;IAC5B,YAAY,QAAQ,EAAE,OAAO;IAC7B,SAAS,CAAC,CAAC,CAAC;IACZ,KAAK;IACL,CAAC;;ICED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,cAAc,GAAG,CAAC,GAAG,EAAE,IAAI,KAAK;IAC7C,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,kBAAkB,EAAE,CAAC;IACtD,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE;IACrB,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;IACnB,IAAI,MAAM,cAAc,GAAG,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC;IACrE,IAAI,MAAM,QAAQ,GAAG,oBAAoB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAChE,IAAI,MAAM,EAAE,GAAG,GAAG,CAAC,aAAa,CAAC;IACjC,IAAI,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,iBAAiB,GAAG,oBAAoB,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC5F,IAAI,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC;IAC3D,IAAI,MAAM,KAAK,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;IACjC,IAAI,WAAW,CAAC,KAAK,EAAE,cAAc,EAAE,YAAY,CAAC,CAAC;IACrD,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;IAC1B,QAAQ,KAAK,CAAC,SAAS,GAAG,EAAE,CAAC;IAC7B,KAAK;IACL,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;IAClB,IAAI,OAAO,QAAQ,CAAC;IACpB,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,YAAY,GAAG,CAAC,WAAW,EAAE,IAAI,KAAK;IACnD,IAAI,OAAO,cAAc,CAAC,CAAC,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,CAAC;IAChD,EAAE;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,QAAQ,GAAG,CAAC,KAAK,KAAK;IACnC,IAAI,MAAM,SAAS,GAAG,CAAC,QAAQ,EAAE,CAAC;IAClC,IAAI,IAAI,SAAS,EAAE;IACnB,QAAQ,IAAI,KAAK,CAAC,UAAU,EAAE;IAC9B,YAAY,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACjD,YAAY,IAAI,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,UAAU,EAAE;IAClD,gBAAgB,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC3D,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,KAAK,CAAC,SAAS,EAAE;IAC7B,YAAY,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;IAC5C,YAAY,IAAI,KAAK,KAAK,SAAS,EAAE;IACrC,gBAAgB,OAAO,KAAK,CAAC,SAAS,EAAE,CAAC;IACzC,aAAa;IACb,iBAAiB,IAAI,KAAK,KAAK,UAAU,EAAE;IAC3C,gBAAgB,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IAC9D,aAAa;IACb,iBAAiB,IAAI,KAAK,KAAK,UAAU,EAAE;IAC3C,gBAAgB,MAAM,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;IACxC,aAAa;IACb,SAAS;IACT,KAAK;IACL,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,oBAAoB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IAC7H;IACA,IAAI,OAAO,GAAG,CAAC,QAAQ,EAAE;IACzB,QAAQ,QAAQ,EAAE,OAAO;IACzB,KAAK,CAAC,CAAC;IACP,EAAE;IACK,MAAM,qBAAqB,GAAG,CAAC,IAAI,KAAK;IAC/C,IAAI,MAAM,QAAQ,GAAG;IACrB,QAAQ,OAAO,EAAE,UAAU;IAC3B,QAAQ,OAAO,EAAE,SAAS;IAC1B,QAAQ,QAAQ,EAAE,SAAS;IAC3B,QAAQ,KAAK,EAAE,SAAS;IACxB,QAAQ,KAAK,EAAE,SAAS;IACxB,QAAQ,OAAO,EAAE,IAAI,EAAE,OAAO;IAC9B,KAAK,CAAC;IACN,IAAI,OAAO,QAAQ,CAAC;IACpB,CAAC,CAAC;IACK,MAAM,oBAAoB,GAAG,CAAC,cAAc,EAAE,IAAI,EAAE,cAAc,KAAK;IAC9E,IAAI,MAAM,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAC/C,IAAI,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC;IACpC,IAAI,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IACpE,IAAI,OAAO,QAAQ,CAAC;IACpB,CAAC,CAAC;IAIK,MAAM,gBAAgB,GAAG,CAAC,GAAG,KAAK;IACzC,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,OAAO,KAAK,UAAU,CAAC;IACvD,CAAC,CAAC;IACK,MAAM,iBAAiB,GAAG,CAAC,QAAQ,EAAE,QAAQ,KAAK;IACzD,IAAI,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IACjC,IAAI,IAAI,KAAK,KAAK,UAAU,EAAE;IAC9B,QAAQ,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAClD,KAAK;IACL,SAAS,IAAI,KAAK,KAAK,SAAS,EAAE;IAClC,QAAQ,OAAO,CAAC,CAAC,CAAC,CAAC;IACnB,KAAK;IACL,SAAS;IACT,QAAQ,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/C,KAAK;IACL,CAAC,CAAC;IACK,MAAM,mBAAmB,GAAG,CAAC,IAAI,KAAK;IAC7C,IAAI,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,MAAM,MAAM,GAAG,qBAAqB,CAAC,SAAS,CAAC,CAAC;IACpD,IAAI,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IACvC,IAAI,IAAI,KAAK,KAAK,GAAG,EAAE;IACvB,QAAQ,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC;IAClC,QAAQ,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC7B,KAAK;IACL,SAAS,IAAI,KAAK,KAAK,GAAG,EAAE;IAC5B,QAAQ,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;IACjC,QAAQ,MAAM,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAChD,KAAK;IACL,SAAS,IAAI,KAAK,KAAK,GAAG,EAAE;IAC5B,QAAQ,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC;IAClC,QAAQ,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;IAC1B,KAAK;IACL,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;;ICvRD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,MAAM,gBAAgB,GAAG,QAAQ,CAAC;IACzC,MAAM,aAAa,GAAG;IACtB,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IACzB,IAAI,OAAO,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,KAAK;IACtC,QAAQ,IAAI,CAAC,CAAC,YAAY,EAAE;IAC5B,YAAY,KAAK,MAAM,IAAI,IAAI,CAAC,CAAC,YAAY,EAAE;IAC/C,gBAAgB,YAAY,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACrD,aAAa;IACb,SAAS;IACT,KAAK;IACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;IAClC,QAAQ,OAAO,YAAY,CAAC,GAAG,EAAE;IACjC,YAAY,UAAU,EAAE,QAAQ;IAChC,SAAS,CAAC,CAAC;IACX,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,EAAE,cAAc,KAAK;IACvC,QAAQ,OAAO,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;IAC5D,KAAK;IACL,IAAI,IAAI,EAAE,CAAC,GAAG,EAAE,SAAS,KAAK;IAC9B,QAAQ,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;IACvD,YAAY,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5D,YAAY,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;IACjC,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,eAAe,GAAG;IACxB,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,sBAAsB,CAAC,CAAC,CAAC;IAC1C,IAAI,OAAO,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,KAAK;IACtC,QAAQ,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAChD,QAAQ,IAAI,CAAC,CAAC,UAAU,EAAE;IAC1B,YAAY,YAAY,CAAC,CAAC,CAAC,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACzD,SAAS;IACT,KAAK;IACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK,cAAc,CAAC,GAAG,EAAE,QAAQ,CAAC;IAC/D,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC;IACvC,IAAI,IAAI,EAAE,CAAC,KAAK,EAAE,SAAS,KAAK;IAChC,QAAQ,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3C,QAAQ,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC7C,QAAQ,IAAI,KAAK,CAAC,UAAU,EAAE;IAC9B,YAAY,KAAK,CAAC,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAC3D,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,kBAAkB,GAAG;IAC3B,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,CAAC;IACpC,IAAI,OAAO,EAAE,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,KAAK;IACxC,QAAQ,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACpD,QAAQ,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACrD,KAAK;IACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;IAClC,QAAQ,OAAO,iBAAiB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAChD,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;IACvB,QAAQ,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACzC,KAAK;IACL,IAAI,IAAI,EAAE,CAAC,QAAQ,EAAE,SAAS,KAAK;IACnC,QAAQ,IAAI,QAAQ,CAAC,KAAK,KAAK,UAAU,EAAE;IAC3C,YAAY,QAAQ,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7D,YAAY,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAClE,SAAS;IACT,aAAa,IAAI,QAAQ,CAAC,KAAK,KAAK,UAAU,EAAE;IAChD,YAAY,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACrD,YAAY,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;IAChC,YAAY,QAAQ,CAAC,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACvD,YAAY,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC;IACjC,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,aAAa,GAAG;IACtB,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,GAAG;IACjC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI;IAChC,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC;IACpC,IAAI,IAAI,EAAE,SAAS;IACnB,CAAC,CAAC;IACF,MAAM,cAAc,GAAG;IACvB,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,IAAI;IAClC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,WAAW,EAAE;IACzC,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC;IACrC,IAAI,IAAI,EAAE,SAAS;IACnB,CAAC,CAAC;IACF,MAAM,eAAe,GAAG;IACxB,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,MAAM;IACpC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;IACpD,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;IACvB,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACxC,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAC7C,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;IAC3C,QAAQ,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACzC,KAAK;IACL,IAAI,IAAI,EAAE,SAAS;IACnB,CAAC,CAAC;IACF,MAAM,eAAe,GAAG;IACxB,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,KAAK;IACnC,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK;IACxB,QAAQ,OAAO,GAAG,CAAC,OAAO,CAAC;IAC3B,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;IACvB,QAAQ,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;IACpC,QAAQ,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC;IAC9B,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,IAAI,EAAE,SAAS;IACnB,CAAC,CAAC;IACF,MAAM,kBAAkB,GAAG;IAC3B,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;IAC9B,IAAI,SAAS,EAAE,SAAS;IACxB,IAAI,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,KAAK;IAC7B,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,IAAI,EAAE,SAAS;IACnB,CAAC,CAAC;IACK,MAAM,kBAAkB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;IAC9D,MAAM,mBAAmB,GAAG;IAC5B,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,GAAG,KAAK,eAAe,CAAC,GAAG,CAAC;IACvC,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;IAClC,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAC9C,QAAQ,OAAO,YAAY,CAAC,GAAG,EAAE;IACjC,YAAY,UAAU,EAAE,QAAQ;IAChC,SAAS,CAAC,CAAC;IACX,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,EAAE,cAAc,KAAK;IACvC,QAAQ,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC/C,QAAQ,MAAM,SAAS,GAAG,YAAY,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;IAClF,QAAQ,MAAM,GAAG,GAAG,QAAQ,CAAC,SAAS,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;IACtE,QAAQ,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC;IACjC,KAAK;IACL,IAAI,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,KAAK;IACpC,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,kBAAkB,CAAC,CAAC;IACpD,QAAQ,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;IACvD,YAAY,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5D,YAAY,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC;IACjC,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,sBAAsB,GAAG;IAC/B,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,GAAG,KAAK,OAAO,GAAG,KAAK,UAAU,IAAI,GAAG,CAAC,qBAAqB,KAAK,SAAS;IACvF,IAAI,SAAS,EAAE,CAAC,GAAG,KAAK;IACxB,QAAQ,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;IAC9B,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;IACvB,QAAQ,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC;IACpD,QAAQ,EAAE,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACxC,QAAQ,OAAO,EAAE,CAAC;IAClB,KAAK;IACL,IAAI,IAAI,EAAE,SAAS;IACnB,CAAC,CAAC;IACF,MAAM,gBAAgB,GAAG;IACzB,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,UAAU;IACxC,IAAI,OAAO,EAAE,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,KAAK;IACxC,QAAQ,YAAY,CAAC,GAAG,CAAC,cAAc,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAC3D,QAAQ,IAAI,KAAK,EAAE;IACnB,YAAY,oBAAoB,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,SAAS,CAAC,CAAC;IACvE,SAAS;IACT,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;IAClC,QAAQ,OAAO,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC5C,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,EAAE,cAAc,KAAK;IACvC,QAAQ,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,aAAa,CAAC,eAAe,EAAE,CAAC,CAAC;IACpF,KAAK;IACL,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,IAAI,KAAK;IAC5B,QAAQ,MAAM,CAAC,oBAAoB,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACrD,KAAK;IACL,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,KAAK;IACjC,QAAQ,MAAM,CAAC,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACjE,KAAK;IACL,CAAC,CAAC;IACF,MAAM,uBAAuB,GAAG;IAChC,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,YAAY,aAAa;IAC3C,IAAI,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE;IACnC,QAAQ,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAChD,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,SAAS,EAAE,CAAC,GAAG,EAAE,QAAQ,KAAK;IAClC,QAAQ,OAAO,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IAClD,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;IACvB,QAAQ,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAC3C,QAAQ,OAAO,IAAI,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC3C,KAAK;IACL,IAAI,IAAI,EAAE,CAAC,MAAM,EAAE,SAAS,KAAK;IACjC,QAAQ,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3C,KAAK;IACL,CAAC,CAAC;IACF,MAAM,wBAAwB,GAAG;IACjC,IAAI,MAAM,EAAE,QAAQ;IACpB,IAAI,IAAI,EAAE,CAAC,CAAC,KAAK,OAAO,CAAC,KAAK,QAAQ;IACtC,IAAI,SAAS,EAAE,CAAC,CAAC,KAAK;IACtB,QAAQ,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;IACzB,KAAK;IACL,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK;IACvB,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;IAC5B,KAAK;IACL,IAAI,IAAI,EAAE,SAAS;IACnB,CAAC,CAAC;IACF,MAAM,WAAW,GAAG;IACpB,IAAI,aAAa;IACjB,IAAI,gBAAgB;IACpB,IAAI,uBAAuB;IAC3B,IAAI,eAAe;IACnB,IAAI,kBAAkB;IACtB,IAAI,aAAa;IACjB,IAAI,cAAc;IAClB,IAAI,eAAe;IACnB,IAAI,eAAe;IACnB,IAAI,kBAAkB;IACtB,IAAI,mBAAmB;IACvB,IAAI,sBAAsB;IAC1B,IAAI,wBAAwB;IAC5B,CAAC,CAAC;IACF,MAAM,oBAAoB,iBAAiB,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;IACzE,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK;IACrC,IAAI,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;IACjC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACzB,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IACK,MAAM,WAAW,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,KAAK;IACtD,IAAI,KAAK,MAAM,CAAC,IAAI,oBAAoB,EAAE;IAC1C,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACzB,YAAY,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAC7C,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IACK,MAAM,cAAc,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAc,KAAK;IACjE,IAAI,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;IACjC,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACzB,YAAY,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC;IACjC,YAAY,IAAI,CAAC,CAAC,SAAS,EAAE;IAC7B,gBAAgB,KAAK,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,QAAQ,EAAE,cAAc,CAAC,CAAC;IACpE,aAAa;IACb,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,KAAK;IACL,IAAI,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,SAAS,EAAE,cAAc,EAAE,GAAG,KAAK;IAChE,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9B,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9B,IAAI,OAAO;IACX,QAAQ,OAAO,CAAC,IAAI,EAAE;IACtB,YAAY,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;IACzC,gBAAgB,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;IACxC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;IAC7C,oBAAoB,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;IAC5F,oBAAoB,IAAI,CAAC,CAAC,IAAI,EAAE;IAChC,wBAAwB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC9C,qBAAqB;IACrB,oBAAoB,IAAI,CAAC,CAAC,IAAI,EAAE;IAChC,wBAAwB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC9C,qBAAqB;IACrB,oBAAoB,OAAO,KAAK,CAAC;IACjC,iBAAiB;IACjB,aAAa;IACb,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE;IACxB,YAAY,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChD,YAAY,IAAI,UAAU,EAAE;IAC5B,gBAAgB,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;IAC3D,gBAAgB,OAAO,IAAI,CAAC;IAC5B,aAAa;IACb,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,IAAI,CAAC,GAAG,EAAE;IAClB,YAAY,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChD,YAAY,IAAI,UAAU,EAAE;IAC5B,gBAAgB,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;IAChE,gBAAgB,OAAO,IAAI,CAAC;IAC5B,aAAa;IACb,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,KAAK,CAAC;IACN,CAAC;;IClSD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,MAAM,cAAc,GAAG,OAAO,QAAQ,EAAE,iBAAiB,KAAK;IACrE,IAAI,MAAM,GAAG,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IACtC,IAAI,MAAM,eAAe,GAAG,GAAG,CAAC,eAAe,CAAC;IAChD,IAAI,MAAM,WAAW,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,eAAe,GAAG,QAAQ,CAAC;IAC1E,IAAI,IAAI,kBAAkB,CAAC,WAAW,EAAE,cAAc,CAAC,KAAK,QAAQ,EAAE;IACtE,QAAQ,MAAM,MAAM,CAAC,6BAA6B,CAAC,CAAC;IACpD,KAAK;IACL,IAAI,MAAM,UAAU,GAAG,iBAAiB,KAAK,WAAW,KAAK,GAAG,CAAC,eAAe,GAAG,GAAG,CAAC,IAAI,GAAG,WAAW,CAAC,CAAC;IAC3G,IAAI,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACvD,IAAI,MAAM,MAAM,GAAG,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC/C,IAAI,kBAAkB,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;IACpD,IAAI,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,EAAE,IAAI,GAAG,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC;IACpG,IAAI,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IACnC,IAAI,kBAAkB,CAAC,WAAW,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;IAC9D,IAAI,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;IACK,MAAM,UAAU,GAAG,CAAC,WAAW,EAAE,cAAc,KAAK;IAC3D,IAAI,MAAM,IAAI,GAAG,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC;IAChD,IAAI,WAAW,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,KAAK;IACrE,QAAQ,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC;IACtE,QAAQ,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC7B,KAAK,CAAC,CAAC;IACP,CAAC,CAAC;IACK,MAAM,eAAe,GAAG,CAAC,WAAW,KAAK;IAChD,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,EAAE;IACnC,QAAQ,OAAO,CAAC,8DAA8D,CAAC,CAAC;IAChF,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC;IAClB,IAAI,MAAM,GAAG,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;IACzC,IAAI,MAAM,YAAY,GAAG,WAAW,KAAK,GAAG,CAAC,eAAe,CAAC;IAC7D,IAAI,MAAM,UAAU,GAAG,YAAY,GAAG,GAAG,CAAC,IAAI,GAAG,WAAW,CAAC;IAC7D,IAAI,MAAM,MAAM,GAAG,WAAW,CAAC,UAAU,CAAC,CAAC;IAC3C,IAAI,IAAI,CAAC,MAAM,EAAE;IACjB,QAAQ,OAAO,CAAC,sDAAsD,CAAC,CAAC;IACxE,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;IACpB,IAAI,MAAM,cAAc,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAC1D,IAAI,UAAU,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IAC5C,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;IACtE;IACA,IAAI,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/B,IAAI,MAAM,SAAS,GAAG,CAAC,EAAE,KAAK;IAC9B,QAAQ,OAAO,aAAa,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IACtE,KAAK,CAAC;IACN,IAAI,MAAM,aAAa,GAAG,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE,YAAY,GAAG,YAAY,EAAE;IACzF,QAAQ,UAAU,CAAC,IAAI,EAAE;IACzB,YAAY,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;IACjC,gBAAgB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACvC,gBAAgB,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;IAC5C,oBAAoB,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;IAClD,oBAAoB,MAAM,OAAO,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACxE,oBAAoB,MAAM,EAAE,GAAG,kBAAkB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IACvE,oBAAoB,IAAI,EAAE,EAAE;IAC5B,wBAAwB,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IAC1D,wBAAwB,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;IACxC,wBAAwB,QAAQ,CAAC,GAAG,CAAC,iBAAiB,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC;IACtE,wBAAwB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9D,qBAAqB;IACrB,iBAAiB;IACjB,qBAAqB,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;IAChD,oBAAoB,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7C,oBAAoB,QAAQ,CAAC,GAAG,CAAC,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IACvF,oBAAoB,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1D,iBAAiB;IACjB,gBAAgB,OAAO,WAAW,CAAC;IACnC,aAAa;IACb,YAAY,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;IACnC,gBAAgB,OAAO,aAAa,CAAC;IACrC,aAAa;IACb,YAAY,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,aAAa,GAAG,WAAW,CAAC;IAC/E,SAAS;IACT,KAAK,CAAC,CAAC;IACP,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC;IAClB,IAAI,QAAQ,EAAE,GAAG,aAAa,CAAC,QAAQ,EAAE,GAAG;IAC5C,QAAQ,aAAa,CAAC,EAAE,CAAC,CAAC;IAC1B,QAAQ,MAAM,EAAE,GAAG,kBAAkB,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;IACtD,QAAQ,aAAa,CAAC,EAAE,EAAE,CAAC,2BAA2B,CAAC,EAAE,EAAE,CAAC,CAAC;IAC7D,QAAQ,MAAM,KAAK,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;IACrC,QAAQ,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;IACxB,QAAQ,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;IACtC,QAAQ,QAAQ,CAAC,GAAG,CAAC,iBAAiB,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;IACjD,QAAQ,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,KAAK;IACL,IAAI,cAAc,CAAC,cAAc,GAAG,EAAE,KAAK,CAAC;IAC5C,IAAI,MAAM,MAAM,GAAG,YAAY,CAAC,SAAS,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;IAChE;IACA,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACpC,IAAI,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;IACjF;IACA,IAAI,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;IACjC,QAAQ,mBAAmB,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IACpD,KAAK;IACL,IAAI,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACnD,QAAQ,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,6BAA6B,CAAC,CAAC;IAC7E,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5C,QAAQ,MAAM,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC3C,QAAQ,aAAa,CAAC,EAAE,EAAE,CAAC,iCAAiC,CAAC,EAAE,SAAS,CAAC,CAAC;IAC1E,QAAQ,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAC9B,QAAQ,MAAM,KAAK,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;IACrC,QAAQ,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC;IACjC,QAAQ,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC;IAC9B,QAAQ,MAAM,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC;IAC/B,QAAQ,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC;IACnC,QAAQ,MAAM,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC;IAClC,QAAQ,IAAI,MAAM,EAAE;IACpB,YAAY,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,kCAAkC,CAAC,CAAC;IAC1E,YAAY,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC9D,YAAY,KAAK,CAAC,EAAE,GAAG,eAAe,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;IAC3D,SAAS;IACT,QAAQ,IAAI,GAAG,EAAE;IACjB,YAAY,KAAK,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACxD,SAAS;IACT,QAAQ,IAAI,OAAO,EAAE;IACrB,YAAY,KAAK,CAAC,SAAS,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAChE,SAAS;IACT,QAAQ,IAAI,QAAQ,EAAE;IACtB,YAAY,KAAK,CAAC,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;IACzC,YAAY,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IACpD,gBAAgB,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrD,gBAAgB,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5D,aAAa;IACb,SAAS;IACT;IACA,QAAQ,IAAI,IAAI,EAAE;IAClB,YAAY,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACvD,YAAY,MAAM,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAC3D,YAAY,aAAa,CAAC,KAAK,EAAE,CAAC,sCAAsC,CAAC,EAAE,IAAI,CAAC,CAAC;IACjF,YAAY,aAAa,CAAC,SAAS,EAAE,CAAC,0CAA0C,CAAC,EAAE,IAAI,CAAC,CAAC;IACzF,YAAY,KAAK,CAAC,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IACrE,YAAY,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;IACnC,YAAY,KAAK,CAAC,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IAC7C,YAAY,KAAK,CAAC,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC;IACxD,SAAS;IACT,KAAK;IACL,IAAI,kBAAkB,CAAC,WAAW,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IAC/D,IAAI,QAAQ,CAAC,mBAAmB,CAAC,CAAC;IAClC,IAAIA,WAAS,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IACvD,CAAC,CAAC;IACK,MAAM,kBAAkB,GAAG,OAAO,WAAW,KAAK;IACzD,IAAI,MAAM,cAAc,GAAG,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAC1D,IAAI,MAAM,QAAQ,GAAG,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC7E,IAAI,OAAO,kBAAkB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IACxD,CAAC,CAAC;IACF;IACA;IACA;AACY,UAAC,kBAAkB,GAAG,OAAO,WAAW,EAAE,cAAc,KAAK;IACzE,IAAI,MAAM,SAAS,GAAG,eAAe,CAAC,cAAc,CAAC,CAAC;IACtD,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC;IACzB;IACA,IAAI,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;IACnC,QAAQ,IAAI,GAAG,CAAC,SAAS,EAAE;IAC3B,YAAY,KAAK,MAAM,KAAK,IAAI,GAAG,CAAC,SAAS,EAAE;IAC/C,gBAAgB,IAAI,IAAI,EAAE;IAC1B,oBAAoB,IAAI,KAAK,CAAC,OAAO,GAAG,iBAAiB,EAAE;IAC3D,wBAAwB,OAAO,CAAC,wDAAwD,CAAC,CAAC;IAC1F,qBAAqB;IACrB,oBAAoB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;IAC7C,wBAAwB,OAAO,CAAC,8DAA8D,CAAC,CAAC;IAChG,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,YAAY,CAAC,KAAK,CAAC,CAAC;IACpC,aAAa;IACb,SAAS;IACT,KAAK;IACL,IAAI,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;IACnC,QAAQ,MAAM,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC;IACjC,QAAQ,MAAM,YAAY,GAAG,GAAG,CAAC,EAAE,CAAC;IACpC,QAAQ,KAAK,MAAM,QAAQ,IAAI,YAAY,EAAE;IAC7C,YAAY,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACpC,YAAY,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACpC,YAAY,MAAM,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC;IAC9C,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;IAC5C,oBAAoB,YAAY,CAAC,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IACvD,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,SAAS,CAAC,EAAE,CAAC,EAAE;IAC/B,gBAAgB,SAAS,CAAC,IAAI,CAAC;IAC/B,oBAAoB,GAAG;IACvB,oBAAoB,GAAG;IACvB,oBAAoB,EAAE;IACtB,oBAAoB,SAAS,EAAE,YAAY,CAAC,GAAG,CAAC;IAChD,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,SAAS;IACT,KAAK;IACL;IACA,IAAI,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;IAChC,QAAQ,OAAO;IACf,YAAY,KAAK,EAAE;IACnB,gBAAgB,GAAG,EAAE,EAAE;IACvB,gBAAgB,IAAI,EAAE,EAAE;IACxB,gBAAgB,IAAI,EAAE,EAAE;IACxB,aAAa;IACb,YAAY,IAAI,EAAE,EAAE;IACpB,YAAY,SAAS,EAAE,EAAE;IACzB,YAAY,IAAI,EAAE,QAAQ;IAC1B,SAAS,CAAC;IACV,KAAK;IACL;IACA,IAAI,IAAI,QAAQ,CAAC;IACjB,IAAI,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC,UAAU,EAAE,MAAM,GAAG,CAAC,EAAE;IACzD,QAAQ,SAAS,CAAC,UAAU,GAAG,EAAE,CAAC;IAClC,QAAQ,MAAM,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC3C,KAAK;IACL;IACA,IAAI,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IACtD,IAAI,IAAI,SAAS,EAAE;IACnB,QAAQ,KAAK,MAAM,OAAO,IAAI,SAAS,CAAC,UAAU,EAAE;IACpD,YAAY,kBAAkB,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,CAAC;IAClE,SAAS;IACT,QAAQ,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE;IACvC,YAAY,IAAI,GAAG,CAAC,OAAO,EAAE;IAC7B,gBAAgB,YAAY,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAC7C,aAAa;IACb,YAAY,IAAI,GAAG,CAAC,UAAU,EAAE;IAChC,gBAAgB,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE;IAC5D,oBAAoB,YAAY,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACzD,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,KAAK;IACL;IACA,IAAI,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC,UAAU,EAAE,MAAM,GAAG,CAAC,EAAE;IACzD,QAAQ,SAAS,CAAC,UAAU,GAAG,EAAE,CAAC;IAClC,QAAQ,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACpC,KAAK;IACL;IACA,IAAI,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;IACrC,IAAI,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IACvD,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9B,IAAI,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK;IACjC,QAAQ,IAAI,EAAE,GAAG,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACxC,QAAQ,IAAI,EAAE,KAAK,SAAS,EAAE;IAC9B,YAAY,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC;IAC5B,YAAY,IAAI,CAAC,EAAE,EAAE;IACrB,gBAAgB,OAAO,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IAC/C,aAAa;IACb,iBAAiB;IACjB,gBAAgB,EAAE,GAAG,iBAAiB,GAAG,EAAE,CAAC;IAC5C,aAAa;IACb,YAAY,cAAc,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IACvC,SAAS;IACT,QAAQ,OAAO,EAAE,CAAC;IAClB,KAAK,CAAC;IACN,IAAI,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK;IAC9B,QAAQ,IAAI,MAAM,GAAG,EAAE,CAAC;IACxB,QAAQ,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;IAC5B,YAAY,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;IAC7D,YAAY,GAAG,GAAG,KAAK,CAAC;IACxB,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,MAAM,IAAI,GAAG,CAAC;IAC9B,aAAa;IACb,iBAAiB;IACjB,gBAAgB,MAAM,IAAI,GAAG,CAAC;IAC9B,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3B,YAAY,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;IAC/C,YAAY,IAAI,MAAM,EAAE;IACxB,gBAAgB,MAAM,IAAI,GAAG,CAAC;IAC9B,gBAAgB,GAAG,GAAG,MAAM,CAAC;IAC7B,aAAa;IACb,iBAAiB,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;IACzC,gBAAgB,MAAM,IAAI,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;IAC/C,gBAAgB,IAAI,IAAI,EAAE;IAC1B,oBAAoB,OAAO,IAAI,GAAG,MAAM,CAAC;IACzC,iBAAiB;IACjB,gBAAgB,OAAO,IAAI,CAAC;IAC5B,aAAa;IACb,SAAS;IACT,QAAQ,MAAM,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACpC,QAAQ,IAAI,EAAE,EAAE;IAChB,YAAY,OAAO,EAAE,GAAG,MAAM,CAAC;IAC/B,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK,CAAC;IACN,IAAI,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK;IAClC,QAAQ,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IAClC,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE;IAC1B,YAAY,MAAM,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;IACtD,SAAS;IACT,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK,CAAC;IACN;IACA,IAAI,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9B,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;IAC1B,QAAQ,MAAM,IAAI,GAAG,UAAU,CAAC,GAAG,EAAE,cAAc,CAAC,EAAE,MAAM,CAAC;IAC7D,QAAQ,IAAI,CAAC,IAAI,EAAE;IACnB,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9C,QAAQ,MAAM,QAAQ,GAAG,EAAE,CAAC;IAC5B,QAAQ,IAAI,KAAK,GAAG,CAAC,EAAE;IACvB,YAAY,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,SAAS;IACT,QAAQ,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;IAChC,YAAY,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAChC,YAAY,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;IACxE,gBAAgB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;IAC1D,oBAAoB,SAAS;IAC7B,iBAAiB;IACjB,aAAa;IACb,YAAY,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/B,SAAS;IACT,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;IACjC,YAAY,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACvC,SAAS;IACT,KAAK,CAAC,CAAC;IACP;IACA,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;IACxB,QAAQ,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChD,QAAQ,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChD,QAAQ,OAAO,QAAQ,GAAG,QAAQ,CAAC;IACnC,KAAK,CAAC,CAAC;IACP;IACA,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC;IAClB,IAAI,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;IAC5B,QAAQ,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;IAC1C,QAAQ,KAAK,EAAE,CAAC;IAChB,KAAK;IACL,IAAI,IAAI,SAAS,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE;IAC5C,QAAQ,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACnD,QAAQ,aAAa,CAAC,WAAW,EAAE,8BAA8B,CAAC,CAAC;IACnE,QAAQ,KAAK,MAAM,GAAG,IAAI,SAAS,CAAC,aAAa,EAAE;IACnD,YAAY,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IAC1C,SAAS;IACT,KAAK;IACL;IACA,IAAI,MAAM,IAAI,GAAG,EAAE,CAAC;IACpB,IAAI,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;IAC5B,QAAQ,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACvC,QAAQ,IAAI,KAAK,IAAI,IAAI,EAAE;IAC3B,YAAY,MAAM;IAClB,SAAS;IACT,QAAQ,IAAI,CAAC,IAAI,CAAC,KAAK;IACvB,aAAa,GAAG,CAAC,CAAC,CAAC,KAAK;IACxB,YAAY,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;IACvC,gBAAgB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC/B,aAAa;IACb,YAAY,OAAO,qBAAqB,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACtD,SAAS,CAAC;IACV,aAAa,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;IACpC,KAAK;IACL,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,oCAAoC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAChG;IACA,IAAI,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;IAC5C,QAAQ,IAAI,GAAG,KAAK,IAAI,EAAE;IAC1B,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,MAAM,OAAO,GAAG,OAAO,GAAG,CAAC;IACnC,QAAQ,QAAQ,OAAO;IACvB,YAAY,KAAK,WAAW;IAC5B,gBAAgB,OAAO,gBAAgB,CAAC;IACxC,YAAY,KAAK,QAAQ;IACzB,gBAAgB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3C,oBAAoB,MAAM;IAC1B,iBAAiB;IACjB,gBAAgB,OAAO,GAAG,CAAC;IAC3B,YAAY,KAAK,QAAQ,CAAC;IAC1B,YAAY,KAAK,SAAS;IAC1B,gBAAgB,OAAO,GAAG,CAAC;IAC3B,SAAS;IACT,QAAQ,MAAM,KAAK,GAAG,cAAc,CAAC,GAAG,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IACxE,QAAQ,IAAI,KAAK,KAAK,SAAS,EAAE;IACjC,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,IAAI,OAAO,KAAK,QAAQ,EAAE;IAClC,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;IAC9B,gBAAgB,OAAO,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC7C,aAAa;IACb,YAAY,IAAI,oBAAoB,CAAC,GAAG,CAAC,EAAE;IAC3C,gBAAgB,MAAM,MAAM,GAAG,EAAE,CAAC;IAClC,gBAAgB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACpD,oBAAoB,MAAM,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACzD,iBAAiB;IACjB,gBAAgB,OAAO,MAAM,CAAC;IAC9B,aAAa;IACb,SAAS;IACT,QAAQ,MAAM,MAAM,CAAC,yBAAyB,EAAE,GAAG,CAAC,CAAC;IACrD,KAAK,CAAC,CAAC;IACP,IAAI,MAAM,IAAI,GAAG,EAAE,CAAC;IACpB;IACA,IAAI,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;IACjC,QAAQ,aAAa,CAAC,GAAG,EAAE,CAAC,mCAAmC,CAAC,CAAC,CAAC;IAClE,QAAQ,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC;IACnC,QAAQ,MAAM,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC;IACjC,QAAQ,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC;IAClC,QAAQ,MAAM,QAAQ,GAAG,GAAG,CAAC,UAAU,CAAC;IACxC,QAAQ,MAAM,OAAO,GAAG,GAAG,CAAC,SAAS,CAAC;IACtC,QAAQ,MAAM,SAAS,GAAG,GAAG,CAAC,cAAc,CAAC;IAC7C,QAAQ,MAAM,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;IAC9B,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;IAC7B,QAAQ,MAAM,eAAe,GAAG,gBAAgB,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC9F,QAAQ,IAAI,GAAG,GAAG,KAAK,CAAC;IACxB,QAAQ,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;IAC5B,YAAY,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC1D,YAAY,IAAI,KAAK,EAAE;IACvB,gBAAgB,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC;IACpC,gBAAgB,GAAG,GAAG,IAAI,CAAC;IAC3B,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,SAAS,EAAE;IACvB,YAAY,IAAI,eAAe,IAAI,KAAK,EAAE;IAC1C,gBAAgB,SAAS,CAAC,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;IAClF,gBAAgB,GAAG,GAAG,IAAI,CAAC;IAC3B,aAAa;IACb,YAAY,IAAI,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IAC/C,gBAAgB,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACpF,gBAAgB,IAAI,KAAK,EAAE;IAC3B,oBAAoB,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC;IACxC,oBAAoB,GAAG,GAAG,IAAI,CAAC;IAC/B,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,eAAe,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;IAC1D,gBAAgB,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9D,gBAAgB,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC;IACpC,gBAAgB,GAAG,GAAG,IAAI,CAAC;IAC3B,aAAa;IACb,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,MAAM,kBAAkB,GAAG,EAAE,CAAC;IAC9C,gBAAgB,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,KAAK;IACjD,oBAAoB,kBAAkB,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,iBAAiB,CAAC,CAAC;IACnB,gBAAgB,MAAM,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3D,gBAAgB,IAAI,KAAK,EAAE;IAC3B,oBAAoB,SAAS,CAAC,CAAC,GAAG,KAAK,CAAC;IACxC,oBAAoB,GAAG,GAAG,IAAI,CAAC;IAC/B,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,GAAG,EAAE;IACjB,YAAY,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IACjD,YAAY,aAAa,CAAC,SAAS,EAAE,CAAC,uCAAuC,CAAC,EAAE,IAAI,CAAC,CAAC;IACtF,YAAY,IAAI,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;IACxC,SAAS;IACT,KAAK,CAAC,CAAC;IACP;IACA,IAAI,IAAI,IAAI,EAAE;IACd,QAAQ,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,KAAK;IAC9C,YAAY,IAAI,CAAC,KAAK,EAAE;IACxB,gBAAgB,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAClE,aAAa;IACb,SAAS,CAAC,CAAC;IACX,KAAK;IACL,IAAI,OAAO;IACX,QAAQ,KAAK,EAAE;IACf,YAAY,GAAG,EAAE,IAAI;IACrB,YAAY,IAAI,EAAE,aAAa;IAC/B,YAAY,IAAI;IAChB,SAAS;IACT,QAAQ,IAAI;IACZ,QAAQ,SAAS;IACjB,QAAQ,IAAI,EAAE,SAAS,GAAG,QAAQ,GAAG,WAAW;IAChD,KAAK,CAAC;IACN,EAAE;IACK,MAAM,UAAU,GAAG,CAAC,GAAG,EAAE,cAAc,KAAK;IACnD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;IACxB,QAAQ,OAAO,SAAS,CAAC;IACzB,KAAK;IACL,IAAI,IAAI,GAAG,YAAY,UAAU,EAAE;IACnC,QAAQ,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC;IACpC,KAAK;IACL,IAAI,MAAM,KAAK,GAAG,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACrD,IAAI,IAAI,KAAK,EAAE;IACf,QAAQ,OAAO,eAAe,CAAC,KAAK,CAAC,CAAC;IACtC,KAAK;IACL,IAAI,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC;IACK,MAAM,WAAW,GAAG,CAAC,SAAS,KAAK;IAC1C,IAAI,IAAI,KAAK,GAAG,SAAS,CAAC,gBAAgB,CAAC;IAC3C,IAAI,OAAO,KAAK,EAAE;IAClB,QAAQ,IAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,IAAI,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,WAAW,EAAE;IAC7F,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,KAAK,GAAG,KAAK,CAAC,sBAAsB,CAAC;IAC7C,KAAK;IACL,IAAI,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC;IACF,MAAM,YAAY,GAAG,CAAC,CAAC;IACvB,MAAM,YAAY,GAAG,GAAG,CAAC;IACzB,MAAM,aAAa,GAAG,CAAC,CAAC;IACxB,MAAM,aAAa,GAAG,CAAC,CAAC;IACxB,MAAM,WAAW,GAAG,CAAC,CAAC;IACf,MAAM,eAAe,GAAG,CAAC,MAAM,EAAE,SAAS,KAAK;IAEtD,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE,CAEtB;IACL,IAAI,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,MAAM,EAAE,YAAY,GAAG,YAAY,EAAE;IAC9F,QAAQ,UAAU,CAAC,IAAI,EAAE;IACzB,YAAY,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;IACnC,gBAAgB,OAAO,aAAa,CAAC;IACrC,aAAa;IACb,YAAY,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,aAAa,GAAG,WAAW,CAAC;IACjE,SAAS;IACT,KAAK,CAAC,CAAC;IACP,IAAI,MAAM,IAAI,GAAG,EAAE,CAAC;IACpB,IAAI,IAAI,WAAW,GAAG,IAAI,CAAC;IAC3B,IAAI,QAAQ,WAAW,GAAG,MAAM,CAAC,QAAQ,EAAE,GAAG;IAC9C,QAAQ,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAC,CAAC;IACpD,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;IACF,MAAM,YAAY,GAAG,CAAC,IAAI,EAAE,MAAM,KAAK;IACvC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC1C,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC7B,YAAY,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,KAAK,gBAAgB,GAAG,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACrF,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,mBAAmB,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,KAAK;IACnF,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC9C,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9B,QAAQ,MAAM,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjC,QAAQ,IAAI,IAAI,EAAE;IAClB,YAAY,MAAM,SAAS,GAAG,EAAE,CAAC;IACjC,YAAY,IAAI,IAAI,GAAG,CAAC,CAAC;IACzB,YAAY,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;IACpC,gBAAgB,IAAI,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;IACzC,oBAAoB,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACtD,iBAAiB;IACjB,qBAAqB;IACrB,oBAAoB,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC;IACtE,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,IAAI,GAAG,CAAC,EAAE;IAC1B,gBAAgB,KAAK,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;IACjD,aAAa;IACb,YAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;IAChD,gBAAgB,WAAW,CAAC,KAAK,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IAC9D,aAAa;IACb,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,mBAAmB,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,MAAM,KAAK;IACxD,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IAC1B,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,IAAI,GAAG,IAAI,OAAO,GAAG,IAAI,QAAQ,EAAE;IACvC,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;IAC1B,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACjD,gBAAgB,GAAG,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3C,aAAa;IACb,SAAS;IACT,aAAa,IAAI,oBAAoB,CAAC,GAAG,CAAC,EAAE;IAC5C,YAAY,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IAChD,gBAAgB,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,aAAa;IACb,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,iBAAiB,GAAG;IAC1B,IAAI,GAAG,EAAE,CAAC,GAAG,EAAE,cAAc,KAAK;IAClC,QAAQ,OAAO,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,gBAAgB,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IAC3F,KAAK;IACL,IAAI,GAAG,EAAE,CAAC,GAAG,KAAK;IAClB,QAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IACpC,KAAK;IACL,IAAI,CAAC,EAAE,CAAC,GAAG,KAAK;IAChB,QAAQ,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACnC,KAAK;IACL,CAAC,CAAC;IACF,MAAM,aAAa,GAAG,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,cAAc,KAAK;IAC9D,IAAI,UAAU,CAAC,OAAO,EAAE,KAAK,QAAQ,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,8CAA8C,EAAE,EAAE,CAAC,CAAC;IAC5G,IAAI,IAAI,EAAE,CAAC,UAAU,CAAC,iBAAiB,CAAC,EAAE;IAC1C,QAAQ,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,uBAAuB,CAAC,EAAE,EAAE,CAAC,CAAC;IACpE,QAAQ,OAAO,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAChC,KAAK;IACL,IAAI,MAAM,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAI,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,EAAE,gCAAgC,EAAE,EAAE,CAAC,CAAC;IAC1E,IAAI,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,IAAI,KAAK,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;IAC7C,QAAQ,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3B,QAAQ,MAAM,SAAS,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAClD,QAAQ,IAAI,CAAC,SAAS,EAAE;IACxB,YAAY,MAAM;IAClB,SAAS;IACT,QAAQ,GAAG,GAAG,SAAS,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;IAC7C,KAAK;IACL,IAAI,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;IACF,MAAM,YAAY,GAAG,CAAC,KAAK,EAAE,SAAS,KAAK;IAC3C,IAAI,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC;IACrC,IAAI,IAAI,SAAS,IAAI,KAAK,CAAC,OAAO,IAAI,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;IAC1F,QAAQ,MAAM,IAAI,GAAG,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC;IAC5D,QAAQ,MAAM,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC;IACnC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE;IACjE,YAAY,cAAc,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAC1C,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,eAAe,GAAG,CAAC,cAAc,KAAK;IAC5C,IAAI,OAAO;IACX,QAAQ,gBAAgB,EAAE,cAAc;IACxC,QAAQ,MAAM,EAAE,IAAI,GAAG,EAAE;IACzB,QAAQ,QAAQ,EAAE,IAAI,GAAG,EAAE;IAC3B,QAAQ,aAAa,EAAE,EAAE;IACzB,QAAQ,UAAU,EAAE,EAAE;IACtB,QAAQ,UAAU,EAAE,EAAE;IACtB,KAAK,CAAC;IACN,CAAC,CAAC;IACF,MAAM,mBAAmB,GAAG,CAAC,EAAE,EAAE,SAAS,KAAK;IAC/C,IAAI,IAAI,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;IAC3C,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC;IACF,MAAM,cAAc,GAAG,CAAC,EAAE,EAAE,SAAS,KAAK;IAC1C,IAAI,IAAI,SAAS,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;IAC3C,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,MAAM,GAAG,GAAG,aAAa,CAAC,EAAE,CAAC,CAAC;IAClC,IAAI,IAAI,GAAG,EAAE;IACb,QAAQ,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACtC,QAAQ,kBAAkB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAC3C,KAAK;IACL,CAAC,CAAC;IACK,MAAM,kBAAkB,GAAG,CAAC,KAAK,EAAE,SAAS,KAAK;IACxD,IAAI,IAAI,KAAK,CAAC,OAAO,EAAE;IACvB,QAAQ,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACtD,KAAK;IACL,IAAI,IAAI,KAAK,CAAC,cAAc,EAAE;IAC9B,QAAQ,YAAY,CAAC,KAAK,CAAC,cAAc,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAC7D,KAAK;IACL,IAAI,IAAI,KAAK,CAAC,KAAK,EAAE;IACrB,QAAQ,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,KAAK,EAAE;IACvC,YAAY,YAAY,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAChD,SAAS;IACT,KAAK;IACL,IAAI,IAAI,KAAK,CAAC,SAAS,EAAE;IACzB,QAAQ,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,SAAS,EAAE;IAC3C,YAAY,YAAY,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAChD,SAAS;IACT,KAAK;IACL,IAAI,IAAI,KAAK,CAAC,UAAU,EAAE;IAC1B,QAAQ,KAAK,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE;IACrD,YAAY,YAAY,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAChD,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACK,MAAM,UAAU,GAAG,CAAC,GAAG,KAAK;IACnC,IAAI,OAAO,GAAG,CAAC,OAAO,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;IACnD,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,GAAG,KAAK;IACrC,IAAI,OAAO,GAAG,CAAC,OAAO,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC,CAAC;IACK,MAAM,oBAAoB,GAAG,CAAC,OAAO,EAAE,SAAS,KAAK;IAC5D,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;IACvC,QAAQ,OAAO;IACf,KAAK;IACL,IAAI,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAClC,IAAI,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;IAChC,IAAI,aAAa,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAC;IAChD,IAAI,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;IAC5B,QAAQ,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5B,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,EAAE;IACpD,YAAY,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IAC9B,gBAAgB,mBAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACrD,aAAa;IACb,SAAS;IACT,aAAa;IACb,YAAY,YAAY,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IAChD,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACF,MAAM,aAAa,GAAG,MAAM,EAAE,CAAC;IAC/B,MAAM,cAAc,GAAG,CAAC,OAAO,KAAK;IACpC,IAAI,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK;IACnC,QAAQ,MAAM,CAAC,GAAG;IAClB,YAAY,QAAQ,EAAE,IAAI;IAC1B,YAAY,KAAK;IACjB,SAAS,CAAC;IACV,QAAQ,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACnC,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,EAAE,CAAC,KAAK,KAAK;IAClB,QAAQ,MAAM,CAAC,GAAG;IAClB,YAAY,QAAQ,EAAE,KAAK;IAC3B,YAAY,KAAK;IACjB,SAAS,CAAC;IACV,QAAQ,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IACnC,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK,CAAC,CAAC;IACP,CAAC,CAAC;IACF,MAAM,eAAe,GAAG,CAAC,OAAO,KAAK;IACrC,IAAI,UAAU,CAAC,aAAa,IAAI,OAAO,EAAE,4CAA4C,EAAE,OAAO,CAAC,CAAC;IAChG,IAAI,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;IAClC,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,KAAK;IACvD,IAAI,IAAI,GAAG,KAAK,IAAI,EAAE;IACtB,QAAQ,MAAM,OAAO,GAAG,OAAO,GAAG,CAAC;IACnC,QAAQ,QAAQ,OAAO;IACvB,YAAY,KAAK,UAAU,CAAC;IAC5B,YAAY,KAAK,QAAQ,EAAE;IAC3B,gBAAgB,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,CAAC;IAC9C,gBAAgB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACnC,oBAAoB,OAAO;IAC3B,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE;IAC/C,oBAAoB,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACtD,oBAAoB,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtD,oBAAoB,OAAO;IAC3B,iBAAiB;IACjB,gBAAgB,MAAM,KAAK,GAAG,GAAG,CAAC;IAClC,gBAAgB,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;IACnD,gBAAgB,IAAI,MAAM,EAAE;IAC5B,oBAAoB,GAAG,GAAG,MAAM,CAAC;IACjC,oBAAoB,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;IACvC,wBAAwB,OAAO;IAC/B,qBAAqB;IACrB,oBAAoB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClC,oBAAoB,IAAI,KAAK,EAAE;IAC/B,wBAAwB,oBAAoB,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;IAChF,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACrE,gBAAgB,IAAI,SAAS,EAAE;IAC/B,oBAAoB,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChD,oBAAoB,OAAO;IAC3B,iBAAiB;IACjB,gBAAgB,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;IACpC,oBAAoB,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,KAAK;IAClF,wBAAwB,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IAC9D,qBAAqB,CAAC,CAAC,CAAC;IACxB,oBAAoB,OAAO;IAC3B,iBAAiB;IACjB,gBAAgB,IAAI,OAAO,KAAK,QAAQ,EAAE;IAC1C,oBAAoB,IAAI,MAAM,CAAC,GAAG,CAAC,EAAE;IACrC,wBAAwB,OAAO;IAC/B,qBAAqB;IACrB,oBAAoB,IAAI,OAAO,CAAC,GAAG,CAAC,EAAE;IACtC,wBAAwB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC7D,4BAA4B,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACnE,yBAAyB;IACzB,qBAAqB;IACrB,yBAAyB,IAAI,oBAAoB,CAAC,GAAG,CAAC,EAAE;IACxD,wBAAwB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IAC5D,4BAA4B,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;IACrE,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,MAAM;IACtB,aAAa;IACb,SAAS;IACT,KAAK;IACL,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC,CAAC;IACK,MAAM,WAAW,GAAG,CAAC,EAAE,KAAK;IACnC,IAAI,OAAO,SAAS,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IAC5D,CAAC,CAAC;IACF,MAAM,MAAM,GAAG,CAAC,EAAE,KAAK;IACvB,IAAI,MAAM,IAAI,GAAG,mBAAmB,CAAC,EAAE,CAAC,CAAC;IACzC,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,EAAE;IAC7B,QAAQ,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAC7C,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IACK,MAAM,QAAQ,GAAG,CAAC,EAAE,KAAK;IAChC,IAAI,OAAO,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC;IACK,MAAM,QAAQ,GAAG,CAAC,EAAE,KAAK;IAChC,IAAI,OAAO,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,SAAS,KAAK;IAC3C,IAAI,MAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,UAAU,CAAC,QAAQ,IAAI,CAAC,EAAE,8BAA8B,CAAC,CAAC;IAC9D,IAAI,OAAO,oBAAoB,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC,CAAC;IACF,MAAM,WAAW,GAAG,CAAC,IAAI,KAAK;IAC9B,IAAI,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;IACtC,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE;IAC1B,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;IACL,SAAS;IACT,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IAC/D,QAAQ,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACxD,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;IACL,CAAC;;ICnyBM,MAAM,KAAK,GAAG,MAAM,CAAC;IACrB,MAAM,cAAc,GAAG,CAAC,WAAW,KAAK;IAC/C,IAAI,MAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IACtE,IAAI,IAAI,SAAS,KAAK,QAAQ,EAAE;IAChC,QAAQ,eAAe,CAAC,WAAW,CAAC,CAAC;IACrC,QAAQ,IAAI,UAAU,EAAE;IACxB,YAAY,kBAAkB,CAAC,WAAW,CAAC,CAAC;IAC5C,SAAS;IACT,KAAK;IACL,CAAC,CAAC;IACK,MAAM,kBAAkB,GAAG,CAAC,WAAW,KAAK;IACnD,IAAI,WAAW,CAAC,MAAM,CAAC,GAAG;IAC1B,QAAQ,KAAK,EAAE,MAAM,cAAc,CAAC,WAAW,CAAC;IAChD,QAAQ,KAAK,EAAE,iBAAiB,CAAC,WAAW,CAAC;IAC7C,KAAK,CAAC;IACN,CAAC,CAAC;IACK,MAAM,aAAa,GAAG,CAAC,OAAO,KAAK;IAC1C,IAAI,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC,CAAC;IACK,MAAM,UAAU,GAAG,CAAC,OAAO,KAAK;IACvC,IAAI,IAAI,GAAG,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IACrC,IAAI,IAAI,CAAC,GAAG,EAAE;IACd,QAAQ,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG;IAC/B,YAAY,OAAO,EAAE,KAAK;IAC1B,YAAY,SAAS,EAAE,KAAK;IAC5B,YAAY,qBAAqB,EAAE,KAAK;IACxC,YAAY,IAAI,EAAE,EAAE;IACpB,YAAY,SAAS,EAAE,OAAO;IAC9B,YAAY,QAAQ,EAAE,EAAE;IACxB,YAAY,EAAE,EAAE,EAAE;IAClB,YAAY,SAAS,EAAE,IAAI;IAC3B,YAAY,KAAK,EAAE,IAAI;IACvB,YAAY,OAAO,EAAE,IAAI;IACzB,YAAY,UAAU,EAAE,IAAI;IAC5B,YAAY,cAAc,EAAE,IAAI;IAChC,YAAY,OAAO,EAAE,IAAI;IACzB,YAAY,MAAM,EAAE,IAAI;IACxB,YAAY,cAAc,EAAE,IAAI;IAChC,YAAY,UAAU,EAAE,IAAI;IAC5B,YAAY,QAAQ,EAAE,IAAI;IAC1B,SAAS,CAAC;IACV,KAAK;IACL,IAAI,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;IACK,MAAM,cAAc,GAAG,CAAC,KAAK,EAAE,WAAW,KAAK;IACtD,IAAI,MAAM,EAAE,GAAG,KAAK,CAAC,SAAS,CAAC;IAC/B,IAAI,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,KAAK,KAAK;IACxC,QAAQ,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACtC,QAAQ,YAAY,CAAC,KAAK,CAAC,CAAC;IAC5B,KAAK,CAAC,CAAC;IACP,IAAI,IAAI,KAAK,CAAC,cAAc,EAAE;IAC9B,QAAQ,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IACnC,KAAK;IACL,IAAI,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC;IAChC,IAAI,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;IACvB,IAAI,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;IAC3B,IAAI,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;IAC1B,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;IAC1B,CAAC,CAAC;IACF,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IACpD,MAAM,MAAM,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IAC3C,MAAM,eAAe,GAAG,CAAC,IAAI,KAAK;IACzC,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC;IACrB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC9C,QAAQ,MAAM,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnC,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;IACrC,YAAY,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,YAAY,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC7C,YAAY,MAAM;IAClB,SAAS;IACT,KAAK;IACL,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;IAC9B,QAAQ,IAAI,GAAG,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,KAAK;IACL,SAAS;IACT,QAAQ,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAClC,KAAK;IACL,IAAI,OAAO,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC;IAC9B,CAAC,CAAC;IACK,MAAM,eAAe,GAAG,CAAC,KAAK,KAAK;IAC1C,IAAI,MAAM,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC;IAC3C,IAAI,aAAa,CAAC,OAAO,EAAE,CAAC,uCAAuC,CAAC,EAAE,KAAK,CAAC,CAAC;IAC7E,IAAI,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,aAAa,CAAC,MAAM,EAAE,CAAC,uCAAuC,CAAC,EAAE,KAAK,CAAC,CAAC;IAC5E,IAAI,OAAO;IACX,QAAQ,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE;IACzB,YAAY,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1C,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IACjC,YAAY,IAAI,QAAQ,KAAK,KAAK,EAAE;IACpC,gBAAgB,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC3C,aAAa;IACb,SAAS;IACT,KAAK,CAAC;IACN,CAAC,CAAC;IACK,MAAM,UAAU,GAAG,CAAC,GAAG,EAAE,KAAK,KAAK;IAC1C,IAAI,aAAa,CAAC,GAAG,CAAC,SAAS,EAAE,8DAA8D,EAAE,GAAG,CAAC,CAAC;IACtG,IAAI,QAAQ,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;IAC1D,QAAQ,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACtC,QAAQ,MAAM,GAAG,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACxC,QAAQ,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,GAAG,EAAE,8BAA8B,EAAE,GAAG,CAAC,CAAC;IACrF,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK,CAAC,EAAE;IACR,CAAC;;ICpGM,MAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC;IAChC,MAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,CAAC;IACvC,MAAM,kBAAkB,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;IAC3C,MAAM,kBAAkB,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;IACjD,MAAM,oBAAoB,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;IAC5D;IACA;IACA;AACY,UAAC,UAAU,GAAG,MAAM,CAAC,WAAW,EAAE;IACvC,MAAM,iBAAiB,GAAG,IAAI,CAAC;IACtC;IACA;IACA;IACO,MAAM,gBAAgB,GAAG,CAAC,MAAM,EAAE,cAAc,EAAE,KAAK,GAAG,CAAC,KAAK;IACvE,IAAI,MAAM,KAAK,GAAG,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACxD,IAAI,IAAI,KAAK,EAAE;IACf,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,IAAI,IAAI,KAAK,KAAK,CAAC,EAAE;IACrB,QAAQ,MAAM,CAAC,kBAAkB,CAAC,GAAG,KAAK,CAAC;IAC3C,KAAK;IACL,IAAI,OAAO,WAAW,CAAC,MAAM,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;IAC1D,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,KAAK,EAAE,cAAc,EAAE,YAAY,KAAK;IACrE,IAAI,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IAC/E,IAAI,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAClD,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;IACK,MAAM,UAAU,CAAC;IACxB,IAAI,WAAW,CAAC,CAAC,EAAE,OAAO,EAAE;IAC5B,QAAQ,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;IAChC,QAAQ,IAAI,CAAC,oBAAoB,CAAC,GAAG,OAAO,CAAC;IAC7C,KAAK;IACL,IAAI,IAAI,KAAK,GAAG;IAChB,QAAQ,MAAM,GAAG,GAAG,mBAAmB,EAAE,EAAE,YAAY,CAAC;IACxD,QAAQ,IAAI,GAAG,EAAE;IACjB,YAAY,IAAI,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC;IACrE,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC,cAAc,CAAC;IACnC,KAAK;IACL,IAAI,IAAI,KAAK,CAAC,CAAC,EAAE;IACjB,QAAQ,IAAI,IAAI,EAAE;IAClB,YAAY,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAClC,YAAY,MAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;IACpD,YAAY,IAAI,SAAS,IAAI,SAAS,CAAC,OAAO,KAAK,WAAW,EAAE;IAChE,gBAAgB,OAAO,CAAC,2GAA2G,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;IAC9J,aAAa;IACb,SAAS;IACT,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACnD,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;IAC7C,QAAQ,IAAI,OAAO,IAAI,QAAQ,KAAK,CAAC,EAAE;IACvC,YAAY,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;IACpC,YAAY,OAAO,CAAC,YAAY,EAAE,CAAC;IACnC,SAAS;IACT,KAAK;IACL,CAAC;IACM,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK;IACjC,IAAI,OAAO,GAAG,YAAY,UAAU,IAAI,GAAG,YAAY,aAAa,CAAC;IACrE,CAAC,CAAC;IACK,MAAM,YAAY,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,KAAK;IACrE,IAAI,MAAM,YAAY,GAAG,MAAM,YAAY,aAAa;IACxD,UAAU;IACV,YAAY,IAAI;IAChB,YAAY,MAAM;IAClB,YAAY,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC;IACtC,YAAY,GAAG;IACf,YAAY,QAAQ;IACpB,YAAY,MAAM,CAAC,IAAI,KAAK,OAAO,GAAG,SAAS,GAAG,MAAM,CAAC,IAAI;IAC7D,SAAS;IACT,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC3D,IAAI,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACnD,CAAC,CAAC;IACK,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,KAAK;IAC7D,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,mCAAmC,EAAE,MAAM,CAAC,CAAC;IAC1F,IAAI,UAAU,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,2BAA2B,EAAE,MAAM,CAAC,CAAC;IAC5F,IAAI,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,0BAA0B,CAAC,CAAC;IAC7D,IAAI,UAAU,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE,sCAAsC,CAAC,CAAC;IACxG,IAAI,MAAM,OAAO,GAAG,cAAc,CAAC,aAAa,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACvE,IAAI,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,IAAI,qBAAqB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IACxF,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACjD,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IACF,MAAM,qBAAqB,CAAC;IAC5B,IAAI,WAAW,CAAC,gBAAgB,EAAE,SAAS,EAAE;IAC7C,QAAQ,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,KAAK;IACL,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE;IACtB,QAAQ,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IACtC,YAAY,IAAI,IAAI,KAAK,kBAAkB;IAC3C,gBAAgB,OAAO,MAAM,CAAC;IAC9B,YAAY,IAAI,IAAI,KAAK,oBAAoB;IAC7C,gBAAgB,OAAO,IAAI,CAAC,SAAS,CAAC;IACtC,YAAY,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;IAChC,SAAS;IACT,QAAQ,IAAI,UAAU,CAAC;IACvB,QAAQ,MAAM,KAAK,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACtD,QAAQ,YAAY,CAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;IACvD,QAAQ,MAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;IAChD,QAAQ,MAAM,SAAS,GAAG,CAAC,KAAK,GAAG,gBAAgB,MAAM,CAAC,CAAC;IAC3D,QAAQ,MAAM,SAAS,GAAG,CAAC,KAAK,GAAG,gBAAgB,MAAM,CAAC,CAAC;IAC3D,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,QAAQ,IAAI,SAAS,EAAE;IACvB,YAAY,UAAU,GAAG,SAAS,CAAC,YAAY,CAAC;IAChD,SAAS;IACT,QAAQ,IAAI,SAAS,EAAE;IACvB,YAAY,MAAM,YAAY,GAAG,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC;IAClE,YAAY,IAAI,EAAE,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,EAAE;IACrF,gBAAgB,UAAU,GAAG,IAAI,CAAC;IAClC,aAAa;IACb,YAAY,IAAI,YAAY,EAAE;IAC9B,gBAAgB,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,0BAA0B,CAAC,CAAC;IAC/E,gBAAgB,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;IAC3C,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,UAAU,EAAE;IACxB,YAAY,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IACxC,YAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,GAAG,GAAG,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;IAC7E,SAAS;IACT,QAAQ,OAAO,SAAS,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC;IACtE,KAAK;IACL,IAAI,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE;IAChC,QAAQ,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IACtC,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC;IACpC,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,MAAM,KAAK,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IACtD,QAAQ,YAAY,CAAC,KAAK,EAAE,yBAAyB,CAAC,CAAC;IACvD,QAAQ,MAAM,SAAS,GAAG,CAAC,KAAK,GAAG,gBAAgB,MAAM,CAAC,CAAC;IAC3D,QAAQ,IAAI,SAAS,EAAE;IACvB,YAAY,MAAM,MAAM,CAAC,qBAAqB,CAAC,CAAC;IAChD,SAAS;IACT,QAAQ,MAAM,SAAS,GAAG,CAAC,KAAK,GAAG,gBAAgB,MAAM,CAAC,CAAC;IAC3D,QAAQ,MAAM,iBAAiB,GAAG,SAAS,GAAG,WAAW,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC;IAC/E,QAAQ,IAAI,IAAI,EAAE;IAClB,YAAY,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;IAClD,YAAY,MAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;IACpD,YAAY,IAAI,SAAS,IAAI,SAAS,CAAC,OAAO,KAAK,WAAW,EAAE;IAChE,gBAAgB,OAAO,CAAC,2GAA2G,EAAE,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;IACpK,aAAa;IACb,SAAS;IACT,QAAQ,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;IACpC,QAAQ,IAAI,GAAG,EAAE;IACjB,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC;IAC7C,YAAY,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IAC1C,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IACtC,QAAQ,IAAI,QAAQ,KAAK,iBAAiB,EAAE;IAC5C,YAAY,MAAM,CAAC,IAAI,CAAC,GAAG,iBAAiB,CAAC;IAC7C,YAAY,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC9C,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;IACL,IAAI,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE;IAC1B,QAAQ,IAAI,QAAQ,KAAK,kBAAkB;IAC3C,YAAY,OAAO,IAAI,CAAC;IACxB,QAAQ,MAAM,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC;IAC/D,QAAQ,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,EAAE;IACnD,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,EAAE,iBAAiB,GAAG,QAAQ,CAAC,EAAE;IACvG,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;IACT,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,IAAI,OAAO,CAAC,MAAM,EAAE;IACpB,QAAQ,IAAI,UAAU,GAAG,IAAI,CAAC;IAC9B,QAAQ,MAAM,SAAS,GAAG,mBAAmB,EAAE,CAAC;IAChD,QAAQ,IAAI,SAAS,EAAE;IACvB,YAAY,UAAU,GAAG,SAAS,CAAC,YAAY,CAAC;IAChD,SAAS;IACT,QAAQ,IAAI,UAAU,EAAE;IACxB,YAAY,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;IAChE,SAAS;IACT,QAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK;IAClD,YAAY,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,UAAU,CAAC,iBAAiB,CAAC;IAC3E,kBAAkB,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC;IACnD,kBAAkB,CAAC,CAAC;IACpB,SAAS,CAAC,CAAC;IACX,KAAK;IACL,CAAC;IACD,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,cAAc,KAAK;IACxC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,EAAE;IACtB,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,IAAI,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;IACzB,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;IACpC,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,MAAM,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IAC9C,QAAQ,IAAI,UAAU,KAAK,KAAK,EAAE;IAClC;IACA,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE;IAChC,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE;IAC1C,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,IAAI,IAAI,EAAE;IAClB,YAAY,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACtC,SAAS;IACT,QAAQ,MAAM,KAAK,GAAG,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC3D,QAAQ,OAAO,KAAK,GAAG,KAAK,GAAG,gBAAgB,CAAC,KAAK,EAAE,cAAc,EAAE,gBAAgB,CAAC,CAAC;IACzF,KAAK;IACL,SAAS;IACT,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,CAAC,CAAC;IACK,MAAM,kBAAkB,GAAG,CAAC,KAAK,KAAK;IAC7C,IAAI,MAAM,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC;IAC3B,IAAI,OAAO,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC;IACF,MAAM,mBAAmB,GAAG,CAAC,KAAK,EAAE,IAAI,KAAK;IAC7C,IAAI,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;IACzC,IAAI,IAAI,SAAS,IAAI,IAAI,EAAE;IAC3B,QAAQ,OAAO,KAAK,CAAC;IACrB,KAAK;IACL,IAAI,IAAI,eAAe,CAAC,SAAS,CAAC,EAAE;IACpC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;IACjC,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC5B,QAAQ,IAAI,YAAY,CAAC,SAAS,CAAC,EAAE;IACrC,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS;IACT,QAAQ,QAAQ,OAAO,SAAS;IAChC,YAAY,KAAK,QAAQ;IACzB,gBAAgB,IAAI,SAAS,CAAC,SAAS,CAAC;IACxC,oBAAoB,OAAO,KAAK,CAAC;IACjC,gBAAgB,IAAI,aAAa,CAAC,SAAS,CAAC;IAC5C,oBAAoB,OAAO,KAAK,CAAC;IACjC,gBAAgB,IAAI,UAAU,CAAC,SAAS,CAAC;IACzC,oBAAoB,OAAO,KAAK,CAAC;IACjC,gBAAgB,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;IACxC,oBAAoB,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;IAClD,wBAAwB,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxD,qBAAqB;IACrB,oBAAoB,OAAO,KAAK,CAAC;IACjC,iBAAiB;IACjB,gBAAgB,IAAI,oBAAoB,CAAC,SAAS,CAAC,EAAE;IACrD,oBAAoB,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;IACjE,wBAAwB,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACxD,qBAAqB;IACrB,oBAAoB,OAAO,KAAK,CAAC;IACjC,iBAAiB;IACjB,gBAAgB,MAAM;IACtB,YAAY,KAAK,SAAS,CAAC;IAC3B,YAAY,KAAK,QAAQ,CAAC;IAC1B,YAAY,KAAK,QAAQ;IACzB,gBAAgB,OAAO,KAAK,CAAC;IAC7B,SAAS;IACT,QAAQ,MAAM,MAAM,CAAC,yBAAyB,EAAE,SAAS,CAAC,CAAC;IAC3D,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,CAAC,CAAC;IACF,MAAM,cAAc,iBAAiB,IAAI,OAAO,EAAE,CAAC;IAC5C,MAAM,eAAe,GAAG,CAAC,GAAG,KAAK;IACxC,IAAI,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;IAC1C,QAAQ,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACxC,KAAK;IACL,IAAI,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;IACK,MAAM,mBAAmB,GAAG,CAAC,GAAG,KAAK;IAC5C,IAAI,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,WAAW,GAAG,CAAC,KAAK,KAAK;IACtC,IAAI,IAAI,KAAK,IAAI,IAAI,EAAE;IACvB,QAAQ,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAClC,KAAK;IACL,IAAI,OAAO,KAAK,CAAC;IACjB,EAAE;IACF;IACA;IACA;IACA;AACY,UAAC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC9B,IAAI,OAAO,CAAC,IAAI,CAAC,qFAAqF,CAAC,CAAC;IACxG,IAAI,OAAO,CAAC,CAAC;IACb,EAAE;IAMK,MAAM,WAAW,GAAG,CAAC,GAAG,KAAK;IACpC,IAAI,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;IAC5B,QAAQ,OAAO,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC;IACvD,KAAK;IACL,SAAS;IACT,QAAQ,OAAO,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACrC,KAAK;IACL,CAAC,CAAC;IACF;IACA;IACA;IACO,MAAM,WAAW,GAAG,CAAC,KAAK,KAAK;IACtC,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,KAAK,GAAG,KAAK,CAAC;IACpE,CAAC,CAAC;IACK,MAAM,cAAc,GAAG,CAAC,GAAG,KAAK;IACvC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;IACnC,CAAC,CAAC;IACK,MAAM,eAAe,GAAG,CAAC,GAAG,KAAK;IACxC,IAAI,OAAO,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACrC,CAAC,CAAC;IACK,MAAM,aAAa,GAAG,CAAC,GAAG,KAAK;IACtC,IAAI,OAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;IACnC,CAAC,CAAC;IACK,MAAM,aAAa,CAAC;IAC3B,IAAI,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE;IAC3B,QAAQ,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACvB,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,KAAK;IACL,IAAI,KAAK,oBAAoB,CAAC,GAAG;IACjC,QAAQ,OAAO,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzC,KAAK;IACL,IAAI,IAAI,KAAK,GAAG;IAChB,QAAQ,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,KAAK;IACL,IAAI,IAAI,KAAK,CAAC,KAAK,EAAE;IACrB,QAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IACpC,KAAK;IACL,CAAC;IACD;IACA;IACA;AACY,UAAC,WAAW,GAAG,CAAC,GAAG,EAAE,IAAI,KAAK;IAC1C,IAAI,IAAI,GAAG,YAAY,UAAU,EAAE;IACnC,QAAQ,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,2CAA2C,CAAC,CAAC;IAChF,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,IAAI,GAAG,YAAY,aAAa,EAAE;IACtC,QAAQ,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,2CAA2C,CAAC,CAAC;IAChF,QAAQ,OAAO,GAAG,CAAC;IACnB,KAAK;IACL,IAAI,MAAM,MAAM,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;IACvC,IAAI,IAAI,MAAM,EAAE;IAChB,QAAQ,MAAM,MAAM,GAAG,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC,CAAC;IACxD,QAAQ,IAAI,MAAM,EAAE;IACpB,YAAY,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,wBAAwB,CAAC,CAAC,CAAC;IACzF,YAAY,OAAO,MAAM,CAAC;IAC1B,SAAS;IACT,QAAQ,OAAO,IAAI,aAAa,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC5C,KAAK;IACL,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;IACrB;;ICpXO,MAAM,KAAK,GAAG,CAAC,KAAK,KAAK;IAChC,IAAI,OAAO,OAAO,KAAK,KAAK,UAAU,IAAI,OAAO,KAAK,CAAC,SAAS,KAAK,UAAU,CAAC;IAChF,CAAC,CAAC;IACK,MAAM,SAAS,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,SAAS,KAAK;IACjG,IAAI,IAAI,IAAI,EAAE;IACd,QAAQ,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACvC,KAAK;IACL,IAAI,IAAI,YAAY,CAAC;IACrB,IAAI,MAAM,YAAY,GAAG,CAAC,EAAE,KAAK;IACjC,QAAQ,IAAI,CAAC,YAAY,EAAE;IAC3B,YAAY,YAAY,GAAG,EAAE,CAAC;IAC9B,SAAS;IACT,KAAK,CAAC;IACN,IAAI,MAAM,OAAO,GAAG,OAAO,WAAW,KAAK;IAC3C,QAAQ,IAAI,WAAW,EAAE;IACzB,YAAY,YAAY,CAAC,WAAW,CAAC,CAAC;IACtC,SAAS;IACT,QAAQ,IAAI,SAAS,KAAK,IAAI,EAAE;IAChC,YAAY,OAAO,SAAS,CAAC;IAC7B,SAAS;IACT,QAAQ,IAAI,QAAQ,KAAK,IAAI,EAAE;IAC/B,YAAY,QAAQ,SAAS,GAAG,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;IAC3F,SAAS;IACT,aAAa;IACb,YAAY,IAAI,CAAC,KAAK,EAAE;IACxB,gBAAgB,MAAM,MAAM,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;IAC7D,aAAa;IACb,YAAY,IAAI,CAAC,YAAY,EAAE;IAC/B,gBAAgB,MAAM,MAAM,CAAC,0BAA0B,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACxE,aAAa;IACb,YAAY,MAAM,OAAO,GAAG,WAAW,EAAE,CAAC,YAAY,CAAC,YAAY,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IACpF,YAAY,QAAQ,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK;IACvD,gBAAgB,QAAQ,SAAS,GAAG,GAAG,EAAE;IACzC,aAAa,CAAC,EAAE;IAChB,SAAS;IACT,KAAK,CAAC;IACN,IAAI,MAAM,WAAW,GAAG,CAAC,WAAW,KAAK;IACzC,QAAQ,OAAO,SAAS,KAAK,IAAI,GAAG,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;IACrE,KAAK,CAAC;IACN,IAAI,MAAM,QAAQ,GAAG,CAAC,UAAU,EAAE,QAAQ,KAAK;IAC/C,QAAQ,QAAQ,CAAC,GAAG,IAAI,KAAK;IAC7B,YAAY,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC;IAChC,YAAY,MAAM,EAAE,GAAG,WAAW,EAAE,CAAC;IACrC,YAAY,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,KAAK;IACpC,gBAAgB,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE;IACpC,oBAAoB,IAAI,QAAQ,IAAI,QAAQ,EAAE,KAAK,KAAK,EAAE;IAC1D,wBAAwB,OAAO;IAC/B,qBAAqB;IACrB,oBAAoB,MAAM,WAAW,GAAG,uBAAuB,CAAC,UAAU,CAAC,CAAC;IAC5E,oBAAoB,MAAM,OAAO,GAAG;IACpC,wBAAwB,GAAG,WAAW;IACtC,wBAAwB,KAAK,EAAE,GAAG;IAClC,qBAAqB,CAAC;IACtB,oBAAoB,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACrE,oBAAoB,OAAO,MAAM,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;IACxD,iBAAiB;IACjB,gBAAgB,MAAM,MAAM,CAAC,uBAAuB,CAAC,CAAC;IACtD,aAAa,CAAC,CAAC;IACf,SAAS,EAAE;IACX,KAAK,CAAC;IACN,IAAI,MAAM,uBAAuB,GAAG,CAAC,MAAM,KAAK;IAChD,QAAQ,IAAI,MAAM,IAAI,IAAI,EAAE;IAC5B,YAAY,OAAO,gBAAgB,EAAE,CAAC;IACtC,SAAS;IACT,aAAa,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;IAClC,YAAY,OAAO,yBAAyB,CAAC,MAAM,CAAC,CAAC;IACrD,SAAS;IACT,aAAa;IACb,YAAY,OAAO,MAAM,CAAC;IAC1B,SAAS;IACT,KAAK,CAAC;IACN,IAAI,MAAM,SAAS,GAAG,gBAAgB,GAAG,IAAI,EAAE;IAC/C,QAAQ,MAAM,EAAE,GAAG,QAAQ,EAAE,CAAC;IAC9B,QAAQ,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;IACzC,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK,CAAC;IACN,IAAI,MAAM,cAAc,GAAG,SAAS,IAAI,MAAM,CAAC;IAC/C,IAAI,MAAM,IAAI,GAAG,aAAa,CAAC,cAAc,CAAC,CAAC;IAC/C,IAAI,MAAM,GAAG,GAAG,SAAS,CAAC;IAC1B,IAAI,MAAM,OAAO,GAAG;IACpB,QAAQ,SAAS,EAAE,MAAM,cAAc;IACvC,QAAQ,OAAO,EAAE,MAAM,IAAI;IAC3B,QAAQ,OAAO;IACf,QAAQ,aAAa,EAAE,WAAW;IAClC,QAAQ,cAAc,EAAE,YAAY;IACpC,QAAQ,OAAO,EAAE,KAAK;IACtB,QAAQ,QAAQ,EAAE,MAAM;IACxB,QAAQ,WAAW,EAAE,SAAS;IAC9B,QAAQ,MAAM,EAAE,IAAI;IACpB,QAAQ,KAAK,EAAE,QAAQ;IACvB,QAAQ,SAAS,EAAE,OAAO;IAC1B,QAAQ,YAAY,EAAE,UAAU;IAChC,QAAQ,KAAK,EAAE,IAAI;IACnB,KAAK,CAAC;IACN,IAAI,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAClD,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;IACd,IAAI,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;IACK,MAAM,aAAa,GAAG,CAAC,UAAU,KAAK;IAC7C,IAAI,MAAM,KAAK,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC9C,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;IACpB,QAAQ,OAAO,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAC3C,KAAK;IACL,IAAI,OAAO,UAAU,CAAC;IACtB,CAAC,CAAC;IACK,SAAS,SAAS,CAAC,GAAG,EAAE;IAC/B,IAAI,IAAI,IAAI,EAAE;IACd,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IACzB,YAAY,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;IACzC,SAAS;IACT,KAAK;IACL,CAAC;IACM,MAAM,cAAc,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,KAAK;IAC5D,IAAI,SAAS,CAAC,SAAS,EAAE;IACzB,QAAQ,MAAM;IACd,QAAQ,OAAO;IACf,QAAQ,OAAO;IACf,KAAK,CAAC,CAAC;IACP,CAAC,CAAC;IACK,MAAM,SAAS,GAAG,CAAC,SAAS,EAAE,MAAM,KAAK;IAChD,IAAI,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,EAAE,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;IAC/D,QAAQ,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE;IAC1D,YAAY,OAAO,EAAE,KAAK;IAC1B,YAAY,MAAM;IAClB,SAAS,CAAC,CAAC,CAAC;IACZ,KAAK;IACL,CAAC,CAAC;IACF,MAAM,GAAG,GAAG,MAAM;IAClB,IAAI,IAAI,KAAK,IAAI,QAAQ,EAAE,EAAE;IAC7B,QAAQ,OAAO,CAAC,CAAC;IACjB,KAAK;IACL,IAAI,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;IACzC,QAAQ,OAAO,WAAW,CAAC,GAAG,EAAE,CAAC;IACjC,KAAK;IACL,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;;IC5ID,IAAI,eAAe,GAAG,CAAC,CAAC;IACxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,CAAC,GAAG,CAAC,UAAU,KAAK;IACjC,IAAI,IAAI,UAAU,IAAI,CAAC,WAAW,EAAE;IACpC,QAAQ,MAAM,IAAI,KAAK,CAAC,sIAAsI,CAAC,CAAC;IAChK,KAAK;IACL,IAAI,OAAO,SAAS,CAAC,IAAI,EAAE,GAAG,GAAG,eAAe,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IACxF;;IC/EA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACY,UAAC,YAAY,GAAG,CAAC,YAAY,KAAK;IAC9C;IACA,IAAI,SAAS,aAA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"}